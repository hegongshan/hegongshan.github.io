<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode 50.Pow(x, n)/《剑指Offer》16.数值的整数次方</title>
      <link href="/2020/02/23/leetcode-50-powx-n/"/>
      <url>/2020/02/23/leetcode-50-powx-n/</url>
      
        <content type="html"><![CDATA[<p>实现 pow(x, n) ，即计算 x 的 n 次幂函数。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 2.00000, 10</span><br><span class="line">输出: 1024.00000</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 2.10000, 3</span><br><span class="line">输出: 9.26100</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2.00000, -2</span><br><span class="line">输出: 0.25000</span><br><span class="line">解释: 2-2 = 1/22 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>-100.0 &lt; x &lt; 100.0</li><li>n 是 32 位有符号整数，其数值范围是 [$−2^{31},  2^{31 − 1}$] 。</li></ul><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><p>思路：连乘n次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span>(N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            N = -N;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            result *= x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n)，空间复杂度为O(1)。</p><h3 id="方法二：快速幂（递归）"><a href="#方法二：快速幂（递归）" class="headerlink" title="方法二：快速幂（递归）"></a>方法二：快速幂（递归）</h3><p>$$<br>x^n =<br>\begin{cases}<br>x^{n/2} \times x^{n/2}, &amp; n为偶数 \\<br>x^{(n-1)/2} \times x^{(n-1)/2} \times x, &amp; n为奇数<br>\end{cases}<br>$$</p><p>上述方法称之为快速幂算法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span>(N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            N = -N;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pow(x, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> half = pow(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> half * half;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> half * half * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用位运算优化后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span>(N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            N = -N;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pow(x, N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> half = pow(x, n &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>((n &amp; <span class="number">1</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> half * half;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> half * half * x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(log n)，空间复杂度为O(log n)。</p><h3 id="方法三：快速幂（循环）"><a href="#方法三：快速幂（循环）" class="headerlink" title="方法三：快速幂（循环）"></a>方法三：快速幂（循环）</h3><p>设n的二进制形式为$b_l b_{l-1} \cdots b_0$，从而有$n=\sum_i 2^i b_i$。</p><p>因为$x^{a+b} = x^a \times x^b$，故，<br>$$<br>x^n = x^{\sum_i 2^i b_i} = \prod_i x^{2^i b_i}<br>$$<br>又因为$x^{2n} = (x^n)^2$，从而有<br>$$<br>x^{2^i} = (x^{2^{i-1}})^2<br>$$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">long</span> N = n;</span><br><span class="line">        <span class="keyword">if</span>(N &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            N = -N;</span><br><span class="line">            x = <span class="number">1</span> / x;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">double</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 第一项为x^&#123;2^0&#125;</span></span><br><span class="line">        <span class="keyword">double</span> prod = x;</span><br><span class="line">        <span class="keyword">while</span>(N &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 若bi = (N &amp; 1) 为1，则乘以当前项 x^&#123;2^i&#125;</span></span><br><span class="line">            <span class="keyword">if</span>((N &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">                result *= prod;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 计算下一项（等于当前项的平方）</span></span><br><span class="line">            prod = prod * prod;</span><br><span class="line">            N = N &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(log n)，空间复杂度为O(1) 。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 191.位1的个数/《剑指Offer》15.二进制中1的个数</title>
      <link href="/2020/02/22/leetcode-191-number-of-1-bits/"/>
      <url>/2020/02/22/leetcode-191-number-of-1-bits/</url>
      
        <content type="html"><![CDATA[<p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p> <a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：00000000000000000000000000001011</span><br><span class="line">输出：3</span><br><span class="line">解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：00000000000000000000000010000000</span><br><span class="line">输出：1</span><br><span class="line">解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：11111111111111111111111111111101</span><br><span class="line">输出：31</span><br><span class="line">解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &apos;1&apos;。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</li></ul><p><strong>进阶:</strong><br>如果多次调用这个函数，你将如何优化你的算法？</p><h3 id="方法一：位运算-循环"><a href="#方法一：位运算-循环" class="headerlink" title="方法一：位运算+循环"></a>方法一：位运算+循环</h3><p><strong>n对2取模，相当于和1做按位与运算，即 n % 2 等价于 n &amp; 1。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            count += n &amp; <span class="number">1</span>;</span><br><span class="line">            n &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(1)：由于运算时间与n的位数有关，而int型数据只有32位，因此运行时间为O(1)。</p><p>空间复杂度为O(1)。</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>把一个整数减去1之后，再和原来的整数做位与运算，得到的结果相当于把整数的二进制表示中的最右边一个1变成0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            n &amp;= (n-<span class="number">1</span>);</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度和空间复杂度均为O(1)。</p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// you need to treat n as an unsigned value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingWeight</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.bitCount(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>bitCount方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitCount</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// HD, Figure 5-2</span></span><br><span class="line">    i = i - ((i &gt;&gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span>);</span><br><span class="line">    i = (i &amp; <span class="number">0x33333333</span>) + ((i &gt;&gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x33333333</span>);</span><br><span class="line">    i = (i + (i &gt;&gt;&gt; <span class="number">4</span>)) &amp; <span class="number">0x0f0f0f0f</span>;</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">8</span>);</span><br><span class="line">    i = i + (i &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> i &amp; <span class="number">0x3f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度和空间复杂度均为O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 343.整数拆分/《剑指Offer》14.剪绳子</title>
      <link href="/2020/02/22/leetcode-343-integer-break/"/>
      <url>/2020/02/22/leetcode-343-integer-break/</url>
      
        <content type="html"><![CDATA[<p>给定一个正整数 n，将其拆分为至少两个正整数的和，并使这些整数的乘积最大化。 返回你可以获得的最大乘积。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2</span><br><span class="line">输出: 1</span><br><span class="line">解释: 2 = 1 + 1, 1 × 1 = 1。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 36</span><br><span class="line">解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong> 你可以假设 n 不小于 2 且不大于 58。</p><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><p>设函数f(n)为把n拆分成若干个正整数后，这些正整数乘积的最大值。</p><p>在拆分时，一个整数x (x &lt; n)可以被拆分，也可以不被拆分。</p><p>若拆分后，获得的最大乘积$f(x) &lt; x$，则不对x进行拆分。</p><p>因此，该问题可以用如下的公式来描述：<br>$$<br>f(n) = \max_i (<br>    \max(i, f(i)) \times \max(n - i, f(n - i))<br>)<br>$$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            max = Math.max(max,</span><br><span class="line">                Math.max(i, integerBreak(i)) * Math.max(n - i, integerBreak(n - i))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度和空间复杂度均为O($n^2$)。</p><p>虽然该方法写起来简单，但由于存在大量的重复计算，将会导致超时。</p><h3 id="方法二：动态规划（自下而上）"><a href="#方法二：动态规划（自下而上）" class="headerlink" title="方法二：动态规划（自下而上）"></a>方法二：动态规划（自下而上）</h3><p>使用数组将每一个f(i)存储起来，可以避免重复计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] products = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        products[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span>  max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                max = Math.max(max,</span><br><span class="line">                    Math.max(j, products[j]) * Math.max(i - j, products[i - j]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 存储f(i)，避免重复计算</span></span><br><span class="line">            products[i] = max;          </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> products[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O($n^2$)，空间复杂度为O(n)。</p><h3 id="方法三：贪心算法"><a href="#方法三：贪心算法" class="headerlink" title="方法三：贪心算法"></a>方法三：贪心算法</h3><p>容易证明：除1以外，任何一个正整数都可以分解为若干个2和若干个3的和。</p><p>当$n \ge 5$时，<br>$$<br>n &gt; 4 \Rightarrow 2(n - 2) &gt; n \\<br>n &gt; 4.5 \Rightarrow 3(n - 3) &gt; n \\<br>n \ge 5 \Rightarrow 3(n - 3) \ge 2(n-2)<br>$$<br>因此，当$n \ge 5$时，尽可能多地拆分成3；当剩下的值为4时，将其拆分成2个2，而不是1和3，因为$2 \times 2 &gt; 1 \times 3$。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count3 = n / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">if</span>(count3 * <span class="number">3</span> + <span class="number">1</span> == n) &#123;</span><br><span class="line">            count3--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> count2 = (n - count3 * <span class="number">3</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (Math.pow(<span class="number">3</span>, count3) * Math.pow(<span class="number">2</span>, count2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度和空间复杂度均为O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指Offer》13.机器人的运动范围</title>
      <link href="/2020/02/21/coding-interview-13-range-of-motion-for-robot/"/>
      <url>/2020/02/21/coding-interview-13-range-of-motion-for-robot/</url>
      
        <content type="html"><![CDATA[<p>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><a id="more"></a><h3 id="方法：回溯"><a href="#方法：回溯" class="headerlink" title="方法：回溯"></a>方法：回溯</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[m][n];</span><br><span class="line">        <span class="keyword">return</span> movingCount0(m, n, k, <span class="number">0</span>, <span class="number">0</span>, visited);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">movingCount0</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">boolean</span>[][] visited)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若不能进入坐标(x,y)</span></span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n || </span><br><span class="line">            getDigitalSum(x) + getDigitalSum(y) &gt; k || </span><br><span class="line">            visited[x][y]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + movingCount0(m, n, k, x, y - <span class="number">1</span>, visited) + </span><br><span class="line">            movingCount0(m, n, k, x, y + <span class="number">1</span>, visited) + </span><br><span class="line">            movingCount0(m, n, k, x - <span class="number">1</span>, y, visited) + </span><br><span class="line">            movingCount0(m, n, k, x + <span class="number">1</span>, y, visited);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDigitalSum</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += x % <span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 数据库题解</title>
      <link href="/2020/02/20/leetcode-database/"/>
      <url>/2020/02/20/leetcode-database/</url>
      
        <content type="html"><![CDATA[<p>LeetCode 数据库题解合集。</p><a id="more"></a><h3 id="175-组合两个表"><a href="#175-组合两个表" class="headerlink" title="175. 组合两个表"></a><a href="https://leetcode-cn.com/problems/combine-two-tables/" target="_blank" rel="noopener">175. 组合两个表</a></h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>表1: Person</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line">| LastName    | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">PersonId 是上表主键</span><br></pre></td></tr></table></figure><p>表2: Address</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line">| State       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">AddressId 是上表主键</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></table></figure><h4 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> FirstName, LastName, City, State</span><br><span class="line"><span class="keyword">FROM</span> Person <span class="keyword">AS</span> p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Address <span class="keyword">AS</span> a</span><br><span class="line"><span class="keyword">ON</span> p.PersonId = A.PersonId;</span><br></pre></td></tr></table></figure><h3 id="176-第二高的薪水"><a href="#176-第二高的薪水" class="headerlink" title="176. 第二高的薪水"></a><a href="https://leetcode-cn.com/problems/second-highest-salary/" target="_blank" rel="noopener">176. 第二高的薪水</a></h3><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第二高的薪水（Salary） 。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><p>例如上述 <code>Employee</code> 表，SQL查询应该返回 <code>200</code> 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><h4 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">    <span class="keyword">FROM</span> Employee</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">    <span class="keyword">LIMIT</span> <span class="number">1</span>,<span class="number">1</span>)  </span><br><span class="line"><span class="keyword">AS</span> SecondHighestSalary;</span><br></pre></td></tr></table></figure><p>注意：1.表中可能存在重复的薪水，因此需要去重；2.若不存在第二高的薪水，则返回NULL（而不是0条记录）。</p><h3 id="177-第N高的薪水"><a href="#177-第N高的薪水" class="headerlink" title="177. 第N高的薪水"></a><a href="https://leetcode-cn.com/problems/nth-highest-salary/" target="_blank" rel="noopener">177. 第N高的薪水</a></h3><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第 <em>n</em> 高的薪水（Salary）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><p>例如上述 <code>Employee</code> 表，<em>n = 2</em> 时，应返回第二高的薪水 <code>200</code>。如果不存在第 <em>n</em> 高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 200                    |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h4 id="SQL-2"><a href="#SQL-2" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="built_in">INT</span>) <span class="keyword">RETURNS</span> <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> n = N - <span class="number">1</span>;</span><br><span class="line">    RETURN (</span><br><span class="line">        # Write your MySQL query statement below.</span><br><span class="line">        <span class="keyword">SELECT</span> (</span><br><span class="line">            <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">            <span class="keyword">FROM</span> Employee</span><br><span class="line">            <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">            <span class="keyword">LIMIT</span> n, <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h3 id="178-分数排名"><a href="#178-分数排名" class="headerlink" title="178. 分数排名"></a><a href="https://leetcode-cn.com/problems/rank-scores/" target="_blank" rel="noopener">178. 分数排名</a></h3><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>例如，根据上述给定的 <code>Scores</code> 表，你的查询应该返回（按分数从高到低排列）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span><br></pre></td></tr></table></figure><h4 id="SQL-3"><a href="#SQL-3" class="headerlink" title="SQL"></a>SQL</h4><p>思路：自连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.Score, (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> s2.Score)</span><br><span class="line">    <span class="keyword">FROM</span> Scores <span class="keyword">AS</span> s2</span><br><span class="line">    <span class="keyword">WHERE</span> s.Score &lt;= s2.Score</span><br><span class="line">) <span class="keyword">AS</span> <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">FROM</span> Scores <span class="keyword">AS</span> s</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> s.Score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="181-超过经理收入的员工"><a href="#181-超过经理收入的员工" class="headerlink" title="181. 超过经理收入的员工"></a><a href="https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/" target="_blank" rel="noopener">181. 超过经理收入的员工</a></h3><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p><code>Employee</code> 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure><p>给定 <code>Employee</code> 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+----------+</span><br><span class="line">| Employee |</span><br><span class="line">+----------+</span><br><span class="line">| Joe      |</span><br><span class="line">+----------+</span><br></pre></td></tr></table></figure><h4 id="SQL-4"><a href="#SQL-4" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 方法一：相关子查询</span><br><span class="line"><span class="comment">-- SELECT Name AS Employee</span></span><br><span class="line"><span class="comment">-- FROM Employee AS a</span></span><br><span class="line"><span class="comment">-- WHERE a.Salary &gt; (</span></span><br><span class="line"><span class="comment">--     SELECT Salary</span></span><br><span class="line"><span class="comment">--     FROM Employee AS b</span></span><br><span class="line"><span class="comment">--     WHERE a.ManagerId = b.Id</span></span><br><span class="line"><span class="comment">-- );</span></span><br><span class="line"></span><br><span class="line"># 方法二：等值连接（不使用join）</span><br><span class="line"><span class="comment">-- SELECT a.Name AS Employee</span></span><br><span class="line"><span class="comment">-- FROM Employee AS a, Employee AS b</span></span><br><span class="line"><span class="comment">-- WHERE a.ManagerId = b.Id AND a.Salary &gt; b.Salary;</span></span><br><span class="line"></span><br><span class="line"># 方法三：等值连接（使用join）</span><br><span class="line"><span class="keyword">SELECT</span> a.Name <span class="keyword">AS</span> Employee</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Employee <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">ON</span> a.ManagerId = b.Id <span class="keyword">AND</span> a.Salary &gt; b.Salary;</span><br></pre></td></tr></table></figure><h3 id="182-查找重复的电子邮箱"><a href="#182-查找重复的电子邮箱" class="headerlink" title="182. 查找重复的电子邮箱"></a><a href="https://leetcode-cn.com/problems/duplicate-emails/" target="_blank" rel="noopener">182. 查找重复的电子邮箱</a></h3><h4 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h4><p>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br></pre></td></tr></table></figure><p>根据以上输入，你的查询应返回以下结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><h4 id="SQL架构"><a href="#SQL架构" class="headerlink" title="SQL架构"></a>SQL架构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Person (<span class="keyword">Id</span> <span class="built_in">int</span>, Email <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Person</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'a@b.com'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'c@d.com'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Person (<span class="keyword">Id</span>, Email) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'a@b.com'</span>)</span><br></pre></td></tr></table></figure><h4 id="SQL-5"><a href="#SQL-5" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 方法一：自连接</span><br><span class="line"><span class="comment">-- SELECT DISTINCT a.Email</span></span><br><span class="line"><span class="comment">-- FROM Person AS a INNER JOIN Person AS b</span></span><br><span class="line"><span class="comment">-- ON a.Email = b.Email AND a.Id &lt;&gt; b.Id;</span></span><br><span class="line"></span><br><span class="line"># 方法二：group by</span><br><span class="line"><span class="keyword">SELECT</span> Email</span><br><span class="line"><span class="keyword">FROM</span> Person</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Email</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(Email) &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="183-从不订购的客户"><a href="#183-从不订购的客户" class="headerlink" title="183. 从不订购的客户"></a><a href="https://leetcode-cn.com/problems/customers-who-never-order/" target="_blank" rel="noopener">183. 从不订购的客户</a></h3><h4 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h4><p>某网站包含两个表，<code>Customers</code> 表和 <code>Orders</code> 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p><p><code>Customers</code> 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Name  |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p><code>Orders</code> 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+</span><br><span class="line">| Id | CustomerId |</span><br><span class="line">+----+------------+</span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line">+----+------------+</span><br></pre></td></tr></table></figure><h4 id="SQL架构-1"><a href="#SQL架构-1" class="headerlink" title="SQL架构"></a>SQL架构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Customers (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Orders (<span class="keyword">Id</span> <span class="built_in">int</span>, CustomerId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Customers</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Henry'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Sam'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Customers (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Max'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Orders</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'3'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Orders (<span class="keyword">Id</span>, CustomerId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><h4 id="SQL-6"><a href="#SQL-6" class="headerlink" title="SQL"></a>SQL</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">Name</span> <span class="keyword">AS</span> Customers</span><br><span class="line"><span class="keyword">FROM</span> Customers </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">Id</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> CustomerId</span><br><span class="line">    <span class="keyword">FROM</span> Orders</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="184-部门工资最高的员工"><a href="#184-部门工资最高的员工" class="headerlink" title="184. 部门工资最高的员工"></a><a href="https://leetcode-cn.com/problems/department-highest-salary/" target="_blank" rel="noopener">184. 部门工资最高的员工</a></h3><p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure><p><code>Department</code> 表包含公司所有部门的信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure><h4 id="SQL架构-2"><a href="#SQL架构-2" class="headerlink" title="SQL架构"></a>SQL架构</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Employee (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>), Salary <span class="built_in">int</span>, DepartmentId <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">Create</span> <span class="keyword">table</span> <span class="keyword">If</span> <span class="keyword">Not</span> <span class="keyword">Exists</span> Department (<span class="keyword">Id</span> <span class="built_in">int</span>, <span class="keyword">Name</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Employee</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'Joe'</span>, <span class="string">'70000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Jim'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'3'</span>, <span class="string">'Henry'</span>, <span class="string">'80000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'4'</span>, <span class="string">'Sam'</span>, <span class="string">'60000'</span>, <span class="string">'2'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Employee (<span class="keyword">Id</span>, <span class="keyword">Name</span>, Salary, DepartmentId) <span class="keyword">values</span> (<span class="string">'5'</span>, <span class="string">'Max'</span>, <span class="string">'90000'</span>, <span class="string">'1'</span>)</span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> Department</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'1'</span>, <span class="string">'IT'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Department (<span class="keyword">Id</span>, <span class="keyword">Name</span>) <span class="keyword">values</span> (<span class="string">'2'</span>, <span class="string">'Sales'</span>)</span><br></pre></td></tr></table></figure><h3 id="SQL-7"><a href="#SQL-7" class="headerlink" title="SQL"></a>SQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    dep.Name <span class="keyword">AS</span> <span class="string">'Department'</span>, </span><br><span class="line">    emp.Name <span class="keyword">AS</span> <span class="string">'Employee'</span>, </span><br><span class="line">    emp.Salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Department <span class="keyword">AS</span> dep </span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line">    Employee <span class="keyword">AS</span> emp <span class="keyword">ON</span> dep.Id = emp.DepartmentId</span><br><span class="line"><span class="keyword">WHERE</span> (emp.DepartmentId, emp.Salary) <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> DepartmentId, <span class="keyword">MAX</span>(Salary)</span><br><span class="line">    <span class="keyword">FROM</span> Employee</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> DepartmentId</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 79.单词搜索/《剑指Offer》12.矩阵中的路径</title>
      <link href="/2020/02/20/leetcode-79-word-search/"/>
      <url>/2020/02/20/leetcode-79-word-search/</url>
      
        <content type="html"><![CDATA[<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">board =</span><br><span class="line">[</span><br><span class="line">  [&apos;A&apos;,&apos;B&apos;,&apos;C&apos;,&apos;E&apos;],</span><br><span class="line">  [&apos;S&apos;,&apos;F&apos;,&apos;C&apos;,&apos;S&apos;],</span><br><span class="line">  [&apos;A&apos;,&apos;D&apos;,&apos;E&apos;,&apos;E&apos;]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">给定 word = &quot;ABCCED&quot;, 返回 true.</span><br><span class="line">给定 word = &quot;SEE&quot;, 返回 true.</span><br><span class="line">给定 word = &quot;ABCB&quot;, 返回 false.</span><br></pre></td></tr></table></figure><h3 id="方法：回溯"><a href="#方法：回溯" class="headerlink" title="方法：回溯"></a>方法：回溯</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(board == <span class="keyword">null</span> || word == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> row = board.length;</span><br><span class="line">        <span class="keyword">int</span> column = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">boolean</span>[][] visited = <span class="keyword">new</span> <span class="keyword">boolean</span>[row][column];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; column; j++) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> flag = exist0(board, word, <span class="number">0</span>, i, j, visited);</span><br><span class="line">                <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">exist0</span><span class="params">(<span class="keyword">char</span>[][] board, String word, <span class="keyword">int</span> index, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">boolean</span>[][] visited)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == word.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= board.length || </span><br><span class="line">            y &lt;<span class="number">0</span> || y &gt;= board[<span class="number">0</span>].length ||</span><br><span class="line">            board[x][y] != word.charAt(index) ||</span><br><span class="line">            visited[x][y]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visited[x][y] = <span class="keyword">true</span>;</span><br><span class="line">        index++;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> flag = exist0(board, word, index, x, y-<span class="number">1</span>, visited) ||</span><br><span class="line">            exist0(board, word, index, x, y+<span class="number">1</span>, visited) ||</span><br><span class="line">            exist0(board, word, index, x-<span class="number">1</span>, y, visited) ||</span><br><span class="line">            exist0(board, word, index, x+<span class="number">1</span>, y, visited);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        <span class="keyword">if</span>(!flag) &#123;</span><br><span class="line">            index--;</span><br><span class="line">            visited[x][y] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(mnk)，空间复杂度为O(k)。其中，m为网格（矩阵）的行数，n为列数，k为单词的长度。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 225.用队列实现栈/《剑指Offer》9(相关).用两个队列实现栈</title>
      <link href="/2020/02/16/leetcode-225-implement-stack-using-queues/"/>
      <url>/2020/02/16/leetcode-225-implement-stack-using-queues/</url>
      
        <content type="html"><![CDATA[<p>使用队列实现栈的下列操作：</p><ul><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空</li></ul><a id="more"></a><p><strong>注意:</strong></p><ul><li>你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><h3 id="方法一：两个队列，入栈O-1-，出栈O-n"><a href="#方法一：两个队列，入栈O-1-，出栈O-n" class="headerlink" title="方法一：两个队列，入栈O(1)，出栈O(n)"></a>方法一：两个队列，入栈O(1)，出栈O(n)</h3><p>思路：使用两个队列q1和q2。</p><p>1.当需要执行进栈操作时，直接将该元素压入q1。</p><p>2.当需要执行出栈（取栈顶元素）操作时，</p><p>首先，判断q1中的元素个数是否大于1。</p><p>如果刚好等于1，则直接弹出（返回）q1的队首元素；</p><p>如果大于1，则将q1中的元素逐一弹出，并加到q2中，直到q1中的元素个数等于1，然后弹出（返回）该元素。</p><p>最后，交换q1和q2，保证所有的元素均存储在q1中，而q2为空。</p><p>3.判断栈是否为空：由于所有的元素都在q1中，因此，只需要判断q1是否为空即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; q1;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; q2;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        q1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q1.offer(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(q1.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            q2.offer(q1.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x = q1.poll();</span><br><span class="line">        Queue&lt;Integer&gt; temp = q1;</span><br><span class="line">        q1 = q2;</span><br><span class="line">        q2 = temp;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(q1.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            q2.offer(q1.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> x =  q1.poll();</span><br><span class="line">        q2.offer(x);</span><br><span class="line">        Queue&lt;Integer&gt; temp = q1;</span><br><span class="line">        q1 = q2;</span><br><span class="line">        q2 = temp;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：两个队列，入栈O-n-，出栈O-1"><a href="#方法二：两个队列，入栈O-n-，出栈O-1" class="headerlink" title="方法二：两个队列，入栈O(n)，出栈O(1)"></a>方法二：两个队列，入栈O(n)，出栈O(1)</h3><p>思路：使用两个队列q1和q2。</p><p>1.当需要执行进栈操作时，</p><p>首先，将待添加的元素x压入q2（x在q2的队尾）；</p><p>然后，将q1中的元素逐一弹出，并加到q2中（x在q2的队首）；</p><p>最后，交换q1和q2，保证所有的元素均存储在q1中，而q2为空。</p><p>2.当需要执行出栈（取栈顶元素）操作时，直接弹出（返回）q1的队首元素。</p><p>3.判断栈是否为空：由于所有的元素都在q1中，因此，只需要判断q1是否为空即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; q1;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; q2;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        q1 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        q2 = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q2.offer(x);</span><br><span class="line">        <span class="keyword">while</span>(!q1.isEmpty()) &#123;</span><br><span class="line">            q2.offer(q1.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Integer&gt; temp = q1;</span><br><span class="line">        q1 = q2;</span><br><span class="line">        q2 = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> q1.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q1.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三：一个队列，入栈O-n-，出栈O-1"><a href="#方法三：一个队列，入栈O-n-，出栈O-1" class="headerlink" title="方法三：一个队列，入栈O(n)，出栈O(1)"></a>方法三：一个队列，入栈O(n)，出栈O(1)</h3><p>思路：仅使用一个普通队列q。</p><p>1.当需要执行进栈操作时，</p><p>首先，将待添加的元素x压入q中（x在队尾）；</p><p>然后，将x前面的所有元素逐一弹出，并重新压入q中（x在队首）。</p><p>2.当需要执行出栈（取栈顶元素）操作时，直接弹出（返回）q的队首元素。</p><p>3.判断栈是否为空：只需要判断q是否为空即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Integer&gt; q;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        q.offer(x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> size = q.size(); size &gt; <span class="number">1</span>; size--) &#123;</span><br><span class="line">            q.offer(q.poll());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.poll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;     </span><br><span class="line">        <span class="keyword">return</span> q.peek();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> q.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 232.用栈实现队列/《剑指Offer》9.用两个栈实现队列</title>
      <link href="/2020/02/15/leetcode-232-implement-queue-using-stacks/"/>
      <url>/2020/02/15/leetcode-232-implement-queue-using-stacks/</url>
      
        <content type="html"><![CDATA[<p>使用栈实现队列的下列操作：</p><ul><li>push(x) – 将一个元素放入队列的尾部。</li><li>pop() – 从队列首部移除元素。</li><li>peek() – 返回队列首部的元素。</li><li>empty() – 返回队列是否为空。</li></ul><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MyQueue queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">2</span>);  </span><br><span class="line">queue.peek();  <span class="comment">// 返回 1</span></span><br><span class="line">queue.pop();   <span class="comment">// 返回 1</span></span><br><span class="line">queue.empty(); <span class="comment">// 返回 false</span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>你只能使用标准的栈操作 – 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul><h3 id="方法一：入队O-1-，出队O-n"><a href="#方法一：入队O-1-，出队O-n" class="headerlink" title="方法一：入队O(1)，出队O(n)"></a>方法一：入队O(1)，出队O(n)</h3><p>思路：使用两个栈s1和s2来模拟队列，s1负责模拟队列的入队操作，s2负责模拟队列的出队和取队首元素操作。</p><p>1.当需要执行入队操作时，直接将该元素压入s1。</p><p>2.当需要执行出队（取队首）操作时：</p><p>首先，判断s2是否为空，若不为空，则直接弹出s2的栈顶元素；</p><p>否则，先将s1中的所有元素逐一出栈，并加入到s2中，然后弹出（取出）s2的栈顶元素。</p><p>3.判断队列是否为空：当s1和s2均为空时，队列为空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        s2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        s1.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s2.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s2.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s1.empty()) &#123;</span><br><span class="line">            s2.push(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!s2.empty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> s2.peek();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!s1.empty()) &#123;</span><br><span class="line">            s2.push(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s2.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s1.empty() &amp;&amp; s2.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：入队O-n-，出队O-1"><a href="#方法二：入队O-n-，出队O-1" class="headerlink" title="方法二：入队O(n)，出队O(1)"></a>方法二：入队O(n)，出队O(1)</h3><p>思路：使用两个栈s1和s2来模拟队列。</p><p>1.当需要执行入队操作时，</p><p>首先，判断s2是否为空，若s2不为空，则将s2中的所有元素逐一出栈，并加入到s1中；</p><p>然后，将待添加的元素压入s1；</p><p>最后，将s1中的所有元素逐一出栈，并加入到s2中。</p><p>2.当需要执行出队（取队首）操作时，直接弹出（返回）s2的栈顶元素。</p><p>3.判断队列是否为空：由于所有元素都在s2中，因此，只需要判断s2是否为空即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s1;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; s2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        s1 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        s2 = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!s2.empty()) &#123;</span><br><span class="line">            s1.push(s2.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        s1.push(x);</span><br><span class="line">        <span class="keyword">while</span>(!s1.empty()) &#123;</span><br><span class="line">            s2.push(s1.pop());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s2.peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s2.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
            <tag> queue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指Offer》8.二叉树的下一个结点</title>
      <link href="/2020/02/14/coding-interview-8-find-binary-tree-next-node/"/>
      <url>/2020/02/14/coding-interview-8-find-binary-tree-next-node/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><a id="more"></a><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>本题共有以下三种情况：</p><p>1.如果该结点有右孩子，那么它的下一个结点就是其右子树中最左边的结点；</p><p>2.如果该结点有父结点，且为父结点的左孩子，那么它的下一个结点就是其父结点；</p><p>3.如果该结点有父结点，且为父结点的右孩子，那么继续向上寻找，直到找到这样一个结点：它是它的父结点的左孩子。如果这样的结点存在，那么这个结点的父结点就是题目要找的下一个结点。否则，给定的结点为中序遍历的最后一个结点，它没有下一个结点。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><ul><li><strong id="java">Java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public class TreeLinkNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    TreeLinkNode left = null;</span></span><br><span class="line"><span class="comment">    TreeLinkNode right = null;</span></span><br><span class="line"><span class="comment">    TreeLinkNode next = null;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    TreeLinkNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeLinkNode <span class="title">GetNext</span><span class="params">(TreeLinkNode pNode)</span> </span>&#123;</span><br><span class="line">        TreeLinkNode node;</span><br><span class="line">        <span class="comment">// 1.若该结点有右孩子，则寻找右子树中最左边的结点</span></span><br><span class="line">        <span class="keyword">if</span>(pNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = pNode.right;</span><br><span class="line">            <span class="keyword">while</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.向上寻找</span></span><br><span class="line">        node = pNode;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span> &amp;&amp; node.next != <span class="keyword">null</span> &amp;&amp; node == node.next.right) &#123;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node != <span class="keyword">null</span> &amp;&amp; node.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="python">Python</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class TreeLinkNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">GetNext</span><span class="params">(self, pNode)</span>:</span></span><br><span class="line">        <span class="comment"># 1.若该结点有右孩子，则寻找右子树中最左边的结点</span></span><br><span class="line">        <span class="keyword">if</span> pNode.right:</span><br><span class="line">            node = pNode.right</span><br><span class="line">            <span class="keyword">while</span> node.left:</span><br><span class="line">                node = node.left</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="comment"># 2.向上寻找</span></span><br><span class="line">        node = pNode</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">and</span> node.next <span class="keyword">and</span> node == node.next.right:</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">if</span> node <span class="keyword">and</span> node.next:</span><br><span class="line">            <span class="keyword">return</span> node.next</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之历史命令history</title>
      <link href="/2020/02/13/linux-command-history/"/>
      <url>/2020/02/13/linux-command-history/</url>
      
        <content type="html"><![CDATA[<p>history命令用于查看历史执行过的命令。</p><a id="more"></a><h3 id="命令描述"><a href="#命令描述" class="headerlink" title="命令描述"></a>命令描述</h3><p>选项</p><ul><li>-c：清空历史列表</li><li>-d offset：删除历史列表中第offset个命令</li><li>-w: 将当前历史命令写入历史文件中</li></ul><p>参数</p><ul><li>n：查看最近的n条命令</li></ul><h3 id="相关变量"><a href="#相关变量" class="headerlink" title="相关变量"></a>相关变量</h3><p>1.HISTSIZE：history命令显示的命令条数，默认值为1000。</p><p>2.HISTFILE：历史命令的存储文件，默认值为~/.bash_history。</p><p>~/.bash_history存储的是当前登录之前执行过的历史命令，本次登录以后执行的命令暂时存储在内存中，使用history命令即可查看。默认情况下，退出账号后，暂存在内存中的历史命令才会追加到存储文件中。</p><p>3.HISTFILESIZE：文件中存储的命令条数，默认值也为1000。</p><p>4.如果需要修改上述变量的默认值，可以在~/.bash_profile中设置变量值。</p><p>例如，将存储文件设置为/root/history.conf，HISTSIZE设置为1500：</p><p>首先，在~/.bash_profile添加如下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HISTFILE=/root/history.conf</span><br><span class="line">HISTSIZE=1500</span><br></pre></td></tr></table></figure><p>然后，执行如下命令使上述设置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>最后，执行如下命令，查看设置是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $HISTFILE $HISTSIZE</span><br></pre></td></tr></table></figure><h3 id="执行历史命令"><a href="#执行历史命令" class="headerlink" title="执行历史命令"></a>执行历史命令</h3><p>1.使用!number执行第number条命令</p><p>2.使用!!执行上一条命令</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》5.替换空格</title>
      <link href="/2020/02/13/coding-interview-5-replace-space/"/>
      <url>/2020/02/13/coding-interview-5-replace-space/</url>
      
        <content type="html"><![CDATA[<p>请实现一个函数，将一个字符串中的每个空格替换成“%20”。</p><p>例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><a id="more"></a><h3 id="方法一：使用自带方法"><a href="#方法一：使用自带方法" class="headerlink" title="方法一：使用自带方法"></a>方法一：使用自带方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toString().replace(<span class="string">" "</span>, <span class="string">"%20"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二：创建新字符串"><a href="#方法二：创建新字符串" class="headerlink" title="方法二：创建新字符串"></a>方法二：创建新字符串</h3><p>新建StringBuilder，然后逐一append。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">char</span> c = str.charAt(i);</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">' '</span>) &#123;</span><br><span class="line">                sb.append(<span class="string">"%20"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n)，空间复杂度为O(n)。</p><h3 id="方法三：原地替换"><a href="#方法三：原地替换" class="headerlink" title="方法三：原地替换"></a>方法三：原地替换</h3><p>1.统计字符串中空格的个数space；</p><p>2.对原字符串进行扩容，长度增加2 * space；</p><p>3.从后往前替换空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceSpace</span><span class="params">(StringBuffer str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> str.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2.统计空格的个数</span></span><br><span class="line">        <span class="keyword">int</span> space = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(i) == <span class="string">' '</span>) &#123;</span><br><span class="line">                space ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.扩容，长度增加 2*space</span></span><br><span class="line">        <span class="keyword">int</span> left = str.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> right = left + <span class="number">2</span> * space;</span><br><span class="line">        str.setLength(right + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 4.原地替换空格</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">0</span> &lt;= left &amp;&amp; left &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span>(str.charAt(left) != <span class="string">' '</span>) &#123;</span><br><span class="line">                str.setCharAt(right--, str.charAt(left));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str.setCharAt(right--, <span class="string">'0'</span>);</span><br><span class="line">                str.setCharAt(right--, <span class="string">'2'</span>);</span><br><span class="line">                str.setCharAt(right--, <span class="string">'%'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            left --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n)，空间复杂度为O(n)。</p>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 240.搜索二维矩阵 II/《剑指Offer》4.二维数组中的查找</title>
      <link href="/2020/02/12/leetcode-240-search-a-2d-matrix-ii/"/>
      <url>/2020/02/12/leetcode-240-search-a-2d-matrix-ii/</url>
      
        <content type="html"><![CDATA[<p>编写一个高效的算法来搜索 m x n 矩阵 matrix 中的一个目标值 target。该矩阵具有以下特性：</p><ul><li>每行的元素从左到右升序排列。</li><li>每列的元素从上到下升序排列。</li></ul><a id="more"></a><p><strong>示例:</strong></p><p>现有矩阵 matrix 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1,   4,  7, 11, 15],</span><br><span class="line">  [2,   5,  8, 12, 19],</span><br><span class="line">  [3,   6,  9, 16, 22],</span><br><span class="line">  [10, 13, 14, 17, 24],</span><br><span class="line">  [18, 21, 23, 26, 30]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>给定 target = 5，返回 true。</p><p>给定 target = 20，返回 false。</p><h3 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">if</span> target <span class="keyword">in</span> row:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>时间复杂度为$O(m \times n)$，空间复杂度为O(1)。</p><h3 id="方法二：二分查找（行）"><a href="#方法二：二分查找（行）" class="headerlink" title="方法二：二分查找（行）"></a>方法二：二分查找（行）</h3><p>由于每行的元素从左到右升序排列，因此，在遍历每行时，可以使用二分法进行查找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">if</span> self.binary_search(row, target):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; bool:</span></span><br><span class="line">        low, high = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> target &gt; nums[mid]:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>时间复杂度为$O(m \log_2 n)$，空间复杂度为O(1)。</p><h3 id="方法三：二分查找（行和列）"><a href="#方法三：二分查找（行和列）" class="headerlink" title="方法三：二分查找（行和列）"></a>方法三：二分查找（行和列）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min(len(matrix), len(matrix[<span class="number">0</span>]))):</span><br><span class="line">            row_found = self.binary_search(matrix, target, i, <span class="keyword">True</span>)</span><br><span class="line">            column_found = self.binary_search(matrix, target, i, <span class="keyword">False</span>)</span><br><span class="line">            <span class="keyword">if</span> row_found <span class="keyword">or</span> column_found:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(self, matrix: List[List[int]], target: int, start: int, row: bool)</span> -&gt; bool:</span></span><br><span class="line">        low= start</span><br><span class="line">        high = len(matrix[<span class="number">0</span>]) - <span class="number">1</span> <span class="keyword">if</span> row <span class="keyword">else</span> len(matrix) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            mid = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> row:</span><br><span class="line">                <span class="keyword">if</span> target == matrix[start][mid]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> target &lt; matrix[start][mid]:</span><br><span class="line">                    high = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> target == matrix[mid][start]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">                <span class="keyword">if</span> target &lt; matrix[mid][start]:</span><br><span class="line">                    high = mid - <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>时间复杂度为$O(\log_2 (n!))$，空间复杂度为O(1)。</p><h3 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchMatrix</span><span class="params">(self, matrix: List[List[int]], target: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        m, n = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        i, j = m<span class="number">-1</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &gt;= <span class="number">0</span> <span class="keyword">and</span> j &lt; n:</span><br><span class="line">            <span class="keyword">if</span> target == matrix[i][j]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> target &gt; matrix[i][j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>时间复杂度为O(m+n)，空间复杂度为O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 287.寻找重复数/《剑指Offer》3.数组中重复的数字</title>
      <link href="/2020/02/10/leetcode-287-find-the-duplicate-number/"/>
      <url>/2020/02/10/leetcode-287-find-the-duplicate-number/</url>
      
        <content type="html"><![CDATA[<p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p><a id="more"></a><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,3,4,2,2]</span><br><span class="line">输出: 2</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [3,1,3,4,2]</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>不能更改原数组（假设数组是只读的）。</li><li>只能使用额外的 O(1) 的空间。</li><li>时间复杂度小于 O(n^2) 。</li><li>数组中只有一个重复的数字，但它可能不止重复出现一次。</li></ol><h3 id="方法一：排序"><a href="#方法一：排序" class="headerlink" title="方法一：排序"></a>方法一：排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        nums.sort()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i - <span class="number">1</span>] == nums[i]:</span><br><span class="line">                <span class="keyword">return</span> nums[i]</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n log n)，空间复杂度为O(1)。</p><p>该方法改变了数组，违反了说明1。</p><h3 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h3><p>字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        lookup = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> lookup.keys():</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            lookup[x] = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        num_set = set()</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> x <span class="keyword">in</span> num_set:</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">            num_set.add(x)</span><br></pre></td></tr></table></figure><p>时间复杂度为O(n)，空间复杂度为O(n)。该方法违反了说明2。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> array </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 206./《剑指offer》15.反转链表</title>
      <link href="/2020/02/03/leetcode-206-reverse-linked-list/"/>
      <url>/2020/02/03/leetcode-206-reverse-linked-list/</url>
      
        <content type="html"><![CDATA[<p>反转一个单链表。</p><a id="more"></a><p>示例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL</span><br></pre></td></tr></table></figure><p>进阶:<br>你可以迭代或递归地反转链表。你能否用两种方法解决这道题？</p><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p>思路：头插法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        cur = head</span><br><span class="line">        pre = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            temp = cur.next</span><br><span class="line"></span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line"></span><br><span class="line">            cur = temp</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><p>复杂度分析：时间复杂度为O(n)，空间复杂度为O(1)。其中，n为链表中结点的个数。</p><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        pre = self.reverseList(head.next)</span><br><span class="line">        head.next.next = head</span><br><span class="line">        head.next = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><p>复杂度分析：时间复杂度为O(n)，空间复杂度为O(n)。其中，n为链表中结点的个数。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指Offer》14.链表中倒数第k个结点</title>
      <link href="/2020/02/03/coding-interview-14-find-kth-to-tail/"/>
      <url>/2020/02/03/coding-interview-14-find-kth-to-tail/</url>
      
        <content type="html"><![CDATA[<p>输入一个链表，输出该链表中倒数第k个结点。</p><a id="more"></a><h3 id="方法一：使用数组"><a href="#方法一：使用数组" class="headerlink" title="方法一：使用数组"></a>方法一：使用数组</h3><p>思路：设n为链表中结点的个数。</p><p>遍历链表，将当前结点存入数组ls中。遍历结束后，若数组ls不为空，且给定的k值合法（1&lt;=k&lt;=n），则返回数组ls的第n-k-1个元素；否则，返回空。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindKthToTail</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        ls = []</span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            ls.append(node)</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">if</span> ls <span class="keyword">and</span> <span class="number">1</span> &lt;= k &lt;= len(ls):</span><br><span class="line">            <span class="keyword">return</span> ls[-k]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>复杂度分析：时间复杂度为O(n)，空间复杂度为O(n)。</p><h3 id="方法二：快慢指针"><a href="#方法二：快慢指针" class="headerlink" title="方法二：快慢指针"></a>方法二：快慢指针</h3><p>思路：设n为链表中结点的个数。</p><p>首先，设置两个指针slow和fast，均指向链表的第一个结点。</p><p>然后，让fast先走k步，指向链表中第k+1个结点。</p><p>若fast无法走完k步，则表示链表为空或者k不合法（k &lt; 1或者k &gt; n）。此时，直接返回空。</p><p>最后，同时遍历slow和fast，当fast为空时，slow指向的结点即为倒数第k个结点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">FindKthToTail</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        slow = fast = head</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            <span class="keyword">if</span> fast <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">            fast = fast.next</span><br><span class="line">        <span class="keyword">while</span> fast:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next</span><br><span class="line">        <span class="keyword">return</span> slow</span><br></pre></td></tr></table></figure><p>复杂度分析：时间复杂度为O(n)，空间复杂度为O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》6.从尾到头打印链表</title>
      <link href="/2020/02/03/coding-interview-6-print-list-from-tail-to-head/"/>
      <url>/2020/02/03/coding-interview-6-print-list-from-tail-to-head/</url>
      
        <content type="html"><![CDATA[<p>输入一个链表，按链表从尾到头的顺序返回一个ArrayList。</p><a id="more"></a><h3 id="方法一：迭代"><a href="#方法一：迭代" class="headerlink" title="方法一：迭代"></a>方法一：迭代</h3><p>思路：遍历链表，将当前节点的值加入到列表中。遍历结束后，翻转该列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        node = listNode</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            result.append(node.val)</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">return</span> result[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回从尾部到头部的列表值序列，例如[1,2,3]</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self, listNode)</span>:</span></span><br><span class="line">        result = []</span><br><span class="line">        self.__printList(listNode, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__printList</span><span class="params">(self, listNode, result)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> listNode <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.__printList(listNode.next, result)</span><br><span class="line">        result.append(listNode.val)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 剑指offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 993.二叉树的堂兄弟节点</title>
      <link href="/2020/01/31/leetcode-993-cousins-in-binary-tree/"/>
      <url>/2020/01/31/leetcode-993-cousins-in-binary-tree/</url>
      
        <content type="html"><![CDATA[<p>在二叉树中，根节点位于深度 0 处，每个深度为 k 的节点的子节点位于深度 k+1 处。</p><p>如果二叉树的两个节点深度相同，但父节点不同，则它们是一对堂兄弟节点。</p><p>我们给出了具有唯一值的二叉树的根节点 root，以及树中两个不同节点的值 x 和 y。</p><p>只有与值 x 和 y 对应的节点是堂兄弟节点时，才返回 true。否则，返回 false。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   3</span><br><span class="line">    /</span><br><span class="line">   4</span><br><span class="line">输入：root = [1,2,3,4], x = 4, y = 3</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   3</span><br><span class="line">      \   \</span><br><span class="line">       4   5</span><br><span class="line">输入：root = [1,2,3,null,4,null,5], x = 5, y = 4</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">       1</span><br><span class="line">      / \</span><br><span class="line">     2   3</span><br><span class="line">      \     </span><br><span class="line">       4</span><br><span class="line">输入：root = [1,2,3,null,4], x = 2, y = 3</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>二叉树的节点数介于 <code>2</code> 到 <code>100</code> 之间。</li><li>每个节点的值都是唯一的、范围为 <code>1</code> 到 <code>100</code> 的整数。</li></ol><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCousins</span><span class="params">(self, root: TreeNode, x: int, y: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> self.getDepth(root,x) == self.getDepth(root,y) <span class="keyword">and</span> <span class="keyword">not</span> self.isBrother(root,x,y):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDepth</span><span class="params">(self, root: TreeNode, x: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">if</span> root.val == x:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 若位于左子树中</span></span><br><span class="line">        left = self.getDepth(root.left, x)</span><br><span class="line">        <span class="keyword">if</span> left <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> left + <span class="number">1</span></span><br><span class="line">        <span class="comment"># 若位于右子树中</span></span><br><span class="line">        right = self.getDepth(root.right, x)</span><br><span class="line">        <span class="keyword">if</span> right <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> right + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBrother</span><span class="params">(self, root: TreeNode, x: int, y: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">and</span> root.right:</span><br><span class="line">            <span class="keyword">if</span> root.left.val == x <span class="keyword">and</span> root.right.val == y:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">if</span> root.left.val == y <span class="keyword">and</span> root.right.val == x:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.isBrother(root.left, x, y) <span class="keyword">or</span> self.isBrother(root.right, x, y)</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)，n为二叉树中节点的个数。</p><p>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 725.分隔链表</title>
      <link href="/2020/01/26/leetcode-725-split-linked-list-in-parts/"/>
      <url>/2020/01/26/leetcode-725-split-linked-list-in-parts/</url>
      
        <content type="html"><![CDATA[<p>给定一个头结点为 root 的链表, 编写一个函数以将链表分隔为 k 个连续的部分。</p><p>每部分的长度应该尽可能的相等: 任意两部分的长度差距不能超过 1，也就是说可能有些部分为 null。</p><p>这k个部分应该按照在链表中出现的顺序进行输出，并且排在前面的部分的长度应该大于或等于后面的长度。</p><p>返回一个符合上述规则的链表的列表。</p><a id="more"></a><p>举例： 1-&gt;2-&gt;3-&gt;4, k = 5, 结果 [ [1], [2], [3], [4], null ]</p><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">root = [1, 2, 3], k = 5</span><br><span class="line">输出: [[1],[2],[3],[],[]]</span><br><span class="line">解释:</span><br><span class="line">输入输出各部分都应该是链表，而不是数组。</span><br><span class="line">例如, 输入的结点 root 的 val= 1, root.next.val = 2, root.next.next.val = 3, 且 root.next.next.next = null。</span><br><span class="line">第一个输出 output[0] 是 output[0].val = 1, output[0].next = null。</span><br><span class="line">最后一个元素 output[4] 为 null, 它代表了最后一个部分为空链表。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3</span><br><span class="line">输出: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]</span><br><span class="line">解释:</span><br><span class="line">输入被分成了几个连续的部分，并且每部分的长度相差不超过1.前面部分的长度大于等于后面部分的长度。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>root</code> 的长度范围： <code>[0, 1000]</code>.</li><li>输入的每个节点的大小范围：<code>[0, 999]</code>.</li><li><code>k</code> 的取值范围： <code>[1, 50]</code>.</li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>步骤：</p><p>1.统计原链表的长度n；</p><p>2.计算分隔后每个部分的长度$\mathrm{length_i}（0 \le i &lt; k）$，令$r = n\ \%\ k$<br>$$<br>\mathrm{length_i =<br>  \begin{cases}<br>      \frac{n}{k} + 1, &amp; 0 \le i &lt; r \\<br>      \frac{n}{k}, &amp; r \le i &lt; k<br>  \end{cases}<br>}<br>$$<br>3.分隔链表。</p><p>分隔链表可以采用以下两种方式：</p><ul><li>遍历链表，将链表分隔为k个部分。如果k&gt;n，则在返回的列表末尾补k-n个空链表；</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitListToParts</span><span class="params">(self, root: ListNode, k: int)</span> -&gt; List[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [root]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.统计原链表的长度</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            node = node.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2.计算分隔后每个部分的长度</span></span><br><span class="line">        length = n // k</span><br><span class="line">        r = n % k</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3.分隔链表</span></span><br><span class="line">        parts = []</span><br><span class="line">        count = <span class="number">0</span> <span class="comment"># 第几部分</span></span><br><span class="line">        part_length = <span class="number">0</span></span><br><span class="line">        node = head = root</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            part_length += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            temp = node.next</span><br><span class="line">            <span class="keyword">if</span> part_length == length + (count &lt; r):</span><br><span class="line">                node.next = <span class="keyword">None</span></span><br><span class="line">                parts.append(head)</span><br><span class="line"></span><br><span class="line">                head = temp</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                part_length = <span class="number">0</span></span><br><span class="line">            node = temp</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4.若n &lt; k，则在末尾补k - n个空链表</span></span><br><span class="line">        <span class="keyword">if</span> n &lt; k:</span><br><span class="line">            parts.extend([<span class="keyword">None</span>] * (k - n))</span><br><span class="line">        <span class="keyword">return</span> parts</span><br></pre></td></tr></table></figure><ul><li>循环K次，每次分隔出一部分。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">splitListToParts</span><span class="params">(self, root: ListNode, k: int)</span> -&gt; List[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> [root]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.统计原链表的长度</span></span><br><span class="line">        n = <span class="number">0</span></span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            node = node.next</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2.计算分隔后每个部分的长度</span></span><br><span class="line">        length = n // k</span><br><span class="line">        r = n % k</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3.分隔链表</span></span><br><span class="line">        parts = []</span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">            head = node</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(length + (i &lt; r) - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> node:</span><br><span class="line">                    node = node.next</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                temp = node.next</span><br><span class="line">                node.next = <span class="keyword">None</span>   </span><br><span class="line">                node = temp</span><br><span class="line">            parts.append(head)</span><br><span class="line">        <span class="keyword">return</span> parts</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n + k)</p><p>空间复杂度：O(k)</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 430.扁平化多级双向链表</title>
      <link href="/2020/01/25/leetcode-430-flatten-a-multilevel-doubly-linked-list/"/>
      <url>/2020/01/25/leetcode-430-flatten-a-multilevel-doubly-linked-list/</url>
      
        <content type="html"><![CDATA[<p>您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。</p><p>扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line"> 1---2---3---4---5---6--NULL</span><br><span class="line">         |</span><br><span class="line">         7---8---9---10--NULL</span><br><span class="line">             |</span><br><span class="line">             11--12--NULL</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">1-2-3-7-8-11-12-9-10-4-5-6-NULL</span><br></pre></td></tr></table></figure><p><strong>以上示例的说明:</strong></p><p>给出以下多级双向链表:</p><p><img src="/static/images/leetcode-430-multilevellinkedlist.png" alt=""></p><p>我们应该返回如下所示的扁平双向链表:</p><p><img src="/static/images/leetcode-430-multilevellinkedlistflattened.png" alt=""></p><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, prev, next, child):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.prev = prev</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">        self.child = child</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            temp = node.next</span><br><span class="line">            <span class="keyword">if</span> node.child:</span><br><span class="line">                child_head = self.flatten(node.child)</span><br><span class="line">                <span class="comment"># 寻找子链表的尾节点</span></span><br><span class="line">                child_tail = child_head</span><br><span class="line">                <span class="keyword">while</span> child_tail <span class="keyword">and</span> child_tail.next:</span><br><span class="line">                    child_tail = child_tail.next</span><br><span class="line"></span><br><span class="line">                node.next = child_head</span><br><span class="line">                child_head.prev = node</span><br><span class="line">                child_tail.next = temp</span><br><span class="line">                <span class="keyword">if</span> temp:</span><br><span class="line">                    temp.prev = child_tail</span><br><span class="line">                </span><br><span class="line">                node.child = <span class="keyword">None</span></span><br><span class="line">            node = temp</span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p>为了寻找子链表的尾节点，上述方法需要重复遍历子链表。为了解决该问题，递归时可以直接返回尾节点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, prev, next, child):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.prev = prev</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">        self.child = child</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        self.flatten_dfs(head)</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten_dfs</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        将双链表拉平，并返回新链表的尾节点</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        pre = node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            temp = node.next</span><br><span class="line">            <span class="keyword">if</span> node.child:</span><br><span class="line">                child_head = node.child</span><br><span class="line">                child_tail = self.flatten_dfs(child_head)</span><br><span class="line"></span><br><span class="line">                node.next = child_head</span><br><span class="line">                child_head.prev = node</span><br><span class="line">                child_tail.next = temp</span><br><span class="line">                <span class="keyword">if</span> temp:</span><br><span class="line">                    temp.prev = child_tail</span><br><span class="line">                </span><br><span class="line">                node.child = <span class="keyword">None</span></span><br><span class="line">                pre = child_tail</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre = node</span><br><span class="line">            node = temp</span><br><span class="line">        <span class="keyword">return</span> pre</span><br></pre></td></tr></table></figure><p>该方法的时间复杂度：O(n)，空间复杂度：O(n)。</p><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val, prev, next, child):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.prev = prev</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">        self.child = child</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        stack = [head]</span><br><span class="line">        pre = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node.next:</span><br><span class="line">                stack.append(node.next)</span><br><span class="line">            <span class="keyword">if</span> node.child:</span><br><span class="line">                stack.append(node.child)</span><br><span class="line">                node.child = <span class="keyword">None</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> pre:</span><br><span class="line">                node.prev = pre</span><br><span class="line">                pre.next = node</span><br><span class="line">            pre = node       </span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><p>该方法的时间复杂度：O(n)，空间复杂度：O(n)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 138.复制带随机指针的链表</title>
      <link href="/2020/01/24/leetcode-138-copy-list-with-random-pointer/"/>
      <url>/2020/01/24/leetcode-138-copy-list-with-random-pointer/</url>
      
        <content type="html"><![CDATA[<p>给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。</p><p>要求返回这个链表的 深拷贝。 </p><a id="more"></a><p>我们用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：</p><ul><li>val：一个表示 Node.val 的整数。</li><li>random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。</li></ul><p><strong>示例 1：</strong></p><p><img src="/static/images/leetcode-138-example1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br><span class="line">输出：[[7,null],[13,0],[11,4],[10,2],[1,0]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="/static/images/leetcode-138-example2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[1,1],[2,1]]</span><br><span class="line">输出：[[1,1],[2,1]]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><p><img src="/static/images/leetcode-138-example3.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [[3,null],[3,0],[3,null]]</span><br><span class="line">输出：[[3,null],[3,0],[3,null]]</span><br></pre></td></tr></table></figure><p><strong>示例 4：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = []</span><br><span class="line">输出：[]</span><br><span class="line">解释：给定的链表为空（空指针），因此返回 null。</span><br></pre></td></tr></table></figure><h3 id="方法一：哈希表"><a href="#方法一：哈希表" class="headerlink" title="方法一：哈希表"></a>方法一：哈希表</h3><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):</span></span><br><span class="line"><span class="string">        self.val = int(x)</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">        self.random = random</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        hash_table = &#123;&#125;</span><br><span class="line">        node = head</span><br><span class="line">        <span class="comment"># 1.新建节点，并存储哈希表中</span></span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            new_node = Node(node.val, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line">            hash_table[node] = new_node </span><br><span class="line">            node = node.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2.复制链表</span></span><br><span class="line">        node = head</span><br><span class="line">        <span class="keyword">while</span> node:</span><br><span class="line">            hash_table[node].next = hash_table.get(node.next)</span><br><span class="line">            hash_table[node].random = hash_table.get(node.random)</span><br><span class="line">            node = node.next</span><br><span class="line">        <span class="keyword">return</span> hash_table[head]</span><br></pre></td></tr></table></figure><h3 id="方法二：原地复制"><a href="#方法二：原地复制" class="headerlink" title="方法二：原地复制"></a>方法二：原地复制</h3><p>步骤：</p><p>1.遍历原链表，依次复制每个节点，并将复制得到的新节点插入到原节点后面。</p><p>假如原链表为$A \rightarrow B \rightarrow C$，遍历结束后，得到的新链表为$A \rightarrow A^\prime \rightarrow B \rightarrow B^\prime \rightarrow C \rightarrow C^\prime$</p><p>2.复制random指针，例如$\mathrm{A^\prime.random = A.random.next}$；</p><p>3.遍历新链表，分离出原链表的深拷贝。</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, x: int, next: 'Node' = None, random: 'Node' = None):</span></span><br><span class="line"><span class="string">        self.val = int(x)</span></span><br><span class="line"><span class="string">        self.next = next</span></span><br><span class="line"><span class="string">        self.random = random</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copyRandomList</span><span class="params">(self, head: <span class="string">'Node'</span>)</span> -&gt; 'Node':</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.复制节点</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            node = Node(cur.val, <span class="keyword">None</span>, <span class="keyword">None</span>)</span><br><span class="line">            node.next = cur.next</span><br><span class="line">            cur.next = node</span><br><span class="line">            cur = cur.next.next</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2.复制random指针</span></span><br><span class="line">        cur = head</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            <span class="keyword">if</span> cur.random:</span><br><span class="line">                cur.next.random = cur.random.next</span><br><span class="line">            cur = cur.next.next</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 3.分离链表</span></span><br><span class="line">        cur = head</span><br><span class="line">        root = tail = head.next</span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            cur.next = cur.next.next</span><br><span class="line">            tail.next = tail.next.next <span class="keyword">if</span> tail.next <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">            cur = cur.next</span><br><span class="line">            tail = tail.next</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 143.重排链表</title>
      <link href="/2020/01/19/leetcode-143-reorder-list/"/>
      <url>/2020/01/19/leetcode-143-reorder-list/</url>
      
        <content type="html"><![CDATA[<p>给定一个单链表 L：L0→L1→…→Ln-1→Ln ，将其重新排列后变为： L0→Ln→L1→Ln-1→L2→Ln-2→…</p><p>你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定链表 1-&gt;2-&gt;3-&gt;4, 重新排列为 1-&gt;4-&gt;2-&gt;3.</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">给定链表 1-&gt;2-&gt;3-&gt;4-&gt;5, 重新排列为 1-&gt;5-&gt;2-&gt;4-&gt;3.</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li>首先，将单链表分割为前后两个部分；</li><li>然后，使用头插法反转后半部分；</li><li>最后，将后半部分节点依次插入到前半部分中。</li></ol><h3 id="方法一：快慢指针"><a href="#方法一：快慢指针" class="headerlink" title="方法一：快慢指针"></a>方法一：快慢指针</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reorderList</span><span class="params">(self, head: ListNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify head in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 若单链表为空，或者仅有一个节点，或者仅有两个节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next <span class="keyword">or</span> <span class="keyword">not</span> head.next.next:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将单链表分割为前后两个部分</span></span><br><span class="line">        slow = fast = head       </span><br><span class="line">        <span class="keyword">while</span> fast.next <span class="keyword">and</span> fast.next.next:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        mid = slow.next</span><br><span class="line">        slow.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 采用头插法，反转后半部分</span></span><br><span class="line">        fast = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> mid:</span><br><span class="line">            temp = mid.next</span><br><span class="line"></span><br><span class="line">            mid.next = fast</span><br><span class="line">            fast = mid</span><br><span class="line"></span><br><span class="line">            mid = temp</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 重排链表</span></span><br><span class="line">        slow = head</span><br><span class="line">        <span class="keyword">while</span> slow <span class="keyword">and</span> fast:</span><br><span class="line">            temp1 = slow.next</span><br><span class="line">            temp2 = fast.next</span><br><span class="line"></span><br><span class="line">            fast.next = slow.next</span><br><span class="line">            slow.next = fast</span><br><span class="line"></span><br><span class="line">            slow = temp1       </span><br><span class="line">            fast = temp2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Outer Product-based Neural Collaborative Filtering</title>
      <link href="/2020/01/18/recommender-system-oncf/"/>
      <url>/2020/01/18/recommender-system-oncf/</url>
      
        <content type="html"><![CDATA[<p>Outer Product-based Neural Collaborative Filtering（ONCF）一文发表在IJCAI 2018上，作者使用外积对嵌入空间中各个维度之间的相互关系进行显式建模。</p><a id="more"></a><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/oncf.png" alt="ONCF"></p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>作者使用了BPR损失函数：<br>$$<br>L = \sum_{(u,i,j) \in \mathcal{D}} - \ln \sigma(\hat y_{ui} - \hat y_{uj}) + \lambda_{\Delta} \left \Vert \Delta \right \Vert^2<br>$$</p><p>论文地址：<a href="https://www.ijcai.org/Proceedings/2018/0308.pdf" target="_blank" rel="noopener">https://www.ijcai.org/Proceedings/2018/0308.pdf</a></p><p>代码地址：<a href="https://github.com/duxy-me/ConvNCF" target="_blank" rel="noopener">https://github.com/duxy-me/ConvNCF</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 114.二叉树展开为链表</title>
      <link href="/2020/01/17/leetcode-114-flatten-binary-tree-to-linked-list/"/>
      <url>/2020/01/17/leetcode-114-flatten-binary-tree-to-linked-list/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，原地将它展开为链表。</p><a id="more"></a><p>例如，给定二叉树</p><pre><code>    1   / \  2   5 / \   \3   4   6</code></pre><p>将其展开为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>按照先序遍历的顺序，将给定的二叉树转变为“链表”，即除叶子节点外，其他所有节点均只有右孩子的二叉树。</p><h3 id="方法一：栈"><a href="#方法一：栈" class="headerlink" title="方法一：栈"></a>方法一：栈</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        stack = [root]</span><br><span class="line">        <span class="comment"># 链表中的尾节点</span></span><br><span class="line">        tail = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">            </span><br><span class="line">            node.left = <span class="keyword">None</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> tail:</span><br><span class="line">                root = tail = node</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.right = node</span><br><span class="line">                tail = node</span><br></pre></td></tr></table></figure><h3 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span>       </span><br><span class="line">        self.flatten(root.left)</span><br><span class="line">        self.flatten(root.right)</span><br><span class="line">        </span><br><span class="line">        pre = root.left</span><br><span class="line">        <span class="keyword">if</span> pre:</span><br><span class="line">            <span class="comment"># 寻找左子树中最右边的节点</span></span><br><span class="line">            <span class="keyword">while</span> pre.right:</span><br><span class="line">                pre = pre.right</span><br><span class="line">            pre.right = root.right</span><br><span class="line">            root.right = root.left</span><br><span class="line">            root.left = <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="方法三：迭代"><a href="#方法三：迭代" class="headerlink" title="方法三：迭代"></a>方法三：迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">flatten</span><span class="params">(self, root: TreeNode)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="string">        """</span>       </span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            pre = root.left</span><br><span class="line">            <span class="keyword">if</span> pre:</span><br><span class="line">                <span class="comment"># 寻找左子树中最右边的节点</span></span><br><span class="line">                <span class="keyword">while</span> pre.right:</span><br><span class="line">                    pre = pre.right</span><br><span class="line">                pre.right = root.right</span><br><span class="line">                root.right = root.left</span><br><span class="line">                root.left = <span class="keyword">None</span></span><br><span class="line">            root = root.right</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 160.相交链表</title>
      <link href="/2020/01/15/leetcode-160-intersection-of-two-linked-lists/"/>
      <url>/2020/01/15/leetcode-160-intersection-of-two-linked-lists/</url>
      
        <content type="html"><![CDATA[<p>编写一个程序，找到两个单链表相交的起始节点。</p><a id="more"></a><p>如下面的两个链表：</p><p>$$<br>\begin{align}<br>A: \qquad  a1 \rightarrow a2 &amp;\\<br>                        &amp;\searrow \\<br>                        &amp; \quad c1 \rightarrow c2 \rightarrow c3 \\<br>                        &amp;\nearrow \\<br>B: b1 \rightarrow b2 \rightarrow b3<br>\end{align}<br>$$<br>在节点 c1 开始相交。</p><p><strong>示例 1：</strong></p><p>$$<br>\begin{align}<br>A: \qquad 4 \rightarrow 1 &amp; \\<br>                                                 &amp; \searrow \\<br>                                                 &amp; \quad 8 \rightarrow 4 \rightarrow 5 \\<br>                                                 &amp; \nearrow \\<br>B:5 \rightarrow 0 \rightarrow 1<br>\end{align}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3</span><br><span class="line">输出：Reference of the node with value = 8</span><br><span class="line">输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p>$$<br>\begin{align}<br>A: 0 \rightarrow 9 \rightarrow 1 &amp; \\<br>                                 &amp; \searrow \\<br>                                 &amp; \quad 2 \rightarrow 4 \\<br>                                 &amp; \nearrow \\<br>B: \qquad  \qquad 3<br>\end{align}<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1</span><br><span class="line">输出：Reference of the node with value = 2</span><br><span class="line">输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong><br>$$<br>A: 2 \rightarrow 6 \rightarrow 4 \\<br>B: \qquad 1 \rightarrow 5<br>$$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2</span><br><span class="line">输出：null</span><br><span class="line">输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。</span><br><span class="line">解释：这两个链表不相交，因此返回 null。</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果两个链表没有交点，返回 null。</li><li>在返回结果后，两个链表仍须保持原有的结构。</li><li>可假定整个链表结构中没有循环。</li><li>程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。</li></ul><h3 id="方法一：跳过多余节点"><a href="#方法一：跳过多余节点" class="headerlink" title="方法一：跳过多余节点"></a>方法一：跳过多余节点</h3><p>$$<br>\begin{align}<br>A: \overset{x}{\overbrace{a_1 \rightarrow a_2 \rightarrow \cdots \rightarrow a_x}} &amp;\\<br>                        &amp;\searrow \\<br>                        &amp; \quad \underset{z}{\underbrace{c_1 \rightarrow \cdots \rightarrow c_z}} \\<br>                        &amp;\nearrow \\<br>B: \underset{y}{\underbrace{b_1 \rightarrow b_2 \rightarrow \cdots \rightarrow b_y}}<br>\end{align}<br>$$</p><p>假设链表A的长度大于B（即x &gt; y），那么，只需要跳过链表A的前x - y个节点，然后再同时遍历链表A和B。当两个链表的当前节点相同时，该节点即为链表A和B相交的起始节点$c_1$。</p><p>时间复杂度：O(n)</p><p>空间复杂度：O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA: ListNode, headB: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headA <span class="keyword">or</span> <span class="keyword">not</span> headB:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        length1 = <span class="number">0</span></span><br><span class="line">        length2 = <span class="number">0</span></span><br><span class="line">        node1 = headA</span><br><span class="line">        node2 = headB</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取链表的长度</span></span><br><span class="line">        <span class="keyword">while</span> node1:</span><br><span class="line">            node1 = node1.next</span><br><span class="line">            length1 += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> node2:</span><br><span class="line">            node2 = node2.next</span><br><span class="line">            length2 += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 跳过多余的节点</span></span><br><span class="line">        node1 = headA</span><br><span class="line">        node2 = headB</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(abs(length1-length2)):</span><br><span class="line">            <span class="keyword">if</span> length1 &gt; length2:</span><br><span class="line">                node1 = node1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node2 = node2.next</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> node1:</span><br><span class="line">            <span class="keyword">if</span> node1 == node2:</span><br><span class="line">                <span class="keyword">return</span> node1</span><br><span class="line">            node1 = node1.next</span><br><span class="line">            node2 = node2.next</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><h3 id="方法二：双指针法"><a href="#方法二：双指针法" class="headerlink" title="方法二：双指针法"></a>方法二：双指针法</h3><p>$$<br>\begin{align}<br>A: \overset{x}{\overbrace{a_1 \rightarrow a_2 \rightarrow \cdots \rightarrow a_x}} &amp;\\<br>                        &amp;\searrow \\<br>                        &amp; \quad \underset{z}{\underbrace{c_1 \rightarrow \cdots \rightarrow c_z}} \\<br>                        &amp;\nearrow \\<br>B: \underset{y}{\underbrace{b_1 \rightarrow b_2 \rightarrow \cdots \rightarrow b_y}}<br>\end{align}<br>$$</p><p>由于x + z + y = y + z + x，因此，如果同时遍历链表A和B，到达链表的末尾$c_2$时，再从另一个链表的起始位置$b_1$（$a_1$）开始遍历。当两个指针都走完x + y + z的距离时，下一个节点就是链表A和B相交的起始节点$c_1$。</p><p>时间复杂度：O(m + n)</p><p>空间复杂度：O(1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA: ListNode, headB: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headA <span class="keyword">or</span> <span class="keyword">not</span> headB:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        node1 = headA</span><br><span class="line">        node2 = headB</span><br><span class="line">        <span class="keyword">while</span> node1 != node2:</span><br><span class="line">            <span class="keyword">if</span> node1:</span><br><span class="line">                node1 = node1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node1 = headB</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> node2:</span><br><span class="line">                node2 = node2.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                node2 = headA</span><br><span class="line">        <span class="keyword">return</span> node1</span><br></pre></td></tr></table></figure><p>使用Python的三元运算符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getIntersectionNode</span><span class="params">(self, headA: ListNode, headB: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> headA <span class="keyword">or</span> <span class="keyword">not</span> headB:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        </span><br><span class="line">        node1 = headA</span><br><span class="line">        node2 = headB</span><br><span class="line">        <span class="keyword">while</span> node1 != node2:</span><br><span class="line">            node1 = node1.next <span class="keyword">if</span> node1 <span class="keyword">else</span> headB</span><br><span class="line">            node2 = node2.next <span class="keyword">if</span> node2 <span class="keyword">else</span> headA  </span><br><span class="line">        <span class="keyword">return</span> node1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量乘法</title>
      <link href="/2020/01/14/vector-product/"/>
      <url>/2020/01/14/vector-product/</url>
      
        <content type="html"><![CDATA[<p>向量乘法</p><a id="more"></a><p>假设$\mathbf{a} \in \mathbb{R}^n, \mathbf{b} \in \mathbb{R}^n$</p><h3 id="内积"><a href="#内积" class="headerlink" title="内积"></a>内积</h3><p>内积（inner product或者dot product）<br>$$<br>\mathbf{a} \cdot \mathbf{b} = \mathbf{a}^T \mathbf{b} = \sum_{i=1}^n a_i \times b_i \tag{1}<br>$$</p><h3 id="逐元素相乘"><a href="#逐元素相乘" class="headerlink" title="逐元素相乘"></a>逐元素相乘</h3><p>逐元素相乘（element-wise product）<br>$$<br>\mathbf{a} \odot \mathbf{b} =<br>\begin{bmatrix}<br>a_1 \times b_1 \\<br>a_2 \times b_2 \\<br>\cdots \\<br>a_n \times b_n<br>\end{bmatrix} \tag{2}<br>$$</p><h3 id="外积"><a href="#外积" class="headerlink" title="外积"></a>外积</h3><p>外积（outer product）<br>$$<br>\mathbf{a} \otimes \mathbf{b}<br>= \mathbf{a} \mathbf{b}^T<br>= \begin{bmatrix}<br>a_1 \times b_1 &amp; a_1 \times b_2 &amp; \cdots &amp; a_1 \times b_n \\<br>a_2 \times b_1 &amp; a_2 \times b_2 &amp; \cdots &amp; a_2 \times b_n \\<br>\vdots &amp; \vdots &amp; \vdots &amp; \vdots \\<br>a_n \times b_1 &amp; a_n \times b_2 &amp; \cdots &amp; a_n \times b_n<br>\end{bmatrix} \tag{3}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> mathematics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 CFM&amp;#58 Convolutional Factorization Machines for Context-Aware Recommendation</title>
      <link href="/2020/01/14/recommender-system-cfm/"/>
      <url>/2020/01/14/recommender-system-cfm/</url>
      
        <content type="html"><![CDATA[<p>Convolutional Factorization Machine（CFM）一文发表在IJCAI 2019上，作者使用叉积对二阶交互进行建模，利用3D CNN来学习高阶交互。</p><a id="more"></a><h3 id="研究动机"><a href="#研究动机" class="headerlink" title="研究动机"></a>研究动机</h3><ol><li>分解机无法对高阶和非线性的特征交互进行充分建模</li><li>现有的使用神经网络增强分解机的方法，均假定嵌入的维度彼此独立，并以相对隐式的方式对高阶交互进行建模</li></ol><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/cfm.png" alt="CFM"></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>作者使用BPR损失函数<br>$$<br>L = \sum - \ln \sigma(\hat y_{CFM} (\mathbf{x}^+) - \hat y_{CFM} (\mathbf{x}^-))<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Interaction-Aware Factorization Machines for Recommender Systems</title>
      <link href="/2020/01/12/recommender-system-ifm/"/>
      <url>/2020/01/12/recommender-system-ifm/</url>
      
        <content type="html"><![CDATA[<p>Interaction-Aware Factorization Machine（IFM）一文发表在AAAI 2019上。</p><a id="more"></a><p>未完待续…</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 147.对链表进行插入排序</title>
      <link href="/2020/01/11/leetcode-147-insertion-sort-list/"/>
      <url>/2020/01/11/leetcode-147-insertion-sort-list/</url>
      
        <content type="html"><![CDATA[<p>对链表进行插入排序。</p><a id="more"></a><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif" alt="插入排序"></p><p>插入排序的动画演示如上。从第一个元素开始，该链表可以被认为已经部分排序（用黑色表示）。<br>每次迭代时，从输入数据中移除一个元素（用红色表示），并原地将其插入到已排好序的链表中。</p><p> 插入排序算法：</p><ol><li>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</li><li>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</li><li>重复直到所有输入数据插入完为止。</li></ol><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><h3 id="解法一：带头结点"><a href="#解法一：带头结点" class="headerlink" title="解法一：带头结点"></a>解法一：带头结点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertionSortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">      <span class="comment"># 若链表为空或只有一个结点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        cur = head.next</span><br><span class="line">        root = ListNode(<span class="number">-1</span>)</span><br><span class="line">        root.next = head</span><br><span class="line">        head.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            pre = root</span><br><span class="line">            node = root.next</span><br><span class="line">            <span class="comment"># 存储下一个结点</span></span><br><span class="line">            temp = cur.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 寻找插入的位置</span></span><br><span class="line">            <span class="keyword">while</span> node <span class="keyword">and</span> node.val &lt; cur.val:</span><br><span class="line">                pre = node</span><br><span class="line">                node = node.next           </span><br><span class="line">            cur.next = node</span><br><span class="line">            pre.next = cur</span><br><span class="line"></span><br><span class="line">            cur = temp</span><br><span class="line">        <span class="keyword">return</span> root.next</span><br></pre></td></tr></table></figure><h3 id="解法二：带头结点和尾结点"><a href="#解法二：带头结点和尾结点" class="headerlink" title="解法二：带头结点和尾结点"></a>解法二：带头结点和尾结点</h3><p>解法一可能会遇到：当前结点的值大于有序区中的最大值。</p><p>此时，为了寻找该结点的插入位置，解法一将遍历有序区中的所有结点。</p><p>针对这种情况，可以考虑为有序区添加尾结点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertionSortList</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">      <span class="comment"># 若链表为空或只有一个结点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        cur = head.next</span><br><span class="line">        root = ListNode(<span class="number">-1</span>)</span><br><span class="line">        root.next = tail = head</span><br><span class="line">        tail.next = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> cur:</span><br><span class="line">            pre = root</span><br><span class="line">            node = root.next    </span><br><span class="line">            <span class="comment"># 存储下一个结点</span></span><br><span class="line">            temp = cur.next</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 若当前结点的值大于有序区最后一个结点的值</span></span><br><span class="line">            <span class="keyword">if</span> tail.val &lt; cur.val:</span><br><span class="line">                cur.next = <span class="keyword">None</span></span><br><span class="line">                tail.next = cur</span><br><span class="line">                tail = cur</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              <span class="comment"># 寻找插入的位置</span></span><br><span class="line">                <span class="keyword">while</span> node <span class="keyword">and</span> node.val &lt; cur.val:</span><br><span class="line">                    pre= node</span><br><span class="line">                    node = node.next           </span><br><span class="line">                cur.next = node</span><br><span class="line">                pre.next = cur</span><br><span class="line"></span><br><span class="line">            cur = temp</span><br><span class="line">        <span class="keyword">return</span> root.next</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 DeepFM&amp;#58 A Factorization-Machine based Neural Network for CTR Prediction</title>
      <link href="/2020/01/08/recommender-system-deepfm/"/>
      <url>/2020/01/08/recommender-system-deepfm/</url>
      
        <content type="html"><![CDATA[<p>DeepFM一文发表在IJCAI 2017上，作者在wide &amp; deep的基础上，使用分解机代替线性回归，从而避免了特征工程。</p><a id="more"></a><h3 id="问题陈述"><a href="#问题陈述" class="headerlink" title="问题陈述"></a>问题陈述</h3><p>点击率（Click Through Rate，简称CTR）预测：</p><p>构建一个预测模型$\hat y = model(x)$，估计某个用户在给定的背景下点击特定应用的概率。</p><h3 id="研究动机"><a href="#研究动机" class="headerlink" title="研究动机"></a>研究动机</h3><p>现有的点击率预测方法</p><ol><li>要么只学习低阶特征交互，如FM</li><li>要么只学习高阶特征交互，如FNN和PNN</li><li>要么依赖于特征工程，如wide &amp; deep</li></ol><p>DeepFM能同时学习各种层次的特征交互，且不需要特征工程。</p><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/deepfm-architecture.png" alt="DeepFM"></p><p>FM和deep模块使用相同的embedding向量。</p><p>预测模型：<br>$$<br>\hat y = \mathrm{sigmoid}(y_{FM} + y_{DNN}) \tag{1}<br>$$<br>其中，$\hat y \in (0,1)$是预测的点击率，$y_{FM}$是分解机模块的输出，$y_{DNN}$是深度模块的输出。</p><h4 id="分解机模块"><a href="#分解机模块" class="headerlink" title="分解机模块"></a>分解机模块</h4><p><img src="/static/images/deepfm-fm.png" alt="FM Component"></p><p>表达式：<br>$$<br>y_{FM} = &lt;w,x&gt; + \sum_{i=1}^d \sum_{j=i+1}^d &lt;V_i, V_j&gt; x_i \cdot x_j \tag{2}<br>$$<br>其中，$w \in R^d$，$V_i \in R^k$。</p><h4 id="深度模块"><a href="#深度模块" class="headerlink" title="深度模块"></a>深度模块</h4><p><img src="/static/images/deepfm-deep.png" alt="Deep Component"></p><p>论文地址：<a href="https://www.ijcai.org/proceedings/2017/0239.pdf" target="_blank" rel="noopener">https://www.ijcai.org/proceedings/2017/0239.pdf</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 1290.二进制链表转整数</title>
      <link href="/2020/01/07/leetcode-1290-convert-binary-number-in-a-linked-list-to-integer/"/>
      <url>/2020/01/07/leetcode-1290-convert-binary-number-in-a-linked-list-to-integer/</url>
      
        <content type="html"><![CDATA[<p>给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。请你返回该链表所表示数字的<strong>十进制值</strong> 。</p> <a id="more"></a><p>示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1-&gt;0-&gt;1</span><br><span class="line">输入：head = [1,0,1]</span><br><span class="line">输出：5</span><br><span class="line">解释：二进制数 (101) 转化为十进制数 (5)</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]</span><br><span class="line">输出：18880</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [0,0]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p>提示：</p><ul><li><p>链表不为空。</p></li><li><p>链表的结点总数不超过 30。</p></li><li>每个结点的值不是 0 就是 1。</li></ul><h3 id="方法：一次迭代"><a href="#方法：一次迭代" class="headerlink" title="方法：一次迭代"></a>方法：一次迭代</h3><p>假定单链表中存储的二进制数字为$x_1 x_2 \cdots x_n$，其十进制值为<br>$$<br>\begin{align}<br>\mathrm{data}<br>&amp;= x_1 \times 2^{n-1} + x_2 \times 2^{n-2} + \cdots + x_{n-1} \times 2 + x_n \\<br>&amp;= 2 \times (x_1 \times 2 ^{n-2} + x_2 \times 2^{n-3} + \cdots + x_{n-1}) + x_n\\<br>&amp;\cdots \\<br>&amp;= 2 \times ( \cdots 2 \times (2 \times x_1 + x_2) + x_3 \cdots ) + x_n<br>\end{align}<br>$$<br>因此：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getDecimalValue</span><span class="params">(self, head: ListNode)</span> -&gt; int:</span></span><br><span class="line">        data = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            data = <span class="number">2</span> * data + head.val</span><br><span class="line">            head = head.next</span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 A Neural Collaborative Filtering Model with Interaction-based Neighborhood</title>
      <link href="/2020/01/06/recommender-system-nncf/"/>
      <url>/2020/01/06/recommender-system-nncf/</url>
      
        <content type="html"><![CDATA[<p>Neighborhood-based Neural Collaborative Filtering（NNCF）一文发表在CIKM 2017上，作者在Neural Collaborative Filtering的基础上，加入了邻域信息。</p><a id="more"></a><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/nncf.png" alt="NNCF"></p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>给定训练集$\tau = { &lt; u, i, y_{ui}&gt;  }$，作者采用二元交叉熵作为损失函数：<br>$$<br>\mathcal{L} = - \sum_{&lt; u, i, y_{u, i}&gt; \in \tau} \left( y_{ui} \log \hat p_{ui} + (1 - y_{ui}) \log (1 - \hat p_{ui}) \right)<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2019/12/31/2019-year-end-summary/"/>
      <url>/2019/12/31/2019-year-end-summary/</url>
      
        <content type="html"><![CDATA[<p>元旦将至，恍惚之间便是一年。</p><a id="more"></a><h3 id="科研"><a href="#科研" class="headerlink" title="科研"></a>科研</h3><p>3月初，我选定了自己的研究方向——推荐系统。</p><p>此后的一个月里，我阅读了项亮博士撰写的《推荐系统实践》一书，对推荐系统这个领域有了粗略的了解。</p><p>入门以后，我开始阅读推荐系统领域的经典论文，比如ItemCF等，科研一途算是入门了。</p><p>9月初，拜读了Keras之父著作的《Python深度学习》一书，终于掌握了一种深度学习框架。</p><p>随后，我和班上的同学一起组队，参加了2019 CCF大数据与计算智能大赛——互联网新闻情感分析，成绩还不错，排在前20%。</p><p>9月底，我认真研读了何向南教授的《Neural Collaborative Filtering》一文，对推荐系统以及深度学习在该领域的应用有了更多的了解，科研一道总算是走上了正轨（至今还没有想到靠谱的idea=_=）。</p><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>年初的时候，跟着导师去了一趟广州，也算是进行了一次国内游。</p><p><div class="text-center">号称“小蛮腰”的广州塔</div><br><img src="/static/images/guang-zhou-tower.jpg" alt="广州塔" width="400" height="500"></p><p>暑假的时候，在学校游泳馆自学了蛙泳，终于不是旱鸭子了&gt;_&lt;（虽然还不太熟练）。</p><h3 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h3><p>今年看了很多闲书，也读了很多技术书（虽然基本都没读完）。</p><ul><li>科普类</li></ul><p>《从一到无穷大》（读了3/4）、《浪潮之巅》（读了三四章）</p><ul><li>励志类</li></ul><p>《见识》和《态度》（均已读完）</p><ul><li>文学类</li></ul><p>历史：《万历十五年》（已读完）</p><p>小说：《红玫瑰与白玫瑰》</p><p>科幻：《流浪地球》（已读完）、《球状闪电》（已读完）、《超新星纪元》（读了1/2）</p><ul><li>思想政治类</li></ul><p>《周恩来邓颖超通信选集》、《共产党宣言》</p><ul><li>技术类</li></ul><p>计算机组成原理：《编码：隐匿在计算机软硬件背后的语言》（读了7章左右，内容非常好）</p><p>Linux：《Linux命令行大全》</p><p>推荐系统：《推荐系统实践》（已读完）、《推荐系统：技术、评估及高效算法》</p><p>深度学习：《Python深度学习》</p><p>Python：《Effective Python：编写高质量Python代码的59个有效方法》、《流畅的Python》</p><p>计算机相关：《软技能》、《人月神话》、《黑客与画家》</p><h3 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h3><ul><li>GitHub</li></ul><p>2019年，我在GitHub上共提交了222次，获得了7个star和2次fork。</p><p><img src="/static/images/github-contribution-2019.png" alt="GitHub Contribution"></p><ul><li>博客</li></ul><p>在过去的一年中，我总共写了211篇博文，内容集中在PAT、CCF CSP、LeetCode、推荐系统以及Python等方面。</p><ul><li>社团活动</li></ul><p>5月份，在学长的动员下，我参加了学院研究生会换届选举，碰巧当选了<a href="http://cs.whu.edu.cn/news_show.aspx?id=1089" target="_blank" rel="noopener">学院研究生会副主席</a>。</p><p>在此后的半年中，我参与了9月的<a href="https://mp.weixin.qq.com/s/UNj29T5hTNwNh-FeI1SNaA" target="_blank" rel="noopener">迎新</a>，组织同学参加校篮球赛和<a href="https://mp.weixin.qq.com/s/KE8sjUP48xiXtx5lkILkHQ" target="_blank" rel="noopener">校羽毛球赛</a>，和华师教育学院以及武理机电工程学院联合举办了<a href="https://mp.weixin.qq.com/s/Z4cAx9MCoE4GtHT1FrWFgQ" target="_blank" rel="noopener">三校三院研究生羽毛球赛</a>。</p><ul><li>荣誉</li></ul><p>今年，我参加了三个数学建模比赛。中青杯获得了三等奖，MathorCup和中国研究生数模只拿到了成功参赛奖。</p><p><img src="/static/images/zqb-third-prize-2019.png" alt=""></p><p>下半年，我靠着89.833的平均成绩（rank 4/22），勉强获得了“优秀学业奖学金”二等奖和优秀研究生。</p><ul><li>考证</li></ul><p>一直以来，我对软件测试都很感兴趣。正巧软考中级下设有软件评测师，遂报名参加了考试。</p><p>临考前，我用了12个晚上的时间（每晚2个小时），做完了历年真题，并对重要的知识点进行了总结。</p><p>前段时间，考试成绩出来了，上午和下午都在60分以上，超过了我的预期。</p><ul><li>英语</li></ul><p>6月，我再次参加了英语六级考试。虽然没有达到预期的500分，但也十分接近了（493分）。</p><p>不得不说，这么多年了，英语的弱项依然是听力、翻译和写作。</p><h3 id="有待改进"><a href="#有待改进" class="headerlink" title="有待改进"></a>有待改进</h3><ol><li><p>晚睡晚起</p></li><li><p>三餐时间不规律，经常不吃早饭</p></li><li><p>感情问题</p></li><li>说多做少</li></ol><h3 id="2020年的计划"><a href="#2020年的计划" class="headerlink" title="2020年的计划"></a>2020年的计划</h3><ol><li><strong>科研：完成资格论文（CCF C及以上）。</strong></li><li>编程：CCF CSP努力考到300分及以上，PAT甲级努力考到80分及以上。</li><li><strong>工作：找到一份满意的实习和工作（推荐系统或者Java开发）。</strong></li><li>竞赛：努力在“锐捷网络杯”程序设计大赛中获奖，弥补遗憾。</li><li><strong>申博：申上计算机的博士（清北+华五+海外）。</strong></li><li>影响力：在GitHub上获得10个star。</li><li>阅读：读完10本非技术书籍（科普、小说等）以及5本技术类书籍。</li><li>考证：尝试软考高级（系统分析师/系统架构设计师）。</li><li>生活：一次国内游。</li><li>博客：写50篇（及以上）高质量的博客（包括但不限于论文阅读、技术总结以及读书笔记等）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 任重而道远 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 任重而道远 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 DeepCF&amp;#58 A Unified Framework of Representation Learning and Matching Function Learning in Recommender System</title>
      <link href="/2019/12/30/recommender-system-deepcf/"/>
      <url>/2019/12/30/recommender-system-deepcf/</url>
      
        <content type="html"><![CDATA[<p>DeepCF一文发表在AAAI 2019上，作者将基于表示学习的方法与基于匹配函数学习的方法进行了融合，极大地改进了模型性能。</p><a id="more"></a><h3 id="现有方法的不足"><a href="#现有方法的不足" class="headerlink" title="现有方法的不足"></a>现有方法的不足</h3><ol><li><p>在预测匹配分数时， 现有的基于表示学习的方法使用了简单的点积或者余弦相似度，严重地限制了模型的表达能力。</p></li><li><p>现有的基于匹配函数的方法，常常使用MLP作为匹配函数，而MLP无法对低秩关系进行充分的建模。</p></li></ol><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>假设有M个用户，N个物品。</p><p>根据用户的隐式反馈，构建用户-物品交互矩阵$：\mathbf{Y} \in \mathbb{R}^{M \times N}$<br>$$<br>y_{ui} =<br>\begin{cases}<br>1, &amp; \mathrm{if\ interaction\ (user}\ u, \mathrm{item}\ i)\ \mathrm{is\ observed;} \\<br>0, &amp; \mathrm{otherwise}<br>\end{cases} \tag{1}<br>$$<br>假设$y_{ui}$服从伯努利分布（二项分布）：<br>$$<br>P(y_{ui} = k | p_{ui}) =<br>\begin{cases}<br>1 - p_{ui}, &amp; k = 0 \\<br>p_{ui}, &amp; k = 1<br>\end{cases}<br>=p_{ui}^k (1 - p_{ui})^{1-k} \tag{2}<br>$$</p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>似然函数：<br>$$<br>\begin{align}<br>L &amp;= \prod_{(u,i) \in \mathcal{Y}^+ \cup \mathcal{Y}^-} P(y_{ui} | \Theta) \\<br>&amp;= \prod_{(u,i) \in \mathcal{Y}^+ \cup \mathcal{Y}^-} \hat y_{ui}^{y_{ui}} (1 - \hat y_{ui})^{1 - y_{ui}}<br>\end{align} \tag{3}<br>$$<br>其中，$\mathcal{Y}^+$表示$\mathbf{Y}$中的正样本，$\mathcal{Y}^-$表示采集的负样本。</p><p>两边取对数：<br>$$<br>\ell_{BCE} = - \sum_{(u,i) \in \mathcal{Y}^+ \cup \mathcal{Y}^-} y_{ui} \log \hat y_{ui} + (1 - y_{ui}) \log (1 - \hat y_{ui}) \tag{4}<br>$$</p><h3 id="DeepCF"><a href="#DeepCF" class="headerlink" title="DeepCF"></a>DeepCF</h3><h4 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h4><p><img src="/static/images/deepcf-general-process.png" alt="General Process"></p><h4 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h4><p><img src="/static/images/deepcf.png" alt="CFNet"></p><p>论文地址：<a href="https://arxiv.org/pdf/1901.04704.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1901.04704.pdf</a></p><p>实验代码：<a href="https://github.com/familyld/DeepCF" target="_blank" rel="noopener">https://github.com/familyld/DeepCF</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Attentional Factorization Machines&amp;#58 Learning the Weight of Feature Interactions via Attention Networks</title>
      <link href="/2019/12/26/recommender-system-afm/"/>
      <url>/2019/12/26/recommender-system-afm/</url>
      
        <content type="html"><![CDATA[<p>Attentional Factorization Machines（AFM）一文发表在IJCAI 2017上，作者在分解机中引入了attention机制，为不同的特征交互赋予不同的权重。</p><a id="more"></a><h3 id="分解机"><a href="#分解机" class="headerlink" title="分解机"></a>分解机</h3><p>$$<br>\hat y_{FM} (\mathbf{x}) =<br>\underset{<br>    \mathrm{linear\ regression}<br>}{<br>    \underbrace{w_0 + \sum_{i=1}^n w_i x_i}<br>} + \underset{<br>    \mathrm{pair-wise\ feature\ interactions}<br>}{<br>    \underbrace{\sum_{i=1}^n \sum_{j=i+1}^n \hat w_{ij} x_i x_j}<br>} \tag{1}<br>$$</p><p>其中，$w_0$表示全局偏置，$w_i$表示第i个特征的权重，$\hat w_{ij} = \mathbf{v}_i^T \mathbf{v}_j$表示交叉特征$x_i x_j$的权重。</p><p>$\mathbf{v}_i = \mathbb{R}^k$表示特征i的embedding向量，k表示embedding向量的大小。</p><p>缺点：并非所有的特征都与预测相关，而分解机对所有的特征交互使用了相同的权重。</p><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/afm.png" alt=""></p><p>图中省略了线性回归部分。</p><h4 id="逐对交互层"><a href="#逐对交互层" class="headerlink" title="逐对交互层"></a>逐对交互层</h4>令$\mathcal{X}$为特征向量$\mathbf{x}$中的非零特征集合，embedding层的输出为$\varepsilon = \{ \mathbf{v}_i x_i \}_{i \in \mathcal{x} }$。因此，逐对交互层（Pair-wise Interaction Layer）的输出为：$$f_{PI}(\varepsilon) = \{ (\mathbf{v}_i \odot \mathbf{v}_j) x_i x_j \}_{(i,j) \in \mathcal{R}_x} \tag{2}$$其中，$\odot$表示逐元素相乘， $\mathcal{R}_x = \{ (i,j) \}_{i \in \mathcal{X}, j \in \mathcal{X}, j > i}$。<p>使用sum pooling将$f_{PI}(\varepsilon)$压缩成一个向量，然后用一个全连接层将其变为预测分数<br>$$<br>\hat y = \mathbf{p}^T \sum_{(i,j) \in \mathcal{R}_x} (\mathbf{v}_i \odot \mathbf{v}_j) x_i x_j + b \tag{3}<br>$$<br>其中，$\mathbf{p} \in \mathbb{R}^k$和$b \in \mathbb{R}$表示预测层的权重和偏置。</p><p>当$\mathbf{p} \equiv [1,1,\dots,1]$和$b \equiv 0$时，上式将退化为FM。</p><h4 id="Attention池化层"><a href="#Attention池化层" class="headerlink" title="Attention池化层"></a>Attention池化层</h4><p>该层的输出为：<br>$$<br>f_{Att}(f_{PI}(\varepsilon)) =<br>\sum_{(i,j) \in \mathcal{R}_x} a_{ij} (\mathbf{v}_i \odot \mathbf{v}_j) x_i x_j \tag{4}<br>$$<br>作者使用一层的MLP当作attention网络：<br>$$<br>a_{ij}^\prime = \mathbf{h}^T \mathrm{ReLU}(\mathbf{W} (\mathbf{v}_i \odot \mathbf{v}_j) x_i x_j + \mathbf{b}) \\<br>a_{ij} = \frac{<br>    \mathrm{exp(a_{ij}^\prime)}<br>}{<br>    \sum_{(i,j) \in \mathcal{R}_x} \mathrm{exp(a_{ij}^\prime)}<br>} \tag{5}<br>$$<br>其中，$\mathbf{W} \in \mathbb{R}^{t \times k}$，$\mathbf{b} \in \mathbb{R}^t$，$\mathbf{h} \in \mathbb{R}^t$。</p><p>这里的t表示attention网络中隐含层的大小，作者称之为<strong>attention factor</strong>。</p><h3 id="模型表达式"><a href="#模型表达式" class="headerlink" title="模型表达式"></a>模型表达式</h3><p>$$<br>\hat y_{AFM} (\mathbf{x}) =<br>w_0 + \sum_{i=1}^n w_i x_i + \mathbf{p}^T \sum_{i=1}^n \sum_{j=i+1}^n a_{ij} (\mathbf{v}_i \odot \mathbf{v}_j) x_i x_j \tag{6}<br>$$</p>模型的参数$\Theta = \{w_0, \{ w_i \}_{i=1}^n, \{ \mathbf{v}_i \}_{i=1}^n, \mathbf{p, W, b, h} \}$。<h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>论文将AFM用于回归任务，因此，作者采用了平方损失：<br>$$<br>L = \sum_{x \in \tau} (\hat y_{AFM}(\mathbf{x}) - y(\mathbf{x}))^2 \tag{7}<br>$$<br>其中，$\tau$表示训练集。</p><p>为了防止过拟合，作者对逐对交互层使用了丢弃法（dropout），对attention网络使用了L2正则项。</p><p>因此，实际的目标函数如下：<br>$$<br>L = \sum_{x \in \tau} (\hat y_{AFM}(\mathbf{x}) - y(\mathbf{x}))^2 + \lambda \left \Vert \mathbf{W} \right \Vert^2 \tag{8}<br>$$<br>论文地址：<a href="https://www.ijcai.org/proceedings/2017/0435.pdf" target="_blank" rel="noopener">https://www.ijcai.org/proceedings/2017/0435.pdf</a></p><p>实验代码：<a href="https://github.com/hexiangnan/attentional_factorization_machine" target="_blank" rel="noopener">https://github.com/hexiangnan/attentional_factorization_machine</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Neural Factorization Machines for Sparse Predictive Analytics</title>
      <link href="/2019/12/25/recommender-system-nfm/"/>
      <url>/2019/12/25/recommender-system-nfm/</url>
      
        <content type="html"><![CDATA[<p>Neural Factorization Machine（NFM）一文发表在SIGIR 2017上，作者将分解机与神经网络整合在一起，利用分解机对二元特征交互进行建模，使用神经网络对高层特征交互进行建模。</p><a id="more"></a><h3 id="分解机"><a href="#分解机" class="headerlink" title="分解机"></a>分解机</h3><p>$$<br>\hat y_{FM}(\mathbf{x}) = w_0 + \sum_{i=1}^n w_i x_i + \sum_{i=1}^n \sum_{j=i+1}^n \mathbf{v}_i^T \mathbf{v}_j \cdot x_i x_j \tag{1}<br>$$</p><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/nfm.png" alt="NFM"></p><p>为了清楚地描述，图中没有显示线性回归部分。</p><h4 id="二元交互层"><a href="#二元交互层" class="headerlink" title="二元交互层"></a>二元交互层</h4><p>$$<br>f_{BI}(\mathcal{V}_x)<br>= \sum_{i=1}^n \sum_{j=i+1}^n x_i \mathbf{v}_i \odot x_j \mathbf{v}_j<br>= \sum_{i=1}^n \sum_{j=1}^{i-1} x_i \mathbf{v}_i \odot x_j \mathbf{v}_j \tag{2}<br>$$</p><p>令$\mathbf{v}^2 = \mathbf{v} \odot \mathbf{v}$，则：<br>$$<br>2 f_{BI}(\mathcal{V}_x)<br>= \sum_{i=1}^n (\sum_{j=1}^n x_i \mathbf{v}_i \odot x_j \mathbf{v}_j - x_i \mathbf{v}_i \odot x_i \mathbf{v}_i)<br>= (\sum_{i=1}^n x_i \mathbf{v}_i)^2 - \sum_{i=1}^n (x_i \mathbf{v}_i)^2 \tag{3}<br>$$</p><p>从而，可以推出：<br>$$<br>\Rightarrow f_{BI}(\mathcal{V}_x) = \frac{1}{2}<br>\left [(\sum_{i=1}^n x_i \mathbf{v}_i)^2 - \sum_{i=1}^n (x_i \mathbf{v}_i)^2 \right] \tag{4}<br>$$</p><h3 id="模型表达式"><a href="#模型表达式" class="headerlink" title="模型表达式"></a>模型表达式</h3><p>$$<br>\begin{align}<br>\hat y_{NFM}(\mathbf{x})<br>&amp;= w_0 + \sum_{i=1}^n w_i x_i \\<br>&amp;+\mathbf{h}^T \sigma_L(<br>    \mathbf{W}_L (<br>    \dots<br>    \sigma_1(\mathbf{W}_1 f_{BI}(\mathcal{V}_x) + \mathbf{b}_1))<br>    \dots<br>    ) + \mathbf{b}_L<br>)<br>\end{align} \tag{5}<br>$$</p>模型参数$\Theta = \{ w_0, \{ w_i, \mathbf{v}_i \}, \mathbf{h}, \{\mathbf{W}_l, \mathbf{b}_l \} \}$<h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>由于该论文聚焦于回归任务，因此，作者采用了平方损失：<br>$$<br>L_{reg} = \sum_{\mathbf{x} \in \mathcal{X}} (\hat y(\mathbf{x}) - y(\mathbf{x}))^2 \tag{6}<br>$$</p><p>论文地址：<a href="http://staff.ustc.edu.cn/~hexn/papers/sigir17-nfm.pdf" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~hexn/papers/sigir17-nfm.pdf</a></p><p>实验代码：<a href="https://github.com/hexiangnan/neural_factorization_machine" target="_blank" rel="noopener">https://github.com/hexiangnan/neural_factorization_machine</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Deep Interest Network for Click-Through Rate Prediction</title>
      <link href="/2019/12/24/recommender-system-din/"/>
      <url>/2019/12/24/recommender-system-din/</url>
      
        <content type="html"><![CDATA[<p>Deep Interest Network for Click-Through Rate Prediction是阿里巴巴发表在KDD 2018上的一篇论文。作者在常见的Embedding&amp;MLP范式中，引入了attention机制，极大地改进了模型的表达能力。</p><a id="more"></a><h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>在Embedding&amp;MLP范式中，各种各样的用户兴趣被压缩到同一个长度固定的向量中，这限制了Embedding&amp;MLP方法的表达能力。此外，将某一用户的全部兴趣压缩到同一个向量中是没有必要的，因为当预测候选广告时，只有部分兴趣会影响他的行为。</p><h3 id="Feature-Representation"><a href="#Feature-Representation" class="headerlink" title="Feature Representation"></a>Feature Representation</h3><p><img src="/static/images/din-feature.png" alt=""></p><h3 id="Base-Model"><a href="#Base-Model" class="headerlink" title="Base Model"></a>Base Model</h3><p><img src="/static/images/din-base-model.png" alt=""></p><p>损失函数使用negative log-likelihood function：<br>$$<br>L = -\frac{1}{N}<br>\sum_{(\mathbf{x}, y) \in \mathbf{S}}<br>\left( y \log p(\mathbf{x}) + (1 - y) \log (1 - p(\mathbf{x})) \right) \tag{1}<br>$$<br>其中，S是大小为N的训练集，$\mathbf{x}$是模型的输入，$y \in \{ 0, 1 \}$是类别，$p(\mathbf{x})$是模型的输出。</p><h3 id="Deep-Interest-Network"><a href="#Deep-Interest-Network" class="headerlink" title="Deep Interest Network"></a>Deep Interest Network</h3><p><img src="/static/images/din.png" alt=""></p><p>$\mathcal{V}_U$为用户表示向量，A为候选广告：<br>$$<br>\mathcal{V}_U(A) = f(\mathcal{V}_A, \mathbf{e}_1, \mathbf{e}_2, \cdots, \mathbf{e}_H) = \sum_{j=1}^H a(\mathbf{e}_j, \mathcal{V}_A) \mathbf{e}_j = \sum_{j=1}^H \mathbf{w}_j \mathbf{e}_j \tag{2}<br>$$<br>其中，$\{\mathbf{e}_1, \mathbf{e}_2, \cdots, \mathbf{e}_H\}$是用户U历史行为的embedding向量构成的集合，$\mathcal{V}_A$表示广告A的embedding向量，$a(\mathbf{e}_j, \mathcal{V}_A)$是attention网络。</p><p>如上图所示，在attention网络中，除了用户和物品（广告）embedding向量外，它们的叉积也被喂进之后的网络中。</p><p>注意：在传统的attention方法中，$\sum_j \mathbf{w}_j = 1$。</p><p>为了保留用户兴趣的强度，这种约束被抛弃了，$a(\cdot)$没有使用softmax。</p><p>$\sum_j \mathbf{w}_j$可以看作被激活的用户兴趣强度的估计值。</p><h3 id="正则项"><a href="#正则项" class="headerlink" title="正则项"></a>正则项</h3><p>小批量敏感（mini-batch aware）的正则<br>$$<br>L_2(W) \approx \sum_{j=1}^K \sum_{m=1}^B \frac{\alpha_{mj}}{n_j}<br>\left \Vert \mathbf{w}_j \right \Vert_2^2<br>$$</p><h3 id="激活函数"><a href="#激活函数" class="headerlink" title="激活函数"></a>激活函数</h3><p>PReLU：<br>$$<br>f(s) =<br>\begin{cases}<br>s &amp; \mathrm{if\ s &gt; 0} \\<br>\alpha s &amp; \mathrm{if\ s \le 0}<br>\end{cases}<br>= p(s) \cdot s + (1 - p(s)) \cdot \alpha s<br>$$<br>其中，$p(s) = I(s &gt; 0)$是指示函数，$\alpha$是一个可学习的参数。</p><p>由于PReLU采用了硬整流点（0），当每层的输入服从不同的分布时，可能不太适用。</p><p>作者提出了Dice<br>$$<br>f(s) = p(s) \cdot s + (1 - p(s)) \cdot \alpha s \\<br>p(s) = \frac{1}{<br>    1 + e^{- \frac{<br>        s - E[s]<br>    }{<br>        \sqrt{Var[s] + \epsilon}<br>    }}<br>}<br>$$<br>其中，$\epsilon$是一个很小的常量，作者将其设置为$10^{-8}$。</p><p>在训练阶段，E[s]和Var[s]是每个小批量输入的均值和方差；</p><p>在测试阶段，E[s]和Var[s]是通过在数据上移动E[s]和Var[s]的平均值来计算。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>Guorui Zhou, Xiaoqiang Zhu, Chenru Song, Ying Fan, Han Zhu, Xiao Ma, Yanghui Yan, Junqi Jin, Han Li, and Kun Gai. 2018. Deep Interest Network for Click-Through Rate Prediction. In <em>Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery &amp; Data Mining</em> (KDD ‘18). ACM, New York, NY, USA, 1059-1068. DOI: <a href="https://doi.org/10.1145/3219819.3219823" target="_blank" rel="noopener">https://doi.org/10.1145/3219819.3219823</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python切片操作</title>
      <link href="/2019/12/22/python-slicing/"/>
      <url>/2019/12/22/python-slicing/</url>
      
        <content type="html"><![CDATA[<p>为了访问list、str等序列类型中某些元素所构成的子集，Python提供了一种简单的语法——切片。</p><a id="more"></a><h3 id="切片语法"><a href="#切片语法" class="headerlink" title="切片语法"></a>切片语法</h3><h4 id="普通切片"><a href="#普通切片" class="headerlink" title="普通切片"></a>普通切片</h4><p>切片操作的基本写法是somelist[start:end]，取值范围[start,end)，不包括end。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line">a[<span class="number">2</span>:<span class="number">4</span>] <span class="comment"># [2, 3]</span></span><br></pre></td></tr></table></figure><p>如果从开头获取切片，则可以不写start。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[:<span class="number">4</span>] <span class="comment"># [0, 1, 2, 3]</span></span><br><span class="line"><span class="comment"># a[0:4]等同于a[:4]</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">4</span>] == a[:<span class="number">4</span>]) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><p>同样地，如果切片要取到末尾，则可以不写end。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">4</span>:] <span class="comment"># [4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment"># a[4:len(a)]等同于a[4:]</span></span><br><span class="line">print(a[<span class="number">4</span>:len(a)] == a[<span class="number">4</span>:])</span><br></pre></td></tr></table></figure><p>如果start和end都被省略，则表示原对象的一份拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a[:]  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">a[:] == a <span class="comment"># True</span></span><br><span class="line">a[:] <span class="keyword">is</span> a <span class="comment"># False</span></span><br></pre></td></tr></table></figure><p>在指定切片起止索引时，若要从尾部向前算，则可以使用负数来表示相关偏移量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a[:<span class="number">-1</span>]    <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line">a[<span class="number">-5</span>:]    <span class="comment"># [5, 6, 7, 8, 9]</span></span><br><span class="line">a[<span class="number">-5</span>:<span class="number">-1</span>]  <span class="comment"># [5, 6, 7, 8]</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">-1</span>]   <span class="comment"># [2, 3, 4, 5, 6, 7, 8]</span></span><br></pre></td></tr></table></figure><p>对序列进行切片时，即使start或end索引越界也不会出问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[:<span class="number">20</span>]  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line">a[<span class="number">-20</span>:] <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><p>对切片操作得到的新列表进行修改，不会影响原列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a[:<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b[<span class="number">1</span>] = <span class="number">100</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">0</span>, <span class="number">100</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="带间隔的切片"><a href="#带间隔的切片" class="headerlink" title="带间隔的切片"></a>带间隔的切片</h4><p>除了基本的切片操作外，Python还提供了somelist[start:end:step]的写法，表示在[start,end)内，以step为间隔取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line">a[::<span class="number">2</span>]  <span class="comment"># [0, 2, 4, 6, 8]</span></span><br><span class="line">a[<span class="number">1</span>::<span class="number">2</span>] <span class="comment"># [1, 3, 5, 7, 9]</span></span><br></pre></td></tr></table></figure><p>Python中有一种常见的技巧——以-1为间隔，来反转列表或者字符串等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[::<span class="number">-1</span>] <span class="comment"># [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span></span><br></pre></td></tr></table></figure><h3 id="给切片赋值"><a href="#给切片赋值" class="headerlink" title="给切片赋值"></a>给切片赋值</h3><p>如果把切片放在赋值语句的左边，会把序列中处在指定范围内的对象替换为新值。</p><p>切片的长度与新值的个数无需相等。序列会根据新值的个数相应地扩张或收缩。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># 收缩 [0, 1, 20, 30, 5, 6, 7, 8, 9]</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="comment"># 扩张 [0, 1, 20, 30, 40, 5, 6, 7, 8, 9]</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">4</span>] = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</span><br></pre></td></tr></table></figure><p>如果把切片放在赋值语句的左边，那么右侧必须是个可迭代对象（即使只有单独一个值）。</p><p>注意下面的两种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = <span class="number">100</span>   <span class="comment"># 错误的写法</span></span><br><span class="line">a[<span class="number">2</span>:<span class="number">5</span>] = [<span class="number">100</span>] <span class="comment"># 正确的写法</span></span><br></pre></td></tr></table></figure><p>第一种写法将会导致如下的错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: can only assign an iterable</span><br></pre></td></tr></table></figure><p>将切片作为del操作的对象，可以删除序列中的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(range(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">2</span>:<span class="number">5</span>] </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python函数注解</title>
      <link href="/2019/12/20/python-function-annotations/"/>
      <url>/2019/12/20/python-function-annotations/</url>
      
        <content type="html"><![CDATA[<p>Python3引入了一种新语法——函数注解，用于为函数声明中的参数和返回值添加注解。注解中最常用的类型是类（如str或者int）和字符串。</p><a id="more"></a><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>函数声明中的各个参数可以在:后增加注解表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a: int, b: int)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>如果参数有默认值，注解放在参数名和=号之间，就像下面这样。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a: int, b: int = <span class="number">4</span>)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>如果想注解返回值，在)和函数声明末尾的:之间添加-&gt;和注解表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a: int, b: int = <span class="number">4</span>)</span> -&gt; int:</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h3 id="访问函数注解"><a href="#访问函数注解" class="headerlink" title="访问函数注解"></a>访问函数注解</h3><p>Python不会对注解做任何处理，只是将其存储在函数的<code>__annotations__</code>属性（一个字典）中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(sum.__annotations__)</span><br><span class="line">&#123;'a': &lt;class 'int'&gt;, 'b': &lt;class 'int'&gt;, 'return': &lt;class 'int'&gt;&#125;</span><br></pre></td></tr></table></figure><p>return键保存的是返回值注解。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>函数注解提案 <a href="https://www.python.org/dev/peps/pep-3107/" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-3107/</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Bayesian Probabilistic Matrix Factorization using Markov Chain Monte Carlo</title>
      <link href="/2019/12/18/recommender-system-bpmf/"/>
      <url>/2019/12/18/recommender-system-bpmf/</url>
      
        <content type="html"><![CDATA[<p>占坑，有空补上…</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 965.单值二叉树</title>
      <link href="/2019/12/17/leetcode-965-univalued-binary-tree/"/>
      <url>/2019/12/17/leetcode-965-univalued-binary-tree/</url>
      
        <content type="html"><![CDATA[<p>如果二叉树每个节点都具有相同的值，那么该二叉树就是<em>单值</em>二叉树。只有给定的树是单值二叉树时，才返回 <code>true</code>；否则返回 <code>false</code>。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  1   1</span><br><span class="line"> / \   \</span><br><span class="line">1   1   1</span><br><span class="line">输入：[1,1,1,1,1,null,1]</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  2   2</span><br><span class="line"> / \</span><br><span class="line">5   2</span><br><span class="line">输入：[2,2,2,5,2]</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>给定树的节点数范围是 <code>[1, 100]</code>。</li><li>每个节点的值都是整数，范围为 <code>[0, 99]</code> 。</li></ol><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUnivalTree</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">and</span> root.left.val != root.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> root.right <span class="keyword">and</span> root.right.val != root.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isUnivalTree(root.left) <span class="keyword">and</span> self.isUnivalTree(root.right)</span><br></pre></td></tr></table></figure><p>时间复杂度为O(N)，空间复杂度为O(H)。其中，N为二叉树的节点个数，H为二叉树的高度。</p><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isUnivalTree</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        stack = [root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> node.left <span class="keyword">and</span> node.left.val != node.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">if</span> node.right <span class="keyword">and</span> node.right.val != node.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span> </span><br><span class="line">            stack.append(node.left)</span><br><span class="line">            stack.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>时间复杂度为O(N)，空间复杂度为O(1)。其中，N为二叉树的节点个数。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Probabilistic Matrix Factorization</title>
      <link href="/2019/12/14/recommender-system-pmf/"/>
      <url>/2019/12/14/recommender-system-pmf/</url>
      
        <content type="html"><![CDATA[<p>为了更好地处理大型数据集以及评分较少的用户，作者提出了概率矩阵分解（PMF）模型。</p><a id="more"></a><h3 id="待解决的问题"><a href="#待解决的问题" class="headerlink" title="待解决的问题"></a>待解决的问题</h3><p>传统的协同过滤方法有两个问题：</p><ol><li>不能很好地处理大型数据集；</li><li>对于那些评分很少的用户，无法做出准确的预测。</li></ol><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><ol><li><p>N表示用户数量，M表示物品数量。</p></li><li><p>$R_{ij}$表示用户i对物品j的评分，评分的取值范围为$\{ R_{ij} | 1 \le R_{ij} \le K \cap R_{ij} \mathrm{\ is\ integer} \}$。</p></li><li><p>$U \in R^{D \times N}$和$V \in R^{D \times M}$分别表示用户和物品的潜在特征矩阵，列向量$U_i$和$V_j$分别表示用户i和物品j的潜在特征向量。</p></li></ol><h3 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h3><p><img src="/static/images/pmf.png" alt="PMF"></p><h3 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h3><ol><li><p>假设评分服从均值为$U_i^T V_j$，方差为$\sigma^2$的正态分布，即$R_{ij} \sim N(U_i^T V_j, \sigma^2)$。<br>$$<br>p(R | U, V, \sigma^2) = \prod_{i=1}^N \prod_{j=1}^M \left [ \mathcal{N}(R_{ij} | U_i^T V_j, \sigma^2) \right]^{I_{ij}} \tag{1}<br>$$<br>其中，$\mathcal{N}(x | \mu, \sigma^2)$为正态分布的概率密度函数；$I_{ij}$为指示函数。<br>$$<br>I_{ij}(x) =<br>\begin{cases}<br> 1, &amp; \mathrm{if\ user\ i\ rated\ item\ j} \\<br> 0, &amp; \mathrm{otherwise}<br>\end{cases} \tag{2}<br>$$</p></li><li><p>假设用户特征向量和物品特征向量都服从均值为0的正态分布，即$U_i \sim N(0, \sigma_U^2 \mathbf{I} ),\ V_j \sim N(0, \sigma_V^2 \mathbf{I})$。</p></li></ol><p>$$<br>p(U | \sigma_U^2) = \prod_{i=1}^N \mathcal{N} (U_i | 0, \sigma_U^2 \mathbf{I}) \\<br>p(V | \sigma_V^2) = \prod_{j=1}^M \mathcal{N} (V_j | 0, \sigma_V^2 \mathbf{I})<br>\tag{3}<br>$$</p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>后验概率：<br>$$<br>\begin{align}<br>p(U, V | R, \sigma^2, \sigma_U^2, \sigma_V^2)<br>&amp;= \frac{<br>    p(R | U, V, \sigma^2, \sigma_U^2, \sigma_V^2) \times p(U, V | \sigma^2, \sigma_U^2, \sigma_V^2) \times p(\sigma^2, \sigma_U^2, \sigma_V^2)<br>}{<br>    p(R, \sigma^2, \sigma_U^2, \sigma_V^2)<br>} \\<br>&amp;\propto p(R | U, V, \sigma^2) \times p(U, V | \sigma_U^2, \sigma_V^2) \\<br>&amp;= p(R | U, V, \sigma^2) \times p(U | \sigma_U^2) \times p(V | \sigma_V^2) \\<br>&amp;= \prod_{i=1}^N \prod_{j=1}^M \left [ \mathcal{N}(R_{ij} | U_i^T V_j, \sigma^2) \right ]^{I_{ij}}<br>\times<br>\prod_{i=1}^N \mathcal{N}(U_i | 0, \sigma_U^2 \mathbf{I})<br>\times<br>\prod_{j=1}^M \mathcal{N}(V_j | 0, \sigma_V^2 \mathbf{I})<br>\end{align} \tag{4}<br>$$<br>两边取对数，得到：<br>$$<br>\begin{align}<br>\ln p(U, V | R, \sigma^2, \sigma_U^2, \sigma_V^2)<br>=<br>&amp; \sum_{i=1}^N \sum_{j=1}^M I_{ij} \ln \mathcal{N}(R_{ij} | U_i^T V_j, \sigma^2) + \\<br>&amp; \sum_{i=1}^N \ln \mathcal{N}(U_i | 0, \sigma_U^2 \mathbf{I})  +<br>\sum_{j=1}^M \ln \mathcal{N}(V_j | 0, \sigma_V^2 \mathbf{I})<br>\end{align} \tag{5}<br>$$</p><p>下面分别求解这三项：<br>$$<br>\begin{align}<br>\sum_{i=1}^N \sum_{j=1}^M I_{ij} \ln \mathcal{N}(R_{ij} | U_i^T V_j, \sigma^2)<br>&amp;= \sum_{i=1}^N \sum_{j=1}^M I_{ij} \ln \left( \frac{1}{<br>    \sqrt{2 \pi} \sigma<br>}<br>\exp \{<br>    -\frac{<br>    (R_{ij} - U_i^T V_j)^2<br>  }{<br>    2 \sigma^2<br>    }<br>\} \right) \\<br>&amp;= -\frac{1}{<br>    2 \sigma^2<br>} \sum_{i=1}^N \sum_{j=1}^M I_{ij} (R_{ij} - U_i^T V_j)^2 -<br>\frac{1}{2} \sum_{i=1}^N \sum_{j=1}^M I_{ij} \ln \sigma^2 -<br>\frac{1}{2} N M \ln (2 \pi)<br>\end{align} \tag{6}<br>$$</p><p>$$<br>\begin{align}<br>\sum_{i=1}^N \ln \mathcal{N}(U_i | 0, \sigma_U^2 \mathbf{I})<br>&amp;= \sum_{i=1}^N \ln  \frac{1}{<br>    (2 \pi)^\frac{D}{2}<br>    \left \vert \sigma_U^2 \mathbf{I} \right \vert^{\frac{1}{2}}<br>} \exp \{ -\frac{1}{2} U_i^T (\sigma_U^2 \mathbf{I})^{-1} U_i \} \\<br>&amp;= -\frac{1}{2 \sigma_U^2} \sum_{i=1}^N U_i^T U_i -<br>\frac{1}{2} N D \ln \sigma_U^2 -<br>\frac{1}{2} N D \ln (2 \pi)<br>\end{align} \tag{7}<br>$$</p><p>$$<br>\begin{align}<br>\sum_{j=1}^M \ln \mathcal{N}(V_j | 0, \sigma_V^2 \mathbf{I})<br>&amp;= \sum_{j=1}^M \ln  \frac{1}{<br>    (2 \pi)^\frac{D}{2}<br>    \left \vert \sigma_V^2 \mathbf{I} \right \vert^{\frac{1}{2}}<br>} \exp \{ -\frac{1}{2} V_j^T (\sigma_V^2 \mathbf{I})^{-1} V_j \} \\<br>&amp;= -\frac{1}{2 \sigma_V^2} \sum_{j=1}^M V_j^T V_j - \frac{1}{2} M D \ln \sigma_V^2 - \frac{1}{2} M D \ln (2 \pi)<br>\end{align} \tag{8}<br>$$<br>将式(6)、(7)、(8)代入(5)中，得到：<br>$$<br>\begin{align}<br>\ln p(U, V | R, \sigma^2, \sigma_U^2, \sigma_V^2)<br>=<br>&amp;-\frac{1}{<br>    2 \sigma^2<br>} \sum_{i=1}^N \sum_{j=1}^M I_{ij} (R_{ij} - U_i^T V_j)^2 -\frac{1}{2 \sigma_U^2} \sum_{i=1}^N U_i^T U_i - \frac{1}{2 \sigma_V^2} \sum_{j=1}^M V_j^T V_j \\<br>&amp;- \frac{1}{2} \sum_{i=1}^N \sum_{j=1}^M I_{ij} \ln \sigma^2 -<br>\frac{1}{2} N D \ln \sigma_U^2 - \frac{1}{2} M D \ln \sigma_V^2 \\<br>&amp;- \frac{1}{2} N M \ln (2 \pi) -<br>\frac{1}{2} N D \ln (2 \pi) -<br>\frac{1}{2} M D \ln (2 \pi) \\<br>=<br>&amp;- \frac{1}{<br>    2 \sigma^2<br>} \sum_{i=1}^N \sum_{j=1}^M I_{ij} (R_{ij} - U_i^T V_j)^2 -<br>\frac{1}{2 \sigma_U^2} \sum_{i=1}^N U_i^T U_i -<br>\frac{1}{2 \sigma_V^2} \sum_{j=1}^M V_j^T V_j \\<br>&amp;- \frac{1}{2} \left(<br>    \sum_{i=1}^N \sum_{j=1}^M I_{ij} \ln \sigma^2 + N D \ln \sigma_U^2 + M D \ln \sigma_V^2 \right)+ C<br>\end{align} \tag{9}<br>$$<br>固定超参数，最大化式(9) 等价于最小化式(10)<br>$$<br>E = \frac{1}{2} \sum_{i=1}^N \sum_{j=1}^M I_{ij} (R_{ij} - U_i^T V_j)^2 +<br>\frac{\lambda_U}{2} \sum_{i=1}^N \left \Vert U_i \right \Vert_F^2 +<br>\frac{\lambda_V}{2} \sum_{j=1}^M \left \Vert V_j \right \Vert_F^2 \tag{10}<br>$$<br>其中，$\lambda_U = \frac{\sigma^2}{\sigma_U^2}$，$\lambda_V = \frac{\sigma^2}{\sigma_V^2}$</p><h3 id="学习算法"><a href="#学习算法" class="headerlink" title="学习算法"></a>学习算法</h3><p>下面使用随机梯度下降求解参数更新规则：</p><p>令$R_{U_i}^+$表示用户i评分过的物品集合，$R_{V_j}^+$表示与物品j交互过的用户的集合。<br>$$<br>\frac{\partial E}{\partial U_i} = - \sum_{j \in R_{U_i}^+} V_j (R_{ij} - U_i^T V_j) + \lambda_U U_i \\<br>\frac{\partial E}{\partial V_j} = - \sum_{i \in R_{V_j}^+} U_i (R_{ij} - U_i^T V_j) + \lambda_V V_j<br>\tag{11}<br>$$<br>令$e_{ij} = R_{ij} - U_i^T V_j$</p><p>从而：<br>$$<br>U_i \leftarrow U_i - \eta( \sum_{j \in R_{U_i}^+} V_j e_{ij} - \lambda_U U_i) \\<br>V_j \leftarrow V_j - \eta( \sum_{i \in R_{V_j}^+} U_i e_{ij} - \lambda_V V_j)<br>\tag{12}<br>$$<br>其中，$\eta$为学习率。</p><h3 id="优化与改进"><a href="#优化与改进" class="headerlink" title="优化与改进"></a>优化与改进</h3><p>由于上述模型的预测分数可能会超出有效评分的范围，作者提出使用sigmoid函数，将输出限制在[0,1]区间内<br>$$<br>g(x) = \frac{1}{1+ e^{-x}} \tag{13}<br>$$<br>为了使输入评分与输出的预测分数相匹配，作者对输入评分$1,\cdots,K$进行了归一化<br>$$<br>t(x) = \frac{ x - 1 }{ K - 1 } \tag{14}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 226.翻转二叉树</title>
      <link href="/2019/12/11/leetcode-226-invert-binary-tree/"/>
      <url>/2019/12/11/leetcode-226-invert-binary-tree/</url>
      
        <content type="html"><![CDATA[<p>翻转一棵二叉树。</p><a id="more"></a><p>示例：</p><p>输入：</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        node = root.left</span><br><span class="line">        root.left = self.invertTree(root.right)</span><br><span class="line">        root.right = self.invertTree(node)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        stack = [root]</span><br><span class="line">        temp = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                temp = node.left</span><br><span class="line">                node.left = node.right</span><br><span class="line">                node.right = temp</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Collaborative Deep Learning for Recommender Systems</title>
      <link href="/2019/12/10/recommender-system-cdl/"/>
      <url>/2019/12/10/recommender-system-cdl/</url>
      
        <content type="html"><![CDATA[<p>作者提出了一个分层的贝叶斯模型—— Collaborative Deep Learning（CDL），利用深度表示学习对物品的内容信息进行建模，并将其与针对评分矩阵的协同过滤整合在一起。</p><a id="more"></a><h3 id="符号描述"><a href="#符号描述" class="headerlink" title="符号描述"></a>符号描述</h3><p>$\mathbf{X}_c \in \mathbb R^{J \times S}$表示由J个物品组成的矩阵，矩阵中的每一行j是一个词袋向量$\mathbf{X}_{c, j*}$（词汇表的大小为S）。</p><p>$\mathbf{R} = [R_{i,j}]_{I \times J}$表示由I个用户、J个物品组成的二元评分矩阵。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>给定$\mathbf{R}$中的部分评分以及内容信息$\mathbf{X}_c$，预测$\mathbf{R}$中的其他评分。</p><h3 id="CDL"><a href="#CDL" class="headerlink" title="CDL"></a>CDL</h3><p><img src="/static/images/cdl.png" alt=""></p><p>CDL的生成过程如下：</p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>最大化后验概率等价于最大化$\mathbf{U}, \mathbf{V}, \{\mathbf{X}_l\}, \mathbf{X}_c, \{\mathbf{W}_l\}, \mathbf{b}_l, \mathbf{R}$的联合对数似然。</p><!--$$\begin{align}\mathscr{L} =&-\frac{\lambda_u}{2} \sum_i \left \Vert \mathbf{u}_i \right \Vert_2^2 -\frac{\lambda_w}{2} \sum_l (\left \Vert \mathbf{W}_l \right \Vert_F^2 + \left \Vert \mathbf{b}_l \right \Vert_2^2) \\\\ &-\frac{\lambda_v}{2} \sum_j \left \Vert \mathbf{v}_j - \mathbf{X}_{\frac{L}{2},j*}^T \right \Vert_2^2 -\frac{\lambda_n}{2} \sum_j \left \Vert \mathbf{X}_{L,j*} - \mathbf{X}_{c,j*} \right \Vert_2^2 \\\\&-\frac{\lambda_s}{2} \sum_l \sum_j \left \Vert \sigma(\mathbf{X}_{l-1,j*} \mathbf{W}_l + \mathbf{b}_l) - \mathbf{X}_{l,j*} \right \Vert_2^2 \\\\ &-\sum_{i,j} \frac{C_{ij}}{2} (\mathbf{R}_{ij} - \mathbf{u}_i^T \mathbf{v}_j)^2\end{align}$$--><p><img src="/static/images/cdl-objective-function.png" alt=""></p><h3 id="参数更新"><a href="#参数更新" class="headerlink" title="参数更新"></a>参数更新</h3><p><img src="/static/images/cdl-update-rule.png" alt=""></p><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>$$<br>\mathbf{R}^*_{ij} \approx (\mathbf{u}_i^*)^T (f_e (\mathbf{X}_{0,j*}, \mathbf{W}^{+*})^T + \mathbf{\epsilon}^*_j) = (\mathbf{u}_i^*)^T \mathbf{v}_j^*<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之文本搜索grep</title>
      <link href="/2019/12/08/linux-command-grep/"/>
      <url>/2019/12/08/linux-command-grep/</url>
      
        <content type="html"><![CDATA[<p>grep（Globally search a Regular Expression and Print）</p><a id="more"></a><p>选项</p><ul><li><p>-E：支持正则表达式</p></li><li><p>i：忽略大小写</p></li><li>-v：打印不匹配的行</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 617.合并二叉树</title>
      <link href="/2019/12/08/leetcode-617-merge-two-binary-trees/"/>
      <url>/2019/12/08/leetcode-617-merge-two-binary-trees/</url>
      
        <content type="html"><![CDATA[<p>给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。</p><p>你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。</p><a id="more"></a><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入: </span><br><span class="line">Tree 1                     Tree 2                  </span><br><span class="line">          1                         2                             </span><br><span class="line">         / \                       / \                            </span><br><span class="line">        3   2                     1   3                        </span><br><span class="line">       /                           \   \                      </span><br><span class="line">      5                             4   7                  </span><br><span class="line">输出: </span><br><span class="line">合并后的树:</span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \   \ </span><br><span class="line"> 5   4   7</span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 合并必须从两个树的根节点开始。</p><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1: TreeNode, t2: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">            <span class="keyword">return</span> t1</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">            <span class="keyword">return</span> t2</span><br><span class="line">        </span><br><span class="line">        t1.val += t2.val</span><br><span class="line">        t1.left = self.mergeTrees(t1.left, t2.left)</span><br><span class="line">        t1.right = self.mergeTrees(t1.right, t2.right)</span><br><span class="line">        <span class="keyword">return</span> t1</span><br></pre></td></tr></table></figure><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTrees</span><span class="params">(self, t1: TreeNode, t2: TreeNode)</span> -&gt; TreeNode:</span>       </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t1:</span><br><span class="line">            <span class="keyword">return</span> t2</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t2:</span><br><span class="line">            <span class="keyword">return</span> t1</span><br><span class="line">        </span><br><span class="line">        stack = [[t1, t2]]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            node[<span class="number">0</span>].val += node[<span class="number">1</span>].val</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node[<span class="number">0</span>].left:</span><br><span class="line">                node[<span class="number">0</span>].left = node[<span class="number">1</span>].left</span><br><span class="line">            <span class="keyword">elif</span> node[<span class="number">1</span>].left:</span><br><span class="line">                stack.append([node[<span class="number">0</span>].left, node[<span class="number">1</span>].left])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node[<span class="number">0</span>].right:</span><br><span class="line">                node[<span class="number">0</span>].right = node[<span class="number">1</span>].right</span><br><span class="line">            <span class="keyword">elif</span> node[<span class="number">1</span>].right:</span><br><span class="line">                stack.append([node[<span class="number">0</span>].right, node[<span class="number">1</span>].right])</span><br><span class="line">        <span class="keyword">return</span> t1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 101.对称二叉树</title>
      <link href="/2019/12/06/leetcode-101-symmetric-tree/"/>
      <url>/2019/12/06/leetcode-101-symmetric-tree/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，检查它是否是镜像对称的。</p><a id="more"></a><p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p><pre><code>    1   / \  2   2 / \ / \3  4 4  3</code></pre><p>但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:</p><pre><code>  1 / \2   2 \   \ 3    3</code></pre><p><strong>说明:</strong></p><p>如果你可以运用递归和迭代两种方法解决这个问题，会很加分。</p><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> self.isSymmetric2(root.left, root.right)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric2</span><span class="params">(self, node1: TreeNode, node2: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">and</span> <span class="keyword">not</span> node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">or</span> <span class="keyword">not</span> node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">if</span> node1.val != node2.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSymmetric2(node1.left, node2.right) <span class="keyword">and</span> self.isSymmetric2(node1.right, node2.left)</span><br></pre></td></tr></table></figure><h3 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        stack = [root.left, root.right]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node1 = stack.pop()</span><br><span class="line">            node2 = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">and</span> <span class="keyword">not</span> node2:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">or</span> <span class="keyword">not</span> node2:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">if</span> node1.val != node2.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            stack.append(node1.left)</span><br><span class="line">            stack.append(node2.right)</span><br><span class="line">            stack.append(node1.right)</span><br><span class="line">            stack.append(node2.left)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Fast Matrix Factorization for Online Recommendation with Implicit Feedback</title>
      <link href="/2019/12/04/recommender-system-eals/"/>
      <url>/2019/12/04/recommender-system-eals/</url>
      
        <content type="html"><![CDATA[<p>$$<br>\hat r_{ui} = &lt;\mathbf{p}_u, \mathbf{q}_i&gt; = \mathbf{p}_u^T \mathbf{q}_i \tag{1}<br>$$<br>biasedMF<br>$$<br>\hat r_{ui} = b_u + b_i + &lt;\mathbf{p}_u^B, \mathbf{q}_i^B&gt;<br>$$<br>令$\mathbf{p}_u \leftarrow [\mathbf{p}_u^B, b_u, 1]$，$\mathbf{q}_i \leftarrow [\mathbf{p}_u^B, 1, b_i]$</p><p>从而，可以将带偏置的矩阵分解归入式<br>$$<br>\hat r_{ui} = b_u + b_i + &lt;\mathbf{p}_u^B, \mathbf{q}_i^B&gt;<br>=<br>\begin{bmatrix}<br>\mathbf{p}_u^B &amp; b_u &amp; 1<br>\end{bmatrix}<br>\begin{bmatrix}<br>\mathbf{p}_u^B \\<br>1 \\<br>b_i<br>\end{bmatrix}<br>= \mathbf{p}_u^T \mathbf{q}_i<br>$$<br>目标函数：<br>$$<br>L = \sum_{u=1}^M \sum_{i=1}^N w_{ui} (r_{ui} - \hat r_{ui})^2 +<br>\lambda (<br>    \sum_{u=1}^M \left \Vert \mathbf{p}_u \right \Vert^2 +<br>    \sum_{i=1}^N \left \Vert \mathbf{q}_i \right \Vert^2<br>) \tag{2}<br>$$<br>使用交替最小二乘法（Alternating Least Square, ALS）：迭代地优化一个参数，而保持其他参数不变</p><p>考虑$\mathbf{p}_u$：<br>$$<br>L_u = \left \Vert<br>    \mathbf{W}^u (\mathbf{r}_u - \mathbf{Q} \mathbf{p}_u)<br>\right \Vert^2 + \lambda \left \Vert \mathbf{p}_u \right \Vert^2<br>$$<br>其中，$\mathbf{W}^u$是$N \times N$的对角矩阵，其对角元素$W_{ii}^u = w_{ui}$。</p><p>令$L_u$对$\mathbf{p}_u$的一阶导数等于0：<br>$$<br>\frac{ \partial L_u }{ \partial \mathbf{p}_u }<br>= -2 \mathbf{Q}^T \mathbf{W}^u (\mathbf{r}_u - \mathbf{Q} \mathbf{p}_u) + 2 \lambda \mathbf{p}_u = 0 \\<br>\begin{align}<br>&amp;\Rightarrow ( \mathbf{Q}^T \mathbf{W}^u \mathbf{Q} + \lambda \mathbf{I} ) \mathbf{p}_u = \mathbf{Q}^T \mathbf{W}^u \mathbf{r}_u \\<br>&amp;\Rightarrow \mathbf{p}_u = ( \mathbf{Q}^T \mathbf{W}^u \mathbf{Q} + \lambda \mathbf{I} )^{-1} \mathbf{Q}^T \mathbf{W}^u \mathbf{r}_u<br>\end{align} \tag{3}<br>$$<br>其中，$\mathbf{I}$是单位矩阵。</p><p>给所有的缺失项赋相同的权重$w_0$<br>$$<br>\mathbf{Q}^T \mathbf{W}^u \mathbf{Q} = w_0 \mathbf{Q}^T \mathbf{Q} + \mathbf{Q}^T (\mathbf{W}^u - \mathbf{w}^0) \mathbf{Q} \tag{4}<br>$$<br>其中，$\mathbf{w}^0$是对角矩阵，其对角元素均为$w_0$。</p><p>由于$\mathbf{Q}^T \mathbf{Q}$独立于u，因此，它可以被预先计算好。</p><p>Element-wise ALS</p><p>令$\hat r_{ui} = \hat r_{ui}^f + p_{uf} q_{if}$，则公式（2）可重写为<br>$$<br>L = \sum_{u=1}^M \sum_{i=1}^N w_{ui} (r_{ui} - \hat r_{ui}^f - p_{uf} q_{if})^2 +<br>\lambda (<br>    \sum_{u=1}^M \left \Vert \mathbf{p}_u \right \Vert^2 +<br>    \sum_{i=1}^N \left \Vert \mathbf{q}_i \right \Vert^2<br>)<br>$$<br>L对$p_{uf}$的的偏导数：<br>$$<br>\frac{ \partial L }{ \partial p_{uf} } = -2 \sum_{i=1}^N  (r_{ui} - \hat r_{ui}^f - p_{uf} q_{if}) w_{ui} q_{if} + 2 \lambda p_{uf}<br>$$<br>令$\frac{ \partial L }{ \partial p_{uf} } = 0$，得到$p_{uf}$的解：<br>$$<br>p_{uf} = \frac{<br>    \sum_{i=1}^N (r_{ui} - \hat r_{ui}^f) w_{ui} q_{if}<br>}{<br>    \sum_{i=1}^N w_{ui} q_{if}^2 + \lambda<br>} \tag{5}<br>$$<br>相似地，我们可以得到$q_{if}$的解：<br>$$<br>q_{if} = \frac{<br>    \sum_{u=1}^M (r_{ui} - \hat r_{ui}^f) w_{ui} p_{uf}<br>}{<br>    \sum_{u=1}^M w_{ui} p_{uf}^2 + \lambda<br>} \tag{6}<br>$$</p><p>$$<br>L = \sum_{(u,i) \in \mathcal{R}} w_{ui} (r_{ui} - \hat r_{ui})^2 +<br>\sum_{u=1}^M \sum_{i \notin \mathcal{R}_u} c_i \hat r_{ui}^2 + \\<br>\lambda (<br>    \sum_{u=1}^M \left \Vert \mathbf{p}_u \right \Vert^2 +<br>    \sum_{i=1}^N \left \Vert \mathbf{q}_i \right \Vert^2<br>) \tag{7}<br>$$<br>其中，$c_i$是负反馈的置信度。<br>$$<br>c_i = c_0 \frac{ f_i^\alpha }{ \sum_{j=1}^N f_i^\alpha } \tag{8}<br>$$<br>其中，$c_0$决定缺失数据的全局权重；$f_i$表示物品i的流行度。<br>$$<br>f_i = \frac{<br>    \left \vert \mathcal{R}_i \right \vert<br>}{<br>    \sum_{j=1}^N \left \vert \mathcal{R}_j \right \vert<br>}<br>$$<br>此时，<br>$$<br>p_{uf} = \frac{<br>    \sum_{i \in \mathcal{R}_u } (r_{ui} - \hat r_{ui}^f) w_{ui} q_{if} -<br>    \sum_{i \notin \mathcal{R}_u } \hat r_{ui}^f c_i q_{if}<br>}{<br>    \sum_{i \in \mathcal{R}_u } + \sum_{i \notin \mathcal{R}_u } c_i q_{if}^2 + \lambda<br>} \tag{I}<br>$$<br>上式的计算瓶颈在于缺失数据项的相加</p><p>首先考虑分子：<br>$$<br>\begin{align}<br>\sum_{i \notin \mathcal{R}_u } \hat r_{ui}^f c_i q_{if}<br>&amp;= \sum_{i=1}^N \hat r_{ui}^f c_i q_{if} - \sum_{i \in \mathcal{R}_u } \hat r_{ui}^f c_i q_{if} \\<br>&amp;= \sum_{i=1}^N c_i q_{if} \sum_{k \neq f} p_{uk} q_{ik} - \sum_{i \in \mathcal{R}_u } \hat r_{ui}^f c_i q_{if} \\<br>&amp;= \sum_{k \neq f} p_{uk} \sum_{i=1}^N c_i q_{if} q_{ik} - \sum_{i \in \mathcal{R}_u } \hat r_{ui}^f c_i q_{if}<br>\end{align} \tag{9}<br>$$<br>可以看到，上式主要的计算部分$\sum_{i=1}^N c_i q_{if} q_{ik}$独立于u。</p><p>令$\mathbf{S}^q = \sum_{i=1}^N c_i \mathbf{q}_i \mathbf{q}_i^T$</p><p>则<br>$$<br>\sum_{i \notin \mathcal{R}_u } \hat r_{ui}^f c_i q_{if} = \sum_{k \neq f} p_{uk} s_{kf}^q  - \sum_{i \in \mathcal{R}_u } \hat r_{ui}^f c_i q_{if} \tag{10}<br>$$</p><p>相似地，分母中<br>$$<br>\begin{align}<br>\sum_{ i \notin \mathcal{R}_u } c_i q_{if}^2<br>&amp;= \sum_{i=1}^N c_i q_{if}^2 - \sum_{i \in \mathcal{R}_u } c_i q_{if}^2 \\<br>&amp;= s_{ff}^q  - \sum_{i \in \mathcal{R}_u } c_i q_{if}^2<br>\end{align} \tag{11}<br>$$<br>由式（I）、（10）以及（11）可得：<br>$$<br>p_{uf} = \frac{<br>    \sum_{i \in \mathcal{R}_u } [ w_{ui} r_{ui} - (w_{ui} - c_i)\hat r_{ui}^f ] q_{if} -<br>    \sum_{k \neq f} p_{uk} s_{kf}^q<br>}{<br>    \sum_{i \in \mathcal{R}_u } (w_{ui} - c_i) q_{if}^2 + s_{ff}^q + \lambda<br>} \tag{12}<br>$$<br>类似地可以得到<br>$$<br>q_{if} = \frac{<br>    \sum_{u \in \mathcal{R}_i } [ w_{ui} r_{ui} - (w_{ui} - c_i)\hat r_{ui}^f ] p_{uf} -<br>    c_i \sum_{k \neq f} q_{ik} s_{kf}^p<br>}{<br>    \sum_{u \in \mathcal{R}_i } (w_{ui} - c_i) p_{uf}^2 + c_i s_{ff}^p + \lambda<br>} \tag{12}<br>$$<br>其中，$\mathbf{S}^p = \mathbf{P}^T \mathbf{P}$</p><p>$$<br>\begin{align}<br>\sum_{u=1}^M \sum_{i=1}^N c_i \hat r_{ui}^2<br>&amp;= \sum_{u=1}^M \sum_{i=1}^N c_i (\mathbf{p}_u^T \mathbf{q}_i)(\mathbf{q}_i^T \mathbf{p}_u) \\<br>&amp;= \sum_{u=1}^M \mathbf{p}_u^T \sum_{i=1}^N (c_i \mathbf{q}_i \mathbf{q}_i^T) \mathbf{p}_u \\<br>&amp;= \sum_{u=1}^M \mathbf{p}_u^T \mathbf{S}^q \mathbf{p}_u<br>\end{align}<br>$$<br>因此，式（7）目标函数中<br>$$<br>\begin{align}<br>\sum_{u=1}^M \sum_{i \notin \mathcal{R}_u} c_i \hat r_{ui}^2<br>&amp;= \sum_{u=1}^M \sum_{i=1}^N c_i \hat r_{ui}^2 -<br>\sum_{u=1}^M \sum_{i \in \mathcal{R}_u} c_i \hat r_{ui}^2  \\<br>&amp;= \sum_{u=1}^M \mathbf{p}_u^T \mathbf{S}^q \mathbf{p}_u -<br>\sum_{(u,i) \in \mathcal{R}} c_i \hat r_{ui}^2<br>\end{align}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Deep Neural Networks for YouTube Recommendations</title>
      <link href="/2019/12/02/recommender-system-youtube-dnn/"/>
      <url>/2019/12/02/recommender-system-youtube-dnn/</url>
      
        <content type="html"><![CDATA[<p>深度学习在工业界推荐系统中的典型实例。</p><a id="more"></a><h3 id="YouTube推荐系统架构"><a href="#YouTube推荐系统架构" class="headerlink" title="YouTube推荐系统架构"></a>YouTube推荐系统架构</h3><p><img src="/static/images/youtube-dnn-overview.png" alt="System architecture"></p><p>第一阶段：candidate generation model。从数百万的视频库中筛选出数百的候选项。</p><p>第二阶段：ranking model。对数百候选视频进行排序。</p><h3 id="Candidate-generation"><a href="#Candidate-generation" class="headerlink" title="Candidate generation"></a>Candidate generation</h3><p><img src="/static/images/youtube-dnn-candidate-generation.png" alt="Deep candidate generation model"></p><p>候选生成模型利用了用户的观看历史、搜索历史、人口统计学特征以及简单的二元和连续特征（如性别、视频存在的时间等）。</p><p>平均池化。</p><p>候选生成模型使用用户最近一次的观看作为测试集，而没有采用传统的随机留一法（random hold-out）。因为随机留一法泄露了未来的信息，忽略了那些不对称的消费模式。</p><p>候选生成模型的网络结构遵循常见的塔型结构，即网络的底部最宽，之后每个隐含层的单元数量减半。</p><h3 id="Ranking"><a href="#Ranking" class="headerlink" title="Ranking"></a>Ranking</h3><p><img src="/static/images/youtube-dnn-rank.png" alt="Deep rank model"></p><p>深度排序模型利用了更多的特征，如</p><p>目标：预测预期的观看时长。</p><p>深度排序模型使用加权logistic回归作为输出层的激活函数。正样本的权重为观看时长，而负样本的权重为1。</p><p>一个事件的几率（odds）是指该事件发生的概率与该事件不发生的概率的比值。</p><p>如果事件发生的概率为p，那么该事件的几率为$\frac{p}{1-p}$，该事件的对数几率或logit函数为：<br>$$<br>\ln (odds) = \ln \frac{p}{1 - p}<br>$$<br>logistic回归模型：<br>$$<br>P(Y=1|x) = \frac{1}{1 + e^{-(Wx+b)}}<br>$$<br>Y=1的对数几率为：<br>$$<br>\ln odds = \ln \frac{P(Y=1|x)}{1-P(Y=1|x)} = Wx + b<br>$$<br>对两边进行变换，可以得到：<br>$$<br>odds = \frac{p}{1-p} = e^{W x + b}<br>$$<br>采用加权logistic回归，视频i被观看的几率为<br>$$<br>\mathrm{odds(i)} = \frac{<br>    T_i p<br>}{<br>    1 - T_i p<br>}<br>= \frac{<br>    E(T_i)<br>}{<br>    1 - T_i p<br>}<br>$$<br>其中，p是样本i被点击的概率，$T_i$表示样本i的观看时长，$E(T_i)$是样本i观看时长的期望。</p><p>假定$T_i p$很小，根据泰勒公式<br>$$<br>\frac{1} {1-x} = 1 + x + O(x^2)<br>$$<br>从而：<br>$$<br>\begin{align}<br>\mathrm{odds(i)}<br>&amp;\approx E(T_i) (1 + T_i p) \\<br>&amp;\overset{p\ is\ small}{\approx} E(T_i)<br>\end{align}<br>$$<br>由于p很小，因此，odds(i)近似等于$E(T_i)$。</p><p>在serving阶段，使用指数函数$e^{Wx+b}$作为最终的激活函数，得到的结果就是预期的观看时长。</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之查看文件内容</title>
      <link href="/2019/12/01/linux-view-file-content/"/>
      <url>/2019/12/01/linux-view-file-content/</url>
      
        <content type="html"><![CDATA[<p>Linux中查看文件内容的常用命令有head、tail、cat、tac、more以及less。</p><a id="more"></a><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>head – display first lines of a file</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head [-n count | -c bytes] [file ...]</span><br></pre></td></tr></table></figure><ul><li>-n：显示文件的前n行。n默认为10。</li><li>-c：显示文件的前c个字节。n默认为为10。</li></ul><p>不带参数的head等价于<code>head -n 10</code>。</p><p>如果指定了多个文件，则每个文件前面都有一个由字符串“ ==&gt; XXX &lt;== ”组成的标头，其中XXX是文件名称。</p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>tail – display the last part of a file</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail [-F | -f | -r] [-q] [-b number | -c number | -n number] [file ...]</span><br></pre></td></tr></table></figure><ul><li>-b：显示文件的后number个512字节块。</li><li>-c：显示文件的后number个字节。</li><li>-n：显示文件的后number行</li><li>-q：不显示文件名称。</li><li>-r：按照从后往前的顺序输出。</li></ul><p>如果指定了多个文件，则每个文件前面都有一个由字符串“ ==&gt; XXX &lt;== ”组成的标头，其中XXX是文件名称。</p><p>如果指定了-q参数，则不会输出由字符串“ ==&gt; XXX &lt;== ”组成的标头。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>拼接文件并打印到屏幕上。</p><p>选项</p><ul><li>-n：显示行号</li></ul><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>与cat相比，tac按照相反的顺序打印文件内容。</p><h3 id="more-less"><a href="#more-less" class="headerlink" title="more/less"></a>more/less</h3><p>more只能向前移动↓。</p><p>与more相比，less支持向前移动↓和向后移动↑两种查看方式。</p><p>/pattern：从第一行向前搜索↓包含pattern的内容</p><p>?pattern：从最后一行向后搜索↑包含pattern的内容</p><p>q：退出</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之wc命令</title>
      <link href="/2019/11/30/linux-command-wc/"/>
      <url>/2019/11/30/linux-command-wc/</url>
      
        <content type="html"><![CDATA[<p>wc：word, line, character, and byte count</p><a id="more"></a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [-clmw] [file ...]</span><br></pre></td></tr></table></figure><ul><li>c：byte，统计字节数。该选项会取消它前面的m。当采用uft-8编码时，一个汉字占用三个字节。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hgs:Desktop hegongshan$ cat test.txt </span><br><span class="line">My name is He Gongshan.<span class="comment"># 24个字节</span></span><br><span class="line">湖北 武汉 <span class="comment"># 4个汉字占用12个字节，空格和换行2个字节</span></span><br><span class="line">hgs:Desktop hegongshan$ wc -c test.txt </span><br><span class="line">      38 test.txt</span><br></pre></td></tr></table></figure><ul><li>l：line，统计行数。该选项统计的是换行符。最后一个换行符之后的字符不会被统计。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hgs:Desktop hegongshan$ cat test.txt </span><br><span class="line">My name is He Gongshan.</span><br><span class="line">湖北 武汉 <span class="comment"># 末尾有换行符</span></span><br><span class="line">hgs:Desktop hegongshan$ wc -l test.txt </span><br><span class="line">       2 test.txt</span><br><span class="line">hgs:Desktop hegongshan$ cat test2.txt </span><br><span class="line">My name is He Gongshan.</span><br><span class="line">湖北 武汉hgs:Desktop hegongshan$ <span class="comment"># 末尾没有换行符</span></span><br><span class="line">hgs:Desktop hegongshan$ wc -l test2.txt </span><br><span class="line">       1 test2.txt</span><br></pre></td></tr></table></figure><ul><li>m：character，统计字符数。该选项会取消它后面的c。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hgs:Desktop hegongshan$ cat test.txt </span><br><span class="line">My name is He Gongshan. <span class="comment"># 24个字符（末尾有一个换行符）</span></span><br><span class="line">湖北 武汉 <span class="comment"># 6个字符（末尾有一个换行符）</span></span><br><span class="line">hgs:Desktop hegongshan$ wc -m test.txt </span><br><span class="line">      30 test.txt</span><br></pre></td></tr></table></figure><ul><li>w：word，统计单词数。按照英语的习惯，空格隔开算一个单词。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hgs:Desktop hegongshan$ cat test.txt </span><br><span class="line">My name is He Gongshan. <span class="comment"># 5个单词</span></span><br><span class="line">湖北 武汉 <span class="comment"># 2个单词</span></span><br><span class="line">hgs:Desktop hegongshan$ wc -w test.txt </span><br><span class="line">       7 test.txt</span><br></pre></td></tr></table></figure><p>注意，c和m不能同时使用。按照行数、单词数、字节数/字符数以及文件名的顺序输出。</p><p>默认情况，wc命令将使用c、l和w三个参数。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hgs:Desktop hegongshan$ cat test.txt</span><br><span class="line">My name is He Gongshan.</span><br><span class="line">湖北 武汉</span><br><span class="line">hgs:Desktop hegongshan$ wc test.txt</span><br><span class="line">       2       7      38 test.txt</span><br></pre></td></tr></table></figure><p>当统计多个文件时，除了输出每个文件的各项统计数据外，还将输出总共的统计数据。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hgs:Desktop hegongshan$ cat test.txt hgs.txt</span><br><span class="line">My name is He Gongshan.</span><br><span class="line">湖北 武汉</span><br><span class="line">Wuhan Hubei China</span><br><span class="line">中国</span><br><span class="line">hgs:Desktop hegongshan$ wc test.txt hgs.txt</span><br><span class="line">       2       7      38 test.txt</span><br><span class="line">       2       4      25 hgs.txt</span><br><span class="line">       4      11      63 total</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《人月神话》阅读笔记</title>
      <link href="/2019/11/29/the-mythical-man-month/"/>
      <url>/2019/11/29/the-mythical-man-month/</url>
      
        <content type="html"><![CDATA[<p>软件工程</p><a id="more"></a><h3 id="焦油坑"><a href="#焦油坑" class="headerlink" title="焦油坑"></a>焦油坑</h3><h3 id="贯彻执行"><a href="#贯彻执行" class="headerlink" title="贯彻执行"></a>贯彻执行</h3><h3 id="为什么巴比伦塔会失败"><a href="#为什么巴比伦塔会失败" class="headerlink" title="为什么巴比伦塔会失败"></a>为什么巴比伦塔会失败</h3><p>其缺乏两个方面，其一是交流；其二是交流的结果——组织。</p><p>团队如何进行相互之间的交流沟通？</p><ol><li>非正式途径。如打电话。</li><li>会议。常规项目会议。</li><li>工作手册。项目工作手册不是一篇独立的文档，它是对项目必须产出的一系列文档进行组织的一种结构。这包括目的、外部规格说明、接口说明、技术标准、内部说明和管理备忘录。</li></ol><p>交流和交流的结果——组织，是成功的关键。交流和组织的技能需要管理者仔细考虑，<strong style="color:red;">相关经验的积累和能力的提高同软件技术本身一样重要。</strong></p>]]></content>
      
      
      <categories>
          
          <category> software engineering </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software engineering </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python集合（set）</title>
      <link href="/2019/11/28/python-set/"/>
      <url>/2019/11/28/python-set/</url>
      
        <content type="html"><![CDATA[<p>set和dict类似，也是一组key的集合，但不存储value。</p><a id="more"></a><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>像dict一样，集合也可以通过构造方法或者花括号{}来创建。</p><h4 id="创建空集合"><a href="#创建空集合" class="headerlink" title="创建空集合"></a>创建空集合</h4><p>注意下面两种写法的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建空字典</span></span><br><span class="line">x = &#123;&#125;</span><br><span class="line">print(type(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建空集合</span></span><br><span class="line">x = set()</span><br><span class="line">print(type(x))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">set</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="创建非空集合"><a href="#创建非空集合" class="headerlink" title="创建非空集合"></a>创建非空集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用花括号创建集合</span></span><br><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">print(type(x), x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用构造器创建集合</span></span><br><span class="line">y = set([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">print(type(y), y)</span><br><span class="line"></span><br><span class="line">print(x == y)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class 'set'&gt; &#123;1, 2&#125;</span><br><span class="line">&lt;class 'set'&gt; &#123;1, 2&#125;</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><p>add方法每次添加一个元素到集合中。如果该元素已经在集合中，调用该方法将不会有任何效果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">test_set = set()</span><br><span class="line">test_set.add(<span class="number">1</span>)</span><br><span class="line">print(test_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加集合中已有的元素</span></span><br><span class="line">test_set.add(<span class="number">1</span>)</span><br><span class="line">print(test_set)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="使用pop"><a href="#使用pop" class="headerlink" title="使用pop"></a>使用pop</h4><p>pop方法删除并返回任意的集合元素。若集合为空，将导致KeyError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = set([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">print(x.pop())</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">print(x.pop())</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">print(x.pop())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">&#123;<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">2</span></span><br><span class="line">set()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'pop from an empty set'</span></span><br></pre></td></tr></table></figure><h4 id="删除指定元素"><a href="#删除指定元素" class="headerlink" title="删除指定元素"></a>删除指定元素</h4><p>remove方法可以删除集合中的指定元素。若该元素不在集合中，将导致KeyError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">x.remove(<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x.remove(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="number">3</span></span><br></pre></td></tr></table></figure><p>discard方法也可以删除集合中的指定元素。若该元素不在集合中，则什么也不会发生。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">x.discard(<span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x.discard(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><p>注意remove方法和discard方法的区别：若待删除的元素不在集合中，remove方法将产生KeyError；而discard方法什么也不会发生。</p><h4 id="删除所有元素"><a href="#删除所有元素" class="headerlink" title="删除所有元素"></a>删除所有元素</h4><p>clear方法可以删除集合中的所有元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x.clear()</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">set()</span><br></pre></td></tr></table></figure><h3 id="合并集合"><a href="#合并集合" class="headerlink" title="合并集合"></a>合并集合</h3><h4 id="使用union"><a href="#使用union" class="headerlink" title="使用union"></a>使用union</h4><p>union方法可以合并多个集合，并返回合并后的集合，但调用该方法的集合不会变化。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">z = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">k = x.union(y, z)</span><br><span class="line">print(k)</span><br><span class="line">print(x, y, z)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125; &#123;<span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到，调用union方法后，x本身并未发生改变，而是创建了一个新的集合。</p><h4 id="使用update"><a href="#使用update" class="headerlink" title="使用update"></a>使用update</h4><p>update方法会将其他集合合并到当前集合中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">z = &#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">x.update(y, z)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><p>可以看到，调用update后，x发生了变化。</p><h3 id="集合交"><a href="#集合交" class="headerlink" title="集合交"></a>集合交</h3><p>intersection可以求多个个集合的交集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">z = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并两个集合</span></span><br><span class="line">print(x.intersection(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并多个集合</span></span><br><span class="line">k = x.intersection(y, z)</span><br><span class="line">print(k)</span><br><span class="line"><span class="comment"># x没有被改变</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="number">3</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合差"><a href="#集合差" class="headerlink" title="集合差"></a>集合差</h3><p>difference方法可以求两个或多个集合的差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">z = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># x - y</span></span><br><span class="line">print(x.difference(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># x - y - z</span></span><br><span class="line">print(x.difference(y, z))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>&#125;</span><br><span class="line">&#123;<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="复制集合"><a href="#复制集合" class="headerlink" title="复制集合"></a>复制集合</h3><p>copy方法可以返回集合的浅拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">y = x.copy()</span><br><span class="line"></span><br><span class="line">print(y)</span><br><span class="line">print(x <span class="keyword">is</span> y)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令总结</title>
      <link href="/2019/11/25/git/"/>
      <url>/2019/11/25/git/</url>
      
        <content type="html"><![CDATA[<p>作为当前最优秀的版本控制系统（version control system），Git需要熟练掌握。</p><a id="more"></a><p>clone：从远程克隆仓库到本地</p><p>git init：初始化</p><h3 id="当前改变"><a href="#当前改变" class="headerlink" title="当前改变"></a>当前改变</h3><ol><li>add：将文件添加到索引中。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><ol><li>mv：等同于Linux中的mv命令，用于文件重命名或者移动文件。</li><li>reset：版本回退。</li><li>rm：等同于Linux中的rm命令，用于删除文件。</li></ol><p> log：查看日志信息</p><p>show</p><p>status：查看工作目录的当前状态</p><p>branch：查看仓库的分支</p><p>删除分支：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d</span><br></pre></td></tr></table></figure><p>branch -m</p><p>checkout：切换分支</p><p>checkout -b：创建一个新分支，并切换到该分支</p><p>git commit</p><ul><li>-m，–message</li></ul><p>git diff</p><p>git merge</p><p>git tag</p><ul><li><p>-d，–delete：删除标签</p></li><li><p>-l，–list：列出所有的标签</p></li></ul><p>git fetch</p><p>git pull</p><p>push：推送到远程仓库的指定版本</p><p>git remote </p><p>help：查看命令的帮助信息</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 509.斐波那契数</title>
      <link href="/2019/11/24/leetcode-509-fibonacci-number/"/>
      <url>/2019/11/24/leetcode-509-fibonacci-number/</url>
      
        <content type="html"><![CDATA[<p>斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(0) = 0,   F(1) = 1</span><br><span class="line">F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1.</span><br></pre></td></tr></table></figure><p>给定 N，计算 F(N)。</p><a id="more"></a><p> 示例 1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：2</span><br><span class="line">输出：1</span><br><span class="line">解释：F(2) = F(1) + F(0) = 1 + 0 = 1.</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：3</span><br><span class="line">输出：2</span><br><span class="line">解释：F(3) = F(2) + F(1) = 1 + 1 = 2.</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：4</span><br><span class="line">输出：3</span><br><span class="line">解释：F(4) = F(3) + F(2) = 2 + 1 = 3.</span><br></pre></td></tr></table></figure><p>提示：0 ≤ N ≤ 30</p><h3 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="comment"># 递归</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.fib(N<span class="number">-1</span>) + self.fib(N<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><p>上述解法虽然形式简单，但时间复杂度为$O(2^n)$。</p><h3 id="方法二：动态规划"><a href="#方法二：动态规划" class="headerlink" title="方法二：动态规划"></a>方法二：动态规划</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">      <span class="comment"># 动态规划</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        arr = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, N+<span class="number">1</span>):</span><br><span class="line">           arr.append(arr[i<span class="number">-1</span>] + arr[i<span class="number">-2</span>])</span><br><span class="line">        <span class="keyword">return</span> arr[N]</span><br></pre></td></tr></table></figure><p>该方法的时间复杂度和空间复杂度均为O(n)。</p><p>上述方法仍可以进一步优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(self, N: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> N == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        cur = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, N+<span class="number">1</span>):</span><br><span class="line">           cur += pre</span><br><span class="line">           pre = cur - pre</span><br><span class="line">        <span class="keyword">return</span> cur</span><br></pre></td></tr></table></figure><p>此时，时间复杂度不变，空间复杂度为O(1)。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字典（dict）</title>
      <link href="/2019/11/23/python-dict/"/>
      <url>/2019/11/23/python-dict/</url>
      
        <content type="html"><![CDATA[<p>dict是Python中的标准映射类型，可以存储任意类型对象。</p><a id="more"></a><h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><p>字典可以通过将以逗号分隔的 <code>键: 值</code> 对列表包含于花括号<code>{}</code>之内来创建，也可以通过dict构造器来创建。</p><h4 id="使用花括号"><a href="#使用花括号" class="headerlink" title="使用花括号{}"></a>使用花括号{}</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空字典</span></span><br><span class="line">test_dict = &#123;&#125;</span><br><span class="line">print(test_dict)</span><br><span class="line">print(type(test_dict))</span><br><span class="line"></span><br><span class="line">test_dict2 = &#123;<span class="string">'date'</span>: <span class="number">2019</span>, <span class="number">12</span>: <span class="number">2020</span>&#125;</span><br><span class="line">print(test_dict2)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></span><br><span class="line">&#123;'date': 2019, 12: 2020&#125;</span><br></pre></td></tr></table></figure><h4 id="使用dict构造器"><a href="#使用dict构造器" class="headerlink" title="使用dict构造器"></a>使用dict构造器</h4><p>字典dict类有四个初始化方法，函数原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空字典</span></span><br><span class="line">dict()</span><br><span class="line"><span class="comment"># 使用映射对象创建字典</span></span><br><span class="line">dict(mapping)</span><br><span class="line"><span class="comment"># 使用iterable对象创建字典</span></span><br><span class="line">dict(iterable)</span><br><span class="line"><span class="comment"># 使用键值对创建字典</span></span><br><span class="line">dict(**kwargs)</span><br></pre></td></tr></table></figure><ul><li>dict(iterable)通过如下的方式创建字典</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> iterable:</span><br><span class="line">d[k] = v</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test_dict1 = dict()</span><br><span class="line"><span class="comment"># 使用映射对象创建字典</span></span><br><span class="line">test_dict2 = dict(zip([<span class="string">'name'</span>,<span class="string">'age'</span>], [<span class="string">'gongshan'</span>,<span class="number">24</span>]))</span><br><span class="line"><span class="comment"># 使用iterable对象创建字典</span></span><br><span class="line">test_dict3 = dict([(<span class="string">'name'</span>,<span class="string">'gongshan'</span>), (<span class="string">'age'</span>,<span class="number">24</span>)])</span><br><span class="line"><span class="comment"># 使用键值对创建字典</span></span><br><span class="line">test_dict4 = dict(name=<span class="string">'gongshan'</span>, age=<span class="number">24</span>)</span><br><span class="line"></span><br><span class="line">print(test_dict1)</span><br><span class="line">print(test_dict2 == test_dict3 == test_dict4)</span><br><span class="line">print(test_dict2)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">True</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><h4 id="使用d-key"><a href="#使用d-key" class="headerlink" title="使用d[key]"></a>使用d[key]</h4><p>返回键key对应的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问元素</span></span><br><span class="line">print(test_dict[<span class="string">'name'</span>])</span><br><span class="line">print(test_dict[<span class="string">'age'</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gongshan</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><h4 id="使用get方法"><a href="#使用get方法" class="headerlink" title="使用get方法"></a>使用get方法</h4><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get(key[, default])</span><br></pre></td></tr></table></figure><p>如果键名key存在，则返回对应的值value；否则，返回default（键值对key=default不会加入字典中）。default默认为None。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line"><span class="comment"># 访问存在的键名</span></span><br><span class="line">print(test_dict.get(<span class="string">'name'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问不存在的键名，默认值为None</span></span><br><span class="line">print(test_dict.get(<span class="string">'sex'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为不存在的键名key，设置默认值</span></span><br><span class="line">print(test_dict.get(<span class="string">'sex'</span>,<span class="string">'male'</span>))</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gongshan</span><br><span class="line"></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">male</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="使用setdefault方法"><a href="#使用setdefault方法" class="headerlink" title="使用setdefault方法"></a>使用setdefault方法</h4><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setdefault(key[, default])</span><br></pre></td></tr></table></figure><p>如果键key存在，则返回其值；否则，插入值为default的键key，并返回default。default默认为None。</p><p><strong>setdefault方法和get方法的不同之处</strong>：setdefault方法会将不存在的键key及其值default插入字典中，而get方法并不会。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line"><span class="comment"># 键存在</span></span><br><span class="line">value = test_dict.setdefault(<span class="string">'name'</span>)</span><br><span class="line">print(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键不存在</span></span><br><span class="line">value = test_dict.setdefault(<span class="string">'sex'</span>)</span><br><span class="line">print(value)</span><br><span class="line">print(test_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 键不存在，但设置了默认值</span></span><br><span class="line">value = test_dict.setdefault(<span class="string">'address'</span>,<span class="string">'wuhan'</span>)</span><br><span class="line">print(value)</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gongshan</span><br><span class="line"></span><br><span class="line"><span class="keyword">None</span></span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">wuhan</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>, <span class="string">'sex'</span>: <span class="keyword">None</span>, <span class="string">'address'</span>: <span class="string">'wuhan'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="添加-修改元素"><a href="#添加-修改元素" class="headerlink" title="添加/修改元素"></a>添加/修改元素</h3><p>使用如下的语法添加/修改字典的元素：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字典[键] = 值</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(test_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素</span></span><br><span class="line">test_dict[<span class="string">'sex'</span>] = <span class="string">'male'</span></span><br><span class="line">print(test_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改name的值</span></span><br><span class="line">test_dict[<span class="string">'name'</span>] = <span class="string">'Gongshan He'</span></span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'Gongshan He'</span>, <span class="string">'age'</span>: <span class="number">24</span>, <span class="string">'sex'</span>: <span class="string">'male'</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="使用关键字del"><a href="#使用关键字del" class="headerlink" title="使用关键字del"></a>使用关键字del</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(test_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除键名为name的元素</span></span><br><span class="line"><span class="keyword">del</span> test_dict[<span class="string">'name'</span>]</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">&#123;<span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="使用pop方法"><a href="#使用pop方法" class="headerlink" title="使用pop方法"></a>使用pop方法</h4><p>函数原型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># d是一个可选的位置参数</span></span><br><span class="line">pop(self, k, d=<span class="keyword">None</span>):</span><br></pre></td></tr></table></figure><p>如果键key在字典中，则将其删除并返回其值；否则，返回d。如果d未给出且key不存在，则会引发KeyError。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line"><span class="comment"># 删除name</span></span><br><span class="line">value = test_dict.pop(<span class="string">'name'</span>)</span><br><span class="line">print(test_dict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个不存在的键</span></span><br><span class="line">test_dict.pop(<span class="string">'sex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一个不存在的键，并指明default</span></span><br><span class="line">value = test_dict.pop(<span class="string">'sex'</span>, <span class="string">'male'</span>)</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'sex'</span></span><br><span class="line">male</span><br></pre></td></tr></table></figure><h4 id="使用popitem方法"><a href="#使用popitem方法" class="headerlink" title="使用popitem方法"></a>使用popitem方法</h4><p>从字典中删除并返回一个<code>(键，值)</code>。删除时，遵循后进先出（LIFO）的顺序。如果字典为空，则会引发KeyError。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(test_dict.popitem())</span><br><span class="line">print(test_dict.popitem())</span><br><span class="line">print(test_dict.popitem())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">'age'</span>, <span class="number">24</span>)</span><br><span class="line">(<span class="string">'name'</span>, <span class="string">'gongshan'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'popitem(): dictionary is empty'</span></span><br></pre></td></tr></table></figure><h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><h4 id="遍历字典中的键"><a href="#遍历字典中的键" class="headerlink" title="遍历字典中的键"></a>遍历字典中的键</h4><p>如果只想遍历字典的键，使用dict的keys方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(test_dict.keys())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> test_dict.keys():</span><br><span class="line">  print(k)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_keys([<span class="string">'name'</span>, <span class="string">'age'</span>])</span><br><span class="line">name</span><br><span class="line">age</span><br></pre></td></tr></table></figure><h4 id="遍历字典中的值"><a href="#遍历字典中的值" class="headerlink" title="遍历字典中的值"></a>遍历字典中的值</h4><p>如果只想遍历字典的键，使用dict的values方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(test_dict.values())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> test_dict.values():</span><br><span class="line">  print(v)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_values([<span class="string">'gongshan'</span>, <span class="number">24</span>])</span><br><span class="line">gongshan</span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure><h4 id="遍历字典中的-键-值-对"><a href="#遍历字典中的-键-值-对" class="headerlink" title="遍历字典中的(键,值)对"></a>遍历字典中的(键,值)对</h4><p>如果想要遍历字典中的(键,值)对，可以使用dict的values方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(test_dict.items())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> test_dict.items():</span><br><span class="line">  print(k,v)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict_items([(<span class="string">'name'</span>, <span class="string">'gongshan'</span>), (<span class="string">'age'</span>, <span class="number">24</span>)])</span><br><span class="line">name gongshan</span><br><span class="line">age <span class="number">24</span></span><br></pre></td></tr></table></figure><h3 id="复制字典"><a href="#复制字典" class="headerlink" title="复制字典"></a>复制字典</h3><p>dict的copy方法，可以返回原字典的浅拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">test_dict2 = test_dict.copy()</span><br><span class="line"></span><br><span class="line">print(test_dict2)</span><br><span class="line">print(test_dict <span class="keyword">is</span> test_dict2)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="清空字典"><a href="#清空字典" class="headerlink" title="清空字典"></a>清空字典</h3><p>dict的clear方法，可以删除字典中的所有元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">test_dict.clear()</span><br><span class="line">print(test_dict)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="判断字典是否为空"><a href="#判断字典是否为空" class="headerlink" title="判断字典是否为空"></a>判断字典是否为空</h3><ul><li>在条件判断中，空字典表示False。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># 若为空</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> test_dict:</span><br><span class="line">  print(<span class="string">'dict is empty.'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict <span class="keyword">is</span> empty.</span><br></pre></td></tr></table></figure><ul><li>判断长度是否为0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># 若为空</span></span><br><span class="line"><span class="keyword">if</span> len(test_dict) == <span class="number">0</span>:</span><br><span class="line">  print(<span class="string">'dict is empty.'</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict <span class="keyword">is</span> empty.</span><br></pre></td></tr></table></figure><h3 id="判断键是否在字典中"><a href="#判断键是否在字典中" class="headerlink" title="判断键是否在字典中"></a>判断键是否在字典中</h3><p>使用<code>key in dict</code>语法，可以判断key是否在dict中。如果key在dict中，则返回True；否则，返回False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">'name'</span>: <span class="string">'gongshan'</span>, <span class="string">'age'</span>: <span class="number">24</span>&#125;</span><br><span class="line">print(<span class="string">'sex'</span> <span class="keyword">in</span> test_dict)</span><br><span class="line">print(<span class="string">'sex'</span> <span class="keyword">not</span> <span class="keyword">in</span> test_dict)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统相关资源</title>
      <link href="/2019/11/21/recommender-system-resource/"/>
      <url>/2019/11/21/recommender-system-resource/</url>
      
        <content type="html"><![CDATA[<p>SIGIR 2020-01-15</p><p>IJCAI 2020-01-15</p><p>ICWE 2020-01-19</p><p>ICML 截稿时间 2020-01-31</p><p>KDD 截稿时间 2020-02-13</p><p>ECML-PKDD 2020-03-19</p><a id="more"></a><h3 id="相关会议"><a href="#相关会议" class="headerlink" title="相关会议"></a>相关会议</h3><h4 id="推荐系统专会"><a href="#推荐系统专会" class="headerlink" title="推荐系统专会"></a>推荐系统专会</h4><p><a href="https://recsys.acm.org" target="_blank" rel="noopener">RecSys</a> - ACM Conference on Recommender Systems</p><h4 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><p>CCF A</p><ol><li><p><strong>SIGKDD</strong> -  ACM Knowledge Discovery and Data Mining <a href="http://dblp.uni-trier.de/db/conf/kdd/" target="_blank" rel="noopener">dblp</a></p></li><li><p><strong>ICDE</strong>  - IEEE International Conference on Data Engineering <a href="http://dblp.uni-trier.de/db/conf/icde/" target="_blank" rel="noopener">dblp</a></p></li><li><p><strong>SIGIR</strong> - International Conference on Research on Development in Information Retrieval <a href="http://dblp.uni-trier.de/db/conf/sigir/" target="_blank" rel="noopener">dblp</a></p></li></ol><p>CCF B</p><ol><li><p><strong>CIKM</strong> - ACM International Conference on Information and Knowledge Management <a href="http://dblp.uni-trier.de/db/conf/cikm/" target="_blank" rel="noopener">dblp</a></p></li><li><p><strong>WSDM</strong> - ACM International Conference on Web Search and Data Mining <a href="http://dblp.uni-trier.de/db/conf/wsdm/" target="_blank" rel="noopener">dblp</a></p></li><li><strong>ICDM</strong> - International Conference on Data Mining <a href="http://dblp.uni-trier.de/db/conf/icdm/" target="_blank" rel="noopener">dblp</a></li><li><strong>SDM</strong> - SIAM International Conference on Data Mining <a href="http://dblp.uni-trier.de/db/conf/sdm/" target="_blank" rel="noopener">dblp</a></li></ol><h4 id="人工智能"><a href="#人工智能" class="headerlink" title="人工智能"></a>人工智能</h4><p>CCF A</p><ol><li><strong>AAAI</strong> - AAAI Conference on Artificial Intelligence <a href="http://dblp.uni-trier.de/db/conf/aaai/" target="_blank" rel="noopener">dblp</a></li><li><strong>NeurIPS</strong> - Annual Conference on Neural Information Processing Systems <a href="http://dblp.uni-trier.de/db/conf/nips/" target="_blank" rel="noopener">dblp</a></li><li><strong>IJCAI</strong> - International Joint Conference on Artificial Intelligence <a href="http://dblp.uni-trier.de/db/conf/ijcai/" target="_blank" rel="noopener">dblp</a></li></ol><p>CCF B</p><ol><li><strong>UAI</strong> - International Conference on Uncertainty in Artificial Intelligence <a href="http://dblp.uni-trier.de/db/conf/uai/" target="_blank" rel="noopener">dblp</a></li></ol><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><p>CCF A</p><ol><li><strong>WWW</strong> - International World Wide Web Conferences <a href="http://dblp.uni-trier.de/db/conf/www/" target="_blank" rel="noopener">dblp</a></li></ol><h3 id="相关期刊"><a href="#相关期刊" class="headerlink" title="相关期刊"></a>相关期刊</h3><h4 id="数据挖掘-1"><a href="#数据挖掘-1" class="headerlink" title="数据挖掘"></a>数据挖掘</h4><p>CCF A</p><ol><li><strong>TOIS</strong> - ACM Transactions on Information Systems <a href="http://dblp.uni-trier.de/db/journals/tois/" target="_blank" rel="noopener">dblp</a></li><li><strong>TKDE</strong> - IEEE Transactions on Knowledge and Data Engineering <a href="http://dblp.uni-trier.de/db/journals/tkde/" target="_blank" rel="noopener">dblp</a></li></ol><h3 id="会议时间"><a href="#会议时间" class="headerlink" title="会议时间"></a>会议时间</h3><p>Conference Partner (会伴) </p><p>CCF会议 <a href="https://www.myhuiban.com/conferences/ccf" target="_blank" rel="noopener">https://www.myhuiban.com/conferences/ccf</a></p><p>在线查看各个会议的截稿时间</p><h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><ul><li>MovieLens <a href="https://grouplens.org/datasets/movielens/" target="_blank" rel="noopener">https://grouplens.org/datasets/movielens/</a></li><li>Last.fm <a href="https://grouplens.org/datasets/hetrec-2011/" target="_blank" rel="noopener">https://grouplens.org/datasets/hetrec-2011/</a></li><li>Pinterest <a href="https://sites.google.com/site/xueatalphabeta/academic-projects" target="_blank" rel="noopener">https://sites.google.com/site/xueatalphabeta/academic-projects</a></li><li>Amazon <a href="http://jmcauley.ucsd.edu/data/amazon/" target="_blank" rel="noopener">http://jmcauley.ucsd.edu/data/amazon/</a></li><li>Netflix <a href="https://www.kaggle.com/netflix-inc/netflix-prize-data" target="_blank" rel="noopener">https://www.kaggle.com/netflix-inc/netflix-prize-data</a></li></ul><h3 id="相关工具-仓库"><a href="#相关工具-仓库" class="headerlink" title="相关工具/仓库"></a>相关工具/仓库</h3><ul><li><a href="https://github.com/guoguibing/librec" target="_blank" rel="noopener">LibRec</a>: A Leading Java Library for Recommender Systems </li><li>Best practice <a href="https://github.com/microsoft/recommenders" target="_blank" rel="noopener">https://github.com/microsoft/recommenders</a></li><li>Must-read papers <a href="https://github.com/hongleizhang/RSPapers" target="_blank" rel="noopener">https://github.com/hongleizhang/RSPapers</a></li><li>Classic papers <a href="https://github.com/wzhe06/Reco-papers" target="_blank" rel="noopener">https://github.com/wzhe06/Reco-papers</a></li></ul><h3 id="相关学者"><a href="#相关学者" class="headerlink" title="相关学者"></a>相关学者</h3><ul><li>何向南 <a href="http://staff.ustc.edu.cn/~hexn/" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~hexn/</a></li><li>郭贵冰 <a href="https://guoguibing.github.io" target="_blank" rel="noopener">https://guoguibing.github.io</a></li><li>王灏 <a href="http://www.wanghao.in" target="_blank" rel="noopener">http://www.wanghao.in</a></li></ul><h3 id="相关书籍"><a href="#相关书籍" class="headerlink" title="相关书籍"></a>相关书籍</h3><ul><li><p>《推荐系统实践》，人民邮电出版社</p></li><li><p>《Recommender Systems Handbook》（推荐系统 技术、评估及高效算法，机械工业出版社）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Wide &amp; Deep Learning for Recommender Systems</title>
      <link href="/2019/11/20/recommender-system-wide&amp;deep/"/>
      <url>/2019/11/20/recommender-system-wide&amp;deep/</url>
      
        <content type="html"><![CDATA[<p>Memorization</p><p>Generalization</p><p>impression feature</p><p>cross-product transformation</p><blockquote><p>Memorization can be loosely defined as learning the frequent co-occurrence of items or features and exploiting the correlation available in the historical data. Generalization, on the other hand, is based on transitivity of correlation and explores new feature combinations that have never or rarely occurred in the past. </p></blockquote><h3 id="Wide-amp-Deep-Learning"><a href="#Wide-amp-Deep-Learning" class="headerlink" title="Wide &amp; Deep Learning"></a>Wide &amp; Deep Learning</h3><h4 id="Wide"><a href="#Wide" class="headerlink" title="Wide"></a>Wide</h4><p>$$<br>y = \mathbf{w}^T \mathbf{x} + b<br>$$</p><p>其中，$\mathbf{x} = [x_1,x_2,\cdots,x_d]$</p><p>既包含原始特征，又包含转换特征。<br>$$<br>\phi_k(\mathbf{x}) = \prod_{i=1}^d x_i^{c_{ki}} \quad  c_{ki} \in \{ 0,1 \}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVD++</title>
      <link href="/2019/11/18/recommender-system-svdplusplus/"/>
      <url>/2019/11/18/recommender-system-svdplusplus/</url>
      
        <content type="html"><![CDATA[<!--$\mathcal{K} = \\{ (u,i) | r_{ui}\ is\ known \\}$### 基准估计$$b_{ui} = \mu + b_u + b_i \tag{1}$$目标函数$$\min_{b*} \sum_{(u,i) \in \mathcal{K}} (r_{ui} - \mu - b_u - b_i)^2 + \lambda_1 (\sum_u b_u^2 + \sum_i b_i^2) \tag{2}$$### Neighborhood models常用的相似度计算方法是皮尔逊相关系数（Pearson Correlation Coefficient）。$$\rho_{ij} = \frac{    \sum_{u \in U} (r_{ui} - \bar{r_i}) (r_{uj} - \bar{r_j})}{    \sqrt {        \sum_{u \in U} (r_{ui} - \bar{r_i})^2    }    \sqrt {        \sum_{u \in U} (r_{uj} - \bar{r_j})^2    }} \tag{3}$$由于具有较大用户支持度的相似度更可信，因此，合适的相似度如下：$$s_{ij} \overset{def}{=} \frac{    n_{ij}}{    n_{ij} + \lambda} \rho_{ij} \tag{4}$$其中，$n_{ij}$表示同时评价过物品i和j的用户数量。$S^k (i;u)$表示用户u评价过的、与物品i最相似的k个物品的集合。$$\hat r_{ui} = b_{ui} + \frac{    \sum_{j \in S^k(i;u)} s_{ij} (r_{uj} - b_{uj})}{    \sum_{j \in S^k(i;u)} s_{ij}} \tag{5}$$但该模型存在一些问题，如插值权重的和为1，将迫使该方法完全依赖于邻域，即使是在邻域信息缺失的情况下（用户u没有评价过与i相似的物品）。为了解决这些问题，作者提出了一种更加准确的邻域模型：$$\hat r_{ui} = b_{ui} + \sum_{j \in S^k (i;u)} \theta_{ij}^u (r_{uj} - b_{uj}) \tag{6}$$其中，$\\{ \theta_{ij}^u | j \in S^k (i;u) \\}$是插值权重（interpolation weights）。--><p>SVD++源自于Koren在2008年发表在KDD上Factorization Meets the Neighborhood: a Multifaceted Collaborative Filtering Model一文。</p><h3 id="SVD"><a href="#SVD" class="headerlink" title="SVD++"></a>SVD++</h3><p>$$<br>\hat r_{ui} = b_{ui} + q_i^T<br>\left(<br>  p_u +<br>  \left \vert N(u) \right \vert^{-\frac{1}{2}} \sum_{j \in N(u)} y_j<br>\right) \tag{7}<br>$$</p><p>其中，$p_u$从显式评分中学习，$\left \vert N(u) \right \vert^{-\frac{1}{2}} \sum_{j \in N(u)} y_j $从隐式反馈的角度来考虑，二者互相补充。</p><p>在SVD++中，用户被表示为$\left( p_u + \left \vert N(u) \right \vert^{-\frac{1}{2}}<br>\sum_{j \in N(u)} y_j \right)。$</p><p><a href="https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/rating/SVDPlusPlusRecommender.java" target="_blank" rel="noopener">https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/rating/SVDPlusPlusRecommender.java</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Collaborative Denoising Auto-Encoders for Top-N Recommender Systems</title>
      <link href="/2019/11/13/recommender-system-cdae/"/>
      <url>/2019/11/13/recommender-system-cdae/</url>
      
        <content type="html"><![CDATA[<h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>Y. Wu, C. DuBois, A. X. Zheng, and M. Ester.Collaborative denoising auto-encoders for top-n recommender systems. In WSDM, pages 153–162, 2016.</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Deep Item-based Collaborative Filtering for Top-N Recommendation</title>
      <link href="/2019/11/13/recommender-system-deepicf/"/>
      <url>/2019/11/13/recommender-system-deepicf/</url>
      
        <content type="html"><![CDATA[<p>作者提出了基于深度神经网络的item-based CF（DeepICF），同时学习物品之间的二元关系和高层关系。</p><a id="more"></a><h3 id="DeepICF"><a href="#DeepICF" class="headerlink" title="DeepICF"></a>DeepICF</h3><p><img src="/static/images/deepicf.png" alt="DeepICF"></p><h4 id="Input-amp-Embedding-Layer"><a href="#Input-amp-Embedding-Layer" class="headerlink" title="Input &amp; Embedding Layer"></a>Input &amp; Embedding Layer</h4><p>对于目标物品i，使用其ID表示它，然后将其转换为embedding向量$\mathbf{p}_i \in \mathbb{R}^k$，k表示embedding size。</p><p>对于用户u，使用其交互过的物品$\mathcal{R}_u^+$的ID表示它。</p><p>然后，将用户u的每一个历史物品$j \in \mathcal{R}_u^+$，转换为embedding向量$\mathbf{q}_j \in \mathbb{R}^k$。</p><h4 id="Pairwise-Interaction-Layer"><a href="#Pairwise-Interaction-Layer" class="headerlink" title="Pairwise Interaction Layer"></a>Pairwise Interaction Layer</h4><p>作者使用逐元素相乘来捕获物品之间的二元关系。</p><p>该层的输出结果：$\mathcal{V}_{ui} = \{ \mathbf{q}_j \odot \mathbf{p}_i | j \in \mathcal{R^+_u} \setminus i \}$</p><h4 id="Pooling-Layer"><a href="#Pooling-Layer" class="headerlink" title="Pooling Layer"></a>Pooling Layer</h4><p>由于不同用户的历史物品数量并不相同，因此，pairwise interaction层的输出大小会发生变化。对此，作者使用池化层将其转换为固定大小的向量。</p><ul><li>方法一：加权平均池化</li></ul><p>$$<br>f_{avg}(\mathcal{V}_{ui}) = \frac{1}{<br>    \left \vert \mathcal{V}_{ui} \right \vert^\alpha<br>} \sum_{\mathbf{v} \in \mathcal{V}_{ui}} \mathbf{v}<br>= \frac{1}{<br>    (\left \vert \mathcal{R}_u^+ \right \vert - 1)^\alpha<br>} (\sum_{j \in \mathcal{R^+_u} \setminus i} \mathbf{q}_j \odot \mathbf{p}_i) \tag{1}<br>$$</p><p>其中，$\alpha$是归一化超参数。</p><p>然而，加权平均池化的不足之处在于：假定用户的历史物品对目标物品的预测贡献相同。</p><ul><li>方法二：基于attention的池化</li></ul><p>$$<br>f_{att}(\mathcal{V}_{ui}) = \frac{1}{<br>    \left \vert \mathcal{V}_{ui} \right \vert^\alpha<br>} \sum_{\mathbf{v} \in \mathcal{V}_{ui}} a(\mathbf{v}) \cdot \mathbf{v}<br>= \frac{1}{<br>    (\left \vert \mathcal{R}_u^+ \right \vert - 1)^\alpha<br>} \sum_{j \in \mathcal{R^+_u} \setminus i} a(\mathbf{q}_j \odot \mathbf{p}_i) \cdot (\mathbf{q}_j \odot \mathbf{p}_i) \tag{2}<br>$$</p><p>其中，$a(\mathbf{v})$是attention函数。</p><p>作者使用包含一个隐含层的MLP作为attention网络。</p><p><img src="/static/images/deepicf_attention_network.png" alt="Attention Network in DeepICF+a"><br>$$<br>a(\mathbf{v}) = \mathrm{softmax}^\prime (\mathbf{h}^T ReLU(\mathbf{Wv + b})) \tag{3}<br>$$<br>其中，$\mathbf{W} \in \mathbb{R}^{k^\prime \times k}$、$\mathbf{b} \in \mathbb{R}^{k^\prime}$分别表示attention网络的权重矩阵和偏差向量；$k^\prime$表示隐含层的大小；</p><p>$\mathbf{h } \in \mathbb{R}^{k^\prime}$表示attention网络输出层的权重；</p><p>$\mathrm{softmax}^\prime$是softmax函数的变体：<br>$$<br>\mathrm{softmax}^\prime (a(\mathbf{v})) = \frac{<br>    \exp a(\mathbf{v})<br>}{<br>    [\sum_{\mathbf{v} \in \mathcal{V}_{ui}} \exp a(\mathbf{v})]^\beta<br>} \tag{4}<br>$$<br>其中，$\beta$是平滑指数。</p><p><img src="/static/images/deepicf+a.png" alt="DeepICF+a"></p><h4 id="Deep-Interaction-Layer"><a href="#Deep-Interaction-Layer" class="headerlink" title="Deep Interaction Layer"></a>Deep Interaction Layer</h4><p>用$\mathbf{e}_{ui}$表示池化层的输出向量。</p><p>在池化层之上，作者提出使用MLP对物品之间的高层关系进行建模。<br>$$<br>\mathbf{e}_1 = ReLU(\mathbf{W}_1 \mathbf{e}_{ui} + \mathbf{b}_1) \\<br>\mathbf{e}_2 = ReLU(\mathbf{W}_2 \mathbf{e}_1  + \mathbf{b}_2) \\<br>\dots \\<br>\mathbf{e}_L = ReLU(\mathbf{W}_L \mathbf{e}_{L-1}  + \mathbf{b}_L) \tag{5}<br>$$<br>其中，$\mathbf{W}_l$、$\mathbf{b}_l$和$\mathbf{e}_l$分别表示第l个隐含层的权重矩阵、偏差向量和输出向量。</p><h4 id="Prediction-Layer"><a href="#Prediction-Layer" class="headerlink" title="Prediction Layer"></a>Prediction Layer</h4><p>$$<br>\hat y_{ui} = \mathbf{z}^T \mathbf{e}_L + b_u + b_i \tag{6}<br>$$</p><p>其中，$\mathbf{z}$、$b_u$和$b_i$分别为预测层的权重向量、用户偏差和物品偏差。</p><h3 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h3><p>$$<br>\mathcal{L} = \frac{-1}{\left \vert \mathcal{R}^+\right \vert + \left \vert \mathcal{R}^-\right \vert}<br>\left [<br>\sum_{(u,i) \in \mathcal{R}^+} \log \delta(\hat y_{ui}) +<br>\sum_{(u,i) \in \mathcal{R}^-} \log ( 1 - \delta(\hat y_{ui}) )<br>\right ] +<br>\lambda \left \Vert \Theta \right \Vert^2 \tag{7}<br>$$</p><p>其中，$\delta(\cdot)$是sigmoid函数；$\mathcal{R}^+$是正样本，$\mathcal{R}^-​$是负样本。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>Deep Item-based Collaborative Filtering for Top-N Recommendation Feng Xue, Xiangnan He, Xiang Wang, Jiandong Xu, Kai Liu, &amp; Richang Hong, ACM Transactions on Information Systems (TOIS 2019). <a href="https://arxiv.org/pdf/1811.04392.pdf" target="_blank" rel="noopener">[PDF]</a>  <a href="https://github.com/linzh92/DeepICF" target="_blank" rel="noopener">[Codes]</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文中经常使用的词组</title>
      <link href="/2019/11/11/paper-phrase/"/>
      <url>/2019/11/11/paper-phrase/</url>
      
        <content type="html"><![CDATA[<p>日积月累，以备写作之需。</p><a id="more"></a><p>1.without special mention / unless stated differently / unless specified / unless otherwise stated / without additional explanation / without special declaration</p><p>2.符号表示</p><p>denote A by B，用B表示A</p><p>set A to B，将A设置为B</p><p>refer to A as B 将A称为B</p><p>replace A by B     用B替换A</p><p>to be specific / specifically</p><p>to be fair</p><p>leave … as future work</p><p>other than</p><p>take … into consideration/account</p><p>account for</p><p>provide A with B</p><p>distinguish A from B</p><p>associate A with B</p><p>relate A to B</p><p>combine A with B</p><p>replace A with B 用B代替A</p><p>be formulated as 归结为</p><p>include but are not limited to n. / doing 包括但不限于 </p><p>be limited by</p><p>notably 显著地；尤其</p><p>rely on</p><p>in addition</p><p>as a consequence 因此</p><p>to this end</p><p>notably / noticeably 显著地</p><p>namely </p><p>to our best knowledge / to the best of our knowledge 据我们所知</p><p>be prone to doing</p><p>It is worth pointing out that …</p><p>prevent … from …</p><p>for the purpose of …</p><p>as such / as a result  因此</p><p>take … as an example.</p>]]></content>
      
      
      <categories>
          
          <category> paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2张量操作</title>
      <link href="/2019/11/09/tensorflow-tensor/"/>
      <url>/2019/11/09/tensorflow-tensor/</url>
      
        <content type="html"><![CDATA[<p>本文总结了TensorFlow2中常见的张量操作。</p><a id="more"></a><ul><li>逐元素相加</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.add(x,y,name=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(tf.add(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">print(tf.add([<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(<span class="number">3</span>, shape=(), dtype=int32)</span><br><span class="line">tf.Tensor([<span class="number">4</span> <span class="number">6</span>], shape=(<span class="number">2</span>,), dtype=int32)</span><br></pre></td></tr></table></figure><ul><li>逐元素相减</li></ul><p>平方</p><p>tf.square(x,name=None)</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(tf.square(<span class="number">5</span>))</span><br><span class="line">print(tf.square([<span class="number">1</span>,<span class="number">2</span>]))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.Tensor(<span class="number">25</span>, shape=(), dtype=int32)</span><br><span class="line">tf.Tensor([<span class="number">1</span> <span class="number">4</span>], shape=(<span class="number">2</span>,), dtype=int32)</span><br></pre></td></tr></table></figure><p>tf.pow()</p><p>tf.constant</p><p>创建常数常量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tf.constant(</span><br><span class="line">    value,</span><br><span class="line">    dtype=<span class="keyword">None</span>,</span><br><span class="line">    shape=<span class="keyword">None</span>,</span><br><span class="line">    name=<span class="string">'Const'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>tf.zeros、tf.ones、tf.fill</p><p>tf.matmul</p><p>tf.reduce_sum()</p><p>tf.tile</p><h3 id="与NumPy-ndarray的相互转换"><a href="#与NumPy-ndarray的相互转换" class="headerlink" title="与NumPy ndarray的相互转换"></a>与NumPy ndarray的相互转换</h3><p>TensorFlow numpy()</p><p>tf.Variable</p><p>tf.cast</p>]]></content>
      
      
      <categories>
          
          <category> deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件测试基础知识</title>
      <link href="/2019/11/09/software-testing/"/>
      <url>/2019/11/09/software-testing/</url>
      
        <content type="html"><![CDATA[<p>今天参加了<a href="http://www.ruankao.org.cn" target="_blank" rel="noopener">软件评测师</a>考试，趁着热乎劲，总结下软件测试的相关知识。</p><a id="more"></a><h3 id="软件测试原则"><a href="#软件测试原则" class="headerlink" title="软件测试原则"></a>软件测试原则</h3><p>1.所有的软件测试都应追溯到用户需求。</p><p>2.应当把“尽早地和不断地进行软件测试”作为软件测试者的座右铭。</p><p>3.完全测试是不可能的，测试需要终止。</p><p>4.测试无法显示软件潜在的缺陷。</p><p>5.充分注意测试中的群集现象。</p><p>6.程序员应避免检查自己的程序。</p><p>7.尽量避免测试的随意性。</p><h3 id="软件测试对象"><a href="#软件测试对象" class="headerlink" title="软件测试对象"></a>软件测试对象</h3><p>根据软件的定义，软件包括程序、数据和文档。</p><p>所以，软件测试并不仅仅是程序测试，还应包括相应文档和数据的测试。</p><h3 id="软件测试分类"><a href="#软件测试分类" class="headerlink" title="软件测试分类"></a>软件测试分类</h3><ul><li>按照开发阶段划分：单元测试、集成测试、系统测试、确认测试以及验收测试。</li></ul><p>常见的单元测试工具：Java JUnit、Python unittest</p><ul><li>按照测试技术划分：白盒测试（white-box testing）、黑盒测试（black-box testing）以及灰盒测试（gray-box testing）。</li><li>根据是否需要执行被测试代码划分：静态测试（static testing）和动态测试（dynamic testing）。</li></ul><p>静态测试指不运行被测程序本身，仅通过分析或检查源程序的文法、结构、过程、接口等来检查程序的正确性。</p><p>动态测试是指通过运行软件来检验软件的动态行为和运行结果的正确性，主要是对软件的逻辑、功能等方面进行评估。</p><h3 id="测试停止准则"><a href="#测试停止准则" class="headerlink" title="测试停止准则"></a>测试停止准则</h3><p>1.测试用例全部执行结束</p><p>2.测试覆盖率达到要求</p><p>3.测试超出了预定时间</p><p>4.查出了预定数目的故障</p><p>5.执行了预定的测试方案</p><h3 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h3><p>用于确认程序结构逻辑的正确性。</p><h4 id="逻辑覆盖法"><a href="#逻辑覆盖法" class="headerlink" title="逻辑覆盖法"></a>逻辑覆盖法</h4><h5 id="语句覆盖"><a href="#语句覆盖" class="headerlink" title="语句覆盖"></a>语句覆盖</h5><p>语句覆盖（Statement Coverage，SC）：选择足够多的测试数据，使被测程序中每条语句至少执行一次。</p><h5 id="判定覆盖"><a href="#判定覆盖" class="headerlink" title="判定覆盖"></a>判定覆盖</h5><p>判定覆盖（Decision Coverage，DC）：设计足够的测试用例，使得被测程序中的每个判定表达式至少获得一次“真值”或“假值”，从而使程序的每一个分支至少都通过一次。</p><h5 id="条件覆盖"><a href="#条件覆盖" class="headerlink" title="条件覆盖"></a>条件覆盖</h5><p>条件覆盖（Condition Coverage，CC）：构造一组测试用例，使得每一判定语句中每个逻辑条件的可能值至少满足一次。</p><h5 id="条件-判定覆盖"><a href="#条件-判定覆盖" class="headerlink" title="条件/判定覆盖"></a>条件/判定覆盖</h5><p>条件/判定覆盖（Condition/ Decision Coverage，CDC）：设计足够的测试用例，使得判定中每个条件的所有可能（真/假）至少出现一次，并且每个判定本身的判定结果（真/假）也至少出现一次。</p><h5 id="条件组合覆盖"><a href="#条件组合覆盖" class="headerlink" title="条件组合覆盖"></a>条件组合覆盖</h5><p>多条件覆盖，也称条件组合覆盖（Multiple Condition Coverage，MCC）：选择足够的测试用例，使得每个判定中条件的各种可能组合都至少出现一次。</p><h5 id="修正条件-判定覆盖"><a href="#修正条件-判定覆盖" class="headerlink" title="修正条件/判定覆盖"></a>修正条件/判定覆盖</h5><p>修正条件/判定覆盖（Modified Condition/ Decision Coverage，MC/DC）：设计适当数量的测试用例，保证在一个程序中每一种输入输出至少得出现一次，在程序中的每一个条件必须产生所有可能的输出结果至少一次，并且每个判断中的每个条件必须能够独立影响一个判断的输出，即在其他条件不变的前提下仅改变这个条件的值，而使判断结果改变。</p><h4 id="基本路径测试"><a href="#基本路径测试" class="headerlink" title="基本路径测试"></a>基本路径测试</h4><p>在程序控制流图的基础上，通过分析控制构造的环路复杂度，导出基本可执行路径集合，从而设计测试用例的方法。</p><p><strong>程序的环路复杂度</strong>是程序中每个可执行语句至少执行一次所需要的测试用例数目的上限。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">程序的环路复杂度V(G)=边数-节点数+2</span><br><span class="line">              =控制流图中判定节点数+1</span><br><span class="line">              =控制流图的区域数</span><br></pre></td></tr></table></figure><h3 id="黑盒测试（功能测试）"><a href="#黑盒测试（功能测试）" class="headerlink" title="黑盒测试（功能测试）"></a>黑盒测试（功能测试）</h3><p>用于确认软件功能的正确性和可操作性。</p><h4 id="等价类划分法"><a href="#等价类划分法" class="headerlink" title="等价类划分法"></a>等价类划分法</h4><ul><li>确定等价类的原则：</li></ul><p>1.如果规定了输入数据的<strong>取值范围或值的个数</strong>，可以确定一个有效等价类和两个无效等价类。</p><p>例如，如果规定输入值a的取值范围为1~99，那么可以得到一个有效等价类{a|1&lt;=a&lt;=99}和两个无效等价类{a|a&lt;1}、{a|a&gt;99}</p><p>2.如果输入条件<strong>规定了输入值的集合或者规定了“必须如何”的条件</strong>，则可以确定一个有效等价类和一个无效等价类（该集合有效值之外）。</p><p>例如，如果规定输入值b为奇数，那么可以得到一个有效等价类{b|b是奇数}和一个无效等价类{b|b不是奇数}。</p><p>3.如果<strong>规定了一组输入数据</strong>（假设包括n个输入值），并且程序要对每一个输入值分别进行处理，可以确定n个有效等价类和一个无效等价类。</p><p>例如，如果规定输入值x的取值为1，2，3三个数之一，那么可以得到3个有效等价类{x|x=1}、{x|x=2}、{x|x=3}和一个无效等价类{x|x≠1,2,3}。</p><p>4.如果<strong>规定了输入数据必须遵守的规则或限制条件</strong>，可以确定一个有效等价类（符合规则）和若干个无效等价类（从不同角度违反规则）。</p><p>例如，如果规定输入值A是最多保留两位小数的正浮点数，那么可以得到一个有效等价类{A|A是最多保留两位小数的正浮点数}和三个无效等价类{A|A不是浮点数}、{A|A不是正浮点数}以及{A|A是多于两位小数的正浮点数}。</p><ul><li>编写测试用例</li></ul><p>如果输入全部都来自有效等价类，则从每个有效等价类选取一个代表元素作为输入；</p><p>如果要考虑无效等价类，则每次只选取一个无效等价类，其余输入都从有效等价类中选取。</p><h4 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h4><p>边界值分析法是对输入或输出的边界值进行测试的一种黑盒测试方法。</p><p>通常边界值分析法是作为对等价类划分法的补充，这种情况下，其测试用例来自等价类的边界。</p><p>长期的测试工作经验告诉我们，大量的错误是发生在输入或输出范围的边界上，而不是发生在输入输出范围的内容。</p><p>用边界值测试方法设计测试用例，首先应确定边界情况。</p><p>通常输入和输出等价类的边界，就是应着重测试的边界情况。</p><p>应当选取<strong>正好等于，刚刚大于或刚刚小于边界</strong>的值作为测试数据，而不是选取等价类中的典型值或任意值作为测试数据。</p><h3 id="负载压力测试"><a href="#负载压力测试" class="headerlink" title="负载压力测试"></a>负载压力测试</h3><p>负载压力测试是指在一定约束条件下测试系统所能承受的并发用户量、运行时间、数据量，以确定系统所能承受的最大负载压力。负载压力测试包括负载测试、压力测试、并发性能测试、疲劳强度测试、大数据量测试等内容。</p><p>常用工具：Apache JMeter、LoadRunner</p><h4 id="负载测试"><a href="#负载测试" class="headerlink" title="负载测试"></a>负载测试</h4><p>负载测试是通过逐步增加系统负载，测试系统性能的变化，并最终确定在满足性能指标的情况下，系统所能承受的最大负载量的测试。</p><h4 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h4><p>压力测试是通过逐步增加系统负载，测试系统性能的变化，并最终确定在什么负载条件下，系统性能处于失效状态，以此来获得系统能提供的最大服务级别的测试。</p><p>通俗地讲，压力测试是为了发现在什么条件下系统的性能会变得不可接受。</p><p>可见，压力测试是一种特定类型的负载测试。</p><h4 id="并发性能测试"><a href="#并发性能测试" class="headerlink" title="并发性能测试"></a>并发性能测试</h4><p>逐渐增加并发用户数负载，直到系统的瓶颈或者不能接收的性能点，通过综合分析交易执行指标、资源监控指标等来确定系统并发性能的过程。</p><h4 id="疲劳强度测试"><a href="#疲劳强度测试" class="headerlink" title="疲劳强度测试"></a>疲劳强度测试</h4><p>通常是采用系统稳定运行情况下能够支持的最大并发用户数，或者日常运行用户数，持续执行一段时间业务，保证达到系统疲劳强度需求的业务量，通过综合分析交易执行指标和资源监控指标，来确定系统处理最大工作量强度性能的过程。</p><h4 id="大数据量测试"><a href="#大数据量测试" class="headerlink" title="大数据量测试"></a>大数据量测试</h4><p>大数据量测试包括独立的数据量测试和综合数据量测试。</p><p>独立数据量测试是指针对系统存储、传输、统计、查询等业务进行的大数据量测试；</p><p>综合数据量测试是指和压力测试、负载测试、疲劳强度测试相结合的综合测试。</p><h3 id="Web应用测试"><a href="#Web应用测试" class="headerlink" title="Web应用测试"></a>Web应用测试</h3><h4 id="页面设计测试"><a href="#页面设计测试" class="headerlink" title="页面设计测试"></a>页面设计测试</h4><p>页面测试可以从以下几个方面进行：</p><p>1.页面的一致性如何；</p><p>2.在每个页面上是否设计友好的用户界面和直观的导航系统；</p><p>3.是否考虑多种浏览器的需要；</p><p>4.是否建立了页面文件的命名体系；</p><p>5.是否充分考虑了合适的页面布局技术，如层叠样式表、表格和帧结构等。</p><h4 id="链接测试"><a href="#链接测试" class="headerlink" title="链接测试"></a>链接测试</h4><p>首先，测试所有链接是否按指示的那样确实连接到了该链接的页面；</p><p>其次，测试所链接的页面是否存在；</p><p>最后，保证Web应用系统上没有孤立的页面。所谓孤立页面是指没有链接指向该页面，只有知道正确的URL地址才能访问。</p><h4 id="图形测试"><a href="#图形测试" class="headerlink" title="图形测试"></a>图形测试</h4><p>主要检查点如下：</p><p>1.颜色饱和度和对比度是否合适；</p><p>2.需要突出的链接的颜色是否容易识别；</p><p>3.是否正确加载所有的图形。</p><h4 id="表单测试"><a href="#表单测试" class="headerlink" title="表单测试"></a>表单测试</h4><p>1.检查每个字段的所有验证；</p><p>2.检查字段的缺省值；</p><p>3.检查表单中的错误输入，是否有错误提示；</p><p>4.提交操作的完整性。</p><h4 id="兼容性测试"><a href="#兼容性测试" class="headerlink" title="兼容性测试"></a>兼容性测试</h4><p>平台兼容性和浏览器兼容性</p><p>测试浏览器的兼容性可以与操作系统的兼容性结合起来，最有效的方法是创建一个<strong>兼容性测试矩阵</strong>。</p><table><thead><tr><th style="text-align:center">平台\浏览器</th><th style="text-align:center">IE(7,8,9,10)</th><th style="text-align:center">Chrome</th><th style="text-align:center">Firefox</th><th style="text-align:center">Safari</th><th style="text-align:center">…</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Windows (XP,7,8,10)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Mac</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>Linux</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>…</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">&nbsp;</td></tr></tbody></table><h3 id="安全性测试"><a href="#安全性测试" class="headerlink" title="安全性测试"></a>安全性测试</h3><h4 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h4><p>采用软件测试中的黑盒测试方法，对涉及安全的软件功能进行测试，验证所提供的功能是否有效。</p><h4 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h4><p>借助于特定的漏洞扫描工具，在安全漏洞造成严重危害前，发现漏洞并加以防范。</p><h4 id="模拟攻击试验"><a href="#模拟攻击试验" class="headerlink" title="模拟攻击试验"></a>模拟攻击试验</h4><p>模拟攻击试验是一组特殊的黑盒测试案例，通过模拟典型的安全攻击来验证软件或信息系统的安全防护能力。</p><h4 id="侦听测试"><a href="#侦听测试" class="headerlink" title="侦听测试"></a>侦听测试</h4><p>通过典型的网络数据包获取技术，在系统数据通信或数据交互的过程中，对数据进行截取分析，从而发现系统在防止敏感数据被窃取方面的安全防护能力。</p>]]></content>
      
      
      <categories>
          
          <category> software testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索引擎常用技巧</title>
      <link href="/2019/11/08/search-engine-technique/"/>
      <url>/2019/11/08/search-engine-technique/</url>
      
        <content type="html"><![CDATA[<p>人人都会“用”搜索引擎，但却不是谁都能“用好”搜索引擎。</p><a id="more"></a><h3 id="精确搜索"><a href="#精确搜索" class="headerlink" title="精确搜索"></a>精确搜索</h3><p>使用<strong>双引号</strong>将检索词括起来，可以获取完全匹配。</p><h3 id="模糊检索"><a href="#模糊检索" class="headerlink" title="模糊检索"></a>模糊检索</h3><p>使用通配符*号，可以进行模糊检索。</p><p>注：搜索引擎默认使用此类检索。</p><p>例如，想要检索以<code>智能</code>结尾的词，可以使用<code>*智能</code>。</p><h3 id="布尔检索"><a href="#布尔检索" class="headerlink" title="布尔检索"></a>布尔检索</h3><p>逻辑与and：人工智能 and 推荐系统</p><p>逻辑或or：人工智能 or 推荐系统</p><h3 id="包含-不包含：-、"><a href="#包含-不包含：-、" class="headerlink" title="包含/不包含：+、-"></a>包含/不包含：+、-</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关键字1 +关键词2</span><br><span class="line">关键字 -排除关键字</span><br></pre></td></tr></table></figure><p><strong>注意：+、-号前面要有空格，后面则不能有空格。</strong></p><p>例如：</p><p>想要检索<code>人工智能</code>，但不想包含<code>推荐系统</code>，则可以使用<code>人工智能 -推荐系统</code></p><h3 id="站内搜索：site"><a href="#站内搜索：site" class="headerlink" title="站内搜索：site"></a>站内搜索：site</h3><p>仅在指定的网站中搜索</p><p>语法：<code>site:站点域名</code></p><p>例如：site:hegongshan.com</p><h3 id="文档搜索：filetype"><a href="#文档搜索：filetype" class="headerlink" title="文档搜索：filetype"></a>文档搜索：filetype</h3><p>指定文件类型</p><p>语法：<code>filetype:文档类型</code></p><p>例如：人工智能 filetype:pdf</p><h3 id="inurl"><a href="#inurl" class="headerlink" title="inurl"></a>inurl</h3><p>将搜索结果限定在url链接中</p><p>语法：<code>inurl:链接</code></p><h3 id="intitle"><a href="#intitle" class="headerlink" title="intitle"></a>intitle</h3><p>将搜索结果限定在网页标题中</p><p>语法：<code>intitle:关键字</code></p>]]></content>
      
      
      <categories>
          
          <category> search engine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search engine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读  HOSLIM&amp;#58 Higher-Order Sparse LInear Method for Top-N Recommender Systems</title>
      <link href="/2019/11/03/recommender-system-hoslim/"/>
      <url>/2019/11/03/recommender-system-hoslim/</url>
      
        <content type="html"><![CDATA[<p>HOSLIM在Sparse LInear Method（SLIM）的基础上，考虑了物品之间的高层关系（higher-order）。</p><a id="more"></a><h3 id="HOSLIM"><a href="#HOSLIM" class="headerlink" title="HOSLIM"></a>HOSLIM</h3><h4 id="预测模型"><a href="#预测模型" class="headerlink" title="预测模型"></a>预测模型</h4><p>用户u对物品i的预测分数$\tilde r_{ui}​$<br>$$<br>\tilde r_{ui} = \mathbf{r}_u^T \mathbf{s}_i + \mathbf{r^\prime}_u^T \mathbf{s}_i^\prime \tag{1}<br>$$<br>因此，HOSLIM的预测模型可以表示为：<br>$$<br>\tilde R = RS + R^\prime S^\prime<br>$$<br>其中，$R \in \mathbb{R}^{n \times m}​$是用户-物品隐式反馈矩阵，$R^\prime \in \mathbb{R}^{n \times p}​$是用户-物品集合隐式反馈矩阵；</p><p>$S \in \mathbb{R}^{m \times m}$是物品-物品相似度矩阵，$S^\prime\in \mathbb{R}^{p \times m} ​$是物品集合-物品相似度矩阵。</p><h4 id="目标函数"><a href="#目标函数" class="headerlink" title="目标函数"></a>目标函数</h4><p>$$<br>\mathcal{L} =\min_{\mathbf{s}_i,\mathbf{s}^\prime_i} =\frac{1}{2} \left \Vert \mathbf{r}_i - R \mathbf{s}_i - R^\prime \mathbf{s}^\prime_i \right \Vert_2^2 + \frac{\beta}{2} \left \Vert \mathbf{s}_i \right \Vert_2^2 + \frac{\beta}{2} \left \Vert \mathbf{s}^\prime_i \right \Vert_2^2 + \lambda \left \Vert \mathbf{s}_i \right \Vert_1 + \lambda \left \Vert \mathbf{s}^\prime_i \right \Vert_1 \tag{2} \\<br>\begin{align}<br>\mathrm{subject\ to}\<br>&amp;\mathbf{s}_i \geq 0 \\<br>&amp;\mathbf{s}^\prime_i \geq 0 \\<br>&amp;s_{ii} = 0 \\<br>&amp;s^\prime_{ji} = 0,\ i \in \mathcal{I}_j<br>\end{align}<br>$$</p><p>其中，约束条件$s_{ii} = 0​$确保：当计算$\tilde r_{ui}​$时，$r_{ui}​$不会被使用。</p><p>$\mathbf{s}^\prime_{ji} = 0$确保：当计算$\tilde r_{ui}$时，物品集合j ($i \in \mathcal{I}_j​$)不会被使用。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>Evangelia Christakopoulou and George Karypis. 2014. Hoslim: Higher-order sparse linear method for top-n recommender systems. In Pacific-Asia Conference on Knowledge Discovery and Data Mining. Springer, 38–49. </p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 FISM&amp;#58 Factored Item Similarity Models for Top-N Recommender Systems</title>
      <link href="/2019/10/26/recommender-system-fism/"/>
      <url>/2019/10/26/recommender-system-fism/</url>
      
        <content type="html"><![CDATA[<p>针对Top-N推荐问题，作者提出了一种叫作FISM（Factored Item Similarity Models）的推荐算法，用两个低维隐因子矩阵的乘积来表示物品相似度矩阵。</p><a id="more"></a><h3 id="符号说明"><a href="#符号说明" class="headerlink" title="符号说明"></a>符号说明</h3><p>1.所有的向量使用<strong>粗体小写字母</strong>表示，例如$\mathbf{p,q}​$。</p><p>2.所有的矩阵使用<strong>粗体大写字母</strong>表示，例如$\mathbf{R}$。此外，$\mathbf{p_j}$表示矩阵$\mathbf{P}$的第j行。</p><p>3.评估时的预测值，在字母上方加波浪号，如$\tilde r_{ui}$；训练时的估计值，在字母上方加估计符号，如$\hat r_{ui}$。</p><p>4.$\mathcal{C}$和$\mathcal{D}$分别表示用户和物品集合，$\vert \mathcal{C} \vert=n$，$\vert \mathcal{D} \vert=m$。</p><p>5.$\mathbf{R}​$表示用户-物品隐式反馈矩阵；$\mathcal{R}_u^+​$表示用户u评分过的物品集合；$\mathcal{R}_u^-​$表示用户u未评分过的物品集合。</p><p>6.$\vert \mathcal{R}_u^+ \vert = n_u^+ $</p><h3 id="SLIM"><a href="#SLIM" class="headerlink" title="SLIM"></a>SLIM</h3><p><em>Sparse LInear Method</em> (SLIM)的预测模型：<br>$$<br>\mathbf{\tilde r}_u = \mathbf{r_u S} \tag{1}<br>$$<br>其中，$\mathbf{r_u}$表示用户u对所有物品的评分组成的向量；$\mathbf{S} \in \mathbb{R}^{m \times m}$表示物品相似度矩阵。</p><p>目标函数：<br>$$<br>L= \min_{\mathbf{S}} \frac{1}{2} \sum_{(u,i) \in \mathbf{R}}  \left \Vert r_{ui} - \hat r_{ui} \right \Vert_F^2 + \frac{\beta}{2} \left \Vert \mathbf{S} \right \Vert_F^2 + \lambda \left \Vert \mathbf{S} \right \Vert_1 \\<br>subject\ to\ \mathbf{S} \geq 0, diag(\mathbf{S}) = 0 \tag{2}<br>$$<br>其中，$\left \Vert \mathbf{S} \right \Vert_F$是矩阵$\mathbf{S}$的Frobenius范数（参见补充知识）；$\beta$和$\lambda$是正则化参数。</p><p><strong>SLIM的不足之处在于</strong>：无法捕捉物品之间的传递关系。</p><p>如果物品i和j未被任何用户同时评分过，则$s_{ij} = 0$。</p><p>但是，物品i和j可能均和第三个物品k相似，从而使得物品i和j彼此相似。</p><h3 id="NSVD"><a href="#NSVD" class="headerlink" title="NSVD"></a>NSVD</h3><p>NSVD用两个低秩矩阵$\mathbf{P} \in \mathbb{R}^{m \times k}$和$\mathbf{Q} \in \mathbb{R}^{m \times k}$（$k \ll m $）的乘积来表示物品相似度。</p><p>给定物品i和j，二者的相似度$sim(i,j) = \mathbf{p}_i \cdot \mathbf{q}_j^T$。</p><p>预测模型：<br>$$<br>\hat r_{ui} = \tilde r_{ui} = b_u + b_i + \sum_{j \in \mathcal{R}_u^+} \mathbf{p}_j \mathbf{q}_i^T \tag{3}<br>$$<br>目标函数：<br>$$<br>\min_{\mathbf{P,Q}} \frac{1}{2} \sum_{u \in \mathcal{C}} \sum_{i \in \mathcal{R}_u^+} \left \Vert r_{ui} - \hat r_{ui} \right \Vert_F^2 + \frac{\beta}{2} (\left \Vert \mathbf{P} \right \Vert_F^2 + \left \Vert \mathbf{Q} \right \Vert_F^2) \tag{4}<br>$$<br><strong>NSVD的不足之处在于</strong>：在估计评分时，没有排除物品自己对自己的影响。</p><p>例如，在训练时，要估计用户u对物品i的评分$\hat r_{ui}​$，且$i \in \mathcal{R}_u^+​$</p><p>根据公式(3)可以得到：<br>$$<br>\hat r_{ui} = b_u + b_i + \mathbf{p}_i \mathbf{q}_i^T  + \sum_{j \in \mathcal{R}_u^+ \setminus \{i\}} \mathbf{p}_j \mathbf{q}_i^T \tag{5}<br>$$</p><h3 id="FISM"><a href="#FISM" class="headerlink" title="FISM"></a>FISM</h3><p>预测模型：<br>$$<br>\tilde r_{ui} = b_u + b_i + \left \vert R_u^+ \right \vert^{- \alpha} \sum_{j \in \mathcal{R_u^+}} \mathbf{p}_j \mathbf{q}_i^T \tag{6}<br>$$</p><p>作者提出了两种版本的FISM模型，它们使用不同的损失函数。</p><h4 id="FISMrmse"><a href="#FISMrmse" class="headerlink" title="FISMrmse"></a>FISMrmse</h4><p>平方误差损失函数：<br>$$<br>\mathcal{L(\cdot)} = \sum_{i \in \mathcal{D}} \sum_{u \in \mathcal{C}} (r_{ui} - \hat r_{ui})^2 \tag{7}<br>$$<br>估计值$\hat r_{ui}$的计算方法如下：<br>$$<br>\hat r_{ui} = b_u + b_i + (\left \vert R_u^+ \right \vert - 1)^{- \alpha} \sum_{j \in \mathcal{R_u^+ \setminus \ \{i\}}} \mathbf{p}_j \mathbf{q}_i^T \tag{8}<br>$$<br>由于FISM只关注隐式反馈，$\forall j \in \mathcal{R}_u^+$，$r_{uj} = 1$，因此，在公式(7)中省略了$r_{uj}$。</p><p>目标函数：<br>$$<br>L = \min_{\mathbf{P,Q}} \frac{1}{2} \sum_{(u,i) \in R} \left \Vert r_{ui} - \hat r_{ui} \right \Vert_F^2 + \frac{\beta}{2} (\left \Vert \mathbf{P} \right \Vert_F^2 + \left \Vert \mathbf{Q} \right \Vert_F^2) + \frac{\lambda}{2} \left \Vert \mathbf{b_u} \right \Vert_2^2 + \frac{\gamma}{2} \left \Vert \mathbf{b_i} \right \Vert_2^2 \tag{9}<br>$$<br>其中，$\mathbf{b_u}$和$\mathbf{b_i}$分别是用户和物品的偏置向量。</p><p>使用用户-物品交互矩阵$\mathbf{R}$中的所有元素来计算损失函数是非常耗时的，因此，作者提出对$\mathbf{R}$中的零元素（负样本）进行采样。每次迭代时，随机选择$\rho \cdot nnz(R)$个零元素。</p><p>其中，$\rho$是采样因子（sample factor），$nnz(R)$是$\mathbf{R}$中非零项（non-zero entries）的个数。</p><p>实验表明，当采样比$\rho \in [3,15]​$时，足够产生最佳的模型。</p><p>训练算法：</p><p><img src="/static/images/fism-rmse-algorithm.png" alt=""></p><h4 id="FISMauc"><a href="#FISMauc" class="headerlink" title="FISMauc"></a>FISMauc</h4><p>基于Bayesian Personalized Ranking（BPR）的排序损失函数：<br>$$<br>\mathcal{L(\cdot)} = \sum_{u \in \mathcal{C}} \sum_{i \in \mathcal{R}_u^+,\ j \in \mathcal{R}_u^-} ( (r_{ui} - r_{uj}) - (\hat r_{ui} - \hat r_{uj}) )^2 \tag{10}<br>$$<br>其中，$R_u^+$表示用户评分过的物品，$R_u^-$表示用户未评分过的物品。</p><p>目标函数：<br>$$<br>\min_{\mathbf{P,Q}} \frac{1}{2} \sum_{u \in \mathcal{C}} \sum_{i \in \mathcal{R}_u^+,\ j \in \mathcal{R}_u^-} \left \Vert (r_{ui} - r_{uj}) - (\hat r_{ui} - \hat r_{uj}) \right \Vert_F^2 + \frac{\beta}{2} (\left \Vert \mathbf{P} \right \Vert_F^2 + \left \Vert \mathbf{Q} \right \Vert_F^2) + \frac{\gamma}{2} \left \Vert \mathbf{b_i} \right \Vert_2^2 \tag{11}<br>$$<br>注意：由于$\hat r_{ui} - \hat r_{uj}$时，$b_u$被消掉了，因此，目标函数的正则项中没有$\mathbf{b}_u$。</p><p>此外，FISMauc的采样方式与FISMrmse相似。</p><p>训练算法：</p><p><img src="/static/images/fism-auc-algorithm.png" alt=""></p><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>1.矩阵$\mathbf{A} \in \mathbb{R}^{m \times n}$的Frobenius范数$\left \Vert \mathbf{A} \right \Vert_F$定义为：<br>$$<br>\left \Vert \mathbf{A} \right \Vert_F = \sqrt{tr(\mathbf{A}^T \mathbf{A})} = \sqrt {\sum_{i=1}^m \sum_{j=1}^n A_{ij}^2} \tag{12}<br>$$<br>2.对于矩阵$\mathbf{A}​$<br>$$<br>\frac{\partial \left \Vert \mathbf{A} \right \Vert_F^2}{\partial \mathbf{A}} = 2 \mathbf{A} \tag{13}<br>$$<br>对于向量$\mathbf{x}​$<br>$$<br>\frac{\partial \left \Vert \mathbf{x} \right \Vert_2^2}{\partial \mathbf{x}} = 2 \mathbf{x} \tag{14}<br>$$</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1.S. Kabbur, X. Ning, and G. Karypis, “FISM: Factored item similar- ity models for top-n recommender systems,” in Proc. 19th ACM SIGKDD Conf. Knowl. Discovery Data Mining, 2013, pp. 659–667.</p><p>2.<a href="https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/ranking/FISMrmseRecommender.java" target="_blank" rel="noopener">https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/ranking/FISMrmseRecommender.java</a></p><p>3.<a href="https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/ranking/FISMaucRecommender.java" target="_blank" rel="noopener">https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/ranking/FISMaucRecommender.java</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 NAIS&amp;#58 Neural Attentive Item Similarity Model for Recommendation</title>
      <link href="/2019/10/21/recommender-system-nais/"/>
      <url>/2019/10/21/recommender-system-nais/</url>
      
        <content type="html"><![CDATA[<p>针对基于物品的协同过滤，作者采用注意力机制，提出了一种叫作<em>Neural Attentive Item Similarity model</em> (NAIS)的神经网络模型。</p><a id="more"></a><h3 id="Standard-Item-Based-CF"><a href="#Standard-Item-Based-CF" class="headerlink" title="Standard Item-Based CF"></a>Standard Item-Based CF</h3><p>$$<br>\hat y_{ui} = \sum_{j \in \mathcal{R}_u^+} r_{uj} s_{ij} \tag{1}<br>$$</p><p>其中，$\mathcal{R}_u^+​$表示用户u交互过的物品集合；$s_{ij}​$表示物品$i​$和物品$j​$之间的相似度；</p><p>$r_{uj}$表示用户u对物品j的已知偏好（对于显式反馈，$r_{uj}$是用户u对物品j的评分；对于隐式反馈，$r_{uj}​$是1或者0，表示用户u是否与物品j有过交互行为）。</p><h3 id="SLIM"><a href="#SLIM" class="headerlink" title="SLIM"></a>SLIM</h3><p><em>Sparse LInear Method</em> (SLIM)的目标函数：<br>$$<br>L= \frac{1}{2} \sum_{u=1}^U \sum_{i=1}^I (r_{ui} - \hat y_{ui})^2 + \frac{\beta}{2} \left \Vert \mathbf{S} \right \Vert_F^2 + \lambda \left \Vert \mathbf{S} \right \Vert_1 \\<br>subject\ to\ \mathbf{S} \geq 0, diag(\mathbf{S}) = 0 \tag{2}<br>$$<br>其中，$U$和$I$分别表示用户和物品的数量；$\mathbf{S} \in \mathbb{R}^{I \times I}$表示物品相似度矩阵；$\beta$和$\lambda$是正则化参数。</p><p>然而，SLIM有两个明显的缺点：</p><ul><li>时间复杂为$O(I^2)$</li><li>无法捕捉物品之间的传递关系</li></ul><h3 id="FISM"><a href="#FISM" class="headerlink" title="FISM"></a>FISM</h3><p>在<em>Factored Item Similarity Model</em> (FISM)中，相似度分数$s_{ij}$被表示为物品i和物品j的embedding向量的内积。<br>$$<br>\hat y_{ui} = \mathbf{p}_i^T \left( \frac{1}{\left \vert \mathcal{R}_u^+ - 1 \right \vert^\alpha} \sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} \mathbf{q}_j \right) \\<br>\qquad\qquad \underbrace{\mathrm{user\ u’s\ representation}} \tag{3}<br>$$</p><p>其中，$\alpha$是控制归一化效果的超参数；$\mathbf{p}_i$和$\mathbf{q}_j$分别表示物品$i$和物品$j$的embedding向量。</p><p>由于FISM只关注隐式反馈，$\forall j \in \mathcal{R}_u^+$，$r_{uj} = 1$，因此，在公式(3)中省略了$r_{uj}$。</p><p>时间复杂度：$O(k \left \vert \mathcal{R}_u^+ \right \vert)$。其中，k表示embedding size。</p><p>作者认为：在获得用户表示时，FISM对用户交互过的所有历史物品等同处理，这可能限制了模型的性能。</p><p>用户的兴趣会随着时间而发生变化，最新交互过的物品应该对用户未来的偏好具有更好的表达能力。</p><h3 id="NAIS"><a href="#NAIS" class="headerlink" title="NAIS"></a>NAIS</h3><h4 id="设计一"><a href="#设计一" class="headerlink" title="设计一"></a>设计一</h4><p>给每个物品赋予一个权重，使得历史物品对用户表示产生不同的影响。<br>$$<br>\hat y_{ui} = \mathbf{p}_i^T \left( \frac{1}{\left \vert \mathcal{R}_u^+ \right \vert^\alpha} \sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} a_j \mathbf{q}_j \right) \tag{4}<br>$$</p><p>其中，$a_j​$表示物品j的注意力权重（attention weight）。</p><p>然而，不管预测哪个物品i，对于同一用户的所有历史物品j来说，$a_j​$都是不变的，这显然是不合理的。</p><p>从用户表示的角度来看，该方法假定每个用户各有一个对应的静态向量，可以表示他的兴趣，这可能限制了模型的表示能力。</p><h4 id="设计二"><a href="#设计二" class="headerlink" title="设计二"></a>设计二</h4><p>为了解决设计一的问题，作者提出为每个物品对$(i,j)$赋予不同的权重<br>$$<br>\hat y_{ui} = \mathbf{p}_i^T \left( \frac{1}{\left \vert \mathcal{R}_u^+ \right \vert^\alpha} \sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} a_{ij} \mathbf{q}_j \right) \tag{5}<br>$$<br>其中，$a_{ij}​$表示物品j在预测用户u对目标物品i的偏好时的注意力权重。</p><p>如果物品对$(i,j)​$没有在训练数据中同时出现过（没有一个用户同时和物品i、j交互过），那么无法估计该物品对的注意力权重$a_{ij}​$。</p><h4 id="设计三"><a href="#设计三" class="headerlink" title="设计三"></a>设计三</h4><p>为了解决设计二的泛化问题，作者将$a_{ij}$与embedding向量$\mathbf{p}_i$和$\mathbf{q}_j​$联系在一起。<br>$$<br>a_{ij} = f(\mathbf{p}_i,\mathbf{q}_j) \tag{6}<br>$$<br>作者使用MLP来表示attention函数<br>$$<br>\begin{cases}<br>f_{concat}(\mathbf{p}_i,\mathbf{q}_j) = \mathbf{h}^T ReLU \left( \mathbf{W}<br>\begin{bmatrix}<br>\mathbf{p}_i \\<br>\mathbf{q}_j<br>\end{bmatrix} + \mathbf{b}<br>\right) \\<br>f_{prod}(\mathbf{p}_i,\mathbf{q}_j) = \mathbf{h}^T ReLU \left( \mathbf{W} (\mathbf{p}_i \odot \mathbf{q}_j) + \mathbf{b}<br>\right)<br>\end{cases} \tag{7}<br>$$<br>作者将隐含层的大小称之为注意力因子（<em>attention factor</em>），并使用softmax函数将注意力权重转化为概率分布。<br>$$<br>\hat y_{ui} = \mathbf{p}_i^T \left( \sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} a_{ij}\mathbf{q}_j \right) \\<br>a_{ij} = \frac{\exp(f(\mathbf{p}_i, \mathbf{q}_j))} {\sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} \exp(f(\mathbf{p}_i, \mathbf{q}_j))} \tag{8}<br>$$<br>然而，softmax函数可能过度地惩罚了活跃用户的权重，从而导致上述设计的性能显著低于FISM。</p><p>为了解决这个问题，作者提出对softmax函数的分母进行平滑：<br>$$<br>\hat y_{ui} = \mathbf{p}_i^T \left( \sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} a_{ij}\mathbf{q}_j \right) \\<br>a_{ij} = \frac{\exp(f(\mathbf{p}_i, \mathbf{q}_j))} {[\sum_{j \in \mathcal{R_u^+ \setminus \{i\}}} \exp(f(\mathbf{p}_i, \mathbf{q}_j))]^\beta} \tag{9}<br>$$<br>其中，$\beta$是平滑指数。</p><p>时间复杂度：$O(a k \left \vert \mathcal{R}_u^+ \right \vert)$。其中，$a$表示注意力因子，k表示embedding size。</p><p><img src="/static/images/nais.png" alt=""></p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>作者采用了常见的二元交叉熵损失<br>$$<br>\begin{align}<br>L &amp;= -\frac{1}{N} \left( \sum_{(u,i) \in \mathcal{R^+}} \log \sigma(\hat y_{ui}) + \sum _{(u,i) \in \mathcal{R^-}}  \log(1 - \sigma(\hat y_{ui})) \right) + \lambda \left \Vert \Theta \right \Vert^2 \\<br>&amp;= -\frac{1}{N} \left( \sum_{(u,i) \in \mathcal{R^+} \cup \mathcal{R^-}} y_{ui} \log \sigma(\hat y_{ui}) + (1 - y_{ui}) \log(1 - \sigma(\hat y_{ui})) \right) + \lambda \left \Vert \Theta \right \Vert^2<br>\end{align} \tag{10}<br>$$<br>其中，<br>$$<br>y_{ui}=<br>\begin{cases}<br>0, &amp; \mathrm{for\ unknown\ ratings} \\<br>1, &amp; \mathrm{otherwise}<br>\end{cases}<br>$$</p><h3 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h3><p>采用留一法作为评估方法，HR和NDCG作为评估指标。</p><p>在训练时，为每个正样本随机选择4个负样本；在测试时，为每个测试物品随机选择99个负样本。</p><p>注意力因子a和embedding size k相等，$\beta=0.5, k = a = 16,\lambda = 0$。</p><p>推荐数量N设置为10。</p><p>采用Adagrad作为优化器，学习率设置为0.01。</p><p>使用FISM学到的物品embeddings初始化NAIS。</p><p>由于不同的用户交互过的物品数目也不同，为了解决这个问题，作者提出将某一用户的全部训练实例作为一个mini-batch，从而不需要设置batch_size。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] He, Xiangnan , et al. “NAIS: Neural Attentive Item Similarity Model for Recommendation.” <em>IEEE Transactions on Knowledge and Data Engineering</em> (2018):1-1. <a href="http://staff.ustc.edu.cn/~hexn/papers/tkde18-neural-attentive-itemCF.pdf" target="_blank" rel="noopener">[PDF]</a>  <a href="https://github.com/AaronHeee/Neural-Attentive-Item-Similarity-Model" target="_blank" rel="noopener">[Code]</a> </p><p>[2] B. Sarwar, G. Karypis, J. Konstan, and J. Riedl, “Item-based collaborative filtering recommendation algorithms,” in Proc. 10th Int. Conf. World Wide Web, 2001, pp. 285–295.</p><p>[3] X. Ning and G. Karypis, “SLIM: Sparse linear methods for top-n recommender systems,” in Proc. IEEE 11th Int. Conf. Data Mining, 2011, pp. 497–506.</p><p>[4] S. Kabbur, X. Ning, and G. Karypis, “FISM: Factored item similar- ity models for top-n recommender systems,” in Proc. 19th ACM SIGKDD Conf. Knowl. Discovery Data Mining, 2013, pp. 659–667.</p><p>我的复现 Keras：Neural Attentive Item Similarity</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Joint Neural Collaborative Filtering for Recommender Systems</title>
      <link href="/2019/10/14/recommender-system-jncf/"/>
      <url>/2019/10/14/recommender-system-jncf/</url>
      
        <content type="html"><![CDATA[<p>作者使用一个联合神经网络将用户和物品的深度特征学习、用户与物品之间的深度交互建模整合在一起。此外，作者综合考虑了显式反馈和隐式反馈、pointwise和pairwise损失，提出了一种新的损失函数。</p><a id="more"></a><h3 id="Joint-Neural-Collaborative-Filtering-J-NCF"><a href="#Joint-Neural-Collaborative-Filtering-J-NCF" class="headerlink" title="Joint Neural Collaborative Filtering (J-NCF)"></a>Joint Neural Collaborative Filtering (J-NCF)</h3><p><img src="/static/images/jncf.png" alt=""></p><p>J-NCF包含两个主要的网络：DF网络用于对用户和物品的特征进行建模，而DI网络则用于对用户和物品之间的交互进行建模。</p><p>DF网络包含两个并行的神经网络，一个是抽取用户特征的$Net_{user}​$，另一个是抽取物品特征的$Net_{item}​$。</p><p>$Net_{user}$和$Net_{item}$分别以用户的评分向量$\mathbf{v_u} = &lt;y_{u1},\cdots,y_{uN}&gt;$和物品的评分向量$\mathbf{v_i} = &lt;y_{1i},\cdots,y_{Mi}&gt;$作为输​入。<br>$$<br>y_{ui} =<br>\begin{cases}<br>0, &amp; \mathrm{for\ unknown\ ratings}, \\<br>R_{ui}, &amp; \mathrm{when\ explicit\ feedback\ is\ available}<br>\end{cases} \tag{3}<br>$$<br>其中，$R_{ui}$是用户u对物品i的评分。</p><p>可以看到，对于用户物品交互矩阵，作者遵循了DMF中的做法，综合考虑了显式反馈和隐式反馈。</p><p>在DF网络中，作者使用MLP将用户和物品的高维评分向量映射为更低维度的向量。</p><p>由于$Net_{user}$和$Net_{item}$只有输入不同，因此，下面仅描述$Net_{user}$的流程。<br>$$<br>\mathbf{z_u^1} = f_u^1(\mathbf{W_u^1 v_u + b_u^1}) \\<br>\mathbf{z_u^2} = f_u^2(\mathbf{W_u^2 z_u^1 + b_u^2}) \\<br>\vdots \\<br>\mathbf{z_u} = f_u^X(\mathbf{W_u^X z_u^{X-1} + b_u^X}) \tag{4}<br>$$<br>其中，$\mathbf{W_{u}^x}$、$\mathbf{b_{u}^x}$、$f_{u}^x$分别表示DF网络中第x层的权重矩阵、偏置向量和激活函数；X表示DF网络的层数。</p><p>在DF网络中，作者采用ReLU作为激活函数。</p><p>为了研究非线性函数和线性函数在对用户和物品之间的交互进行建模的差异，作者提出使用以下两种方式来得到用户和物品的融合特征向量$a_{ui}​$，并将其作为DI网络的输入：<br>$$<br>a_{ui} =<br>\begin{cases}<br>\begin{bmatrix}<br>z_u \\<br>z_i<br>\end{bmatrix},<br> &amp; \mathrm{concatenation,\ or} \\<br> z_u \odot z_i, &amp; \mathrm{multiplication}<br>\end{cases} \tag{5}<br>$$<br>DI网络的处理流程如下：<br>$$<br>z_{ui}^1 = f_{ui}^1(\mathbf{W_{ui}^1} a_{ui} + \mathbf{b_{ui}^1}) \\<br>z_{ui}^2 = f_{ui}^2(\mathbf{W_{ui}^2} z_{ui}^1 + \mathbf{b_{ui}^2}) \\<br>\vdots \\<br>z_{ui}^Y = f_{ui}^Y(\mathbf{W_{ui}^Y} z_{ui}^{Y-1} + \mathbf{b_{ui}^Y}) \tag{6}<br>$$<br>其中，$\mathbf{W_{ui}^y}$、$\mathbf{b_{ui}^y}$、$f_{ui}^y$分别表示DI网络中第y层的权重矩阵、偏差向量和激活函数；Y表示DI网络的层数。</p><p>在DI网络中，作者亦采用ReLU作为激活函数。</p><p>DI网络的输出是用户u和物品i之间交互的预测分数$\hat y_{ui}$:<br>$$<br>\hat y_{ui} = \sigma(\mathbf{h^T}z_{ui}) \tag{7}<br>$$<br>其中，$\sigma$是sigmoid函数，它将输出限制在区间(0,1)中；$\mathbf{h}$为DI网络输出层的权重向量。</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>NCF和DMF均采用了基于pointwise的对数损失函数<br>$$<br>\ell_{log} = - \sum_{u \in U} \sum_{i \in I} y_{ui} \log \hat y_{ui} + (1-y_{ui}) \log(1-\hat y_{ui}) \tag{10}<br>$$<br>常见的基于pairwise的损失函数有：TOP1、BPR-max以及TOP1-max。<br>$$<br>\ell_{TOP1} = \frac{1}{\left \vert N_S \right \vert} \sum_{j \in N_S} \sigma(\hat y_{uj} - \hat y_{ui}) + \sigma(\hat y_{uj}^2) \tag{11}<br>$$<br>其中，$\hat y_{uj}$和$\hat y_{ui}$分别为负样本j和正样本i的预测分数；$N_S$为负样本集合。</p><p>为了克服随着负样本数量的增加而产生的梯度消失问题，Hidasi和Karatzoglou提出了BPR-max和TOP1-max<br>$$<br>\ell_{TOP1-max} = \sum_{j \in N_S} s_j \left( \sigma(\hat y_{uj} - \hat y_{ui}) + \sigma(\hat y_{uj}^2) \right) \tag{12}<br>$$<br>BPR-max<br>$$<br>\ell_{BPR-max} = -\log \sum_{j \in N_S} s_j \sigma(\hat y_{ui} - \hat y_{uj}) \tag{13}<br>$$<br>其中，$s_j$为相应的softmax分数。</p><p>至于listwise损失函数，许多基于深度学习的方法将交叉熵与softmax整合在一起，作者称之为softmax+cross-entropy (XE)</p><p>$$<br>\ell_{XE} = -\log s_i = -\log \frac{e^{\hat y_{ui}}}{\sum_{j \in N_S} e^{\hat y_{uj}}} \tag{14}<br>$$<br>作者认为，pointwise损失只使用了评分信息，忽略了物品对之间相对顺序所包含的信息；而pairwise则刚好相反，它忽略了用户对某一物品的个人偏好信息。</p><p>因此，作者综合考虑了pointwise和pairwise，提出了一种新的损失函数：<br>$$<br>L = \alpha L_{pair-wise} + (1 - \alpha) L_{point-wise} \tag{15}<br>$$<br>其中，$\alpha$是一个权衡参数，用于控制两者的权重。</p><p>在pointwise部分，作者采用了DMF中提出的归一化对数损失函数，从而<br>$$<br>L = \alpha L_{pair-wise} + (1 - \alpha) (- Y_{ui} \log \hat y_{ui} - (1-Y_{ui}) \log(1-\hat y_{ui})) \tag{16}<br>$$<br>其中，$Y_{ui} = \frac{y_{ui}}{\max(R_u)}$，$R_u​$为用户u给出的最大评分。</p><p>作者将公式(16)称之为hybrid loss function。</p><h3 id="训练算法"><a href="#训练算法" class="headerlink" title="训练算法"></a>训练算法</h3><p><img src="/static/images/jncf-training-algorithm.png" alt=""></p><h3 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h3><p>作者采用留一法作为评估方法，使用Hit Ratio（HR）和NDCG作为评估指标。</p><p>在训练的时候，为每个正样本随机选择5个负样本；在测试的时候，为每个测试物品随机选择100个负样本。</p><p>使用高斯分布（均值为0、方差为0.01的正态分布）随机初始化模型参数，优化器为mini-batch Adam。</p><p>batch_size设置为256，学习率设置为0.0001。</p><p>迭代100次，推荐数量N设置为10。</p><p>DF网络使用三层结构，每层的神经元数量为[256,128,64]；DI网络使用两层结构，每层的神经元数量为[128,8]。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] Wanyu Chen, Fei Cai, Honghui Chen, and Maarten De Rijke. 2019. Joint Neural Collaborative Filtering for Recommender Systems. <em>ACM Trans. Inf. Syst.</em> 37, 4, Article 39 (August 2019), 30 pages. DOI: <a href="https://doi.org/10.1145/3343117" target="_blank" rel="noopener">https://doi.org/10.1145/3343117</a></p><p>[2] Xiangnan He, Lizi Liao, Hanwang Zhang, Liqiang Nie, Xia Hu and Tat-Seng Chua (2017). <a href="http://dl.acm.org/citation.cfm?id=3052569" target="_blank" rel="noopener">Neural Collaborative Filtering.</a> In Proceedings of WWW ‘17, Perth, Australia, April 03-07, 2017.</p><p>[3] Hong-Jian Xue, Xin-Yu Dai, Jianbing Zhang, Shujian Huang, and Jiajun Chen. 2017. Deep matrix factorization models for recommender systems. In Proceedings of the 26th International Joint Conference on Artificial Intelligence (IJCAI’17), Carles Sierra (Ed.). AAAI Press 3203-3209. </p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Homebrew——MacOS中的包管理器</title>
      <link href="/2019/10/06/macos-homebrew/"/>
      <url>/2019/10/06/macos-homebrew/</url>
      
        <content type="html"><![CDATA[<p>与Ubuntu和CentOS等Linux发行版相比，macOS没有预装wget和tree等命令。</p><p>如果需要安装这些缺失的软件包，可以使用<a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a>包管理器。</p><a id="more"></a><h3 id="什么是Homebrew"><a href="#什么是Homebrew" class="headerlink" title="什么是Homebrew"></a>什么是Homebrew</h3><p>Homebrew是macOS中的第三方包管理器，可以方便地安装那些macOS中没有包含的UNIX工具，比如wget、tree等。</p><h3 id="安装Homebrew"><a href="#安装Homebrew" class="headerlink" title="安装Homebrew"></a>安装Homebrew</h3><p>安装Homebrew前，请确保已安装Xcode命令行工具。如果没有安装，在终端中输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure><p>然后，开始安装Homebrew，在终端中输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br></pre></td></tr></table></figure><h3 id="安装软件包"><a href="#安装软件包" class="headerlink" title="安装软件包"></a>安装软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install 包名</span><br></pre></td></tr></table></figure><h3 id="卸载软件包"><a href="#卸载软件包" class="headerlink" title="卸载软件包"></a>卸载软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall 包名</span><br></pre></td></tr></table></figure><h3 id="升级软件包"><a href="#升级软件包" class="headerlink" title="升级软件包"></a>升级软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew upgrade [包名...]</span><br></pre></td></tr></table></figure><p>若没有指定软件包，则对所有的软件包进行升级。</p><h3 id="查看已安装的软件包"><a href="#查看已安装的软件包" class="headerlink" title="查看已安装的软件包"></a>查看已安装的软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><h3 id="更新Homebrew"><a href="#更新Homebrew" class="headerlink" title="更新Homebrew"></a>更新Homebrew</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新所有的软件包和Homebrew</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><h3 id="搜索软件包"><a href="#搜索软件包" class="headerlink" title="搜索软件包"></a>搜索软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search 软件包</span><br></pre></td></tr></table></figure><h3 id="查看软件信息"><a href="#查看软件信息" class="headerlink" title="查看软件信息"></a>查看软件信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew info 软件包</span><br></pre></td></tr></table></figure><h3 id="显示帮助信息"><a href="#显示帮助信息" class="headerlink" title="显示帮助信息"></a>显示帮助信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew help [command]</span><br></pre></td></tr></table></figure><p>若没有指定命令名，则显示Homebrew的帮助信息；否则，显示该命令的帮助信息。</p><h3 id="卸载Homebrew"><a href="#卸载Homebrew" class="headerlink" title="卸载Homebrew"></a>卸载Homebrew</h3><p>在终端中输入如下命令即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)"</span><br></pre></td></tr></table></figure><p>关于Homebrew的更多信息，请参看<a href="https://docs.brew.sh" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Deep Matrix Factorization Models for Recommender Systems</title>
      <link href="/2019/10/04/recommender-system-dmf/"/>
      <url>/2019/10/04/recommender-system-dmf/</url>
      
        <content type="html"><![CDATA[<p>作者综合考虑了显式评分和隐式反馈，提出了一个基于深度学习的矩阵分解方法以及一个新的损失函数。</p><a id="more"></a><h3 id="用户-物品交互矩阵"><a href="#用户-物品交互矩阵" class="headerlink" title="用户-物品交互矩阵"></a>用户-物品交互矩阵</h3><p>在过去的研究中，大部分的学者采用如下的方式构造交互矩阵：<br>$$<br>Y_{ij} =<br>\begin{cases}<br>0, &amp; if\ R_{ij} = unk \\<br>1, &amp; otherwise<br>\end{cases} \tag{1}<br>$$<br>其中，$R_{ij}$表示用户$i$对物品$j$的评分。</p><p>作者认为，显式评分表明了用户对物品的偏好程度，因此，在构造交互矩阵时，综合考虑了显式评分和隐式反馈。<br>$$<br>Y_{ij} =<br>\begin{cases}<br>0, &amp; if\ R_{ij} = unk \\<br>R_{ij}, &amp; otherwise<br>\end{cases} \tag{2}<br>$$</p><h3 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h3><p>$Y​$表示经过公式(2)转换后得到的用户-物品交互矩阵。</p><p>$Y^+$表示已被观察到的交互行为，$Y^-$表示$Y$中的所有零元素，$Y^-_{sampled}$表示负样本集合（从$Y^-$中采样得到）。</p><p>$Y_{i*}$表示$Y$中的第$i$行，$Y_{*j}$表示$Y$中的第$j$列。</p><h3 id="Deep-Matrix-Factorization-DMF"><a href="#Deep-Matrix-Factorization-DMF" class="headerlink" title="Deep Matrix Factorization (DMF)"></a>Deep Matrix Factorization (DMF)</h3><p><img src="/static/images/dmf.png" alt=""></p><p>作者使用<strong>ReLU</strong>作为输出层和隐含层的激活函数<br>$$<br>f(x) = \max(0,x) \tag{6}<br>$$<br>在DMF的架构中，作者使用两个多层神经网络分别转换用户u和物品v的表示。<br>$$<br>p_i = f_{\theta^U_N}(\cdots f_{\theta^U_3}(W_{U2}\ f_{\theta^U_2}(Y_{i*} W_{U1}))\cdots) \\<br>q_j = f_{\theta^I_N}(\cdots f_{\theta^I_3}(W_{V2}\ f_{\theta^I_2}(Y^T_{*j} W_{V1}))\cdots)<br>\tag{7}<br>$$<br>其中，$W_{U1}$和$W_{V1}$分别是U、I第一层的权重矩阵，$W_{U2}$和$W_{V2}$分别是U、I第二层的权重矩阵…</p><p>最后，使用余弦相似度，来得到最终的预测分数。<br>$$<br>\hat Y_{ij} = F^{DMF}(u_i,v_j|\Theta)=cosine(p_i,q_j) = \frac{p_i^T q_j}{\left \Vert p_i \right \Vert \left \Vert q_j \right \Vert} \tag{8}<br>$$</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>在过去的研究中，平方损失被大量采用<br>$$<br>L_{sqr} = \sum_{(i,j)\in Y^+\ \cup\ Y^-} w_{ij}(Y_{ij} - \hat Y_{ij})^2 \tag{10}<br>$$<br>其中，$w_{ij}$表示训练实例$(i,j)$的权重。然而，平方损失并不适用于隐式反馈问题。</p><p>在隐式反馈中，目标值$Y_{ij}​$要么是1，要么是0，表示用户$i​$与物品$j​$之间是否存在交互行为。</p><p>因此，何向南在Neural Collaborative Filtering中提出采用二元交叉熵作为损失函数：<br>$$<br>L = -\sum_{(i,j)\in Y^+\ \cup\ Y^-} Y_{ij} \log \hat Y_{ij}) + (1 - Y_{ij}) \log (1 - \hat Y_{ij}) \tag{11}<br>$$<br>作者将显式评分整合进交叉熵损失中，提出了<strong>归一化交叉熵损失</strong>（normalized cross entropy loss, <strong>nce</strong>）：<br>$$<br>L = -\sum_{(i,j) \in Y^+ \cup Y^-} (\frac{Y_{ij}}{\max (R)} \log \hat Y_{ij} + (1 - \frac{Y_{ij}}{\max (R)}) \log (1 - \hat Y_{ij})) \tag{12}<br>$$<br>其中，$\max(R)$是所有评分中的最大评分（例如，在五星评分系统中，max(R) = 5）。</p><p>其目的在于让不同的$Y_{ij}$值对损失产生不同的影响。</p><h3 id="DMF的训练算法"><a href="#DMF的训练算法" class="headerlink" title="DMF的训练算法"></a>DMF的训练算法</h3><p><img src="/static/images/dmf-training-algorithm.png" alt=""></p><p>由于$Y_{ij}$的预测评分$\hat Y_{ij}$可能为负，因此，作者使用公式(13)来转换原始预测评分。<br>$$<br>\hat Y^\circ_{ij} = \max(\mu,\hat Y_{ij}) \tag{13}<br>$$<br>其中，$\mu$是一个非常小的数字。在实验中，作者将其设置为$1.0e^{-6}​$。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1.Hong-Jian Xue, Xin-Yu Dai, Jianbing Zhang, Shujian Huang, and Jiajun Chen. 2017. Deep matrix factorization models for recommender systems. In Proceedings of the 26th International Joint Conference on Artificial Intelligence (IJCAI’17), Carles Sierra (Ed.). AAAI Press 3203-3209. <a href="https://www.ijcai.org/proceedings/2017/0447.pdf" target="_blank" rel="noopener">[PDF]</a></p><p>2.Xiangnan He, Lizi Liao, Hanwang Zhang, Liqiang Nie, Xia Hu and Tat-Seng Chua (2017). <a href="http://dl.acm.org/citation.cfm?id=3052569" target="_blank" rel="noopener">Neural Collaborative Filtering.</a> In Proceedings of WWW ‘17, Perth, Australia, April 03-07, 2017.</p><p>我的复现（Keras + TensorFlow）：<a href="https://github.com/hegongshan/deep_matrix_factorization" target="_blank" rel="noopener">https://github.com/hegongshan/deep_matrix_factorization</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter入门</title>
      <link href="/2019/10/01/python-jupyter/"/>
      <url>/2019/10/01/python-jupyter/</url>
      
        <content type="html"><![CDATA[<p>Jupyter Notebook（此前被称为 IPython notebook）是一个交互式笔记本。</p><p>Jupyter这个词是由<code>Ju</code>lia、<code>Py</code>thon和<code>R</code>中的字母组成。</p><a id="more"></a><h3 id="安装Jupyter"><a href="#安装Jupyter" class="headerlink" title="安装Jupyter"></a>安装Jupyter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure><h3 id="启动Jupyter-Notebook"><a href="#启动Jupyter-Notebook" class="headerlink" title="启动Jupyter Notebook"></a>启动Jupyter Notebook</h3><p>在命令行中输入如下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure><p>Jupyter Notebook启动后，在浏览器中访问如下链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:<span class="number">8888</span>/tree</span><br></pre></td></tr></table></figure><h3 id="Jupyter-Notebook常用快捷键"><a href="#Jupyter-Notebook常用快捷键" class="headerlink" title="Jupyter Notebook常用快捷键"></a>Jupyter Notebook常用快捷键</h3><p><code>shift</code>+<code>enter</code>：运行代码块, 选择下面的代码块</p><p><code>control</code>+<code>enter</code>：运行选中的代码块</p><p>Windows <code>alt</code>+<code>enter</code> 、 Mac <code>option</code>+<code>enter</code> ：运行代码块并且插入下面</p><ul><li>命令行模式(按 Esc 生效)</li></ul><p>双击D键：删除选中单元格</p><p>H键：显示快捷键</p><ul><li>编辑模式(按 Enter 生效)</li></ul><p>Windows <code>control</code>+<code>/</code> 、Mac <code>command</code>+<code>/</code>：注释整行/撤销注释</p><h3 id="插入LaTex"><a href="#插入LaTex" class="headerlink" title="插入LaTex"></a>插入LaTex</h3><p>在Jupyter Notebook中插入LaTex，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Latex</span><br><span class="line">Latex(<span class="string">'$a^2 + b^2 = c^2$'</span>)</span><br></pre></td></tr></table></figure><h3 id="魔法函数"><a href="#魔法函数" class="headerlink" title="魔法函数"></a>魔法函数</h3><p>在ipynb文件中输入<code>%lsmagic</code>，查看当前可以使用的魔法函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%lsmagic</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Available line magics:</span><br><span class="line">%alias  %alias_magic  %autoawait  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %conda  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %pip  %popd  %pprint  %precision  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode</span><br><span class="line"></span><br><span class="line">Available cell magics:</span><br><span class="line">%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile</span><br><span class="line"></span><br><span class="line">Automagic <span class="keyword">is</span> ON, % prefix IS NOT needed <span class="keyword">for</span> line magics.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 BPR&amp;#58 Bayesian Personalized Ranking from Implict Feedback</title>
      <link href="/2019/09/30/recommender-system-bpr/"/>
      <url>/2019/09/30/recommender-system-bpr/</url>
      
        <content type="html"><![CDATA[<p>贝叶斯个性化排序（Bayesian Personalized Ranking，BPR）是一种基于pairwise的排序算法，主要利用用户的隐式反馈（如点击、浏览、购买等行为），通过最大化后验概率来对物品进行个性化排序。</p><a id="more"></a><h3 id="BPR"><a href="#BPR" class="headerlink" title="BPR"></a>BPR</h3><h4 id="符号定义"><a href="#符号定义" class="headerlink" title="符号定义"></a>符号定义</h4><p>U表示所有用户构成的集合、I表示所有物品构成的集合，正反馈$S \subseteq U \times I$，用户u的偏好$&gt;_u \subset I^2 ​$</p><p>$&gt;_u​$需要满足：</p><ul><li><p>完整性：$\forall i,j \in I : i \neq j\ \Rightarrow i &gt;_u j \lor j &gt;_u i\quad$</p></li><li><p>反对称性：$\forall i,j \in I : i &gt;_u j \land j &gt;_u i\ \Rightarrow i = j\quad$</p></li><li><p>传递性：$\forall i,j,k \in I : i &gt;_u j \land j &gt;_u k\ \Rightarrow i &gt;_u k\quad$</p></li></ul><p>$I_u^+$表示用户u交互过的物品集合，$U_i^+​$表示与物品i有过交互的用户集合，即：<br>$$<br>I_u^+ := \{i \in I : (u,i) \in S \} \\<br>U_i^+ := \{u \in U : (u,i) \in S \}<br>$$<br>假定相对于所有未被观察到的物品，用户更偏好</p><p>从而，训练数据集$D_s$可以表示为<br>$$<br>D_s := \{(u,i,j) | i \in I_u^+ \land j \in I \setminus I_u^+ \}<br>$$<br>其中，$(u,i,j) \in D_s$表示相对于物品j，用户u更偏好物品i；$\setminus$表示两个集合相减。</p><p>由于$&gt;_u$是反对称的，因此，负样本也被隐式地考虑了。</p><h4 id="BPR优化方法"><a href="#BPR优化方法" class="headerlink" title="BPR优化方法"></a>BPR优化方法</h4><h5 id="基本假设"><a href="#基本假设" class="headerlink" title="基本假设"></a>基本假设</h5><p>（1）每个用户之间的偏好行为相互独立</p><p>（2）同一用户对不同物品的偏序相互独立</p><h5 id="目标函数的推导"><a href="#目标函数的推导" class="headerlink" title="目标函数的推导"></a>目标函数的推导</h5><p>BPR算法的<strong>基本思想</strong>是通过<strong>最大化后验概率</strong>$p(\Theta | &gt;_u)$，为所有物品$i \in I$找到正确的个性化排序。其中，$\Theta​$是任意模型（如矩阵分解）的参数向量。</p><p>根据贝叶斯公式<br>$$<br>p(\Theta | &gt;_u) \cdot p(&gt;_u) = p(&gt;_u | \Theta) \cdot p(\Theta) \tag{1}<br>$$<br>由于BPR算法假设每个用户之间的偏好行为相互独立，从而，对于任意一个用户u，其偏好的概率$p(&gt;_u)​$是一个常数。</p><p>因此，$p(\Theta | &gt;_u) ​$正比于$ p(&gt;_u | \Theta) \cdot p(\Theta)​$，即：<br>$$<br>p(\Theta | &gt;_u) \propto p(&gt;_u | \Theta) \cdot p(\Theta) \tag{2}<br>$$<br>先考虑式(2)右边第一个分量$p(&gt;_u | \Theta)$，其似然函数为<br>$$<br>\prod_{u \in U} p(&gt;_u | \Theta) = \prod_{(u,i,j) \in U \times I \times I} p(i &gt;_u j | \Theta)^{\delta ( \ (u,i,j)\ \in\ D_s\ )} \cdot (1 - p(i &gt;_u j | \Theta))^{\delta ( \ (u,i,j)\ \notin\ D_s\ )} \tag{3}<br>$$<br>其中，$\delta​$是指示函数<br>$$<br>\delta(b) :=<br>\begin{cases}<br>1, &amp; if\ b\ is\ true \\<br>0, &amp; else<br>\end{cases} \tag{4}<br>$$<br>根据完整性和反对称性，式(3)可以化简为<br>$$<br>\prod_{u \in U} p(&gt;_u | \Theta) = \prod_{(u,i,j) \in D_s} p(i &gt;_u j | \Theta) \tag{5}<br>$$<br>对于$p(i &gt;_u j | \Theta)​$这个概率，作者将其定义为<br>$$<br>p(i &gt;_u j | \Theta) := \sigma(\hat x_{uij} (\Theta)) \tag{6}<br>$$<br>其中，$\sigma​$是sigmoid函数<br>$$<br>\sigma (x) = \frac{1}{1+e^{-x}} \tag{7}<br>$$<br>当然，这里的$\sigma (x)​$可以是任何满足完整性、反对称性和传递性的函数。</p><p>$\hat{x}_{uij}(\Theta)$是关于模型参数向量$\Theta$的任意实值函数，只要该函数能够反映用户u、物品i和物品j之间的关系。</p><p>现在，我们来考虑式(2)右边的先验概率$p(\Theta)​$。</p><p>由于$\Theta$的分布是未知的，作者假设其服从均值为0，协方差矩阵为$\Sigma_\Theta = \lambda_\Theta I$的正态分布<br>$$<br>p(\Theta) \sim N(0, \Sigma_\Theta) \tag{8}<br>$$<br>$\Theta​$的概率密度函数为：<br>$$<br>f(\Theta) = \frac{1}{(2\pi)^{\frac{n}{2}} \lvert \Sigma_\Theta \rvert^{\frac{1}{2}}} \exp \{-\frac{1}{2} \Theta^T \Sigma_\Theta^{-1} \Theta \} \tag{9}<br>$$<br>经过计算<br>$$<br>\ln p(\Theta) \propto -\lambda_\Theta \lVert \Theta \rVert^2 \tag{10}<br>$$<br>于是，最大化$p(\Theta | &gt;_u) ​$变成了求解下式的最大值<br>$$<br>\begin{align}<br>BPR-OPT &amp;:= \ln p(\Theta | &gt;_u) \\<br>&amp;= \ln p(&gt;_u | \Theta) p(\Theta) \\<br>&amp;= \ln \prod_{(u,i,j) \in D_s} \sigma(\hat x_{uij}) p(\Theta) \\<br>&amp;= \sum_{(u,i,j) \in D_s} \ln \sigma(\hat x_{uij}) + \ln p(\Theta) \\<br>&amp;= \sum_{(u,i,j) \in D_s} \ln \sigma(\hat x_{uij}) - \lambda_\Theta \lVert \Theta \rVert^2<br>\end{align} \tag{11}<br>$$<br>其中，$\lambda_\Theta​$是模型的正则化参数。</p><h4 id="BPR学习算法"><a href="#BPR学习算法" class="headerlink" title="BPR学习算法"></a>BPR学习算法</h4><p>BPR-OPT对模型参数向量$\Theta$的梯度为：<br>$$<br>\begin{align}<br>\frac{\partial BPR-OPT}{\partial \Theta}<br>&amp;= \sum_{(u,i,j) \in D_s} \frac{\partial}{\partial \Theta} \ln \sigma(\hat x_{uij}) - \lambda_\Theta \frac{\partial}{\partial \Theta}\lVert \Theta \rVert^2 \\<br>&amp;= \sum_{(u,i,j) \in D_s} \frac{\partial}{\partial \Theta} \ln \sigma(\hat x_{uij}) - 2\lambda_\Theta \Theta \\<br>&amp;\propto \sum_{(u,i,j) \in D_s} \frac{e^{-\hat x_{uij}}}{1 + e^{-\hat x_{uij}}} \frac{\partial}{\partial \Theta}\hat x_{uij} - \lambda_\Theta \Theta<br>\end{align}  \tag{12}<br>$$<br>由于$\sigma (x)$为sigmoid函数，其导数为<br>$$<br>\sigma(x)^\prime = \frac{e^{-x}}{(1 + e^{-x})^2} = \sigma(x) (1 - \sigma(x)) \tag{13}<br>$$<br>故<br>$$<br>\begin{align}<br>\frac{\partial}{\partial \Theta} \ln \sigma(\hat x_{uij})<br>&amp;= \frac{1}{\sigma(\hat x_{uij})} \sigma(\hat x_{uij}) (1 - \sigma(\hat x_{uij})) \frac{\partial}{\partial \Theta}\hat x_{uij} \\<br>&amp;= \frac{e^{-\hat x_{uij}}}{1 + e^{-\hat x_{uij}}} \frac{\partial}{\partial \Theta}\hat x_{uij} \\<br>&amp;= \frac{1}{e^{\hat x_{uij}} + 1} \frac{\partial}{\partial \Theta}\hat x_{uij}<br>\end{align} \tag{14}<br>$$<br>作者提出了一个基于自助法(bootstrapping)的随机梯度下降算法LEARN<strong>BPR</strong>来最大化BPR-OPT<br>$$<br>\begin{align}<br>&amp; procedure\ LEARNBPR(D_s, \Theta) \\<br>&amp; \quad initialize\ \Theta \\<br>&amp; \quad \mathbf{repeat} \\<br>&amp; \qquad draw\ (u,i,j)\ from\ D_s \\<br>&amp; \qquad \Theta \leftarrow \Theta + \alpha \left( \frac{e^{-\hat x_{uij}}}{1 + e^{-\hat x_{uij}}} \frac{\partial}{\partial \Theta}\hat x_{uij} - \lambda_\Theta \Theta \right) \\<br>&amp; \quad \mathbf{until}\ convergence \\<br>&amp; \quad \mathbf{return}\ \hat \Theta \\<br>&amp; end procedure<br>\end{align}<br>$$<br>其中，$\alpha$为学习率，$\lambda_\Theta$为正则化参数。</p><p><strong>何为自助法</strong>？从给定训练集中有放回的均匀抽样。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>对于$\hat x_{uij} (\Theta) $，它需要满足：当$i &gt;_u j$ 时，$\hat x_{uij} &gt; 0$；反之，当$j &gt;_u i$ 时，$\hat x_{uij} &lt; 0$。</p><p>为了简化计算，作者将其定义为<br>$$<br>\hat x_{uij} := \hat x_{ui} - \hat x_{uj} \tag{15}<br>$$<br>最大化BPR-OPT，等价于最小化下式<br>$$<br>Loss = \sum_{(u,i,j) \in D_s} -\ln \sigma(\hat x_{ui} - \hat x_{uj}) + \lambda_\Theta \lVert \Theta \rVert^2 \tag{16}<br>$$</p><h4 id="矩阵分解"><a href="#矩阵分解" class="headerlink" title="矩阵分解"></a>矩阵分解</h4><p>预测$\hat x_{ui}$，可以看作是估计矩阵X：$U \times I$。目标矩阵X可以用两个低秩矩阵W：$\lvert U \rvert \times k$和H：$\lvert I \rvert \times k$的乘积来估计。<br>$$<br>\hat x := W H^T \tag{17}<br>$$<br>W中的每一行$w_u$是描述用户u的特征向量，H中的每一行$h_i$是描述物品i的特征向量。<br>$$<br>\hat x_{ui} = w_u \cdot h_i^T = \sum_{f=1}^k w_{uf} h_{if} \tag{18}<br>$$<br>从而：<br>$$<br>\hat x_{uij} = \sum_{f=1}^k w_{uf} (h_{if} - h_{jf}) \tag{19}<br>$$<br>矩阵分解的模型参数$\Theta=(W,H)​$<br>$$<br>\frac{\partial}{\partial \theta} \hat x_{uij} =<br>\begin{cases}<br>(h_{if} - h_{jf}) &amp; if\ \theta = w_{uf}, \\<br>w_{uf} &amp; if\ \theta = h_{if}, \\<br>-w_{uf} &amp; if\ \theta = h_{jf}, \\<br>0 &amp; else<br>\end{cases} \tag{20}<br>$$</p><p>此时，损失函数为：<br>$$<br>Loss = \sum_{(u,i,j) \in D_s} -\ln \sigma(\hat x_{ui} - \hat x_{uj}) + \lambda_W \cdot w_{uf}^2 + \lambda_{H^+} \cdot h_{if}^2 + \lambda_{H^-} \cdot h_{jf}^2 \tag{21}<br>$$<br>其中，$\lambda_W、\lambda_{H^+}、\lambda_{H^-}​$分别为用户特征W、正样本$h_{if}​$、负样本$h_{jf}​$的正则化参数。</p><p>模型迭代公式如下：<br>$$<br>w_{uf} \leftarrow w_{uf} + \alpha \left(\frac{1}{e^x + 1} \cdot (h_{if} - h_{jf}) - \lambda_W \cdot w_{uf} \right) \\<br>h_{if} \leftarrow h_{if} + \alpha \left(\frac{1}{e^x + 1} \cdot w_{uf} - \lambda_{H^+} \cdot h_{if} \right) \\<br>h_{jf} \leftarrow h_{jf} + \alpha \left(\frac{1}{e^x + 1} \cdot (-w_{uf}) - \lambda_{H^-} \cdot h_{jf}\right)<br>$$</p><h3 id="写在最后的话"><a href="#写在最后的话" class="headerlink" title="写在最后的话"></a>写在最后的话</h3><p>1.对于式(3)，论文中的原始表述为<br>$$<br>\prod_{u \in U} p(&gt;_u | \Theta) = \prod_{(u,i,j) \in U \times I \times I} p(i &gt;_u j | \Theta)^{\delta ( \ (u,i,j)\ \in\ D_s\ )} \cdot (1 - p(i &gt;_u j | \Theta))^{\delta ( \ (u,j,i)\ \notin\ D_s\ )}<br>$$<br>笔者认为后一项的指数应该是$\delta ( \ (u,i,j)\ \notin\ D_s\ )$ ，表示 $i &gt;_u j$ 不成立。</p><p>2.对于式(12)，论文中的原始表述为<br>$$<br>\begin{align}<br>\frac{\partial BPR-OPT}{\partial \Theta}<br>&amp;= \sum_{(u,i,j) \in D_s} \frac{\partial}{\partial \Theta} \ln \sigma(\hat x_{uij}) - \lambda_\Theta \frac{\partial}{\partial \Theta}\lVert \Theta \rVert^2 \\<br>&amp;\propto \sum_{(u,i,j) \in D_s} \frac{-e^{-\hat x_{uij}}}{1 + e^{-\hat x_{uij}}} \frac{\partial}{\partial \Theta}\hat x_{uij} - \lambda_\Theta \Theta<br>\end{align}<br>$$<br>根据式(14)，第一项的求导结果应该是不带负号的，即$\frac{e^{-\hat x_{uij}}}{1 + e^{-\hat x_{uij}}} \frac{\partial}{\partial \Theta}\hat x_{uij}$，个人认为是作者写错了。</p><p>对于上述两个问题，如果是我理解错了，希望大伙不吝赐教。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>1.Steffen Rendle, Christoph Freudenthaler, Zeno Gantner, and Lars Schmidt-Thieme. 2009. BPR: Bayesian personalized ranking from implicit feedback. In <em>Proceedings of the Twenty-Fifth Conference on Uncertainty in Artificial Intelligence</em> (UAI ‘09). AUAI Press, Arlington, Virginia, United States, 452-461. <a href="https://arxiv.org/pdf/1205.2618.pdf" target="_blank" rel="noopener">[PDF]</a></p><p>2.<a href="https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/ranking/BPRRecommender.java" target="_blank" rel="noopener">https://github.com/guoguibing/librec/blob/3.0.0/core/src/main/java/net/librec/recommender/cf/ranking/BPRRecommender.java</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python元组（tuple）</title>
      <link href="/2019/09/29/python-tuple/"/>
      <url>/2019/09/29/python-tuple/</url>
      
        <content type="html"><![CDATA[<p>在Python中，元组与列表类似，不同之处在于列表中的元素是可以修改的，而元组中的元素是不可修改的。</p><p>元组用圆括号<code>()</code>来标识，并用逗号来分隔其中的元素。</p><a id="more"></a><p>创建空元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义空元组</span></span><br><span class="line">digits = ()</span><br><span class="line">print(digits)</span><br><span class="line"><span class="comment"># 输出digits的类型</span></span><br><span class="line">print(type(digits))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">()</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>元组中只包含一个元素时，需要在元素后面添加逗号<code>,</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>,)</span><br><span class="line">print(digits)</span><br><span class="line">print(type(digits))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>,)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">tuple</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>元组中没有append()和insert()等插入元素的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 元组没有append和insert方法</span></span><br><span class="line">digits.append(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">'tuple'</span> object has no attribute <span class="string">'append'</span></span><br></pre></td></tr></table></figure><p>元组中的元素是不可变的，一旦初始化便不可修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digits = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 尝试修改元组中索引为0的元素</span></span><br><span class="line">digits[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python列表（list）</title>
      <link href="/2019/09/28/python-list/"/>
      <url>/2019/09/28/python-list/</url>
      
        <content type="html"><![CDATA[<p>在Python中，用方括号<code>[]</code>来表示列表，并用逗号来分隔其中的元素。列表中的元素类型可以不一致。</p><a id="more"></a><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><p>使用方括号[]来创建列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空列表</span></span><br><span class="line">test_list = []</span><br><span class="line">print(type(test_list))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br></pre></td></tr></table></figure><h3 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h3><ul><li>使用索引访问列表中的元素，索引从0开始。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(digits[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>负数索引-index表示倒数第index个元素。索引-1返回最后一个列表元素，索引-2返回倒数第二个列表元素，依次类推。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">print(digits[<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><p>要修改列表元素，可指定列表名和要修改的元素索引，再指定该元素的新值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">digits[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">print(digits)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">-1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h3><h4 id="在列表末尾添加元素"><a href="#在列表末尾添加元素" class="headerlink" title="在列表末尾添加元素"></a>在列表末尾添加元素</h4><p>使用append(object)方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">test_list.append(<span class="number">3</span>)</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="在列表中插入元素"><a href="#在列表中插入元素" class="headerlink" title="在列表中插入元素"></a>在列表中插入元素</h4><p>使用insert(index, object)方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">test_list.insert(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">print(test_list)</span><br><span class="line"></span><br><span class="line">test_list.insert(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="用新列表扩展原来的列表"><a href="#用新列表扩展原来的列表" class="headerlink" title="用新列表扩展原来的列表"></a>用新列表扩展原来的列表</h4><p>使用extend()方法，可以在列表末尾一次性追加另一个列表中的多个值。</p><p>函数原型：<code>extend(iterable)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">digits2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">digits.extend(digits2)</span><br><span class="line">print(digits)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="使用del关键字删除元素"><a href="#使用del关键字删除元素" class="headerlink" title="使用del关键字删除元素"></a>使用del关键字删除元素</h4><p>删除指定索引处的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 删除索引为2的元素</span></span><br><span class="line"><span class="keyword">del</span> test_list[<span class="number">2</span>]</span><br><span class="line">print(test_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除索引为1的元素</span></span><br><span class="line"><span class="keyword">del</span> test_list[<span class="number">1</span>]</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="使用方法pop-弹出元素"><a href="#使用方法pop-弹出元素" class="headerlink" title="使用方法pop()弹出元素"></a>使用方法pop()弹出元素</h4><p>删除索引为index的元素，并将其返回。index默认为-1，即删除最后一个元素。</p><p>函数原型：<code>pop(index=-1)</code></p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 删除最后一个元素</span></span><br><span class="line">x = digits.pop()</span><br><span class="line">print(x)</span><br><span class="line">print(digits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除索引为1的元素</span></span><br><span class="line">digits.pop(<span class="number">1</span>)</span><br><span class="line">print(digits)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="根据值删除元素"><a href="#根据值删除元素" class="headerlink" title="根据值删除元素"></a>根据值删除元素</h4><p>如果知道要删除的值，可以使用remove方法。</p><p>值得注意的是，remove方法只移除列表中某个值的第一个匹配项。</p><p>函数原型：<code>remove(value)</code></p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 删除最后一个元素</span></span><br><span class="line">test_list.remove(<span class="number">3</span>)</span><br><span class="line">print(test_list)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="反转列表"><a href="#反转列表" class="headerlink" title="反转列表"></a>反转列表</h3><p>使用reverse()方法，将列表中的元素反向排序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digits = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">digits.reverse()</span><br><span class="line">print(digits)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文中常见的缩写词</title>
      <link href="/2019/09/28/paper-abbreviation/"/>
      <url>/2019/09/28/paper-abbreviation/</url>
      
        <content type="html"><![CDATA[<p>在阅读英文文献时，总能看到许多缩写词，譬如e.g.和i.e.等。本文对常见的缩写词进行了总结。</p><a id="more"></a><h3 id="aka"><a href="#aka" class="headerlink" title="aka."></a>aka.</h3><p>also known as，又名。</p><h3 id="cf"><a href="#cf" class="headerlink" title="cf."></a>cf.</h3><p>源自拉丁文 confer</p><p>释义：参见，参看</p><h3 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h3><p>源自拉丁文exempli gratia</p><p>释义：等于for example，例如</p><h3 id="et-al"><a href="#et-al" class="headerlink" title="et al."></a>et al.</h3><p>等于and others</p><p>used as an abbreviation of <code>et alii</code> (masculine plural) or <code>et aliae</code> (feminine plural) or <code>et alia</code> (neutral plural) when referring to a number of people</p><h3 id="etc"><a href="#etc" class="headerlink" title="etc."></a>etc.</h3><p>源自拉丁文et cetera</p><p>释义：等等</p><h3 id="i-e"><a href="#i-e" class="headerlink" title="i.e."></a>i.e.</h3><p>源自拉丁文id est</p><p>释义：换言之</p><h3 id="i-i-d"><a href="#i-i-d" class="headerlink" title="i.i.d."></a>i.i.d.</h3><p>independent and identically distributed 独立同分布</p><h3 id="n-b"><a href="#n-b" class="headerlink" title="n.b."></a>n.b.</h3><p>源自拉丁文nota bene</p><p>释义：等于note well，注意</p><h3 id="vs"><a href="#vs" class="headerlink" title="vs."></a>vs.</h3><p>versus 与…相比</p><h3 id="w-r-t"><a href="#w-r-t" class="headerlink" title="w.r.t."></a>w.r.t.</h3><p>with respect to</p>]]></content>
      
      
      <categories>
          
          <category> paper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读 Neural Collaborative Filtering</title>
      <link href="/2019/09/17/recommender-system-neural-collaborative-filtering/"/>
      <url>/2019/09/17/recommender-system-neural-collaborative-filtering/</url>
      
        <content type="html"><![CDATA[<p>Neural Collaborative Filtering提出了一种融合模型，将深度学习运用到推荐系统中，在隐式反馈问题上获得了state-of-the-art。</p><a id="more"></a><p>隐式反馈：<br>$$<br>y_{ui} =<br>\begin{cases}<br>1, &amp; if\ iteraction\ (user\ u,item\ i)\ is\ observed; \\<br>0, &amp; otherwise.<br>\end{cases}<br>$$</p><h3 id="NCF-Neural-Collaborative-Filtering"><a href="#NCF-Neural-Collaborative-Filtering" class="headerlink" title="NCF(Neural Collaborative Filtering)"></a>NCF(Neural Collaborative Filtering)</h3><p><img src="/static/images/ncf.png" alt=""></p><p>似然函数：<br>$$<br>p(\mathcal{Y},\mathcal{Y}^{-}|\mathbf{P},\mathbf{Q},\Theta_{f}) = \prod_{(u,i) \in \mathcal{Y}} \hat y_{ui} \prod_{(u,j) \in \mathcal{Y}^{-}} (1-\hat y_{uj})<br>$$<br>取负对数，得到目标函数：<br>$$<br>\begin{align}<br>\min L &amp;= - \sum_{(u,i) \in \mathcal{Y}}\log{\hat y_{ui}} - \sum_{(u,j) \in \mathcal{Y}^{-}} \log{(1-\hat y_{uj})} \\<br> &amp;= - \sum_{(u,i) \in \mathcal{Y} \cup (u,j) \in \mathcal{Y}^{-}}{y_{ui} \log{\hat y_{ui}} + (1-y_{ui}) \log{(1-\hat y_{ui})}}<br>\end{align}<br>$$<br>上式就是二元交叉熵损失。</p><h4 id="GMF"><a href="#GMF" class="headerlink" title="GMF"></a>GMF</h4><p>$$<br>\hat y_{ui} = a_{out}(\mathbf{h}^T (\mathbf{p_u} \odot \mathbf{q_i}))<br>$$<br>其中，$a_{out}$是激活函数，$\mathbf{h}^T$是输出层的边权值，$\otimes$表示逐元素相乘，$\mathbf{p_u}$和$\mathbf{q_i}$分别表示用户u和物品i的隐向量。</p><p><img src="/static/images/ncf-gmf.png" alt=""></p><h4 id="MLP"><a href="#MLP" class="headerlink" title="MLP"></a>MLP</h4><p>$$<br>\mathbf{z_1} = \phi_{1}(\mathbf{p_u}, \mathbf{q_i}) =<br>\begin{bmatrix}<br>\mathbf{p_u} \\<br>\mathbf{q_i}<br>\end{bmatrix}, \<br>\phi_2(\mathbf{z_1}) = a_2 (\mathbf{W_2}^T \mathbf{z_1} + \mathbf{b_2})), \\<br>\cdots \\<br>\phi_L(\mathbf{z_{L-1}}) = a_L(\mathbf{W_L}^T \mathbf{z_{L-1}} + \mathbf{b_L})),\\<br>\hat{y_{ui}} = \sigma(\mathbf{h^T}\phi_L (\mathbf{Z_{L-1}}))<br>$$</p><p>其中，$\mathbf{W}_x$第x层的权重矩阵，$\mathbf{b}_x$是偏置向量，$a_x$是激活函数，$\sigma$是Sigmoid函数。</p><p><img src="/static/images/ncf-mlp.png" alt=""></p><h4 id="NeuMF（Nerual-matrix-factorization）"><a href="#NeuMF（Nerual-matrix-factorization）" class="headerlink" title="NeuMF（Nerual matrix factorization）"></a>NeuMF（Nerual matrix factorization）</h4><p>让GMF和MLP分别学习不同的embeddings，将两个模型的最后一个隐含层拼接起来。<br>$$<br>\phi^{GMF} = \mathbf{p}_u^G \odot \mathbf{q}_i^G,\\<br>\phi^{MLP}=a_L(\mathbf{W}^T_L(a_{L-1}(\cdots a_2(\mathbf{W_2}^T \mathbf{z_1} + \mathbf{b_2}) \cdots)) + \mathbf{b_L})) \\<br>\hat{y_{ui}} = \sigma (\mathbf{h}^T<br>\begin{bmatrix}<br>\phi^{GMF} \\<br>\phi^{MLP}<br>\end{bmatrix}<br>)<br>$$<br>其中，$\mathbf{p}_u^G$和$\mathbf{p}_u^M$分别表示GMF和MLP的user embedding，$\mathbf{q}_u^G$和$\mathbf{q}_u^M$亦然。</p><p><img src="/static/images/ncf-neumf.png" alt=""></p><h3 id="预训练"><a href="#预训练" class="headerlink" title="预训练"></a>预训练</h3><p>NeuMF中，将GMF和MLP的最后一个隐含层，按照如下的方式拼接起来。<br>$$<br>\mathbf{h} \leftarrow<br>\begin{bmatrix}<br>\alpha \mathbf{h}^{GMF} \\<br>(1-\alpha) \mathbf{h}^{MLP}<br>\end{bmatrix}<br>$$<br>其中，$\mathbf{h}^{GMF}$和$\mathbf{h}^{MLP}$为预训练的GMF和MLP输出层的边权值$\mathbf{h}$。$\alpha$是一个超参数，用于权衡两个预训练模型。</p><p>使用Adam对预训练的GMF和MLP进行优化；对NeuMF，使用随机梯度下降SGD进行优化。</p><h3 id="实验设置"><a href="#实验设置" class="headerlink" title="实验设置"></a>实验设置</h3><p><strong>数据集</strong>：MovieLens-1m和Pinterest</p><p><strong>评估方法</strong>：留一法（使用最后一次交互作为测试集，其他的作为训练集）</p><p>随机选取100个用户没有与之发生交互行为的物品，将测试物品与这100个样本混在一起进行排序。</p><p><strong>评测指标</strong>：击中率（Hit Ratio）和NDCG。对这两个指标，采用Top10推荐。</p><p>Hit Ratio用于判断测试物品是否在排在前10。</p><p>为每个用户计算这两个指标，最后分别求平均值。</p><p><strong>参数设置</strong>：使用高斯分布（均值为0，标准差为0.01）随机初始化模型参数，使用小批量的Adam优化模型。</p><p>使用三层的MLP，GMF和MLP的权衡超参数$\alpha$设置为0.5。（个人认为<strong>$\alpha$应该也是可以优化的</strong>，但是作者没有对$\alpha$的不同取值进行对比实验）</p><p>在训练集中，为每个正样本随机选择四个负样本。</p><h3 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h3><p>Xiangnan He, Lizi Liao, Hanwang Zhang, Liqiang Nie, Xia Hu and Tat-Seng Chua (2017). <a href="http://dl.acm.org/citation.cfm?id=3052569" target="_blank" rel="noopener">Neural Collaborative Filtering.</a> In Proceedings of WWW ‘17, Perth, Australia, April 03-07, 2017.</p><p>论文原文：<a href="http://staff.ustc.edu.cn/~hexn/papers/www17-ncf.pdf" target="_blank" rel="noopener">http://staff.ustc.edu.cn/~hexn/papers/www17-ncf.pdf</a></p><p>论文代码：<a href="https://github.com/hexiangnan/neural_collaborative_filtering" target="_blank" rel="noopener">https://github.com/hexiangnan/neural_collaborative_filtering</a></p><p>作者使用的是keras 1.0.7，在最新版本中，某些函数（或者参数）已被废弃</p><p>我的复现（Keras 2.2.5）：<a href="https://github.com/hegongshan/neural_collaborative_filtering" target="_blank" rel="noopener">https://github.com/hegongshan/neural_collaborative_filtering</a></p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras Model类中的常用方法</title>
      <link href="/2019/09/17/keras-model/"/>
      <url>/2019/09/17/keras-model/</url>
      
        <content type="html"><![CDATA[<p>近一个月来，我都在阅读Keras之父著作的《Python深度学习》一书。书中最常使用的便是Keras的Model类。</p><p>通过查阅官方文档和Model类源码，本文将Keras Model类中的常用方法进行了梳理和总结。</p><a id="more"></a><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>用于配置训练模型。</p><h3 id="fit"><a href="#fit" class="headerlink" title="fit"></a>fit</h3><p>以给定数量的轮次（数据集上的迭代）训练模型。</p><p><strong>返回</strong></p><p>一个 <code>History</code> 对象。其 <code>History.history</code> 属性是连续 epoch 训练损失和评估值，以及验证集损失和评估值的记录（如果适用）。</p><h3 id="evaluate"><a href="#evaluate" class="headerlink" title="evaluate"></a>evaluate</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">evaluate(self,</span><br><span class="line">         x=<span class="keyword">None</span>,</span><br><span class="line">         y=<span class="keyword">None</span>,</span><br><span class="line">         batch_size=<span class="keyword">None</span>,</span><br><span class="line">         verbose=<span class="number">1</span>,</span><br><span class="line">         sample_weight=<span class="keyword">None</span>,</span><br><span class="line">         steps=<span class="keyword">None</span>,</span><br><span class="line">         callbacks=<span class="keyword">None</span>,</span><br><span class="line">         max_queue_size=<span class="number">10</span>,</span><br><span class="line">         workers=<span class="number">1</span>,</span><br><span class="line">         use_multiprocessing=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>在测试模式下返回模型的误差值和评估标准值。</p><p>计算是分批进行的。</p><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承自Network类</span></span><br><span class="line">summary(self, line_length=<span class="keyword">None</span>, positions=<span class="keyword">None</span>, print_fn=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>打印网络的总结信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">line_length: Total length of printed lines</span><br><span class="line">    (e.g. set this to adapt the display to different</span><br><span class="line">    terminal window sizes).</span><br><span class="line">positions: Relative or absolute positions of log elements</span><br><span class="line">    in each line. If not provided,</span><br><span class="line">    defaults to `[.33, .55, .67, 1.]`.</span><br><span class="line">print_fn: Print function to use.</span><br><span class="line">    It will be called on each line of the summary.</span><br><span class="line">    You can set it to a custom function</span><br><span class="line">    in order to capture the string summary.</span><br><span class="line">    It defaults to `print` (prints to stdout).</span><br></pre></td></tr></table></figure><h3 id="predict"><a href="#predict" class="headerlink" title="predict"></a>predict</h3><p>为输入样本生成输出预测。</p><p>计算是分批进行的</p><h3 id="predict-classes"><a href="#predict-classes" class="headerlink" title="predict_classes"></a>predict_classes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子类Sequential中的方法</span></span><br><span class="line">predict_classes(self, x, batch_size=<span class="number">32</span>, verbose=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>为输入样本生成<strong>类别</strong>预测。</p><p>计算是分批进行的</p><p><strong>参数</strong></p><ul><li><p><strong>x</strong>: 输入数据，Numpy 数组 （或者 Numpy 数组的列表，如果模型有多个输出）。</p></li><li><p><strong>batch_size</strong>: 批量大小。如未指定，默认为 32。</p></li><li><strong>verbose</strong>: 日志显示模式，0 或 1。</li></ul><h3 id="save"><a href="#save" class="headerlink" title="save"></a>save</h3><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承自Network类</span></span><br><span class="line">save(self, filepath, overwrite=<span class="keyword">True</span>, include_optimizer=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>将模型保存到一个HDF5文件中。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> load_model</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">model.save(<span class="string">'my_model.h5'</span>)  <span class="comment"># creates a HDF5 file 'my_model.h5'</span></span><br><span class="line"><span class="keyword">del</span> model  <span class="comment"># deletes the existing model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># returns a compiled model</span></span><br><span class="line"><span class="comment"># identical to the previous one</span></span><br><span class="line">model = load_model(<span class="string">'my_model.h5'</span>)</span><br></pre></td></tr></table></figure><h3 id="save-weights"><a href="#save-weights" class="headerlink" title="save_weights"></a>save_weights</h3><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承自Network类</span></span><br><span class="line">save_weights(self, filepath, overwrite=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>将各层的权重存储到HDF5文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filepath: String, path to the file to save the weights to.</span><br><span class="line">overwrite: Whether to silently overwrite any existing file at the</span><br><span class="line">    target location, or provide the user with a manual prompt.</span><br></pre></td></tr></table></figure><h3 id="load-weights"><a href="#load-weights" class="headerlink" title="load_weights"></a>load_weights</h3><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承自Network类</span></span><br><span class="line">load_weights(self, filepath, by_name=<span class="keyword">False</span>, skip_mismatch=<span class="keyword">False</span>, reshape=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="get-layer"><a href="#get-layer" class="headerlink" title="get_layer"></a>get_layer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继承自Network类</span></span><br><span class="line">get_layer(self, name=<span class="keyword">None</span>, index=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>根据名称（唯一）或索引值查找网络层。</p><p>如果同时提供了 <code>name</code> 和 <code>index</code>，则 <code>index</code> 将优先。索引值来自于水平图遍历的顺序（自下而上）。</p><blockquote><p>Keras Model类中文文档 <a href="https://keras.io/zh/models/model/#model" target="_blank" rel="noopener">https://keras.io/zh/models/model/#model</a></p><p> Model类源码 <a href="https://github.com/keras-team/keras/blob/master/keras/engine/training.py" target="_blank" rel="noopener">https://github.com/keras-team/keras/blob/master/keras/engine/training.py</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串（str）</title>
      <link href="/2019/09/13/python-string/"/>
      <url>/2019/09/13/python-string/</url>
      
        <content type="html"><![CDATA[<p>字符串是Python中最常用的数据类型。我们可以使用引号<code>&#39;</code>或<code>”</code>来创建字符串。</p><a id="more"></a><h3 id="capitalize"><a href="#capitalize" class="headerlink" title="capitalize()"></a>capitalize()</h3><p>将字符串的<strong>第一个字母变成大写，其他字母变小写</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">'wuhan City'</span></span><br><span class="line">print(temp.capitalize())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wuhan city</span><br></pre></td></tr></table></figure><h3 id="title"><a href="#title" class="headerlink" title="title()"></a>title()</h3><p>返回”标题化”的字符串——所有单词的首个字母转化为大写，其余字母均为小写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">'wuHan different every day!'</span></span><br><span class="line">print(temp.title())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wuhan Different Every Day!</span><br></pre></td></tr></table></figure><h3 id="upper"><a href="#upper" class="headerlink" title="upper()"></a>upper()</h3><p>将字符串中的小写字母转换为大写字母。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">'wuhan city'</span></span><br><span class="line">print(temp.upper())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WUHAN CITY</span><br></pre></td></tr></table></figure><h3 id="lower"><a href="#lower" class="headerlink" title="lower()"></a>lower()</h3><p>将字符串中的大写字母转换为小写字母。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">'Wuhan City'</span></span><br><span class="line">print(temp.lower())</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wuhan city</span><br></pre></td></tr></table></figure><h3 id="lstrip"><a href="#lstrip" class="headerlink" title="lstrip()"></a>lstrip()</h3><p>返回截掉字符串左边的空格或指定字符后生成的新字符串。</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.lstrip([chars])</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">temp = <span class="string">'  wuhan city'</span></span><br><span class="line">print(temp.lstrip())</span><br><span class="line">temp = <span class="string">'hhwuhan city88'</span></span><br><span class="line">print(temp.lstrip(<span class="string">'h'</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wuhan city</span><br><span class="line">wuhan city88</span><br></pre></td></tr></table></figure><h3 id="rstrip"><a href="#rstrip" class="headerlink" title="rstrip()"></a>rstrip()</h3><p>返回截掉字符串右边的空格或指定字符后生成的新字符串。</p><h3 id="strip"><a href="#strip" class="headerlink" title="strip()"></a>strip()</h3><p>返回移除字符串头尾指定的字符序列（默认为空格）生成的新字符串。</p><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><p>用于将序列中的元素以指定的字符连接生成一个新的字符串。</p><p>语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.join(sequence)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seq = [<span class="string">'w'</span>,<span class="string">'u'</span>,<span class="string">'h'</span>,<span class="string">'a'</span>,<span class="string">'n'</span>]</span><br><span class="line">print(<span class="string">'-'</span>.join(seq))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w-u-h-a-n</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas入门</title>
      <link href="/2019/09/12/python-pandas/"/>
      <url>/2019/09/12/python-pandas/</url>
      
        <content type="html"><![CDATA[<p>Pandas是一个Python数据分析库。</p><p>按照标准约定，我们在使用Pandas时，最好遵循如下格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p>数据帧：二维表格型数据结构。</p><p>构造函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataFrame(data=<span class="keyword">None</span>, index=<span class="keyword">None</span>, columns=<span class="keyword">None</span>, dtype=<span class="keyword">None</span>, copy=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p>常用属性</p><ul><li><p>values：返回一个DataFrame的NumPy表示</p></li><li><p>shape：返回一个表示DataFrame维度的元组</p></li></ul><h4 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h4><ul><li>at：通过行名和列名来访问某一个元素。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame([[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]],</span><br><span class="line">                  index=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">print(df)</span><br><span class="line">print(df.at[<span class="number">4</span>,<span class="string">'B'</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    A   B   C</span><br><span class="line"><span class="number">4</span>   <span class="number">0</span>   <span class="number">2</span>   <span class="number">3</span></span><br><span class="line"><span class="number">5</span>   <span class="number">0</span>   <span class="number">4</span>   <span class="number">1</span></span><br><span class="line"><span class="number">6</span>  <span class="number">10</span>  <span class="number">20</span>  <span class="number">30</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>iat：通过行和列的索引来访问某一个元素。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df = pd.DataFrame([[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]],</span><br><span class="line">                  index=[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], columns=[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>])</span><br><span class="line">print(df.iat[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>head</li></ul><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head(n=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>返回DataFrame的前n行，n的默认值为5。</p><ul><li>tail</li></ul><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail(n=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>返回DataFrame的最后n行，n的默认值为5。</p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ul><li>iterrows()：按照行进行迭代，每次返回一个(index, Series)对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="number">23</span>,<span class="number">24</span>],[<span class="number">25</span>,<span class="number">26</span>]],columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index,row <span class="keyword">in</span> df.iterrows():</span><br><span class="line">    print(index)</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line">A    <span class="number">23</span></span><br><span class="line">B    <span class="number">24</span></span><br><span class="line">Name: <span class="number">0</span>, dtype: int64</span><br><span class="line"><span class="number">1</span></span><br><span class="line">A    <span class="number">25</span></span><br><span class="line">B    <span class="number">26</span></span><br><span class="line">Name: <span class="number">1</span>, dtype: int64</span><br></pre></td></tr></table></figure><ul><li>iteritems()和items()：按照列进行迭代，每次返回一个(column name, Series)对</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="number">23</span>,<span class="number">24</span>],[<span class="number">25</span>,<span class="number">26</span>]],columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> label, content <span class="keyword">in</span> df.iteritems():</span><br><span class="line">    print(label)</span><br><span class="line">    print(content)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A</span><br><span class="line"><span class="number">0</span>    <span class="number">23</span></span><br><span class="line"><span class="number">1</span>    <span class="number">25</span></span><br><span class="line">Name: A, dtype: int64</span><br><span class="line">B</span><br><span class="line"><span class="number">0</span>    <span class="number">24</span></span><br><span class="line"><span class="number">1</span>    <span class="number">26</span></span><br><span class="line">Name: B, dtype: int64</span><br></pre></td></tr></table></figure><h4 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h4><p>添加行可以使用DataFrame的append()方法，该方法将返回一个新的DataFrame对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([[<span class="number">23</span>,<span class="number">24</span>]],columns=[<span class="string">'A'</span>,<span class="string">'B'</span>])</span><br><span class="line">print(df)</span><br><span class="line">df = df.append(pd.DataFrame([[<span class="number">33</span>,<span class="number">44</span>]],columns=(<span class="string">'A'</span>,<span class="string">'B'</span>)),ignore_index=<span class="keyword">True</span>)</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  <span class="number">23</span>  <span class="number">24</span></span><br><span class="line">    A   B</span><br><span class="line"><span class="number">0</span>  <span class="number">23</span>  <span class="number">24</span></span><br><span class="line"><span class="number">1</span>  <span class="number">33</span>  <span class="number">44</span></span><br></pre></td></tr></table></figure><h4 id="删除行-列"><a href="#删除行-列" class="headerlink" title="删除行/列"></a>删除行/列</h4><p>删除行/列，可以使用DataFrame的drop()方法，该方法将返回一个新的DataFrame对象。</p><p>drop()包含一个叫axis的参数：</p><p><strong>axis</strong> : {0 or ‘index’, 1 or ‘columns’}, default 0</p><p>Whether to drop labels from the index (0 or ‘index’) or columns (1 or ‘columns’).</p><h3 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h3><p>使用read_csv()方法，可以读取CSV文件，并返回一个DataFrame对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'./test.csv'</span>)</span><br></pre></td></tr></table></figure><h3 id="生成CSV文件"><a href="#生成CSV文件" class="headerlink" title="生成CSV文件"></a>生成CSV文件</h3><p>使用DataFrame对象的to_csv()方法，可以方便地生成CSV文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">...</span><br><span class="line">df.to_csv(<span class="string">'./test.csv'</span>)</span><br></pre></td></tr></table></figure><h3 id="读取Excel文件"><a href="#读取Excel文件" class="headerlink" title="读取Excel文件"></a>读取Excel文件</h3><p>读取Excel可以使用read_excel()（使用前需要先<strong>安装xlrd</strong>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">'./test.xlsx'</span>)</span><br></pre></td></tr></table></figure><h3 id="生成Excel文件"><a href="#生成Excel文件" class="headerlink" title="生成Excel文件"></a>生成Excel文件</h3><p>使用DataFrame对象的to_excel()方法，可以方便地生成Excel文件（使用前需要先<strong>安装xlwt</strong>）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">...</span><br><span class="line">df.to_excel(<span class="string">'./test.xlsx'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201709-3.JSON查询</title>
      <link href="/2019/09/12/ccf-csp-20170903/"/>
      <url>/2019/09/12/ccf-csp-20170903/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式，可以用来描述半结构化的数据。JSON 格式中的基本单元是值 (value)，出于简化的目的本题只涉及 2 种类型的值：</p><ul><li>字符串 (string)：字符串是由双引号 “ 括起来的一组字符（可以为空）。如果字符串的内容中出现双引号 “，在双引号前面加反斜杠，也就是用 <code>\&quot;</code> 表示；如果出现反斜杠 \，则用两个反斜杠 <code>\\</code> 表示。反斜杠后面不能出现 “ 和 \ 以外的字符。例如：<code>&quot;&quot;</code>、<code>&quot;hello&quot;</code>、<code>&quot;\&quot;\\&quot;</code>。</li><li>对象 (object)：对象是一组键值对的无序集合（可以为空）。键值对表示对象的属性，键是属性名，值是属性的内容。对象以左花括号 { 开始，右花括号 } 结束，键值对之间以逗号 , 分隔。一个键值对的键和值之间以冒号 : 分隔。键必须是字符串，同一个对象所有键值对的键必须两两都不相同；值可以是字符串，也可以是另一个对象。例如：{}、{“foo”: “bar”}、{“Mon”: “weekday”, “Tue”: “weekday”, “Sun”: “weekend”}。<br>  除了字符串内部的位置，其他位置都可以插入一个或多个空格使得 JSON 的呈现更加美观，也可以在一些地方换行，不会影响所表示的数据内容。例如，上面举例的最后一个 JSON 数据也可以写成如下形式。<br>  　　{<br>  　　“Mon”: “weekday”,<br>  　　“Tue”: “weekday”,<br>  　　“Sun”: “weekend”<br>  　　}<br>  　　给出一个 JSON 格式描述的数据，以及若干查询，编程返回这些查询的结果。</li></ul><a id="more"></a><p><strong>输入格式</strong></p><p>　　第一行是两个正整数 <em>n</em> 和 <em>m</em>，分别表示 JSON 数据的行数和查询的个数。<br>　　接下来 <em>n</em> 行，描述一个 JSON 数据，保证输入是一个合法的 JSON 对象。<br>　　接下来 <em>m</em> 行，每行描述一个查询。给出要查询的属性名，要求返回对应属性的内容。需要支持多层查询，各层的属性名之间用小数点 . 连接。保证查询的格式都是合法的。</p><p><strong>输出格式</strong></p><p>　　对于输入的每一个查询，按顺序输出查询结果，每个结果占一行。<br>　　如果查询结果是一个字符串，则输出 STRING &lt;string&gt;，其中 &lt;string&gt; 是字符串的值，中间用一个空格分隔。<br>　　如果查询结果是一个对象，则输出 OBJECT，不需要输出对象的内容。<br>　　如果查询结果不存在，则输出 NOTEXIST。</p><p><strong>样例输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">10 5</span><br><span class="line">&#123;</span><br><span class="line">&quot;firstName&quot;: &quot;John&quot;,</span><br><span class="line">&quot;lastName&quot;: &quot;Smith&quot;,</span><br><span class="line">&quot;address&quot;: &#123;</span><br><span class="line">&quot;streetAddress&quot;: &quot;2ndStreet&quot;,</span><br><span class="line">&quot;city&quot;: &quot;NewYork&quot;,</span><br><span class="line">&quot;state&quot;: &quot;NY&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;esc\\aped&quot;: &quot;\&quot;hello\&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line">firstName</span><br><span class="line">address</span><br><span class="line">address.city</span><br><span class="line">address.postal</span><br><span class="line">esc\aped</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">STRING John</span><br><span class="line">OBJECT</span><br><span class="line">STRING NewYork</span><br><span class="line">NOTEXIST</span><br><span class="line">STRING &quot;hello&quot;</span><br></pre></td></tr></table></figure><p><strong>评测用例规模与约定</strong></p><p>　　<em>n</em> ≤ 100，每行不超过 80 个字符。<br>　　<em>m</em> ≤ 100，每个查询的长度不超过 80 个字符。<br>　　字符串中的字符均为 ASCII 码 33-126 的可打印字符，不会出现空格。所有字符串都不是空串。<br>　　所有作为键的字符串不会包含小数点 .。查询时键的大小写敏感。<br>　　50%的评测用例输入的对象只有 1 层结构，80%的评测用例输入的对象结构层数不超过 2 层。举例来说，{“a”: “b”} 是一层结构的对象，{“a”: {“b”: “c”}} 是二层结构的对象，以此类推。</p><hr><p><strong>分析：</strong></p><p>使用<code>map&lt;string,string&gt;</code>存储解析后的JSON字符串。</p><p>遇到对象，键值用<code>{}</code>表示。对象parent中的子对象或者字符串的属性名key，使用<code>parent + &#39;.&#39; + key</code> 作键名。</p><p>解析字符串的过程如下：</p><p>遇到右花括号<code>}</code>，则表示当前需要处理的json串已经结束；</p><p>遇到空格或者逗号<code>,</code>，则直接跳过；</p><p>遇到引号<code>&quot;</code>，则获取键名；</p><p>遇到冒号<code>:</code>，则先去掉可能存在的空格，然后判断值是字符串，还是对象。</p><p>若为字符串，则获取键值；若为对象，则去掉左花括号<code>{</code>后面可能存在的空格，继续解析JSON子串。</p><p><strong>注意：</strong></p><p>1.键的大小写敏感。</p><p>2.键名和键值中可能存在转义字符，需要将<code>\&quot;</code>转换为<code>&quot;</code>，将<code>\\</code>转换为<code>\</code>。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; json;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从下标i开始，寻找键名或者键值，并去掉首尾的引号、中间的转义符号'\'</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> &amp;i, <span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> key;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">while</span> (i &lt; str.size() &amp;&amp; str[i] != <span class="string">'"'</span>) &#123;</span><br><span class="line"><span class="comment">// 若遇到转义符号，则跳过一位</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'\\'</span>) &#123;</span><br><span class="line">key += str[++i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">key += str[i];</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json字符串，parent表示当前处理的json串是哪个键的值，</span></span><br><span class="line"><span class="comment">// str为尚未解析的字符串，返回值为本次解析的json串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parseJSON</span><span class="params">(<span class="built_in">string</span> parent, <span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> key;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遇到右花括号&#125;，表示当前需要处理的json串已经结束</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">' '</span> || str[i] == <span class="string">','</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'"'</span>) &#123;</span><br><span class="line">key = get(i, str);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">':'</span>) &#123;</span><br><span class="line"><span class="comment">// 去掉可能存在的空格</span></span><br><span class="line"><span class="keyword">while</span> (str[++i] == <span class="string">' '</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 若值为字符串</span></span><br><span class="line"><span class="keyword">if</span> (str[i] == <span class="string">'"'</span>) &#123;</span><br><span class="line"><span class="built_in">string</span> value = get(i, str);</span><br><span class="line"><span class="keyword">if</span> (!parent.empty()) &#123;</span><br><span class="line">json[parent + <span class="string">'.'</span> + key] = value;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">json[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若值为对象</span></span><br><span class="line"><span class="comment">// 去掉左花括号&#123;后面可能存在的空格</span></span><br><span class="line"><span class="keyword">while</span> (str[++i] == <span class="string">' '</span>) &#123;&#125;</span><br><span class="line"><span class="built_in">string</span> newParent;</span><br><span class="line"><span class="keyword">if</span> (!parent.empty()) &#123;</span><br><span class="line">newParent = parent + <span class="string">'.'</span> + key;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newParent = key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用&#123;&#125;标记newParent的值为对象</span></span><br><span class="line">json[newParent] = <span class="string">"&#123;&#125;"</span>;</span><br><span class="line"><span class="comment">// 解析子串</span></span><br><span class="line">i += parseJSON(newParent, str.substr(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, line);</span><br><span class="line">str += line;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parseJSON(<span class="string">""</span>, str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; line;</span><br><span class="line"><span class="keyword">if</span> (!json.count(line)) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NOTEXIST"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (json[line] == <span class="string">"&#123;&#125;"</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"OBJECT"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"STRING "</span> &lt;&lt; json[line] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; json = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回键名或键值最后一个字符的索引号</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">offset</span><span class="params">(<span class="keyword">int</span> i, String str)</span> </span>&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">while</span> (i &lt; str.length() &amp;&amp; str.charAt(i) != <span class="string">'"'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) == <span class="string">'\\'</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析json字符串，parent表示当前处理的json串是哪个键的值，</span></span><br><span class="line"><span class="comment">// str为尚未解析的字符串，返回值为本次解析的json串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseJSON</span><span class="params">(String parent, String str)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">String key = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) == <span class="string">' '</span> || str.charAt(i) == <span class="string">','</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) == <span class="string">'"'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> index = offset(i, str);</span><br><span class="line"><span class="comment">// 将键名中的\\替换为\，\"替换为"</span></span><br><span class="line">key = str.substring(i + <span class="number">1</span>, index).replace(<span class="string">"\\\\"</span>, <span class="string">"\\"</span>).replace(<span class="string">"\\\""</span>, <span class="string">"\""</span>);</span><br><span class="line">i = index;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) == <span class="string">':'</span>) &#123;</span><br><span class="line"><span class="comment">// 去掉可能存在的空格</span></span><br><span class="line"><span class="keyword">while</span> (str.charAt(++i) == <span class="string">' '</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 若值为字符串</span></span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) == <span class="string">'"'</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> index = offset(i, str);</span><br><span class="line">String value = str.substring(i + <span class="number">1</span>, index).replace(<span class="string">"\\\\"</span>, <span class="string">"\\"</span>).replace(<span class="string">"\\\""</span>, <span class="string">"\""</span>);</span><br><span class="line">i = index;</span><br><span class="line"><span class="keyword">if</span> (parent.isEmpty()) &#123;</span><br><span class="line">json.put(key, value);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">json.put(parent + <span class="string">'.'</span> + key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若值为对象</span></span><br><span class="line"><span class="comment">// 去掉左花括号&#123;后面可能存在的空格</span></span><br><span class="line"><span class="keyword">while</span> (str.charAt(++i) == <span class="string">' '</span>) &#123;&#125;</span><br><span class="line">String newParent;</span><br><span class="line"><span class="keyword">if</span> (parent.isEmpty()) &#123;</span><br><span class="line">newParent = key;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">newParent = parent + <span class="string">'.'</span> + key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用&#123;&#125;标记newParent的值为对象</span></span><br><span class="line">json.put(newParent, <span class="string">"&#123;&#125;"</span>);</span><br><span class="line"><span class="comment">// 解析子串</span></span><br><span class="line">i += parseJSON(newParent, str.substring(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str.length();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">scan.nextLine();</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">sb.append(scan.nextLine().trim());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parseJSON(<span class="string">""</span>, sb.toString());</span><br><span class="line"></span><br><span class="line">StringBuilder out = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">String key = scan.nextLine().trim();</span><br><span class="line"><span class="keyword">if</span> (!json.containsKey(key)) &#123;</span><br><span class="line">out.append(<span class="string">"NOTEXIST\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.get(key) == <span class="string">"&#123;&#125;"</span>) &#123;</span><br><span class="line">out.append(<span class="string">"OBJECT\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.append(<span class="string">"STRING "</span>).append(json.get(key)).append(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">System.out.println(out.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201809-3.元素选择器</title>
      <link href="/2019/09/12/ccf-csp-20180903/"/>
      <url>/2019/09/12/ccf-csp-20180903/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20180903-1.jpg" alt=""></p><a id="more"></a><p><img src="/static/images/ccf-csp-20180903-2.jpg" alt=""></p><p><img src="/static/images/ccf-csp-20180903-3.jpg" alt=""></p><p><img src="/static/images/ccf-csp-20180903-4.jpg" alt=""></p><hr><p><strong>分析：</strong></p><p>定义结构体（类）存储每一个元素节点</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 当前节点位于文档树中第几层</span></span><br><span class="line"><span class="keyword">int</span> level;</span><br><span class="line"><span class="built_in">string</span> label, id;</span><br><span class="line">&#125; Element;</span><br></pre></td></tr></table></figure><p>使用C++中的vector&lt;Element&gt;（Java中使用List&lt;Element&gt;）存储整个文档。</p><p>在文档中，元素e的父节点就是e前面第一个level小于e的元素。</p><p>查询分为以下三种情况：</p><p>（1）id选择器。题目告诉我们，<strong>文档中不同的元素不会有相同的id属性</strong>。</p><p>（2）标签选择器。匹配的标签可能有很多个。</p><p>（3）后代选择器。题目提示我们：除最后一级外，前面的部分都可以尽量匹配层级小的元素。</p><p>因此，我们可以从后代选择器的最后一个选择器selector开始，在文档中寻找匹配的元素。如果能找到这样的元素e，则在e的祖先元素中，寻找与selector的前一个选择器相匹配的元素。当遍历到根结点或者已经找到与后代选择器相匹配的元素时，循环结束。</p><p><strong>注意：</strong></p><p>1.id属性区分大小写，而标签不区分大小写。</p><p>2.后代选择器：A B，其中A和B均为标签选择器或者id选择器，表示选择满足选择器B的所有元素，且满足这些元素有<strong>祖先元素</strong>满足选择器A。因此，只要有祖先元素满足选择器A即可，父元素并不一定要满足选择器A。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 当前节点位于文档树中第几层</span></span><br><span class="line"><span class="keyword">int</span> level;</span><br><span class="line"><span class="built_in">string</span> label, id;</span><br><span class="line">&#125; Element;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转换为小写形式</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_lower</span><span class="params">(<span class="built_in">string</span> tag)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tag.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= tag[i] &amp;&amp; tag[i] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">tag[i] += <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Element&gt; doc;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">int</span> parent = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, line);</span><br><span class="line">Element e;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算当前节点在文档树中的层级</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (line[count] == <span class="string">'.'</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">e.level = count / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理标签和id</span></span><br><span class="line"><span class="keyword">int</span> index = line.find(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (index != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">e.label = to_lower(line.substr(count, index - count));</span><br><span class="line">e.id = line.substr(index + <span class="number">1</span>, line.size() - index - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">e.label = to_lower(line.substr(count));</span><br><span class="line">e.id = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">doc.push_back(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, line);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若为id选择器或者标签选择器</span></span><br><span class="line"><span class="keyword">if</span> (line.find(<span class="string">" "</span>) == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; doc.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (doc[i].id == line || doc[i].label == to_lower(line)) &#123;</span><br><span class="line">pos.push_back(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; line;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储后代选择器中的所有选择器</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; selectors;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; line) &#123;</span><br><span class="line"><span class="comment">// 若为标签，则转换为小写形式</span></span><br><span class="line"><span class="keyword">if</span> (line[<span class="number">0</span>] != <span class="string">'#'</span>) &#123;</span><br><span class="line">line = to_lower(line);</span><br><span class="line">&#125;</span><br><span class="line">selectors.push_back(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> last = selectors[selectors.size() - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; doc.size(); i++) &#123;</span><br><span class="line"><span class="comment">// 如果当前元素与后代选择器的最后一个选择器不匹配，则继续循环</span></span><br><span class="line"><span class="keyword">if</span> (last != doc[i].id &amp;&amp; last != doc[i].label) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = selectors.size() - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> level = doc[i].level;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt;= <span class="number">0</span> &amp;&amp; index &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">Element e = doc[k];</span><br><span class="line"><span class="built_in">string</span> selector = selectors[index];</span><br><span class="line"><span class="comment">// 寻找父节点（level比当前节点小的第一个节点）</span></span><br><span class="line"><span class="keyword">if</span> (e.level &lt; level) &#123;</span><br><span class="line">level = e.level;</span><br><span class="line"><span class="comment">// 若父节点匹配当前选择器，则继续匹配；否则，继续向上寻找祖先节点</span></span><br><span class="line"><span class="keyword">if</span> (selector == e.id || selector == e.label) &#123;</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果完全匹配后代选择器</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">pos.push_back(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pos.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos.size(); i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; pos[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> level;</span><br><span class="line">String label, id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Element</span><span class="params">(<span class="keyword">int</span> level, String label, String id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.level = level;</span><br><span class="line"><span class="keyword">this</span>.label = label;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line">scan.nextLine();</span><br><span class="line"></span><br><span class="line">List&lt;Element&gt; doc = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">String line = scan.nextLine();</span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line">String label, id;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算当前节点在文档树中的层级</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (line.charAt(count) == <span class="string">'.'</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">level = count / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理标签和id</span></span><br><span class="line"><span class="keyword">int</span> index = line.indexOf(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">label = line.substring(count);</span><br><span class="line">id = <span class="string">""</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">label = line.substring(count, index);</span><br><span class="line">id = line.substring(index + <span class="number">1</span>, line.length());</span><br><span class="line">&#125;</span><br><span class="line">doc.add(<span class="keyword">new</span> Element(level, label, id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">String selector = scan.nextLine();</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若为id选择器或者标签选择器</span></span><br><span class="line"><span class="keyword">if</span> (!selector.contains(<span class="string">" "</span>)) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; doc.size(); j++) &#123;</span><br><span class="line">Element e = doc.get(j);</span><br><span class="line"><span class="keyword">if</span> (selector.equalsIgnoreCase(e.label) || selector.equals(e.id)) &#123;</span><br><span class="line">list.add(j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">String[] selectors = selector.split(<span class="string">" "</span>);</span><br><span class="line">String last = selectors[selectors.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; doc.size(); j++) &#123;</span><br><span class="line"><span class="comment">// 如果当前元素与后代选择器的最后一个选择器不匹配，则继续循环</span></span><br><span class="line"><span class="keyword">if</span> (!last.equalsIgnoreCase(doc.get(j).label) &amp;&amp; !last.equals(doc.get(j).id)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = selectors.length - <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> level = doc.get(j).level;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = j; k &gt;= <span class="number">0</span> &amp;&amp; index &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">Element e = doc.get(k);</span><br><span class="line">String str = selectors[index];</span><br><span class="line"><span class="comment">// 寻找父节点（level比当前节点小的第一个节点）</span></span><br><span class="line"><span class="keyword">if</span> (e.level &lt; level) &#123;</span><br><span class="line">level = e.level;</span><br><span class="line"><span class="comment">// 若父节点匹配当前选择器，则继续匹配；否则，向上寻找祖先节点</span></span><br><span class="line"><span class="keyword">if</span> (str.equalsIgnoreCase(e.label) || str.equals(e.id)) &#123;</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果完全匹配后代选择器</span></span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">list.add(j + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(list.size());</span><br><span class="line"><span class="keyword">for</span> (Integer line : list) &#123;</span><br><span class="line">System.out.print(<span class="string">" "</span> + line);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201412-3.集合竞价</title>
      <link href="/2019/09/10/ccf-csp-20141203/"/>
      <url>/2019/09/10/ccf-csp-20141203/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　某股票交易所请你编写一个程序，根据开盘前客户提交的订单来确定某特定股票的开盘价和开盘成交量。<br>　　该程序的输入由很多行构成，每一行为一条记录，记录可能有以下几种：<br>  　　1. buy p s 表示一个购买股票的买单，每手出价为p，购买股数为s。<br>  　　2. sell p s 表示一个出售股票的卖单，每手出价为p，出售股数为s。<br>  　　3. cancel i表示撤销第i行的记录。<br>      如果开盘价为p0，则系统可以将所有出价至少为p0的买单和所有出价至多为p0的卖单进行匹配。因此，此时的开盘成交量为出价至少为p0的买单的总股数和所有出价至多为p0的卖单的总股数之间的较小值。<br>      　　你的程序需要确定一个开盘价，使得开盘成交量尽可能地大。如果有多个符合条件的开盘价，你的程序应当输出最高的那一个。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入数据有任意多行，每一行是一条记录。保证输入合法。股数为不超过$10^8$的正整数，出价为精确到恰好小数点后两位的正实数，且不超过10000.00。</p><p><strong>输出格式</strong></p><p>　　你需要输出一行，包含两个数，以一个空格分隔。第一个数是开盘价，第二个是此开盘价下的成交量。开盘价需要精确到小数点后恰好两位。</p><p><strong>样例输入</strong></p><p>buy 9.25 100<br>buy 8.88 175<br>sell 9.00 1000<br>buy 9.00 400<br>sell 8.92 400<br>cancel 1<br>buy 100.00 50</p><p><strong>样例输出</strong></p><p>9.00 450</p><p><strong>评测用例规模与约定</strong></p><p>　　对于100%的数据，输入的行数不超过5000。</p><hr><p><strong>分析：</strong></p><p>定义类（结构体）表示每行的交易记录</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 交易类型，0-buy,1-sell,2-cancel</span></span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"><span class="comment">// 出价</span></span><br><span class="line"><span class="keyword">float</span> price;</span><br><span class="line"><span class="comment">// 交易的股数</span></span><br><span class="line"><span class="keyword">int</span> amount;</span><br><span class="line"><span class="comment">// 交易是否被取消</span></span><br><span class="line"><span class="keyword">bool</span> cancel;</span><br><span class="line">&#125; Transaction;</span><br></pre></td></tr></table></figure><p>用vector&lt;Transaction&gt;（Java中用List&lt;Transaction&gt;）存储输入的所有交易记录。</p><p>按照交易记录的类型，分为买单和卖单。买单和卖单均按照价格从小到大的顺序排列。</p><p>设使得成交量最大的开盘价为price，最大成交量为maxAmount，二者均初始化为0。</p><p>遍历所有的买单（开盘价一定会在买单中出现，证明见2），以当前交易的出价p为开盘价，计算成交量dealAmount。</p><p>若dealAmount &gt; maxAmount 或者 dealAmount == maxAmount &amp;&amp; p &gt; price，则更新price和maxAmount。</p><p>1.成交量最高将达到$2500 \times 10^8 = 2.5 \times 10^{11}​$，超出了int的存储范围。</p><p>因此，在C++中，成交量、买单和卖单的总股数，要用long long存储；Java中使用long存储。</p><p>2.<strong>开盘价p0一定会在买单中出现。</strong></p><p><strong>证明：</strong>（反证法）假设开盘价p0只在卖单中出现：</p><p>设出价至少为p0的买单的总股数为s1，出价至多为p0的卖单的总股数为s2。</p><p>此时的成交量$sale0 = min(s1,s2)$</p><p>$\exists p \in 买单, 使得p \gt p0成立$，$p1 = \min p \gt p0$。</p><p>设出价至少为p1的买单的总股数为s3，出价至多为p1的卖单的总股数为s4。</p><p>从而，$s1 =s3,s2 \le s4 $ ,</p><p> $sale1=min(s1,s4) \ge sale0$，应选择p1为开盘价，这与假设矛盾。</p><p>故，开盘价一定会在买单中出现。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 交易类型，0-buy,1-sell,2-cancel</span></span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"><span class="comment">// 出价</span></span><br><span class="line"><span class="keyword">float</span> price;</span><br><span class="line"><span class="comment">// 交易的股数</span></span><br><span class="line"><span class="keyword">int</span> amount;</span><br><span class="line"><span class="comment">// 交易是否被取消</span></span><br><span class="line"><span class="keyword">bool</span> cancel;</span><br><span class="line">&#125; Transaction;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Transaction a, Transaction b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.price &lt; b.price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> status[<span class="number">7</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;Transaction&gt; arr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, status) != EOF) &#123;</span><br><span class="line">Transaction t;</span><br><span class="line"><span class="comment">// 若为撤销</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(status, <span class="string">"cancel"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> line;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;line);</span><br><span class="line"></span><br><span class="line">t.type = <span class="number">2</span>;</span><br><span class="line">t.cancel = <span class="literal">true</span>;</span><br><span class="line">arr.push_back(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销第line行的交易记录</span></span><br><span class="line">arr[line - <span class="number">1</span>].cancel = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(status, <span class="string">"buy"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 若为买单</span></span><br><span class="line">t.type = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 若为卖单</span></span><br><span class="line">t.type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">t.cancel = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f %d"</span>, &amp;t.price, &amp;t.amount);</span><br><span class="line">arr.push_back(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割为买单和卖单</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Transaction&gt; buys;</span><br><span class="line"><span class="built_in">vector</span>&lt;Transaction&gt; sells;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line"><span class="comment">// 忽略被撤销的交易记录（或者撤销命令本身）</span></span><br><span class="line"><span class="keyword">if</span> (arr[i].cancel) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i].type == <span class="number">0</span>) &#123;</span><br><span class="line">buys.push_back(arr[i]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sells.push_back(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照价格从小到大排序</span></span><br><span class="line">sort(buys.begin(), buys.end(), cmp);</span><br><span class="line">sort(sells.begin(), sells.end(), cmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开盘价</span></span><br><span class="line"><span class="keyword">float</span> price;</span><br><span class="line"><span class="comment">// 最大成交量</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> maxAmount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buys.size(); i++) &#123;</span><br><span class="line">Transaction t = buys[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> buyAmount = <span class="number">0</span>, sellAmount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; buys.size(); j++) &#123;</span><br><span class="line">buyAmount += buys[j].amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sells.size() &amp;&amp; sells[j].price &lt;= t.price; j++) &#123;</span><br><span class="line">sellAmount += sells[j].amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dealAmount = min(buyAmount, sellAmount);</span><br><span class="line"><span class="comment">// 选择最大的成交量；若成交量相等，则选择最高的开盘价</span></span><br><span class="line"><span class="keyword">if</span> ((dealAmount &gt; maxAmount)</span><br><span class="line">|| (dealAmount == maxAmount &amp;&amp; t.price &gt; price)) &#123;</span><br><span class="line">maxAmount = dealAmount;</span><br><span class="line">price = t.price;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f %lld\n"</span>, price, maxAmount);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Transaction</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// 交易类型，0-buy,1-sell,2-cancel</span></span><br><span class="line"><span class="keyword">int</span> type;</span><br><span class="line"><span class="comment">// 出价</span></span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line"><span class="comment">// 交易的股数</span></span><br><span class="line"><span class="keyword">long</span> amount;</span><br><span class="line"><span class="comment">// 交易是否被取消</span></span><br><span class="line"><span class="keyword">boolean</span> cancel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Transaction o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.price &gt; o.price) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.price == o.price) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">List&lt;Transaction&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (scan.hasNextLine()) &#123;</span><br><span class="line">String line = scan.nextLine();</span><br><span class="line">String[] sArr = line.split(<span class="string">" "</span>);</span><br><span class="line">Transaction t = <span class="keyword">new</span> Transaction();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若为撤销</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"cancel"</span>.equals(sArr[<span class="number">0</span>])) &#123;</span><br><span class="line">t.type = <span class="number">2</span>;</span><br><span class="line">t.cancel = <span class="keyword">true</span>;</span><br><span class="line">list.add(t);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销第index行的交易记录</span></span><br><span class="line"><span class="keyword">int</span> index = Integer.parseInt(sArr[<span class="number">1</span>]);</span><br><span class="line">list.get(index - <span class="number">1</span>).cancel = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若为买单</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"buy"</span>.equals(sArr[<span class="number">0</span>])) &#123;</span><br><span class="line">t.type = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 若为卖单</span></span><br><span class="line">t.type = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">t.price = Float.parseFloat(sArr[<span class="number">1</span>]);</span><br><span class="line">t.amount = Long.parseLong(sArr[<span class="number">2</span>]);</span><br><span class="line">list.add(t);</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分割为买单和卖单</span></span><br><span class="line">List&lt;Transaction&gt; buys = <span class="keyword">new</span> ArrayList&lt;&gt;(list.size());</span><br><span class="line">List&lt;Transaction&gt; sells = <span class="keyword">new</span> ArrayList&lt;&gt;(list.size());</span><br><span class="line"><span class="keyword">for</span> (Transaction t : list) &#123;</span><br><span class="line"><span class="comment">// 忽略被撤销的交易记录（或者撤销命令本身）</span></span><br><span class="line"><span class="keyword">if</span> (t.cancel) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t.type == <span class="number">0</span>) &#123;</span><br><span class="line">buys.add(t);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sells.add(t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照价格从小到大排序</span></span><br><span class="line">Collections.sort(buys);</span><br><span class="line">Collections.sort(sells);</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> maxAmount = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">double</span> price = <span class="number">0</span>d;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; buys.size(); i++) &#123;</span><br><span class="line">Transaction t = buys.get(i);</span><br><span class="line"><span class="keyword">long</span> buyAmount = <span class="number">0L</span>, sellAmount = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; buys.size(); j++) &#123;</span><br><span class="line">buyAmount += buys.get(j).amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (Transaction t2 : sells) &#123;</span><br><span class="line"><span class="comment">// 出价最多为t.price</span></span><br><span class="line"><span class="keyword">if</span> (t2.price &gt; t.price) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">sellAmount += t2.amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> dealAmount = Math.min(buyAmount, sellAmount);</span><br><span class="line"><span class="comment">// 选择最大的成交量；若成交量相等，则选择最高的开盘价</span></span><br><span class="line"><span class="keyword">if</span> (maxAmount &lt; dealAmount || (maxAmount == dealAmount &amp;&amp; price &lt; t.price)) &#123;</span><br><span class="line">maxAmount = dealAmount;</span><br><span class="line">price = t.price;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">"%.2f %d\n"</span>, price, maxAmount);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201712-3.Crontab</title>
      <link href="/2019/09/08/ccf-csp-20171203/"/>
      <url>/2019/09/08/ccf-csp-20171203/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20171203-1.png" alt=""></p><a id="more"></a><p><img src="/static/images/ccf-csp-20171203-2.png" alt=""></p><p><img src="/static/images/ccf-csp-20171203-3.png" alt=""></p><p><img src="/static/images/ccf-csp-20171203-4.png" alt=""></p><p><strong>样例输入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 201711170032 201711222352</span><br><span class="line">0 7 * * 1,3-5 get_up</span><br><span class="line">30 23 * * Sat,Sun go_to_bed</span><br><span class="line">15 12,18 * * * have_dinner</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><p>201711170700 get_up<br>201711171215 have_dinner<br>201711171815 have_dinner<br>201711181215 have_dinner<br>201711181815 have_dinner<br>201711182330 go_to_bed<br>201711191215 have_dinner<br>201711191815 have_dinner<br>201711192330 go_to_bed<br>201711200700 get_up<br>201711201215 have_dinner<br>201711201815 have_dinner<br>201711211215 have_dinner<br>201711211815 have_dinner<br>201711220700 get_up<br>201711221215 have_dinner<br>201711221815 have_dinner</p><p><hr><br><strong>分析：</strong></p><p>解析输入的配置信息，将符号（星号、减号以及逗号）和英文缩写转换为对应的数字。</p><p>求解算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">遍历从开始时间y1年到结束时间y2年中的所有年份y：</span><br><span class="line">遍历所有符合配置信息的月份m:</span><br><span class="line">遍历所有符合配置信息的日期d（m月的第d天）:</span><br><span class="line">若d超过了y年m月的最大天数:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">若y年m月d日的星期在day of week中:</span><br><span class="line">遍历所有符合配置信息的小时h:</span><br><span class="line">遍历所有符合配置信息的分钟min:</span><br><span class="line">计算任务调度的时间date</span><br><span class="line">若 s &lt;= date &lt; t:</span><br><span class="line">以date为键，执行的命令cmd为值，存入哈希表中</span><br></pre></td></tr></table></figure><p>1.1970年1月1日是星期四。</p><p>2.星号只能单独出现，减号和逗号可以配合出现。</p><p>3.英文缩写不区分大小写。英文缩写和数值可以混合使用。</p><p>4.包含系统运行的开始时间s，但不包含结束时间t，即[s,t)。</p><p>5.按照时间先后顺序输出。如果同一时刻有多条命令满足调度条件，则按照输入给出的顺序输出。</p><p>因此，哈希表必须是有序的。在C++中，可以使用map；Java中，可以使用TreeMap。</p><p>6.<code>&lt;minutes&gt;</code>、<code>&lt;hours&gt;</code>、<code>&lt;day of month&gt;</code>、<code>&lt;month&gt;</code>和<code>&lt;day of week&gt;</code>中的值可能会重复出现，注意去重。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> HUNDRED_MILLION = <span class="number">100000000</span>, MILLION = <span class="number">1000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> months[<span class="number">2</span>][<span class="number">13</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;, </span><br><span class="line">                     &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串形式的月份（星期）映射为数字形式</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; monthAndWeekMap = &#123; &#123; <span class="string">"jan"</span>, <span class="number">1</span> &#125;, &#123; <span class="string">"feb"</span>, <span class="number">2</span> &#125;, &#123; <span class="string">"mar"</span>, <span class="number">3</span> &#125;, &#123;</span><br><span class="line"><span class="string">"apr"</span>, <span class="number">4</span> &#125;, &#123; <span class="string">"may"</span>, <span class="number">5</span> &#125;, &#123; <span class="string">"jun"</span>, <span class="number">6</span> &#125;, &#123; <span class="string">"jul"</span>, <span class="number">7</span> &#125;, &#123; <span class="string">"aug"</span>, <span class="number">8</span> &#125;, &#123;</span><br><span class="line"><span class="string">"sep"</span>, <span class="number">9</span> &#125;, &#123; <span class="string">"oct"</span>, <span class="number">10</span> &#125;, &#123; <span class="string">"nov"</span>, <span class="number">11</span> &#125;, &#123; <span class="string">"dec"</span>, <span class="number">12</span> &#125;, &#123; <span class="string">"sun"</span>, <span class="number">0</span> &#125;, &#123;</span><br><span class="line"><span class="string">"mon"</span>, <span class="number">1</span> &#125;, &#123; <span class="string">"tue"</span>, <span class="number">2</span> &#125;, &#123; <span class="string">"wed"</span>, <span class="number">3</span> &#125;, &#123; <span class="string">"thu"</span>, <span class="number">4</span> &#125;, &#123; <span class="string">"fri"</span>, <span class="number">5</span> &#125;, &#123;</span><br><span class="line"><span class="string">"sat"</span>, <span class="number">6</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储输入的配置信息，0-minutes,1-hours,2-day of month,3-month,4-day of week</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; cfg[<span class="number">5</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; dict;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为闰年</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串是否为数字</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isDigit</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] &lt; <span class="string">'0'</span> || str[i] &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串转换为小写形式</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">toLowerCase</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">str[i] += <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算y年m月d日是星期几，已知1970年1月1日是星期四</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dayOfWeek</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> days = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1970</span>; i &lt; y; i++) &#123;</span><br><span class="line">days += <span class="number">365</span>;</span><br><span class="line"><span class="keyword">if</span> (isLeapYear(i)) &#123;</span><br><span class="line">days += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isLeap = isLeapYear(y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">days += months[isLeap][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">days += d;</span><br><span class="line"><span class="keyword">return</span> (days % <span class="number">7</span> + <span class="number">4</span> - <span class="number">1</span>) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析月份和星期，将字符串形式转换为数字形式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parseMonthAndWeek</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isDigit(str)) &#123;</span><br><span class="line"><span class="keyword">return</span> stoi(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> monthAndWeekMap[toLowerCase(str)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析输入的配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parseConfig</span><span class="params">(<span class="built_in">string</span> crontab[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 当前类型的上下界</span></span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 清空已有信息</span></span><br><span class="line">cfg[i].clear();</span><br><span class="line"><span class="comment">// 处理星号(星号只能单独出现)</span></span><br><span class="line"><span class="keyword">if</span> (crontab[i] == <span class="string">"*"</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// 分钟</span></span><br><span class="line">high = <span class="number">59</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="comment">// 小时</span></span><br><span class="line">high = <span class="number">23</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123; <span class="comment">// 月份中的天数</span></span><br><span class="line">low = <span class="number">1</span>;</span><br><span class="line">high = <span class="number">31</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>) &#123; <span class="comment">// 月份</span></span><br><span class="line">low = <span class="number">1</span>;</span><br><span class="line">high = <span class="number">12</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 星期</span></span><br><span class="line">high = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = low; j &lt;= high; j++) &#123;</span><br><span class="line">cfg[i].insert(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理-和,</span></span><br><span class="line"><span class="built_in">string</span> str = crontab[i];</span><br><span class="line">str = regex_replace(str, regex(<span class="string">","</span>), <span class="string">" "</span>);</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; str;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line"><span class="keyword">int</span> index = str.find(<span class="string">"-"</span>);</span><br><span class="line"><span class="comment">// 若不包含-</span></span><br><span class="line"><span class="keyword">if</span> (index == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line">cfg[i].insert(parseMonthAndWeek(str));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> start = parseMonthAndWeek(str.substr(<span class="number">0</span>, index));</span><br><span class="line"><span class="keyword">int</span> end = parseMonthAndWeek(str.substr(index + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">cfg[i].insert(start++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> s, t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> cmd, crontab[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; crontab[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cmd;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析配置信息</span></span><br><span class="line">parseConfig(crontab);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储任务调度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = s / HUNDRED_MILLION; y &lt;= t / HUNDRED_MILLION; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m : cfg[<span class="number">3</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d : cfg[<span class="number">2</span>]) &#123;</span><br><span class="line"><span class="comment">// 若d超过了y年m月的最大天数</span></span><br><span class="line"><span class="keyword">if</span> (d &gt; months[isLeapYear(y)][m]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若y年m月d日的星期在day of week中</span></span><br><span class="line"><span class="keyword">if</span> (find(cfg[<span class="number">4</span>].begin(), cfg[<span class="number">4</span>].end(), dayOfWeek(y, m, d))</span><br><span class="line">!= cfg[<span class="number">4</span>].end()) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h : cfg[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min : cfg[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="comment">// 计算任务调度的时间</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> date = (<span class="keyword">long</span> <span class="keyword">long</span>)y * HUNDRED_MILLION</span><br><span class="line">+ m * MILLION + d * <span class="number">10000</span> + h * <span class="number">100</span></span><br><span class="line">+ min;</span><br><span class="line"><span class="comment">// 包含开始时间，不包含结束时间</span></span><br><span class="line"><span class="keyword">if</span> (s &lt;= date &amp;&amp; date &lt; t) &#123;</span><br><span class="line">dict[date].push_back(cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt;::iterator iter = dict.begin();</span><br><span class="line">iter != dict.end(); iter++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">string</span> cmd : iter-&gt;second) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; iter-&gt;first &lt;&lt; <span class="string">' '</span> &lt;&lt; cmd &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1亿</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> HUNDRED_MILLION = <span class="number">100000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1百万</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> MILLION = <span class="number">1000000L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[][] MONTHS = &#123; &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;,</span><br><span class="line">&#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将字符串形式的月份（星期）映射为数字形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Integer&gt; monthAndWeekMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Long, List&lt;String&gt;&gt; resultMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">monthAndWeekMap.put(<span class="string">"jan"</span>, <span class="number">1</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"feb"</span>, <span class="number">2</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"mar"</span>, <span class="number">3</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"apr"</span>, <span class="number">4</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"may"</span>, <span class="number">5</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"jun"</span>, <span class="number">6</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"jul"</span>, <span class="number">7</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"aug"</span>, <span class="number">8</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"sep"</span>, <span class="number">9</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"oct"</span>, <span class="number">10</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"nov"</span>, <span class="number">11</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"dec"</span>, <span class="number">12</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"sun"</span>, <span class="number">0</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"mon"</span>, <span class="number">1</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"tue"</span>, <span class="number">2</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"wed"</span>, <span class="number">3</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"thu"</span>, <span class="number">4</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"fri"</span>, <span class="number">5</span>);</span><br><span class="line">monthAndWeekMap.put(<span class="string">"sat"</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一行配置</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Config</span> </span>&#123;</span><br><span class="line">Set&lt;Integer&gt; minutes;</span><br><span class="line">Set&lt;Integer&gt; hours;</span><br><span class="line">Set&lt;Integer&gt; dayOfMonth;</span><br><span class="line">Set&lt;Integer&gt; month;</span><br><span class="line">Set&lt;Integer&gt; command;</span><br><span class="line">Set&lt;Integer&gt; dayOfWeek;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为闰年</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLeapYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算y年m月d日是星期几，已知1970年1月1日是星期四</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfWeek</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> days = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1970</span>; i &lt; y; i++) &#123;</span><br><span class="line">days += <span class="number">365</span>;</span><br><span class="line"><span class="keyword">if</span> (isLeapYear(i)) &#123;</span><br><span class="line">days += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> isLeap = isLeapYear(y);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">days += MONTHS[isLeap ? <span class="number">1</span> : <span class="number">0</span>][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">days += d;</span><br><span class="line"><span class="keyword">return</span> (days % <span class="number">7</span> + <span class="number">4</span> - <span class="number">1</span>) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符串是否为数字</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDigit</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str.charAt(i) &lt; <span class="string">'0'</span> || str.charAt(i) &gt; <span class="string">'9'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析月份和星期，将字符串形式转换为数字形式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">parseMonthAndWeek</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isDigit(str)) &#123;</span><br><span class="line"><span class="keyword">return</span> Integer.parseInt(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> monthAndWeekMap.get(str.toLowerCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析输入的配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Config <span class="title">parseConfig</span><span class="params">(String[] crontab)</span> </span>&#123;</span><br><span class="line">Config cfg = <span class="keyword">new</span> Config();</span><br><span class="line">cfg.minutes = parseConfig0(crontab, <span class="number">0</span>);</span><br><span class="line">cfg.hours = parseConfig0(crontab, <span class="number">1</span>);</span><br><span class="line">cfg.dayOfMonth = parseConfig0(crontab, <span class="number">2</span>);</span><br><span class="line">cfg.month = parseConfig0(crontab, <span class="number">3</span>);</span><br><span class="line">cfg.dayOfWeek = parseConfig0(crontab, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">return</span> cfg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Integer&gt; <span class="title">parseConfig0</span><span class="params">(String[] crontab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 当前类型的上下界</span></span><br><span class="line"><span class="keyword">int</span> low = <span class="number">0</span>, high = <span class="number">0</span>;</span><br><span class="line">Set&lt;Integer&gt; list = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="comment">// 处理星号(星号只能单独出现)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">"*"</span>.equals(crontab[i])) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// 分钟</span></span><br><span class="line">high = <span class="number">59</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">1</span>) &#123; <span class="comment">// 小时</span></span><br><span class="line">high = <span class="number">23</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123; <span class="comment">// 月份中的天数</span></span><br><span class="line">low = <span class="number">1</span>;</span><br><span class="line">high = <span class="number">31</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">3</span>) &#123; <span class="comment">// 月份</span></span><br><span class="line">low = <span class="number">1</span>;</span><br><span class="line">high = <span class="number">12</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 星期</span></span><br><span class="line">high = <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = low; j &lt;= high; j++) &#123;</span><br><span class="line">list.add(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理-和,</span></span><br><span class="line">String[] sArr = crontab[i].split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sArr.length; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = sArr[j].indexOf(<span class="string">"-"</span>);</span><br><span class="line"><span class="comment">// 若不包含-</span></span><br><span class="line"><span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">list.add(parseMonthAndWeek(sArr[j]));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> start = parseMonthAndWeek(sArr[j].substring(<span class="number">0</span>, index));</span><br><span class="line"><span class="keyword">int</span> end = parseMonthAndWeek(sArr[j].substring(index + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">list.add(start++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">long</span> s = scan.nextLong();</span><br><span class="line"><span class="keyword">long</span> t = scan.nextLong();</span><br><span class="line"></span><br><span class="line">String[] crontab = <span class="keyword">new</span> String[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; crontab.length; j++) &#123;</span><br><span class="line">crontab[j] = scan.next();</span><br><span class="line">&#125;</span><br><span class="line">String cmd = scan.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析配置信息</span></span><br><span class="line">Config cfg = parseConfig(crontab);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = (<span class="keyword">int</span>) (s / HUNDRED_MILLION); y &lt;= t / HUNDRED_MILLION; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m : cfg.month) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d : cfg.dayOfMonth) &#123;</span><br><span class="line"><span class="comment">// 若d超过了y年m月的最大天数</span></span><br><span class="line"><span class="keyword">if</span> (d &gt; MONTHS[isLeapYear(y) ? <span class="number">1</span> : <span class="number">0</span>][m]) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若y年m月d日的星期在day of week中</span></span><br><span class="line"><span class="keyword">if</span> (cfg.dayOfWeek.contains(dayOfWeek(y, m, d))) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> h : cfg.hours) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> min : cfg.minutes) &#123;</span><br><span class="line"><span class="comment">// 计算任务调度的时间</span></span><br><span class="line"><span class="keyword">long</span> date = (<span class="keyword">long</span>) y * HUNDRED_MILLION + m * MILLION + d * <span class="number">10000</span> + h * <span class="number">100</span> + min;</span><br><span class="line"><span class="comment">// 包含开始时间，不包含结束时间</span></span><br><span class="line"><span class="keyword">if</span> (s &lt;= date &amp;&amp; date &lt; t) &#123;</span><br><span class="line"><span class="keyword">if</span> (!resultMap.containsKey(date)) &#123;</span><br><span class="line">List&lt;String&gt; cmds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">cmds.add(cmd);</span><br><span class="line">resultMap.put(date, cmds);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">resultMap.get(date).add(cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line">resultMap.forEach((date, cmds) -&gt; &#123;</span><br><span class="line"><span class="keyword">for</span> (String cmd : cmds) &#123;</span><br><span class="line">System.out.println(date + <span class="string">" "</span> + cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201903-3.损坏的RAID5</title>
      <link href="/2019/09/06/ccf-csp-20190303/"/>
      <url>/2019/09/06/ccf-csp-20190303/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20190303-1.png" alt=""></p><a id="more"></a><p><img src="/static/images/ccf-csp-20190303-2.png" alt=""></p><p><img src="/static/images/ccf-csp-20190303-3.png" alt=""></p><p><img src="/static/images/ccf-csp-20190303-4.png" alt=""></p><p><img src="/static/images/ccf-csp-20190303-5.png" alt=""></p><hr><p><strong>分析：</strong></p><p>本题的难点在于读懂题目&gt;_&lt;。</p><p>定义哈希表disks，用于存储输入的磁盘信息。disks以磁盘的顺序号为键，以该磁盘上存储的数据为值。</p><p>阵列中的条带大小为s（单位：块），现存的硬盘数目为l。</p><p>1.块、条带、磁盘均从0开始连续编号。</p><p>2.块的大小是4个字节，而输入的是16进制数字。1个字节需要用2个16进制数字表示，因此，1个块中的数据需要用8个16进制数字表示。</p><p>3.编号为b的块，在阵列中的条带编号band为<br>$$<br>band = \left \lfloor \frac {b}{s} \right \rfloor<br>$$<br>4.编号为band的条带，所在的磁盘编号diskId为<br>$$<br>diskId = band \ \% \ 磁盘数量<br>$$<br>5.“对于有(n+1)块硬盘的RAID5存储，我们利用每块硬盘上编号为k的条带，存储编号为[kn, (k+1)n)的条带（共n个）。”编号为band的条带，在磁盘diskId上的条带编号k为<br>$$<br>k = \frac{band}{n} = \frac{条带编号}{磁盘数量-1}<br>$$<br>6.阵列中编号为b的块，在磁盘diskId上的块号block为<br>$$<br>block = k \times s + b \ \% \ s<br>$$<br>7.如果读操作由于下列情形之一无法进行，则输出一个减号（-）：</p><p>（1）阵列不完整，且被读取的块所在的硬盘缺失，且该数据无法由现存的硬盘数据推算出来，即 <code>disks不包含diskId &amp;&amp; n - l &gt; 1</code>；</p><p>（2）指定的块超出阵列总长度，即<code>(block + 1) * 8 &gt; diskId上存储的数据的长度</code></p><p>8.如果disks包含块b所在的磁盘编号diskId，则直接输出块block中存储的数据；否则，需要对其他磁盘上第block块中存储的数据进行异或运算。</p><p>9.由于磁盘数量n的最大值为$10^3$，而每块硬盘上的数据长度小于40KB（$40 \times 1024 \times 2 \approx 8 \times 10^4$个字符）。因此，输入的磁盘数据将多达$8 \times 10^4 \times 10^3 = 8 \times 10^7$个字符。因此，在C++中使用scanf或者cin（Java中使用Scanner）读取数据，都将会出现运行超时。</p><p>实践发现：在C++中，使用fgets读入磁盘存储的数据；在Java中，使用BufferedReader，能够正确通过所有的测试用例。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将十六进制字符串转换为十进制整数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">toDecimal</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">result *= <span class="number">16</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= s[i] &amp;&amp; s[i] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">result += s[i] - <span class="string">'A'</span> + <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result += s[i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">40</span> * <span class="number">1024</span> * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> str[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, s, l, m, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;s, &amp;l);</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt; disks;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"><span class="built_in">string</span> content;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;index);</span><br><span class="line">getchar();</span><br><span class="line"><span class="comment">// 最大输入为40kb，如果使用scanf或者cin，会超时</span></span><br><span class="line">fgets(str, MAX, <span class="built_in">stdin</span>);</span><br><span class="line">content = str;</span><br><span class="line">disks[index] = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="comment">// 读取的块编号</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b);</span><br><span class="line"><span class="comment">// 块b所在的条带编号</span></span><br><span class="line"><span class="keyword">int</span> band = b / s;</span><br><span class="line"><span class="comment">// 块b所在的磁盘编号（编号从0开始）</span></span><br><span class="line"><span class="keyword">int</span> diskId = band % n;</span><br><span class="line"><span class="comment">// 条带band，在磁盘diskId上的条带编号（编号从0开始）</span></span><br><span class="line"><span class="keyword">int</span> k = band / (n - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 块b，在磁盘diskId上的块号（编号从0开始）</span></span><br><span class="line"><span class="keyword">int</span> block = k * s + b % s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.被读取的块所在的硬盘缺失，且该数据无法由现存的硬盘数据推算出来;指定的块超出阵列总长度。</span></span><br><span class="line"><span class="keyword">if</span> ((!disks.count(diskId) &amp;&amp; n - l &gt; <span class="number">1</span>)</span><br><span class="line">|| (block + <span class="number">1</span>) * <span class="number">8</span> &gt; disks[diskId].size()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.磁盘数据完好</span></span><br><span class="line"><span class="keyword">if</span> (disks.count(diskId)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, disks[diskId].substr(<span class="number">8</span> * block, <span class="number">8</span>).c_str());</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.磁盘数据缺失，但可以由现存的磁盘数据推算出来</span></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="built_in">string</span>&gt;::iterator iter = disks.begin();</span><br><span class="line">iter != disks.end(); iter++) &#123;</span><br><span class="line"><span class="built_in">string</span> str = iter-&gt;second.substr(<span class="number">8</span> * block, <span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span> (iter == disks.begin()) &#123;</span><br><span class="line">result = toDecimal(str);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result ^= toDecimal(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%08X\n"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 读入的字符数量过大，使用Scanner会超时</span></span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">String[] sArr = br.readLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> n = Integer.parseInt(sArr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> s = Integer.parseInt(sArr[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> l = Integer.parseInt(sArr[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, String&gt; disks = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">String[] sArr2 = br.readLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> index = Integer.parseInt(sArr2[<span class="number">0</span>]);</span><br><span class="line">String content = sArr2[<span class="number">1</span>];</span><br><span class="line">disks.put(index, content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = Integer.parseInt(br.readLine());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="comment">// 读取的块编号</span></span><br><span class="line"><span class="keyword">int</span> b = Integer.parseInt(br.readLine());</span><br><span class="line"><span class="comment">// 块b所在的条带编号</span></span><br><span class="line"><span class="keyword">int</span> band = b / s;</span><br><span class="line"><span class="comment">// 块b所在的磁盘编号（编号从0开始）</span></span><br><span class="line"><span class="keyword">int</span> diskId = band % n;</span><br><span class="line"><span class="comment">// 条带band，在磁盘diskId上的条带编号（编号从0开始）</span></span><br><span class="line"><span class="keyword">int</span> k = band / (n - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 块b，在磁盘diskId上的块号（编号从0开始）</span></span><br><span class="line"><span class="keyword">int</span> block = k * s + b % s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.被读取的块所在的硬盘缺失，且该数据无法由现存的硬盘数据推算出来;指定的块超出阵列总长度。</span></span><br><span class="line"><span class="keyword">if</span> ((block + <span class="number">1</span>) * <span class="number">8</span> &gt; disks.get(diskId).length() || (!disks.containsKey(diskId) &amp;&amp; n - l &gt; <span class="number">1</span>)) &#123;</span><br><span class="line">System.out.println(<span class="string">'-'</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.磁盘数据完好</span></span><br><span class="line"><span class="keyword">if</span> (disks.containsKey(diskId)) &#123;</span><br><span class="line">System.out.println(disks.get(diskId).substring(<span class="number">8</span> * block, <span class="number">8</span> * (block + <span class="number">1</span>)));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.磁盘数据缺失，但可以由现存的磁盘数据推算出来</span></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;Integer, String&gt; entry : disks.entrySet()) &#123;</span><br><span class="line">String str = entry.getValue().substring(<span class="number">8</span> * block, <span class="number">8</span> * (block + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">result = Integer.parseInt(str, <span class="number">16</span>);</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result ^= Integer.parseInt(str, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.printf(<span class="string">"%08X\n"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201812-3.CIDR合并</title>
      <link href="/2019/09/03/ccf-csp-20181203/"/>
      <url>/2019/09/03/ccf-csp-20181203/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20181203-1.png" alt="img"></p><a id="more"></a><p><img src="/static/images/ccf-csp-20181203-2.png" alt="img"></p><p><img src="/static/images/ccf-csp-20181203-3.png" alt="img"></p><p><strong>样例输入</strong></p><p>2<br>1<br>2</p><p><strong>样例输出</strong></p><p>1.0.0.0/8<br>2.0.0.0/8</p><p><strong>样例输入</strong></p><p>2<br>10/9<br>10.128/9</p><p><strong>样例输出</strong></p><p>10.0.0.0/8</p><p><strong>样例输入</strong></p><p>2<br>0/1<br>128/1</p><p><strong>样例输出</strong></p><p>0.0.0.0/0</p><p><img src="/static/images/ccf-csp-20181203-4.png" alt="img"></p><p><img src="/static/images/ccf-csp-20181203-5.png" alt="img"></p><hr><p><strong>分析：</strong></p><p>按照题目给定的算法求解即可。</p><p>1.定义一个类型表示IP前缀：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 表示ip地址的32位无符号整数</span></span><br><span class="line"><span class="built_in">string</span> ip;</span><br><span class="line"><span class="comment">// ip地址的点分十进制表示</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">4</span>];</span><br><span class="line"><span class="comment">// 前缀长度</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">Node() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;ip = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; IP;</span><br></pre></td></tr></table></figure><p>2.在<strong>第二步：从小到大合并</strong>中，如何判断b的匹配集是否为a的匹配集的子集？</p><p>根据匹配的定义可知，前缀长度越大，该IP前缀匹配的IP地址越少。</p><p>因此，若a的前缀长度大于b的前缀长度，则b的匹配集不可能是a的匹配集的子集。</p><p>如果<code>a.len &lt;= b.len</code>，则判断它们IP地址的前a.len位是否相同。若有一位不同，则b的匹配集不是a的匹配集的子集。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断b是否为a的子集</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSubset</span><span class="params">(IP a, IP b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.len &gt; b.len) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b.ip[i] != a.ip[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在<strong>第三步：同级合并</strong>中，如何判断$a^{’}​$是否合法，以及a的匹配集与b的匹配集的并集是否等于$a^{’}​$的匹配集？</p><p>（1）判断$a^{’}$是否合法：根据IP前缀的定义，前缀长度 $len \in [0,32]$，且ip的低(32-len)二进制位为0。</p><p>（2）判断a的匹配集与b的匹配集的并集是否等于$a^{’}​$的匹配集：</p><p>若a和b的ip地址前<code>a.len-1</code>位均相同，且a.len位不相同，则a的匹配集与b的匹配集的并集等于$a^{’}$的匹配集。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否能进行同级合并</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canMerge</span><span class="params">(IP a, IP b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.len != b.len) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">a.len -= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 若不合法</span></span><br><span class="line"><span class="keyword">if</span> (a.len &lt; <span class="number">0</span> || a.ip[a.len] != <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a.ip[i] != b.ip[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.ip[a.len] != b.ip[a.len];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 表示ip地址的32位无符号整数</span></span><br><span class="line"><span class="built_in">string</span> ip;</span><br><span class="line"><span class="comment">// ip地址的点分十进制表示</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">4</span>];</span><br><span class="line"><span class="comment">// 前缀长度</span></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">Node() &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;ip = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; IP;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升序排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(IP a, IP b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.ip != b.ip) &#123;</span><br><span class="line"><span class="keyword">return</span> a.ip &lt; b.ip;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断b是否为a的子集</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isSubset</span><span class="params">(IP a, IP b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.len &gt; b.len) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b.ip[i] != a.ip[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从小到大合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge1</span><span class="params">(<span class="built_in">list</span>&lt;IP&gt; &amp;ls)</span> </span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;IP&gt;::iterator i = ls.begin(), j = ls.begin();</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">while</span> (j != ls.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (isSubset(*i, *j)) &#123;</span><br><span class="line">j = ls.erase(j);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否能进行同级合并</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">canMerge</span><span class="params">(IP a, IP b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.len != b.len) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">a.len -= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 若不合法</span></span><br><span class="line"><span class="keyword">if</span> (a.len &lt; <span class="number">0</span> || a.ip[a.len] != <span class="string">'0'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a.ip[i] != b.ip[i]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.ip[a.len] != b.ip[a.len];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同级合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge2</span><span class="params">(<span class="built_in">list</span>&lt;IP&gt; &amp;ls)</span> </span>&#123;</span><br><span class="line"><span class="built_in">list</span>&lt;IP&gt;::iterator i = ls.begin(), j = ls.begin();</span><br><span class="line">j++;</span><br><span class="line"><span class="keyword">while</span> (j != ls.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (canMerge(*i, *j)) &#123;</span><br><span class="line">i-&gt;len -= <span class="number">1</span>;</span><br><span class="line">j = ls.erase(j);</span><br><span class="line"><span class="keyword">if</span> (i != ls.begin()) &#123;</span><br><span class="line">i--;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i++;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为8位二进制数</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">toBinaryString</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> result = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">8</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">7</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (data &gt;= arr[i]) &#123;</span><br><span class="line">result += <span class="string">'1'</span>;</span><br><span class="line">data -= arr[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result += <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;IP&gt; ls;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line">IP ip;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; line;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统计.的个数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 是否包含/</span></span><br><span class="line"><span class="keyword">bool</span> hasSeparator = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (line[i] == <span class="string">'.'</span>) &#123;</span><br><span class="line">end = i;</span><br><span class="line">ip.data[count] = stoi(line.substr(start, end - start));</span><br><span class="line">ip.ip += toBinaryString(ip.data[count]);</span><br><span class="line">count++;</span><br><span class="line">start = i + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">'/'</span>) &#123;</span><br><span class="line">hasSeparator = <span class="literal">true</span>;</span><br><span class="line">ip.len = stoi(line.substr(i + <span class="number">1</span>));</span><br><span class="line">ip.data[count] = stoi(line.substr(start, i - start));</span><br><span class="line">ip.ip += toBinaryString(ip.data[count]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若为省略长度型</span></span><br><span class="line"><span class="keyword">if</span> (!hasSeparator) &#123;</span><br><span class="line">ip.len = <span class="number">8</span> * (count + <span class="number">1</span>);</span><br><span class="line">ip.data[count] = stoi(line.substr(start));</span><br><span class="line">ip.ip += toBinaryString(ip.data[count]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 补全省略的后缀</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span> - count; i++) &#123;</span><br><span class="line">ip.data[count + <span class="number">1</span> + i] = <span class="number">0</span>;</span><br><span class="line">ip.ip += <span class="string">"00000000"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ls.push_back(ip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.排序</span></span><br><span class="line">ls.sort(cmp);</span><br><span class="line"><span class="comment">// 2.从小到大合并</span></span><br><span class="line">merge1(ls);</span><br><span class="line"><span class="comment">// 3.同级合并</span></span><br><span class="line">merge2(ls);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;IP&gt;::iterator iter = ls.begin(); iter != ls.end(); iter++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; iter-&gt;data[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'/'</span> &lt;&lt; iter-&gt;len &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201703-3.Markdown</title>
      <link href="/2019/08/25/ccf-csp-20170303/"/>
      <url>/2019/08/25/ccf-csp-20170303/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　Markdown 是一种很流行的轻量级标记语言（lightweight markup language），广泛用于撰写带格式的文档。例如以下这段文本就是用 Markdown 的语法写成的：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Heading</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Sub-heading</span></span><br><span class="line"></span><br><span class="line">Paragraphs are separated</span><br><span class="line">by a blank line.</span><br><span class="line"></span><br><span class="line">Text attribute <span class="emphasis">_italic_</span>.</span><br><span class="line"></span><br><span class="line">Bullet list:</span><br><span class="line"></span><br><span class="line"><span class="bullet">* </span>apples</span><br><span class="line"><span class="bullet">* </span>oranges</span><br><span class="line"><span class="bullet">* </span>pears</span><br><span class="line"></span><br><span class="line">A [<span class="string">link</span>](<span class="link">http://example.com</span>).</span><br></pre></td></tr></table></figure><p>​    这些用 Markdown 写成的文本，尽管本身是纯文本格式，然而读者可以很容易地看出它的文档结构。同时，还有很多工具可以自动把 Markdown 文本转换成 HTML 甚至 Word、PDF 等格式，取得更好的排版效果。例如上面这段文本通过转化得到的 HTML 代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Sub-heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraphs are separated</span><br><span class="line">by a blank line.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Text attribute <span class="tag">&lt;<span class="name">em</span>&gt;</span>italic<span class="tag">&lt;/<span class="name">em</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bullet list:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>apples<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>oranges<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>pears<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    本题要求由你来编写一个 Markdown 的转换工具，完成 Markdown 文本到 HTML 代码的转换工作。简化起见，本题定义的 Markdown 语法规则和转换规则描述如下：<br>　　●区块：区块是文档的顶级结构。本题的 Markdown 语法有 3 种区块格式。在输入中，相邻两个区块之间用一个或多个空行分隔。输出时删除所有分隔区块的空行。<br>　　○段落：一般情况下，连续多行输入构成一个段落。段落的转换规则是在段落的第一行行首插入 <code>&lt;p&gt;</code>，在最后一行行末插入 <code>&lt;/p&gt;</code>。<br>　　○标题：每个标题区块只有一行，由若干个 <code>#</code> 开头，接着一个或多个空格，然后是标题内容，直到行末。<code>#</code> 的个数决定了标题的等级。转换时，<code># Heading</code> 转换为 <code>&lt;h1&gt;Heading&lt;/h1&gt;</code>，<code>## Heading</code> 转换为 <code>&lt;h2&gt;Heading&lt;/h2&gt;</code>，以此类推。标题等级最深为 6。<br>　　○无序列表：无序列表由若干行组成，每行由 <code>*</code> 开头，接着一个或多个空格，然后是列表项目的文字，直到行末。转换时，在最开始插入一行 <code>&lt;ul&gt;</code>，最后插入一行 <code>&lt;/ul&gt;</code>；对于每行，<code>* Item</code> 转换为 <code>&lt;li&gt;Item&lt;/li&gt;</code>。本题中的无序列表只有一层，不会出现缩进的情况。<br>　　●行内：对于区块中的内容，有以下两种行内结构。<br>　　○强调：<code>_Text_</code> 转换为 <code>&lt;em&gt;Text&lt;/em&gt;</code>。强调不会出现嵌套，每行中 <code>_</code> 的个数一定是偶数，且不会连续相邻。注意 <code>_Text_</code> 的前后不一定是空格字符。<br>　　○超级链接：<code>[Text](Link)</code> 转换为 <code>&lt;a href=&quot;Link&quot;&gt;Text&lt;/a&gt;</code>。超级链接和强调可以相互嵌套，但每种格式不会超过一层。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入由若干行组成，表示一个用本题规定的 Markdown 语法撰写的文档。</p><p><strong>输出格式</strong></p><p>　　输出由若干行组成，表示输入的 Markdown 文档转换成产生的 HTML 代码。</p><p><strong>样例输入</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Hello</span></span><br><span class="line"></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>评测用例规模与约定</strong></p><p>　　本题的测试点满足以下条件：</p><p>　　●本题每个测试点的输入数据所包含的行数都不超过100，每行字符的个数（包括行末换行符）都不超过100。</p><p>　　●除了换行符之外，所有字符都是 ASCII 码 32 至 126 的可打印字符。</p><p>　　●每行行首和行末都不会出现空格字符。</p><p>　　●输入数据除了 Markdown 语法所需，内容中不会出现 <code>#</code>、<code>*</code>、<code>_</code>、<code>[</code>、<code>]</code>、<code>(</code>、<code>)</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code> 这些字符。</p><p>　　●所有测试点均符合题目所规定的 Markdown 语法，你的程序不需要考虑语法错误的情况。</p><p>　　每个测试点包含的语法规则如下表所示，其中“√”表示包含，“×”表示不包含。</p><table><thead><tr><th>测试点编号</th><th>段落</th><th>标题</th><th>无序列表</th><th>强调</th><th>超级链接</th></tr></thead><tbody><tr><td>1</td><td>√</td><td>×</td><td>×</td><td>×</td><td>×</td></tr><tr><td>2</td><td>√</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>3</td><td>√</td><td>×</td><td>√</td><td>×</td><td>×</td></tr><tr><td>4</td><td>√</td><td>×</td><td>×</td><td>√</td><td>×</td></tr><tr><td>5</td><td>√</td><td>×</td><td>×</td><td>×</td><td>√</td></tr><tr><td>6</td><td>√</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>7</td><td>√</td><td>×</td><td>×</td><td>√</td><td>√</td></tr><tr><td>8</td><td>√</td><td>√</td><td>×</td><td>√</td><td>×</td></tr><tr><td>9</td><td>√</td><td>×</td><td>√</td><td>×</td><td>√</td></tr><tr><td>10</td><td>√</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p><strong>提示</strong></p><p>　　由于本题要将输入数据当做一个文本文件来处理，要逐行读取直到文件结束，C/C++、Java 语言的用户可以参考以下代码片段来读取输入内容。</p><p><strong>C++语言</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> line;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">std</span>::getline(<span class="built_in">std</span>::<span class="built_in">cin</span>, line)) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C语言</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUF_SS 101</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">while</span>(fgets(buf, BUF_SS, <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">        <span class="comment">/* Processing code here */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java语言</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String line = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (sc.hasNextLine()) &#123;</span><br><span class="line">            line = sc.nextLine();</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>分析：</strong></p><p>需要注意的地方：</p><p>1.在输入中，相邻两个区块之间用一个或多个空行分隔。<strong>输出时删除所有分隔区块的空行。</strong></p><p>2.每行行首和行末都不会出现空格字符。因此，我们只需要处理标题#和无序列表*后的空格。</p><p>3.本题中的无序列表只有一层，不会出现缩进的情况。</p><p>4.强调不会出现嵌套，每行中 <code>_</code> 的个数一定是偶数，且不会连续相邻。</p><p>5.超级链接和强调可以相互嵌套，但每种格式不会超过一层。</p><p>6.行内结构（超级链接和强调）在标题、无序列表和段落中均可以存在。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉开头的空格</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">trim</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (str[index] == <span class="string">' '</span>) &#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str.substr(index, str.size() - index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理强调</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseEm</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> start = str.find(<span class="string">"_"</span>);</span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">str = str.replace(start, <span class="number">1</span>, <span class="string">"&lt;em&gt;"</span>);</span><br><span class="line"><span class="keyword">int</span> end = str.find(<span class="string">"_"</span>);</span><br><span class="line">str = str.replace(end, <span class="number">1</span>, <span class="string">"&lt;/em&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理超级链接</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseLink</span><span class="params">(<span class="built_in">string</span> str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> start = str.find(<span class="string">"["</span>);</span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> end = str.find(<span class="string">"]("</span>, start + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> brace = str.find(<span class="string">")"</span>, end + <span class="number">2</span>);</span><br><span class="line"><span class="built_in">string</span> text = str.substr(start + <span class="number">1</span>, end - start - <span class="number">1</span>);</span><br><span class="line"><span class="built_in">string</span> link = str.substr(end + <span class="number">2</span>, brace - end - <span class="number">2</span>);</span><br><span class="line">str = str.substr(<span class="number">0</span>, start) + <span class="string">"&lt;a href=\""</span> + link + <span class="string">"\"&gt;"</span> + text + <span class="string">"&lt;/a&gt;"</span></span><br><span class="line">+ str.substr(brace + <span class="number">1</span>, str.size() - brace - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理行内结构（强调和超级链接）</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">parseInline</span><span class="params">(<span class="built_in">string</span> line)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> parseLink(parseEm(line));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line)) &#123;</span><br><span class="line"><span class="keyword">if</span> (line.empty()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理标题</span></span><br><span class="line"><span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">'#'</span>) &#123;</span><br><span class="line"><span class="comment">// 计算标题的等级</span></span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (level &lt; line.size() &amp;&amp; line[level] == <span class="string">'#'</span>) &#123;</span><br><span class="line">level++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 去掉开头的空格</span></span><br><span class="line">line = trim(line.substr(level, line.size() - level));</span><br><span class="line"><span class="comment">// 生成标题</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;h"</span> &lt;&lt; level &lt;&lt; <span class="string">"&gt;"</span> &lt;&lt; parseInline(line) &lt;&lt; <span class="string">"&lt;/h"</span> &lt;&lt; level &lt;&lt; <span class="string">"&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理无序列表</span></span><br><span class="line"><span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">'*'</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;ul&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 去掉开头的空格</span></span><br><span class="line">line = trim(line.substr(<span class="number">1</span>, line.size() - <span class="number">1</span>));</span><br><span class="line"><span class="comment">// 生成列表中的项</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;li&gt;"</span> &lt;&lt; parseInline(line) &lt;&lt; <span class="string">"&lt;/li&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line) &amp;&amp; !line.empty()) &#123;</span><br><span class="line">line = trim(line.substr(<span class="number">1</span>, line.size() - <span class="number">1</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;li&gt;"</span> &lt;&lt; parseInline(line) &lt;&lt; <span class="string">"&lt;/li&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;/ul&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理段落</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;p&gt;"</span> &lt;&lt; parseInline(line);</span><br><span class="line"><span class="keyword">while</span> (getline(<span class="built_in">cin</span>, line) &amp;&amp; !line.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; parseInline(line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;/p&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (scan.hasNextLine()) &#123;</span><br><span class="line">line = scan.nextLine();</span><br><span class="line"><span class="keyword">if</span> (line.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理标题</span></span><br><span class="line"><span class="keyword">if</span> (line.charAt(<span class="number">0</span>) == <span class="string">'#'</span>) &#123;</span><br><span class="line"><span class="comment">// 计算标题的等级</span></span><br><span class="line"><span class="keyword">int</span> level = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (level &lt; line.length() &amp;&amp; line.charAt(level) == <span class="string">'#'</span>) &#123;</span><br><span class="line">level++;</span><br><span class="line">&#125;</span><br><span class="line">sb.append(String.format(<span class="string">"&lt;h%d&gt;%s&lt;/h%d&gt;\n"</span>, level, parseInline(line.substring(level).trim()), level));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理无序列表</span></span><br><span class="line"><span class="keyword">if</span> (line.charAt(<span class="number">0</span>) == <span class="string">'*'</span>) &#123;</span><br><span class="line">sb.append(<span class="string">"&lt;ul&gt;\n"</span>);</span><br><span class="line">sb.append(<span class="string">"&lt;li&gt;"</span>).append(parseInline(line.substring(<span class="number">1</span>).trim())).append(<span class="string">"&lt;/li&gt;\n"</span>);</span><br><span class="line"><span class="keyword">while</span> (scan.hasNextLine() &amp;&amp; !(line = scan.nextLine()).isEmpty()) &#123;</span><br><span class="line">sb.append(<span class="string">"&lt;li&gt;"</span>).append(parseInline(line.substring(<span class="number">1</span>).trim())).append(<span class="string">"&lt;/li&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">"&lt;/ul&gt;\n"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理段落</span></span><br><span class="line">sb.append(<span class="string">"&lt;p&gt;"</span>).append(parseInline(line));</span><br><span class="line"><span class="keyword">while</span> (scan.hasNextLine() &amp;&amp; !(line = scan.nextLine()).isEmpty()) &#123;</span><br><span class="line">sb.append(<span class="string">'\n'</span>).append(parseInline(line));</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">"&lt;/p&gt;\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理行内结构（强调和超级链接）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseInline</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> parseLink(parseEm(line));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理强调</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseEm</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">Pattern p = Pattern.compile(<span class="string">"_[^_]+_"</span>);</span><br><span class="line">Matcher m = p.matcher(line);</span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">String str = m.group();</span><br><span class="line">m.appendReplacement(sb, <span class="string">"&lt;em&gt;"</span> + str.substring(<span class="number">1</span>, str.length() - <span class="number">1</span>) + <span class="string">"&lt;/em&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">m.appendTail(sb);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理超级链接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseLink</span><span class="params">(String line)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">Pattern p = Pattern.compile(<span class="string">"\\[[^\\]]+\\]\\([^\\)]+\\)"</span>);</span><br><span class="line">Matcher m = p.matcher(line);</span><br><span class="line"><span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">String str = m.group();</span><br><span class="line"><span class="keyword">int</span> index = str.indexOf(<span class="string">']'</span>);</span><br><span class="line">String text = str.substring(<span class="number">1</span>, index);</span><br><span class="line">String link = str.substring(index + <span class="number">2</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">m.appendReplacement(sb, <span class="string">"&lt;a href=\""</span> + link + <span class="string">"\"&gt;"</span> + text + <span class="string">"&lt;/a&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">m.appendTail(sb);</span><br><span class="line"><span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201612-3.权限查询</title>
      <link href="/2019/08/24/ccf-csp-20161203/"/>
      <url>/2019/08/24/ccf-csp-20161203/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　授权 (authorization) 是各类业务系统不可缺少的组成部分，系统用户通过授权机制获得系统中各个模块的操作权限。<br>　　本题中的授权机制是这样设计的：每位用户具有若干角色，每种角色具有若干权限。例如，用户 david 具有 manager 角色，manager 角色有 crm:2 权限，则用户 david 具有 crm:2 权限，也就是 crm 类权限的第 2 等级的权限。<br>　　具体地，用户名和角色名称都是由小写字母组成的字符串，长度不超过 32。权限分为分等级权限和不分等级权限两大类。分等级权限由权限类名和权限等级构成，中间用冒号“:”分隔。其中权限类名也是由小写字母组成的字符串，长度不超过 32。权限等级是一位数字，从 0 到 9，数字越大表示权限等级越高。系统规定如果用户具有某类某一等级的权限，那么他也将自动具有该类更低等级的权限。例如在上面的例子中，除 crm:2 外，用户 david 也具有 crm:1 和 crm:0 权限。不分等级权限在描述权限时只有权限类名，没有权限等级（也没有用于分隔的冒号）。<br>　　给出系统中用户、角色和权限的描述信息，你的程序需要回答多个关于用户和权限的查询。查询可分为以下几类：</p><ul><li><p>不分等级权限的查询：如果权限本身是不分等级的，则查询时不指定等级，返回是否具有该权限；</p></li><li><p>分等级权限的带等级查询：如果权限本身分等级，查询也带等级，则返回是否具有该类的该等级权限；</p></li><li><p>分等级权限的不带等级查询：如果权限本身分等级，查询不带等级，则返回具有该类权限的等级；如果不具有该类的任何等级权限，则返回“否”。</p></li></ul><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入第一行是一个正整数 <em>p</em>，表示不同的权限类别的数量。紧接着的 <em>p</em> 行被称为 P 段，每行一个字符串，描述各个权限。对于分等级权限，格式为 <code>&lt;category&gt;:&lt;level&gt;</code>，其中<code>&lt;category&gt;</code> 是权限类名，<code>&lt;level&gt;</code> 是该类权限的最高等级。对于不分等级权限，字符串只包含权限类名。<br>　　接下来一行是一个正整数 <em>r</em>，表示不同的角色数量。紧接着的 <em>r</em> 行被称为 R 段，每行描述一种角色，格式为<br>　　<code>&lt;role&gt; &lt;s&gt; &lt;privilege 1&gt; &lt;privilege 2&gt; ... &lt;privilege s&gt;</code><br>　　其中 <code>&lt;role&gt;</code> 是角色名称，<code>&lt;s&gt;</code> 表示该角色具有多少种权限。后面 <code>&lt;s&gt;</code> 个字符串描述该角色具有的权限，格式同 P 段。<br>　　接下来一行是一个正整数 <em>u</em>，表示用户数量。紧接着的 <em>u</em> 行被称为 U 段，每行描述一个用户，格式为<br>　　<code>&lt;user&gt; &lt;t&gt; &lt;role 1&gt; &lt;role 2&gt; ... &lt;role t&gt;</code><br>　　其中 <code>&lt;user&gt;</code> 是用户名，<code>&lt;t&gt;</code> 表示该用户具有多少种角色。后面 <code>&lt;t&gt;</code> 个字符串描述该用户具有的角色。<br>　　接下来一行是一个正整数 <em>q</em>，表示权限查询的数量。紧接着的 <em>q</em> 行被称为 Q 段，每行描述一个授权查询，格式为 <code>&lt;user&gt; &lt;privilege&gt;</code>，表示查询用户 <code>&lt;user&gt;</code> 是否具有 <code>&lt;privilege&gt;</code> 权限。如果查询的权限是分等级权限，则查询中的 <code>&lt;privilege&gt;</code> 可指定等级，表示查询该用户是否具有该等级的权限；也可以不指定等级，表示查询该用户具有该权限的等级。对于不分等级权限，只能查询该用户是否具有该权限，查询中不能指定等级。</p><p><strong>输出格式</strong></p><p>　　输出共 <em>q</em> 行，每行为 false、true，或者一个数字。false 表示相应的用户不具有相应的权限，true 表示相应的用户具有相应的权限。对于分等级权限的不带等级查询，如果具有权限，则结果是一个数字，表示该用户具有该权限的（最高）等级。如果用户不存在，或者查询的权限没有定义，则应该返回 false。</p><p><strong>样例输入</strong></p><p>3<br>crm:2<br>git:3<br>game<br>4<br>hr 1 crm:2<br>it 3 crm:1 git:1 game<br>dev 2 git:3 game<br>qa 1 git:2<br>3<br>alice 1 hr<br>bob 2 it qa<br>charlie 1 dev<br>9<br>alice game<br>alice crm:2<br>alice git:0<br>bob git<br>bob poweroff<br>charlie game<br>charlie crm<br>charlie git:3<br>malice game</p><p><strong>样例输出</strong></p><p>false<br>true<br>false<br>2<br>false<br>true<br>false<br>true<br>false</p><p><strong>样例说明</strong></p><p>　　样例输入描述的场景中，各个用户实际的权限如下：</p><ul><li>用户 alice 具有 crm:2 权限</li><li>用户 bob 具有 crm:1、git:2 和 game 权限</li><li>用户 charlie 具有 git:3 和 game 权限</li><li>用户 malice 未描述，因此不具有任何权限</li></ul><p><strong>评测用例规模与约定</strong></p><p>　　评测用例规模：</p><ul><li>1 ≤ p, r, u ≤ 100</li><li>1 ≤ q ≤ 10 000</li><li>每个用户具有的角色数不超过 10，每种角色具有的权限种类不超过 10<br>  约定：</li><li>输入保证合法性，包括：<br>  1) 角色对应的权限列表（R 段）中的权限都是之前（P 段）出现过的，权限可以重复出现，如果带等级的权限重复出现，以等级最高的为准<br>  2) 用户对应的角色列表（U 段）中的角色都是之前（R 段）出现过的，如果多个角色都具有某一分等级权限，以等级最高的为准<br>  3) 查询（Q 段）中的用户名和权限类名不保证在之前（U 段和 P 段）出现过</li><li>前 20% 的评测用例只有一种角色</li><li>前 50% 的评测用例权限都是不分等级的，查询也都不带等级</li></ul><hr><p><strong>分析：</strong></p><p>本题较为简单，主要考察哈希表的应用。</p><p>权限分为<strong>分等级权限</strong>和<strong>不分等级权限</strong>两大类。权限等级是一位数字，从 0 到 9。</p><p>为了便于处理，对于不分等级的权限，可以为其等级赋值-1。</p><p>需要注意的是：</p><p>1.由于输入保证合法性，因此，本题可以不对第2至p+1行的权限做任何处理；</p><p>2.如果用户具有某类某一等级的权限，那么他也将自动具有该类更低等级的权限；</p><p>3.角色的权限可以重复出现，如果带等级的权限重复出现，以等级最高的为准；</p><p>4.用户的多个角色，可能都具有某一分等级权限，应以等级最高的为准。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照冒号:分割权限字符串，得到权限等级level。若privilege中不包含等级，则level设为-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">split</span><span class="params">(<span class="built_in">string</span> &amp;privilege)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = privilege.find(<span class="string">":"</span>);</span><br><span class="line"><span class="keyword">int</span> level = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (index != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="comment">// stoi是C++11新增的方法，包含在string中</span></span><br><span class="line"><span class="comment">//level = stoi(privilege.substr(index + 1, 1));</span></span><br><span class="line">level = atoi(privilege.substr(index + <span class="number">1</span>, <span class="number">1</span>).c_str());</span><br><span class="line">privilege = privilege.substr(<span class="number">0</span>, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p, r, u, q;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于输入保证合法性，因此，本题可以不对第2至p+1行的权限做任何处理</span></span><br><span class="line"><span class="comment">//map&lt;string, int&gt; privileges;</span></span><br><span class="line"><span class="keyword">while</span> (p--) &#123;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line"><span class="comment">/*int level = split(privilege);</span></span><br><span class="line"><span class="comment"> privileges[name] = level;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储所有角色及其具有的所有权限</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; &gt; roles;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; r;</span><br><span class="line"><span class="keyword">while</span> (r--) &#123;</span><br><span class="line"><span class="keyword">int</span> s;</span><br><span class="line"><span class="built_in">string</span> role;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; role &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> privilege;</span><br><span class="line"><span class="comment">// 存储角色role具有的所有权限</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; privileges2;</span><br><span class="line"><span class="keyword">while</span> (s--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; privilege;</span><br><span class="line"><span class="keyword">int</span> level = split(privilege);</span><br><span class="line"><span class="comment">// 权限可以重复出现，如果带等级的权限重复出现，以等级最高的为准</span></span><br><span class="line"><span class="keyword">if</span> (!privileges2.count(privilege)</span><br><span class="line">|| privileges2[privilege] &lt; level) &#123;</span><br><span class="line">privileges2[privilege] = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">roles[role] = privileges2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储所有用户及其具有的所有权限</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; &gt; dict;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; u;</span><br><span class="line"><span class="keyword">while</span> (u--) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">string</span> user;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; user &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">string</span> role;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; role;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator iter = roles[role].begin();</span><br><span class="line">iter != roles[role].end(); iter++) &#123;</span><br><span class="line"><span class="comment">// 若user尚不具有iter-&gt;first该类权限，或者user具有的权限等级低于iter-&gt;second</span></span><br><span class="line"><span class="keyword">if</span> (!dict[user].count(iter-&gt;first)</span><br><span class="line">|| dict[user][iter-&gt;first] &lt; iter-&gt;second) &#123;</span><br><span class="line">dict[user][iter-&gt;first] = iter-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 权限查询</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="built_in">string</span> user;</span><br><span class="line"><span class="built_in">string</span> privilege;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; user &gt;&gt; privilege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> level = split(privilege);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用户不存在，或者用户不具有该类权限，或者用户该类权限的等级不够</span></span><br><span class="line"><span class="keyword">if</span> (!dict.count(user) || !dict[user].count(privilege)</span><br><span class="line">|| dict[user][privilege] &lt; level) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"false"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (dict[user][privilege] != <span class="number">-1</span> &amp;&amp; level == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="comment">// 若为分等级权限的不带等级查询，则输出用户具有该权限的最高等级</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dict[user][privilege] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"true"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Privilege</span> </span>&#123;</span><br><span class="line"><span class="comment">// 权限名</span></span><br><span class="line">String name;</span><br><span class="line"><span class="comment">// 权限等级</span></span><br><span class="line">Integer level;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Privilege</span><span class="params">(String name, Integer level)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.level = level;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> categoryCount = scan.nextInt();</span><br><span class="line"><span class="comment">// 由于输入保证合法性，因此，本题可以不对第2至p+1行的权限做任何处理</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; categoryCount; i++) &#123;</span><br><span class="line">scan.next();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储所有角色及其具有的所有权限</span></span><br><span class="line">Map&lt;String, Map&lt;String, Integer&gt;&gt; roles = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> roleCount = scan.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; roleCount; i++) &#123;</span><br><span class="line">String role = scan.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储角色role具有的所有权限</span></span><br><span class="line">Map&lt;String, Integer&gt; privileges = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> s = scan.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s; j++) &#123;</span><br><span class="line">Privilege p = split(scan.next());</span><br><span class="line"><span class="comment">// 权限可以重复出现，如果带等级的权限重复出现，以等级最高的为准</span></span><br><span class="line"><span class="keyword">if</span> (!privileges.containsKey(p.name) || privileges.get(p.name) &lt; p.level) &#123;</span><br><span class="line">privileges.put(p.name, p.level);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">roles.put(role, privileges);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储所有用户及其具有的所有权限</span></span><br><span class="line">Map&lt;String, Map&lt;String, Integer&gt;&gt; users = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> userCount = scan.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; userCount; i++) &#123;</span><br><span class="line">String user = scan.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储用户user及其具有的所有权限</span></span><br><span class="line">Map&lt;String, Integer&gt; privileges = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; t; j++) &#123;</span><br><span class="line">String role = scan.next();</span><br><span class="line">roles.get(role).forEach((privilegeName, level) -&gt; &#123;</span><br><span class="line"><span class="comment">// 若user尚不具有privilegeName该类权限，或者user具有的权限等级低于level</span></span><br><span class="line"><span class="keyword">if</span> (!privileges.containsKey(privilegeName) || privileges.get(privilegeName) &lt; level) &#123;</span><br><span class="line">privileges.put(privilegeName, level);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">users.put(user, privileges);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 权限查询</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> queryCount = scan.nextInt();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queryCount; i++) &#123;</span><br><span class="line">String user = scan.next();</span><br><span class="line">Privilege p = split(scan.next());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果用户不存在，或者用户不具有该类权限，或者用户该类权限的等级不够</span></span><br><span class="line">Map&lt;String, Integer&gt; privileges = users.get(user);</span><br><span class="line"><span class="keyword">if</span> (privileges == <span class="keyword">null</span> || !privileges.containsKey(p.name) || privileges.get(p.name) &lt; p.level) &#123;</span><br><span class="line">sb.append(<span class="string">"false"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.level == -<span class="number">1</span> &amp;&amp; privileges.get(p.name) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 若为分等级权限的不带等级查询，则输出用户具有该权限的最高等级</span></span><br><span class="line">sb.append(privileges.get(p.name));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sb.append(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scan.close();</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照冒号:分割权限字符串，得到权限等级level。若权限字符串中不包含等级，则level设为-1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Privilege <span class="title">split</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> level = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> index = name.indexOf(<span class="string">":"</span>);</span><br><span class="line"><span class="keyword">if</span> (index &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">level = Integer.parseInt(name.substring(index + <span class="number">1</span>));</span><br><span class="line">name = name.substring(<span class="number">0</span>, index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Privilege(name, level);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201609-3.炉石传说</title>
      <link href="/2019/08/23/ccf-csp-20160903/"/>
      <url>/2019/08/23/ccf-csp-20160903/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　《炉石传说：魔兽英雄传》（Hearthstone: Heroes of Warcraft，简称炉石传说）是暴雪娱乐开发的一款集换式卡牌游戏（如下图所示）。游戏在一个战斗棋盘上进行，由两名玩家轮流进行操作，本题所使用的炉石传说游戏的简化规则如下：</p><p><img src="/static/images/ccf-csp-20160903.jpg" alt="hearthstone"></p><ul><li><p>玩家会控制一些<strong>角色</strong>，每个角色有自己的<strong>生命值和攻击力</strong>。当生命值小于等于 0 时，该角色<strong>死亡</strong>。角色分为<strong>英雄和随从</strong>。</p></li><li><p>玩家各控制一个英雄，游戏开始时，英雄的生命值为 30，攻击力为 0。当英雄死亡时，游戏结束，英雄未死亡的一方获胜。</p></li><li><p>玩家可在游戏过程中召唤随从。棋盘上每方都有 7 个可用于放置随从的空位，从左到右一字排开，被称为<strong>战场</strong>。当随从死亡时，它将被从战场上移除。</p></li><li><p>游戏开始后，两位玩家轮流进行操作，每个玩家的连续一组操作称为一个<strong>回合</strong>。</p></li><li><p>每个回合中，当前玩家可进行零个或者多个以下操作：<br>1) <strong>召唤随从</strong>：玩家召唤一个随从进入战场，随从具有指定的生命值和攻击力。<br>2) <strong>随从攻击</strong>：玩家控制自己的某个随从攻击对手的英雄或者某个随从。<br>3) <strong>结束回合</strong>：玩家声明自己的当前回合结束，游戏将进入对手的回合。该操作一定是一个回合的最后一个操作。</p></li><li><p>当随从攻击时，攻击方和被攻击方会同时对彼此造成等同于自己攻击力的<strong>伤害</strong>。受到伤害的角色的生命值将会减少，数值等同于受到的伤害。例如，随从 X 的生命值为 HX、攻击力为 AX，随从 Y 的生命值为 HY、攻击力为 AY，如果随从 X 攻击随从 Y，则攻击发生后随从 X 的生命值变为 HX - AY，随从 Y 的生命值变为 HY - AX。攻击发生后，角色的生命值可以为负数。</p><p>本题将给出一个游戏的过程，要求编写程序模拟该游戏过程并输出最后的局面。</p></li></ul><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入第一行是一个整数 <em>n</em>，表示操作的个数。接下来 <em>n</em> 行，每行描述一个操作，格式如下：</p><p>　　<code>&lt;action&gt; &lt;arg1&gt; &lt;arg2&gt; ...</code></p><p>　　其中<code>&lt;action&gt;</code>表示操作类型，是一个字符串，共有 3 种：summon表示召唤随从，attack表示随从攻击，end表示结束回合。这 3 种操作的具体格式如下：</p><ul><li><p><code>summon &lt;position&gt; &lt;attack&gt; &lt;health&gt;</code>：当前玩家在位置<code>&lt;position&gt;</code>召唤一个生命值为<code>&lt;health&gt;</code>、攻击力为<code>&lt;attack&gt;</code>的随从。其中<code>&lt;position&gt;</code>是一个 1 到 7 的整数，表示召唤的随从出现在战场上的位置，原来该位置及右边的随从都将顺次向右移动一位。</p></li><li><p><code>attack &lt;attacker&gt; &lt;defender&gt;</code>：当前玩家的角色<code>&lt;attacker&gt;</code>攻击对方的角色 <code>&lt;defender&gt;</code>。<code>&lt;attacker&gt;</code>是 1 到 7 的整数，表示发起攻击的本方随从编号，<code>&lt;defender&gt;</code>是 0 到 7 的整数，表示被攻击的对方角色，0 表示攻击对方英雄，1 到 7 表示攻击对方随从的编号。</p></li><li><p><code>end</code>：当前玩家结束本回合。<br>注意：随从的编号会随着游戏的进程发生变化，当召唤一个随从时，玩家指定召唤该随从放入战场的位置，此时，原来该位置及右边的所有随从编号都会增加 1。而当一个随从死亡时，它右边的所有随从编号都会减少 1。任意时刻，战场上的随从总是从1开始连续编号。</p></li></ul><p><strong>输出格式</strong></p><p>　　输出共 5 行。<br>　　第 1 行包含一个整数，表示这 <em>n</em> 次操作后（以下称为 <em>T</em> 时刻）游戏的胜负结果，1 表示先手玩家获胜，-1 表示后手玩家获胜，0 表示游戏尚未结束，还没有人获胜。<br>　　第 2 行包含一个整数，表示 <em>T</em> 时刻先手玩家的英雄的生命值。<br>　　第 3 行包含若干个整数，第一个整数 <em>p</em> 表示 <em>T</em> 时刻先手玩家在战场上存活的随从个数，之后 <em>p</em> 个整数，分别表示这些随从在 <em>T</em> 时刻的生命值（按照从左往右的顺序）。<br>　　第 4 行和第 5 行与第 2 行和第 3 行类似，只是将玩家从先手玩家换为后手玩家。</p><p><strong>样例输入</strong></p><p>8<br>summon 1 3 6<br>summon 2 4 2<br>end<br>summon 1 4 5<br>summon 1 2 1<br>attack 1 2<br>end<br>attack 1 1</p><p><strong>样例输出</strong></p><p>0<br>30<br>1 2<br>30<br>1 2</p><p><strong>样例说明</strong></p><p>　　按照样例输入从第 2 行开始逐行的解释如下：<br>　　1. 先手玩家在位置 1 召唤一个生命值为 6、攻击力为 3 的随从 A，是本方战场上唯一的随从。<br>　　2. 先手玩家在位置 2 召唤一个生命值为 2、攻击力为 4 的随从 B，出现在随从 A 的右边。<br>　　3. 先手玩家回合结束。<br>　　4. 后手玩家在位置 1 召唤一个生命值为 5、攻击力为 4 的随从 C，是本方战场上唯一的随从。<br>　　5. 后手玩家在位置 1 召唤一个生命值为 1、攻击力为 2 的随从 D，出现在随从 C 的左边。<br>　　6. 随从 D 攻击随从 B，双方均死亡。<br>　　7. 后手玩家回合结束。<br>　　8. 随从 A 攻击随从 C，双方的生命值都降低至 2。</p><p><strong>评测用例规模与约定</strong></p><ul><li>操作的个数0 ≤ <em>n</em> ≤ 1000。</li><li>随从的初始生命值为 1 到 100 的整数，攻击力为 0 到 100 的整数。</li><li>保证所有操作均合法，包括但不限于：<br>  1) 召唤随从的位置一定是合法的，即如果当前本方战场上有 <em>m</em> 个随从，则召唤随从的位置一定在 1 到 <em>m</em> + 1 之间，其中 1 表示战场最左边的位置，<em>m</em> + 1 表示战场最右边的位置。<br>  2) 当本方战场有 7 个随从时，不会再召唤新的随从。<br>  3) 发起攻击和被攻击的角色一定存在，发起攻击的角色攻击力大于 0。<br>  4) 一方英雄如果死亡，就不再会有后续操作。</li><li>数据约定：<br>  前 20% 的评测用例召唤随从的位置都是战场的最右边。<br>  前 40% 的评测用例没有 attack 操作。<br>  前 60% 的评测用例不会出现随从死亡的情况。</li></ul><hr><p><strong>分析：</strong></p><p>定义角色类Role，包含角色的生命值health和攻击力attack。</p><p>申明一个长度为2的<code>vector&lt;Role&gt;</code>（Java中使用<code>ArrayList&lt;Role&gt;</code>，下同）型数组player，存储两位玩家控制的所有角色（英雄和随从），vector中的下标表示该角色的编号。</p><p>先对player进行初始化操作，将两位玩家的英雄（攻击力为0，生命值为30）存储到所属的<code>vector&lt;Role&gt;</code>中。</p><p>1.若当前操作为summon，则将输入的attack和health存储到一个Role中，然后将Role插入到当前玩家vector下标为position的位置。</p><p>2.若当前操作为attack，表示当前玩家向对手发起攻击，当前玩家的随从attacker将减少等同于对手角色defender攻击力的生命值，对手的角色defender也将减少等同于attacker攻击力的生命值。</p><p>若attacker已死亡，则将其从当前玩家的随从列表中删除；若defender<strong>是随从且已死亡</strong>，则从对手的随从列表中删除。需要注意的是，<strong>attacker一定是随从，但defender可以是英雄。</strong></p><p>3.若当前操作为end，表示该回合结束，攻守双方互换。</p><p> n 次操作后，如果后手玩家的英雄已死亡，则先手玩家胜；如果先手玩家的英雄已死亡，则后手玩家胜；否则，游戏尚未结束。</p><blockquote><p>任意时刻，战场上的随从总是从1开始连续编号。因此，随从的增加，只有两种情况：</p><p>第一，放到某个被其他随从占据的位置上。此时，原来该位置及右边的所有随从编号都会增加 1。</p><p>第二，放到当前随从列表的最后面。</p><p>不可能出现前面还有空位，跳过这些空位，放到其他位置上的情况。</p></blockquote><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> attack, health;</span><br><span class="line">Node(<span class="keyword">int</span> _attack, <span class="keyword">int</span> _health) &#123;</span><br><span class="line">attack = _attack;</span><br><span class="line">health = _health;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Role;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Role&gt; player[<span class="number">2</span>];</span><br><span class="line">player[<span class="number">0</span>].push_back(Role(<span class="number">0</span>, <span class="number">30</span>));</span><br><span class="line">player[<span class="number">1</span>].push_back(Role(<span class="number">0</span>, <span class="number">30</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> operation;</span><br><span class="line"><span class="comment">// 当前玩家</span></span><br><span class="line"><span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 对手</span></span><br><span class="line"><span class="keyword">int</span> rival = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; operation;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束该回合，攻守双方互换</span></span><br><span class="line"><span class="keyword">if</span> (operation == <span class="string">"end"</span>) &#123;</span><br><span class="line">swap(current, rival);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 召唤随从</span></span><br><span class="line"><span class="keyword">if</span> (operation == <span class="string">"summon"</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> position, attack, health;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; position &gt;&gt; attack &gt;&gt; health;</span><br><span class="line">player[current].insert(player[current].begin() + position,</span><br><span class="line">Role(attack, health));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随从攻击</span></span><br><span class="line"><span class="keyword">if</span> (operation == <span class="string">"attack"</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> attacker, defender;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; attacker &gt;&gt; defender;</span><br><span class="line"><span class="comment">// 模拟攻击操作</span></span><br><span class="line">player[current][attacker].health -= player[rival][defender].attack;</span><br><span class="line">player[rival][defender].health -= player[current][attacker].attack;</span><br><span class="line"><span class="comment">// 若attacker已死亡，则从当前玩家的随从列表中删除</span></span><br><span class="line"><span class="keyword">if</span> (player[current][attacker].health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">player[current].erase(player[current].begin() + attacker);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若defender是随从且已死亡，则从对手的随从列表中删除</span></span><br><span class="line"><span class="keyword">if</span> (player[rival][defender].health &lt;= <span class="number">0</span> &amp;&amp; defender != <span class="number">0</span>) &#123;</span><br><span class="line">player[rival].erase(player[rival].begin() + defender);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断游戏的胜负结果</span></span><br><span class="line"><span class="keyword">if</span> (player[<span class="number">1</span>][<span class="number">0</span>].health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (player[<span class="number">0</span>][<span class="number">0</span>].health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 玩家英雄的生命值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; player[i][<span class="number">0</span>].health &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 玩家在战场上存活的随从个数、各随从剩余生命值</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; player[i].size() - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; player[i].size(); j++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; player[i][j].health;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Role</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> attack;</span><br><span class="line"><span class="keyword">int</span> health;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Role</span><span class="params">(<span class="keyword">int</span> attack, <span class="keyword">int</span> health)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.attack = attack;</span><br><span class="line"><span class="keyword">this</span>.health = health;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">List&lt;Role&gt;[] players = <span class="keyword">new</span> ArrayList[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; players.length; i++) &#123;</span><br><span class="line">players[i] = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">players[i].add(<span class="keyword">new</span> Role(<span class="number">0</span>, <span class="number">30</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当前玩家</span></span><br><span class="line"><span class="keyword">int</span> current = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 对手</span></span><br><span class="line"><span class="keyword">int</span> rival = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">String operation = scan.next();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束该回合，攻守双方互换</span></span><br><span class="line"><span class="keyword">if</span> (operation.equals(<span class="string">"end"</span>)) &#123;</span><br><span class="line">rival = current;</span><br><span class="line">current = <span class="number">1</span> - current;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 召唤随从</span></span><br><span class="line"><span class="keyword">if</span> (operation.equals(<span class="string">"summon"</span>)) &#123;</span><br><span class="line"><span class="keyword">int</span> position = scan.nextInt();</span><br><span class="line">players[current].add(position, <span class="keyword">new</span> Role(scan.nextInt(), scan.nextInt()));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随从攻击</span></span><br><span class="line"><span class="keyword">if</span> (operation.equals(<span class="string">"attack"</span>)) &#123;</span><br><span class="line"><span class="keyword">int</span> attacker = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> defender = scan.nextInt();</span><br><span class="line"><span class="comment">// 模拟攻击操作</span></span><br><span class="line">players[current].get(attacker).health -= players[rival].get(defender).attack;</span><br><span class="line">players[rival].get(defender).health -= players[current].get(attacker).attack;</span><br><span class="line"><span class="comment">// 若attacker已死亡，则从当前玩家的随从列表中删除</span></span><br><span class="line"><span class="keyword">if</span> (players[current].get(attacker).health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">players[current].remove(attacker);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若defender是随从且已死亡，则从对手的随从列表中删除</span></span><br><span class="line"><span class="keyword">if</span> (players[rival].get(defender).health &lt;= <span class="number">0</span> &amp;&amp; defender != <span class="number">0</span>) &#123;</span><br><span class="line">players[rival].remove(defender);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="comment">// 判断游戏的胜负结果</span></span><br><span class="line"><span class="keyword">if</span> (players[<span class="number">1</span>].get(<span class="number">0</span>).health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">sb.append(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (players[<span class="number">0</span>].get(<span class="number">0</span>).health &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">sb.append(-<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sb.append(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (List&lt;Role&gt; player : players) &#123;</span><br><span class="line"><span class="comment">// 玩家英雄的生命值</span></span><br><span class="line">sb.append(player.get(<span class="number">0</span>).health).append(<span class="string">'\n'</span>);</span><br><span class="line"><span class="comment">// 玩家在战场上存活的随从个数、各随从剩余生命值</span></span><br><span class="line">sb.append(player.size() - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; player.size(); i++) &#123;</span><br><span class="line">sb.append(<span class="string">' '</span>).append(player.get(i).health);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201604-3.路径解析</title>
      <link href="/2019/08/23/ccf-csp-20160403/"/>
      <url>/2019/08/23/ccf-csp-20160403/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在操作系统中，数据通常以文件的形式存储在文件系统中。文件系统一般采用层次化的组织形式，由目录（或者文件夹）和文件构成，形成一棵树的形状。文件有内容，用于存储数据。目录是容器，可包含文件或其他目录。同一个目录下的所有文件和目录的名字各不相同，不同目录下可以有名字相同的文件或目录。<br>　　为了指定文件系统中的某个文件，需要用<strong>路径</strong>来定位。在类 Unix 系统（Linux、Mac OS X、FreeBSD等）中，路径由若干<strong>部分</strong>构成，每个部分是一个目录或者文件的名字，相邻两个部分之间用 / 符号分隔。<br>　　有一个特殊的目录被称为<strong>根目录</strong>，是整个文件系统形成的这棵树的根节点，用一个单独的 / 符号表示。在操作系统中，有<strong>当前目录</strong>的概念，表示用户目前正在工作的目录。根据出发点可以把路径分为两类：<br>　　 <strong>绝对路径</strong>：以 / 符号开头，表示从根目录开始构建的路径。<br>　　 <strong>相对路径</strong>：不以 / 符号开头，表示从当前目录开始构建的路径。</p><p>　　例如，有一个文件系统的结构如下图所示。在这个文件系统中，有根目录 / 和其他普通目录 d1、d2、d3、d4，以及文件 f1、f2、f3、f1、f4。其中，两个 f1 是同名文件，但在不同的目录下。<br><img src="/static/images/ccf-csp-20160403.png" alt="img"><br>　　对于 d4 目录下的 f1 文件，可以用绝对路径 /d2/d4/f1 来指定。如果当前目录是 /d2/d3，这个文件也可以用相对路径 ../d4/f1 来指定，这里 .. 表示上一级目录（注意，根目录的上一级目录是它本身）。还有 . 表示本目录，例如 /d1/./f1 指定的就是 /d1/f1。注意，如果有多个连续的 / 出现，其效果等同于一个 /，例如 /d1///f1 指定的也是 /d1/f1。<br>　　本题会给出一些路径，要求对于每个路径，给出<strong>正规化</strong>以后的形式。一个路径经过正规化操作后，其指定的文件不变，但是会变成一个不包含 . 和 .. 的绝对路径，且不包含连续多个 / 符号。如果一个路径以 / 结尾，那么它代表的一定是一个目录，正规化操作要去掉结尾的 /。若这个路径代表根目录，则正规化操作的结果是 /。若路径为空字符串，则正规化操作的结果是当前目录。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　第一行包含一个整数 <em>P</em>，表示需要进行正规化操作的路径个数。<br>　　第二行包含一个字符串，表示当前目录。<br>　　以下 <em>P</em> 行，每行包含一个字符串，表示需要进行正规化操作的路径。</p><p><strong>输出格式</strong></p><p>　　共 <em>P</em> 行，每行一个字符串，表示经过正规化操作后的路径，顺序与输入对应。</p><p><strong>样例输入</strong></p><p>7<br>/d2/d3<br>/d2/d4/f1<br>../d4/f1<br>/d1/./f1<br>/d1///f1<br>/d1/<br>///<br>/d1/../../d2</p><p><strong>样例输出</strong></p><p>/d2/d4/f1<br>/d2/d4/f1<br>/d1/f1<br>/d1/f1<br>/d1<br>/<br>/d2</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>P</em> ≤ 10。<br>　　文件和目录的名字只包含大小写字母、数字和小数点 .、减号 - 以及下划线 _。<br>　　不会有文件或目录的名字是 . 或 .. ，它们具有题目描述中给出的特殊含义。<br>　　输入的所有路径每个长度不超过 1000 个字符。<br>　　输入的当前目录保证是一个经过正规化操作后的路径。<br>　　对于前 30% 的测试用例，需要正规化的路径的组成部分不包含 . 和 .. 。<br>　　对于前 60% 的测试用例，需要正规化的路径都是绝对路径。</p><hr><p><strong>分析：</strong></p><p>定义字符串currentDir，用于表示当前目录。</p><p>首先，判断路径dir是否为空字符串。若路径dir为空字符串，则正规化操作的结果就是currentDir。</p><p>接着，判断路径dir是否为相对路径。若路径dir属于相对路径，则将currentDir与dir通过路径分隔符/拼接起来，得到的绝对路径赋给dir。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dir = currentDir + <span class="string">'/'</span> + dir</span><br></pre></td></tr></table></figure><p>然后，按照路径分隔符/分割路径dir，分割完以后，遍历分割操作得到字符串数组：</p><p>若当前字符串为<code>.</code>，则直接跳过；</p><p>若当前字符串为<code>..</code>，且用于存储正规化操作结果的链表list不为空，则删除list的最后一个元素（进入上一级目录）；</p><p>否则，将当前字符串加入到list的末尾。</p><p>遍历操作结束后，如果list为空，则表示dir经过正规化操作的结果就是根目录/；</p><p>否则，将list中的各段路径用路径分隔符/拼接起来，得到的绝对路径即为dir经过正规化操作后的路径。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="built_in">string</span> currentDir;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">getchar();</span><br><span class="line">getline(<span class="built_in">cin</span>, currentDir);</span><br><span class="line"><span class="built_in">string</span> dir, temp;</span><br><span class="line"><span class="keyword">while</span> (p--) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, dir);</span><br><span class="line"><span class="comment">// 若dir为空字符串，则正规化操作的结果就是当前目录</span></span><br><span class="line"><span class="keyword">if</span> (dir.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; currentDir &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若dir为相对路径，则将currentDir与dir通过路径分隔符/拼接起来</span></span><br><span class="line"><span class="keyword">if</span> (dir[<span class="number">0</span>] != <span class="string">'/'</span>) &#123;</span><br><span class="line">dir = currentDir + <span class="string">'/'</span> + dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将/替换为空格，便于分割</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dir.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dir[i] == <span class="string">'/'</span>) &#123;</span><br><span class="line">dir[i] = <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="built_in">string</span>&gt; ls;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; dir;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理.和..</span></span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">"."</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str == <span class="string">".."</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ls.empty()) &#123;</span><br><span class="line">ls.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ls.push_back(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若为根目录</span></span><br><span class="line"><span class="keyword">if</span> (ls.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'/'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出目录</span></span><br><span class="line"><span class="keyword">while</span>(!ls.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">'/'</span> &lt;&lt; ls.front();</span><br><span class="line">ls.pop_front();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*for (list&lt;string&gt;::iterator iter = ls.begin(); iter != ls.end();</span></span><br><span class="line"><span class="comment">iter++) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; '/' &lt;&lt; (*iter);</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> p = Integer.parseInt(scan.nextLine());</span><br><span class="line">String currentDir = scan.nextLine();</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line">String dir = scan.nextLine();</span><br><span class="line"><span class="comment">// 若dir为空字符串，则正规化操作的结果就是当前目录</span></span><br><span class="line"><span class="keyword">if</span> (dir.isEmpty()) &#123;</span><br><span class="line">sb.append(currentDir).append(<span class="string">'\n'</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若dir为相对路径，则将currentDir与dir通过路径分隔符/拼接起来</span></span><br><span class="line"><span class="keyword">if</span> (dir.charAt(<span class="number">0</span>) != <span class="string">'/'</span>) &#123;</span><br><span class="line">dir = currentDir + <span class="string">'/'</span> + dir;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理.和..</span></span><br><span class="line">LinkedList&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (String str : dir.split(<span class="string">"/"</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">"."</span>) || str.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">".."</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!list.isEmpty()) &#123;</span><br><span class="line">list.removeLast();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">list.add(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若为根目录</span></span><br><span class="line"><span class="keyword">if</span> (list.isEmpty()) &#123;</span><br><span class="line">sb.append(<span class="string">'/'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 输出目录</span></span><br><span class="line"><span class="keyword">for</span> (String str : list) &#123;</span><br><span class="line">sb.append(<span class="string">'/'</span>).append(str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201512-3.画图</title>
      <link href="/2019/08/21/ccf-csp-20151203/"/>
      <url>/2019/08/21/ccf-csp-20151203/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　用 ASCII 字符来画图是一件有趣的事情，并形成了一门被称为 ASCII Art 的艺术。例如，下图是用 ASCII 字符画出来的 CSPRO 字样。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..____.____..____..____...___..</span><br><span class="line">./.___/.___||.._.\|.._.\./._.\.</span><br><span class="line">|.|...\___.\|.|_).|.|_).|.|.|.|</span><br><span class="line">|.|___.___).|..__/|.._.&lt;|.|_|.|</span><br><span class="line">.\____|____/|_|...|_|.\_\\___/.</span><br></pre></td></tr></table></figure><p>​    本题要求编程实现一个用 ASCII 字符来画图的程序，支持以下两种操作：<br>　　 画线：给出两个端点的坐标，画一条连接这两个端点的线段。简便起见题目保证要画的每条线段都是水平或者竖直的。水平线段用字符 - 来画，竖直线段用字符 | 来画。如果一条水平线段和一条竖直线段在某个位置相交，则相交位置用字符 + 代替。<br>　　 填充：给出填充的起始位置坐标和需要填充的字符，从起始位置开始，用该字符填充相邻位置，直到遇到画布边缘或已经画好的线段。注意这里的相邻位置只需要考虑上下左右 4 个方向，如下图所示，字符 @ 只和 4 个字符 * 相邻。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.*.</span><br><span class="line">*@*</span><br><span class="line">.*.</span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>输入格式</strong></p><p>　　第1行有三个整数<em>m</em>, <em>n</em>和<em>q</em>。<em>m</em>和<em>n</em>分别表示画布的宽度和高度，以字符为单位。<em>q</em>表示画图操作的个数。<br>　　第2行至第<em>q</em> + 1行，每行是以下两种形式之一：<br>　　 0 <em>x</em>1 <em>y</em>1 <em>x</em>2 <em>y</em>2：表示画线段的操作，(<em>x</em>1, <em>y</em>1)和(<em>x</em>2, <em>y</em>2)分别是线段的两端，满足要么<em>x</em>1 = <em>x</em>2 且<em>y</em>1 ≠ y2，要么 <em>y</em>1 = <em>y</em>2 且 <em>x</em>1 ≠ <em>x</em>2。<br>　　 1 <em>x</em> <em>y</em> <em>c</em>：表示填充操作，(<em>x</em>, <em>y</em>)是起始位置，保证不会落在任何已有的线段上；<em>c</em> 为填充字符，是大小写字母。<br>　　画布的左下角是坐标为 (0, 0) 的位置，向右为<em>x</em>坐标增大的方向，向上为<em>y</em>坐标增大的方向。这<em>q</em>个操作按照数据给出的顺序依次执行。画布最初时所有位置都是字符 .（小数点）。</p><p><strong>输出格式</strong></p><p>　　输出有<em>n</em>行，每行<em>m</em>个字符，表示依次执行这<em>q</em>个操作后得到的画图结果。</p><p><strong>样例输入</strong></p><p>4 2 3<br>1 0 0 B<br>0 1 0 2 0<br>1 0 0 A</p><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AAAA</span><br><span class="line">A--A</span><br></pre></td></tr></table></figure><p><strong>样例输入</strong></p><p>16 13 9<br>0 3 1 12 1<br>0 12 1 12 3<br>0 12 3 6 3<br>0 6 3 6 9<br>0 6 9 12 9<br>0 12 9 12 11<br>0 12 11 3 11<br>0 3 11 3 1<br>1 4 2 C</p><p><strong>样例输出</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">................</span><br><span class="line">...+--------+...</span><br><span class="line">...|CCCCCCCC|...</span><br><span class="line">...|CC+-----+...</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC|.........</span><br><span class="line">...|CC+-----+...</span><br><span class="line">...|CCCCCCCC|...</span><br><span class="line">...+--------+...</span><br><span class="line">................</span><br></pre></td></tr></table></figure><p><strong>评测用例规模与约定</strong></p><p>　　所有的评测用例满足：2 ≤ <em>m</em>, <em>n</em> ≤ 100，0 ≤ <em>q</em> ≤ 100，0 ≤ <em>x</em> &lt; <em>m</em>（<em>x</em>表示输入数据中所有位置的<em>x</em>坐标），0 ≤ <em>y</em>&lt; <em>n</em>（<em>y</em>表示输入数据中所有位置的<em>y</em>坐标）。</p><hr><p><strong>分析：</strong></p><p>定义一个nxm的二维char型数组graph，存储宽度为m、高度为n的画布。</p><p>题目告诉我们，“画布的左下角是坐标为 (0, 0) 的位置，向右为<em>x</em>坐标增大的方向，向上为<em>y</em>坐标增大的方向”。</p><p>然而，graph的第0行第0列在左上角，因此需要对给定的画布坐标进行转换。graph的第i行第j列与画布中的点(x,y)的转换关系如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i = n - <span class="number">1</span> - y;</span><br><span class="line">j = x;</span><br></pre></td></tr></table></figure><p>1.若当前操作为画线段 ——0 <em>x</em>1 <em>y</em>1 <em>x</em>2 <em>y</em>2：</p><p>(1)当x1 = x2时，表示画一条从(x1,y1)到(x2,y2)的垂直线，用字符|来画。当遇到字符-或者+时，对应位置的字符变为+；否则，变为字符|。</p><p>(2)当y1 = y2时，表示画一条从(x1,y1)到(x2,y2)的水平线，用字符-来画。当遇到字符|或者+时，对应位置的字符变为+；否则，变为字符-。</p><p>2.若当前操作为填充——1 <em>x</em> <em>y</em> <em>c</em>：</p><p>从起始位置(x,y)开始，用字符c填充上下左右 4 个方向的相邻位置，直到遇到画布边缘，或者已经画好的线段，或者该位置已经用字符c填充过了。</p><p>填充操作可以采用<strong>递归，或者队列</strong>来实现。</p><blockquote><p>注意到样例2中0 12 3 6 3，y1 = y2 = 3，而x1 &gt; x2。因此，在画线时，需要比较两个坐标的大小，而不能认为x1 &lt; x2或者y1 &lt; y2一定成立。</p></blockquote><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">char</span> picture[MAX][MAX];</span><br><span class="line"><span class="keyword">int</span> m, n, q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从起始位置(x,y)开始，用字符c填充相邻位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = n - <span class="number">1</span> - y, j = x;</span><br><span class="line"><span class="comment">//如果遇到画布边缘，或者已经画好的线段，或者该位置已经填充过了</span></span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n </span><br><span class="line">        || picture[i][j] == <span class="string">'-'</span> || picture[i][j] == <span class="string">'|'</span> || picture[i][j] == <span class="string">'+'</span></span><br><span class="line">|| picture[i][j] == c) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">picture[i][j] = c;</span><br><span class="line"><span class="comment">// 填充相邻位置，上下左右</span></span><br><span class="line">dfs(x, y + <span class="number">1</span>, c);</span><br><span class="line">dfs(x, y - <span class="number">1</span>, c);</span><br><span class="line">dfs(x - <span class="number">1</span>, y, c);</span><br><span class="line">dfs(x + <span class="number">1</span>, y, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;m, &amp;n, &amp;q);</span><br><span class="line"></span><br><span class="line">fill(picture[<span class="number">0</span>], picture[<span class="number">0</span>] + MAX * MAX, <span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> status, x, y;</span><br><span class="line"><span class="keyword">while</span> (q--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;status);</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %c"</span>, &amp;x, &amp;y, &amp;c);</span><br><span class="line">dfs(x, y, c);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画线段</span></span><br><span class="line"><span class="keyword">int</span> x2, y2, i, j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x, &amp;y, &amp;x2, &amp;y2);</span><br><span class="line"><span class="comment">// 竖直线段</span></span><br><span class="line"><span class="keyword">if</span> (x == x2) &#123;</span><br><span class="line"><span class="keyword">if</span> (y &gt; y2) &#123;</span><br><span class="line">swap(y, y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; y &lt;= y2; y++) &#123;</span><br><span class="line">i = n - <span class="number">1</span> - y;</span><br><span class="line">j = x;</span><br><span class="line"><span class="keyword">if</span> (picture[i][j] == <span class="string">'-'</span> || picture[i][j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">picture[i][j] = <span class="string">'+'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">picture[i][j] = <span class="string">'|'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 水平线段</span></span><br><span class="line"><span class="keyword">if</span> (x &gt; x2) &#123;</span><br><span class="line">swap(x, x2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; x &lt;= x2; x++) &#123;</span><br><span class="line">i = n - <span class="number">1</span> - y;</span><br><span class="line">j = x;</span><br><span class="line"><span class="keyword">if</span> (picture[i][j] == <span class="string">'|'</span> || picture[i][j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">picture[i][j] = <span class="string">'+'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">picture[i][j] = <span class="string">'-'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, picture[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><p>使用递归实现填充操作时，系统报<strong>运行错误</strong>，得分为<strong>90分</strong>，可能是出现了<strong>栈溢出</strong>。</p><p>故下面的代码，采用<strong>队列</strong>实现填充操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> q = scan.nextInt();</span><br><span class="line"><span class="keyword">char</span>[][] graph = <span class="keyword">new</span> <span class="keyword">char</span>[n][m];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">graph[i][j] = <span class="string">'.'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; q; k++) &#123;</span><br><span class="line"><span class="keyword">int</span> status = scan.nextInt();</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line"><span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> y = scan.nextInt();</span><br><span class="line"><span class="keyword">char</span> c = scan.next().charAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//dfs(graph, x, y, c, m, n);</span></span><br><span class="line">Queue&lt;Point&gt; qu = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">qu.add(<span class="keyword">new</span> Point(x,y));</span><br><span class="line"><span class="keyword">while</span>(!qu.isEmpty()) &#123;</span><br><span class="line">Point p = qu.poll();</span><br><span class="line">x = p.x;</span><br><span class="line">y = p.y;</span><br><span class="line"><span class="keyword">int</span> i = n - <span class="number">1</span> - y, j = x;</span><br><span class="line"><span class="comment">// 如果遇到画布边缘，或者已经画好的线段，或者该位置已经填充过了</span></span><br><span class="line"><span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= m || y &lt; <span class="number">0</span> || y &gt;= n </span><br><span class="line">|| graph[i][j] == <span class="string">'-'</span> || graph[i][j] == <span class="string">'|'</span> || graph[i][j] == <span class="string">'+'</span></span><br><span class="line">|| graph[i][j] == c) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">graph[i][j] = c;</span><br><span class="line">qu.add(<span class="keyword">new</span> Point(p.x,y+<span class="number">1</span>));</span><br><span class="line">qu.add(<span class="keyword">new</span> Point(x,y-<span class="number">1</span>));</span><br><span class="line">qu.add(<span class="keyword">new</span> Point(x-<span class="number">1</span>,y));</span><br><span class="line">qu.add(<span class="keyword">new</span> Point(x+<span class="number">1</span>,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 画线段</span></span><br><span class="line"><span class="keyword">int</span> x1 = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> y1 = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> x2 = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> y2 = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> i, j, temp;</span><br><span class="line"><span class="comment">// 竖直线段</span></span><br><span class="line"><span class="keyword">if</span> (x1 == x2) &#123;</span><br><span class="line"><span class="keyword">if</span> (y1 &gt; y2) &#123;</span><br><span class="line">temp = y1;</span><br><span class="line">y1 = y2;</span><br><span class="line">y2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; y1 &lt;= y2; y1++) &#123;</span><br><span class="line">i = n - <span class="number">1</span> - y1;</span><br><span class="line">j = x1;</span><br><span class="line"><span class="keyword">if</span> (graph[i][j] == <span class="string">'-'</span> || graph[i][j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">graph[i][j] = <span class="string">'+'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">graph[i][j] = <span class="string">'|'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 水平线段</span></span><br><span class="line"><span class="keyword">if</span> (x1 &gt; x2) &#123;</span><br><span class="line">temp = x1;</span><br><span class="line">x1 = x2;</span><br><span class="line">x2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; x1 &lt;= x2; x1++) &#123;</span><br><span class="line">i = n - <span class="number">1</span> - y1;</span><br><span class="line">j = x1;</span><br><span class="line"><span class="keyword">if</span> (graph[i][j] == <span class="string">'|'</span> || graph[i][j] == <span class="string">'+'</span>) &#123;</span><br><span class="line">graph[i][j] = <span class="string">'+'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">graph[i][j] = <span class="string">'-'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line">sb.append(graph[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用递归，得分90，显示运行错误，可能是递归层数过深，导致栈溢出</span></span><br><span class="line"><span class="comment">/*public static void dfs(char[][] graph, int x, int y, char c, int m, int n) &#123;</span></span><br><span class="line"><span class="comment">int i = n - 1 - y, j = x;</span></span><br><span class="line"><span class="comment">// 如果遇到画布边缘，或者已经画好的线段，或者该位置已经填充过了</span></span><br><span class="line"><span class="comment">if (x &lt; 0 || x &gt;= m || y &lt; 0 || y &gt;= n || graph[i][j] == '-' || graph[i][j] == '|' || graph[i][j] == '+'</span></span><br><span class="line"><span class="comment">|| graph[i][j] == c) &#123;</span></span><br><span class="line"><span class="comment">return;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">graph[i][j] = c;</span></span><br><span class="line"><span class="comment">// 填充相邻位置，上下左右</span></span><br><span class="line"><span class="comment">dfs(graph, x, y + 1, c, m, n);</span></span><br><span class="line"><span class="comment">dfs(graph, x, y - 1, c, m, n);</span></span><br><span class="line"><span class="comment">dfs(graph, x - 1, y, c, m, n);</span></span><br><span class="line"><span class="comment">dfs(graph, x + 1, y, c, m, n);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Point</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201509-3.模板生成系统</title>
      <link href="/2019/08/20/ccf-csp-20150903/"/>
      <url>/2019/08/20/ccf-csp-20150903/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　成成最近在搭建一个网站，其中一些页面的部分内容来自数据库中不同的数据记录，但是页面的基本结构是相同的。例如，对于展示用户信息的页面，当用户为 Tom 时，网页的源代码是<br><img src="/static/images/ccf-csp-20150903-1.png" alt="img"></p><p>　　而当用户为 Jerry 时，网页的源代码是<br><img src="/static/images/ccf-csp-20150903-2.png" alt="img"></p><p>　　这样的例子在包含动态内容的网站中还有很多。为了简化生成网页的工作，成成觉得他需要引入一套模板生成系统。<br>　　模板是包含特殊标记的文本。成成用到的模板只包含一种特殊标记，格式为 {{ VAR }}，其中 VAR 是一个变量。该标记在模板生成时会被变量 VAR 的值所替代。例如，如果变量 name = “Tom”，则 {{ name }} 会生成 Tom。具体的规则如下：<br>　　·变量名由大小写字母、数字和下划线 (_) 构成，且第一个字符不是数字，长度不超过 16 个字符。<br>　　·变量名是大小写敏感的，Name 和 name 是两个不同的变量。<br>　　·变量的值是字符串。<br>　　·如果标记中的变量没有定义，则生成空串，相当于把标记从模板中删除。<br>　　·模板不递归生成。也就是说，如果变量的值中包含形如 {{ VAR }} 的内容，不再做进一步的替换。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数 <em>m</em>, <em>n</em>，分别表示模板的行数和模板生成时给出的变量个数。<br>　　接下来 <em>m</em> 行，每行是一个字符串，表示模板。<br>　　接下来 <em>n</em> 行，每行表示一个变量和它的值，中间用一个空格分隔。值是字符串，用双引号 (“) 括起来，内容可包含除双引号以外的任意可打印 ASCII 字符（ASCII 码范围 32, 33, 35-126）。</p><p><strong>输出格式</strong></p><p>　　输出包含若干行，表示模板生成的结果。</p><p><strong>样例输入</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">11 2</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>User &#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:&#123;&#123; email &#125;&#125;"</span>&gt;</span>&#123;&#123; email &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Address: &#123;&#123; address &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">name "David Beckham"</span><br><span class="line">email "david@beckham.com"</span><br></pre></td></tr></table></figure><p><strong>样例输出</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>User David Beckham<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>David Beckham<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Email: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:david@beckham.com"</span>&gt;</span>david@beckham.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Address: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>评测用例规模与约定</strong></p><p>　　0 ≤ <em>m</em> ≤ 100<br>　　0 ≤ <em>n</em> ≤ 100<br>　　输入的模板每行长度不超过 80 个字符（不包含换行符）。<br>　　输入保证模板中所有以{{ 开始的子串都是合法的标记，开始是两个左大括号和一个空格，然后是变量名，结尾是一个空格和两个右大括号。<br>　　输入中所有变量的值字符串长度不超过 100 个字符（不包括双引号）。<br>　　保证输入的所有变量的名字各不相同。</p><hr><p><strong>分析：</strong></p><p>本题可以采用<strong>正则表达式</strong>或者<strong>子串查找</strong>两种方式求解。这里主要采用<strong>子串查找</strong>来求解。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="comment">// 吸收末尾的换行符</span></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储模板内容</span></span><br><span class="line"><span class="built_in">string</span> tpl;</span><br><span class="line"><span class="built_in">string</span> line;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, line);</span><br><span class="line">tpl += line + <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用map存储变量名和变量的值</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; dict;</span><br><span class="line"><span class="built_in">string</span> key, value, str;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line">getline(<span class="built_in">cin</span>, str);</span><br><span class="line"><span class="keyword">int</span> index = str.find(<span class="string">' '</span>);</span><br><span class="line">key = str.substr(<span class="number">0</span>, index);</span><br><span class="line"><span class="comment">// 去掉首尾的双引号</span></span><br><span class="line">dict[key] = str.substr(index + <span class="number">2</span>, str.size() - (index + <span class="number">2</span>) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tpl.size();) &#123;</span><br><span class="line"><span class="comment">// 从第i个位置开始，向后寻找子串第一次出现的位置，若未找到该子串，则返回string::npos</span></span><br><span class="line"><span class="keyword">int</span> start = tpl.find(<span class="string">"&#123;&#123; "</span>, i);</span><br><span class="line"><span class="keyword">if</span> (start == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> end = tpl.find(<span class="string">" &#125;&#125;"</span>, start + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (end == <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取变量名</span></span><br><span class="line">key = tpl.substr(start + <span class="number">3</span>, end - start - <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 若变量为定义，则生成空串</span></span><br><span class="line">value = dict.count(key) ? dict[key] : <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 替换模板变量</span></span><br><span class="line">tpl = tpl.replace(start, end - start + <span class="number">3</span>, value);</span><br><span class="line"><span class="comment">// 因为模板不递归生成，故跳过替换后的那段字符串</span></span><br><span class="line">i = start + value.size();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tpl &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="comment">// 保存输入的数据</span></span><br><span class="line">String[] sArr = scan.nextLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">int</span> m = Integer.parseInt(sArr[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> n = Integer.parseInt(sArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">sb.append(scan.nextLine()).append(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">String line = scan.nextLine();</span><br><span class="line"><span class="keyword">int</span> index = line.indexOf(<span class="string">' '</span>);</span><br><span class="line">String key = line.substring(<span class="number">0</span>, index);</span><br><span class="line"><span class="comment">// 去掉首尾的双引号</span></span><br><span class="line">String value = line.substring(index + <span class="number">2</span>, line.length() - <span class="number">1</span>);</span><br><span class="line">map.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sb.length();) &#123;</span><br><span class="line"><span class="comment">// 从第i个位置开始，向后寻找子串第一次出现的位置</span></span><br><span class="line"><span class="keyword">int</span> start = sb.indexOf(<span class="string">"&#123;&#123; "</span>, i);</span><br><span class="line"><span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> end = sb.indexOf(<span class="string">" &#125;&#125;"</span>, start + <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取变量名</span></span><br><span class="line">String key = sb.substring(start + <span class="number">3</span>, end);</span><br><span class="line"><span class="comment">// 若变量为定义，则生成空串</span></span><br><span class="line">String value = map.containsKey(key) ? map.get(key) : <span class="string">""</span>;</span><br><span class="line"><span class="comment">// 替换模板变量</span></span><br><span class="line">sb.replace(start, end + <span class="number">3</span>, value);</span><br><span class="line"><span class="comment">// 因为模板不递归生成，故跳过替换后的那段字符串</span></span><br><span class="line">i = start + value.length();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*//正则表达式的解法，得分为90，显示运行错误</span></span><br><span class="line"><span class="comment">// 使用正则表达式替换模板变量</span></span><br><span class="line"><span class="comment">Pattern p = Pattern.compile("\\&#123;\\&#123; \\D\\w&#123;0,15&#125; \\&#125;\\&#125;");</span></span><br><span class="line"><span class="comment">Matcher matcher = p.matcher(sb);</span></span><br><span class="line"><span class="comment">StringBuffer sbuff = new StringBuffer();</span></span><br><span class="line"><span class="comment">while (matcher.find()) &#123;</span></span><br><span class="line"><span class="comment">String var = matcher.group();</span></span><br><span class="line"><span class="comment">String key = var.substring(3, var.length() - 3);</span></span><br><span class="line"><span class="comment">matcher.appendReplacement(sbuff, map.containsKey(key) ? map.get(key) : "");</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">matcher.appendTail(sbuff);</span></span><br><span class="line"><span class="comment">System.out.println(sbuff.toString());*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201503-3.节日</title>
      <link href="/2019/08/19/ccf-csp-20150303/"/>
      <url>/2019/08/19/ccf-csp-20150303/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　有一类节日的日期并不是固定的，而是以“<em>a</em>月的第<em>b</em>个星期<em>c</em>”的形式定下来的，比如说母亲节就定为每年的五月的第二个星期日。<br>　　现在，给你<em>a</em>，<em>b</em>，<em>c</em>和<em>y</em>1, <em>y</em>2(1850 ≤ <em>y</em>1, <em>y</em>2 ≤ 2050)，希望你输出从公元<em>y</em>1年到公元<em>y</em>2年间的每年的<em>a</em>月的第<em>b</em>个星期<em>c</em>的日期。<br>　　提示：关于闰年的规则：年份是400的整数倍时是闰年，否则年份是4的倍数并且不是100的倍数时是闰年，其他年份都不是闰年。例如1900年就不是闰年，而2000年是闰年。<br>　　为了方便你推算，已知1850年1月1日是星期二。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入包含恰好一行，有五个整数<em>a</em>, <em>b</em>, <em>c</em>, <em>y</em>1, <em>y</em>2。其中<em>c</em>=1, 2, ……, 6, 7分别表示星期一、二、……、六、日。</p><p><strong>输出格式</strong></p><p>　　对于<em>y</em>1和<em>y</em>2之间的每一个年份，包括<em>y</em>1和<em>y</em>2，按照年份从小到大的顺序输出一行。<br>　　如果该年的<em>a</em>月第<em>b</em>个星期<em>c</em>确实存在，则以”yyyy/mm/dd”的格式输出，即输出四位数的年份，两位数的月份，两位数的日期，中间用斜杠“/”分隔，位数不足时前补零。<br>　　如果该年的<em>a</em>月第<em>b</em>个星期<em>c</em>并不存在，则输出”none”（不包含双引号)。</p><p><strong>样例输入</strong></p><p>5 2 7 2014 2015</p><p><strong>样例输出</strong></p><p>2014/05/11<br>2015/05/10</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例都满足：1 ≤ <em>a</em> ≤ 12，1 ≤ <em>b</em> ≤ 5，1 ≤ <em>c</em> ≤ 7，1850 ≤ <em>y</em>1, <em>y</em>2 ≤ 2050。</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>日期处理</strong>。</p><p>需要注意的是，题目要求的是从y1年到y2年，每年的<strong>a月第b个星期c的日期</strong>，而不是a月第b个星期的星期c的日期。</p><p>首先，计算出1850年1月1日到i年a月1日的总天数day；</p><p>然后，计算出i年a月1日的星期w = (day % 7 + 2) % 7，当w = 0时，表示星期日，应重新赋值7；</p><p>最后，计算出i年a月第b个星期c的日期号d，此时存在以下两种情况（为了便于描述，我们以星期一为一周的第一天）：</p><p>1.当c ≥ w时，第b个星期c位于日历表的第b行，d = 7 * (b - 1) - (w - 1) + c；</p><p>2.当c &lt; w时，第b个星期c位于日历表的第b + 1行，d = 7 * (b - 1) + 7 - (w - 1) + c。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y % <span class="number">400</span> == <span class="number">0</span> || (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> month[<span class="number">2</span>][<span class="number">13</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;, </span><br><span class="line">                    &#123; <span class="number">0</span>,<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c, y1, y2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d %d"</span>, &amp;a, &amp;b, &amp;c, &amp;y1, &amp;y2);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 计算1850年到y1-1年年底有多少天</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1850</span>; i &lt; y1; i++) &#123;</span><br><span class="line">count += <span class="number">365</span>;</span><br><span class="line"><span class="keyword">if</span> (isLeap(i)) &#123;</span><br><span class="line">count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y1; i &lt;= y2; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算1850年1月1日到i年a月1日共有多少天</span></span><br><span class="line"><span class="keyword">int</span> day = count;</span><br><span class="line">count += <span class="number">365</span>;</span><br><span class="line"><span class="keyword">if</span> (isLeap(i)) &#123;</span><br><span class="line">count += <span class="number">1</span>;</span><br><span class="line">index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; a; m++) &#123;</span><br><span class="line">day += month[index][m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// w表示i年a月1日是星期几</span></span><br><span class="line"><span class="keyword">int</span> w = (day % <span class="number">7</span> + <span class="number">2</span>) % <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">w = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d表示i年a月第b个星期c是几号</span></span><br><span class="line"><span class="comment">// 若c &gt;= w，则第b个星期c位于第b行，d = 7 * (b - 1) - (w - 1) + c；</span></span><br><span class="line"><span class="comment">// 若c &lt; w，则第b个星期c位于第b+1行，d = 7 * (b - 1) + 7 - (w - 1) + c。</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">7</span> * (b - <span class="number">1</span>) - (w - <span class="number">1</span>) + c;</span><br><span class="line"><span class="keyword">if</span> (c &lt; w) &#123;</span><br><span class="line">d += <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (d &gt; month[index][a]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"none\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%04d/%02d/%02d\n"</span>, i, a, d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] MONTH = &#123; &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;,</span><br><span class="line">&#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> a = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> b = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> c = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> y1 = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> y2 = scan.nextInt();</span><br><span class="line">scan.close();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 计算1850年到y1-1年年底有多少天</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1850</span>; i &lt; y1; i++) &#123;</span><br><span class="line">count += <span class="number">365</span>;</span><br><span class="line"><span class="keyword">if</span> (isLeap(i)) &#123;</span><br><span class="line">count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y1; i &lt;= y2; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算1850年1月1日到i年a月1日共有多少天</span></span><br><span class="line"><span class="keyword">int</span> day = count;</span><br><span class="line">count += <span class="number">365</span>;</span><br><span class="line"><span class="keyword">if</span> (isLeap(i)) &#123;</span><br><span class="line">count += <span class="number">1</span>;</span><br><span class="line">index = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt; a; m++) &#123;</span><br><span class="line">day += MONTH[index][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// w表示i年a月1日是星期几</span></span><br><span class="line"><span class="keyword">int</span> w = (day % <span class="number">7</span> + <span class="number">2</span>) % <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">w = <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// d表示i年a月第b个星期c是几号</span></span><br><span class="line"><span class="comment">// 若c &gt;= w，则第b个星期c位于第b行，此时，d = 7 * (b - 1) - (w - 1) + c；</span></span><br><span class="line"><span class="comment">// 若c &lt; w，则第b个星期c位于第b+1行，此时，d = 7 * (b - 1) + 7 - (w - 1) + c。</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">7</span> * (b - <span class="number">1</span>) - (w - <span class="number">1</span>) + c;</span><br><span class="line"><span class="keyword">if</span> (c &lt; w) &#123;</span><br><span class="line">d += <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (d &gt; MONTH[index][a]) &#123;</span><br><span class="line">System.out.println(<span class="string">"none"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.printf(<span class="string">"%04d/%02d/%02d\n"</span>, i, a, d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> y % <span class="number">400</span> == <span class="number">0</span> || (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201312-3.最大的矩形</title>
      <link href="/2019/08/18/ccf-csp-20131203/"/>
      <url>/2019/08/18/ccf-csp-20131203/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在横轴上放了n个相邻的矩形，每个矩形的宽度是1，而第i（1 ≤ i ≤ n）个矩形的高度是hi。这n个矩形构成了一个直方图。例如，下图中六个矩形的高度就分别是3, 1, 6, 5, 2, 3。</p><p><img src="/static/images/ccf-csp-20131203-1.png" alt="img"><br>　　请找出能放在给定直方图里面积最大的矩形，它的边要与坐标轴平行。对于上面给出的例子，最大矩形如下图所示的阴影部分，面积是10。<br><img src="/static/images/ccf-csp-20131203-2.png" alt="img"></p><a id="more"></a><p><strong>输入格式</strong></p><p>　　第一行包含一个整数n，即矩形的数量(1 ≤ n ≤ 1000)。<br>　　第二行包含n 个整数h1, h2, … , hn，相邻的数之间由空格分隔。(1 ≤ hi ≤ 10000)。hi是第i个矩形的高度。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，即给定直方图内的最大矩形的面积。</p><p><strong>样例输入</strong></p><p>6<br>3 1 6 5 2 3</p><p><strong>样例输出</strong></p><p>10</p><hr><p><strong>分析：</strong></p><p>定义一维int型数组h，用于存储所有的矩形高度；int型变量maxArea表示最大矩形的面积；</p><p>int型变量minHeight，表示从第i个矩形到第j个矩形中的最小高度。</p><p>遍历给定的n个矩形：从矩形i出发，向后寻找，</p><p>计算从第i个矩形到第j个矩形中，能够容纳的矩形面积area = minHeight * (j - i + 1) 。</p><p>若area &gt; maxArea，则令maxArea = area。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> h[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> area, maxArea = <span class="number">0</span>, minHeight;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">minHeight = h[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">minHeight = min(minHeight, h[j]);</span><br><span class="line">area = (j - i + <span class="number">1</span>) * minHeight;</span><br><span class="line"><span class="keyword">if</span> (area &gt; maxArea) &#123;</span><br><span class="line">maxArea = area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxArea);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span>[] h = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h.length; i++) &#123;</span><br><span class="line">h[i] = scan.nextInt();</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> area, maxArea = <span class="number">0</span>, minHeight;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h.length; i++) &#123;</span><br><span class="line">minHeight = h[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; h.length; j++) &#123;</span><br><span class="line">minHeight = Math.min(minHeight, h[j]);</span><br><span class="line">area = (j - i + <span class="number">1</span>) * minHeight;</span><br><span class="line"><span class="keyword">if</span> (area &gt; maxArea) &#123;</span><br><span class="line">maxArea = area;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(maxArea);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201403-3.命令行选项</title>
      <link href="/2019/08/17/ccf-csp-20140303/"/>
      <url>/2019/08/17/ccf-csp-20140303/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　请你写一个命令行分析程序,用以分析给定的命令行里包含哪些选项。每个命令行由若干个字符串组成,它们之间恰好由一个空格分隔。这些字符串中的第一个为该命令行工具的名字,由小写字母组成,你的程序不用对它进行处理。在工具名字之后可能会包含若干选项,然后可能会包含一 些不是选项的参数。<br>　　选项有两类:带参数的选项和不带参数的选项。一个合法的无参数选项的形式是一个减号后面跟单个小写字母,如”-a” 或”-b”。而带参数选项则由两个由空格分隔的字符串构成,前者的格式要求与无参数选项相同,后者则是该选项的参数,是由小写字母,数字和减号组成的非空字符串。<br>　　该命令行工具的作者提供给你一个格式字符串以指定他的命令行工具需要接受哪些选项。这个字符串由若干小写字母和冒号组成,其中的每个小写字母表示一个该程序接受的选项。如果该小写字母后面紧跟了一个冒号,它就表示一个带参数的选项,否则则为不带参数的选项。例如, “<code>ab​:m:</code>​” 表示该程序接受三种选项,即”-a”(不带参数),”-b”(带参数), 以及”-m”(带参数)。<br>　　命令行工具的作者准备了若干条命令行用以测试你的程序。对于每个命令行,你的工具应当一直向后分析。当你的工具遇到某个字符串既不是合法的选项,又不是某个合法选项的参数时,分析就停止。命令行剩余的未分析部分不构成该命令的选项,因此你的程序应当忽略它们。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行是一个格式字符串,它至少包含一个字符,且长度不超过 52。格式字符串只包含小写字母和冒号,保证每个小写字母至多出现一次,不会有两个相邻的冒号,也不会以冒号开头。<br>　　输入的第二行是一个正整数 N(1 ≤ N ≤ 20),表示你需要处理的命令行的个数。<br>　　接下来有 N 行,每行是一个待处理的命令行,它包括不超过 256 个字符。该命令行一定是若干个由单个空格分隔的字符串构成,每个字符串里只包含小写字母,数字和减号。</p><p><strong>输出格式</strong></p><p>　　输出有 N 行。其中第 i 行以”Case i:” 开始,然后应当有恰好一个空格,然后应当按照字母升序输出该命令行中用到的所有选项的名称,对于带参数的选项,在输出它的名称之后还要输出它的参数。如果一个选项在命令行中出现了多次,只输出一次。如果一个带参数的选项在命令行中出 现了多次,只输出最后一次出现时所带的参数。</p><p><strong>样例输入</strong></p><p>albw:x<br>4<br>ls -a -l -a documents -b<br>ls<br>ls -w 10 -x -w 15<br>ls -a -b -c -d -e -l</p><p><strong>样例输出</strong></p><p>Case 1: -a -l<br>Case 2:<br>Case 3: -w 15 -x<br>Case 4: -a -b</p><hr><p><strong>分析：</strong></p><p>定义长度为123的一维数组type（<code>z</code>的ASCII值为122），用于表示命令行选项的类型。</p><p>当值为0时，表示选项不属于该命令；当值为1时，表示带参数的选项；当值为2时，表示不带参数的选项。</p><p>题目要求按照<strong>字母升序</strong>输出命令行中用到的所有选项，因此可以使用C++中的map（Java中的TreeMap）存储选项及参数。</p><p>处理输入的命令行时，直接跳过命令名，只处理后面的选项。</p><p>若当前选项不合法（不是一个减号后面跟单个小写字母），或者不属于该命令，则分析停止；</p><p>若为带参数的选项，且存在参数，则将其存储在map中;</p><p>若为不带参数的选项，则为其参数赋空字符串<code>&quot;&quot;</code>。</p><blockquote><p>C++中，可以使用stringstream处理命令行中的空格；Java中，直接使用String类的split方法，按照空格分割字符串。</p></blockquote><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> args, cmd;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">// 吸收换行符</span></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; args &gt;&gt; n &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理给定的命令行选项，0表示不属于该命令，1表示带参数的选项，2表示不带参数的选项</span></span><br><span class="line"><span class="keyword">int</span> type[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= args.size() - <span class="number">2</span> &amp;&amp; args[i + <span class="number">1</span>] == <span class="string">':'</span>) &#123;</span><br><span class="line">type[args[i++]] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">type[args[i]] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt; dict;</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line"></span><br><span class="line">getline(<span class="built_in">cin</span>, cmd);</span><br><span class="line">ss &lt;&lt; cmd;</span><br><span class="line"><span class="comment">// 跳过命令名</span></span><br><span class="line">ss &gt;&gt; cmd;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; cmd) &#123;</span><br><span class="line"><span class="comment">// 若当前选项不合法，或者不属于该命令，分析停止</span></span><br><span class="line"><span class="keyword">if</span> (!(cmd.size() == <span class="number">2</span> &amp;&amp; cmd[<span class="number">0</span>] == <span class="string">'-'</span>) || type[cmd[<span class="number">1</span>]] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若为带参数选项</span></span><br><span class="line"><span class="keyword">if</span> (type[cmd[<span class="number">1</span>]] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 若存在参数，则存储到map中；否则，循环结束</span></span><br><span class="line"><span class="keyword">if</span> (ss &gt;&gt; args) &#123;</span><br><span class="line">dict[cmd[<span class="number">1</span>]] = args;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 不带参数的选项，赋空字符串</span></span><br><span class="line">dict[cmd[<span class="number">1</span>]] = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">":"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="built_in">string</span>&gt;::iterator iter = dict.begin();</span><br><span class="line">iter != dict.end(); iter++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" -"</span> &lt;&lt; iter-&gt;first;</span><br><span class="line"><span class="keyword">if</span> (!iter-&gt;second.empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; iter-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String arguments = scan.nextLine();</span><br><span class="line"><span class="keyword">int</span> n = Integer.parseInt(scan.nextLine());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理给定的命令行选项，0表示不属于该命令，1表示带参数的选项，2表示不带参数的选项</span></span><br><span class="line"><span class="keyword">int</span>[] type = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">123</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arguments.length(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt;= arguments.length() - <span class="number">2</span> &amp;&amp; arguments.charAt(i + <span class="number">1</span>) == <span class="string">':'</span>) &#123;</span><br><span class="line">type[arguments.charAt(i++)] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">type[arguments.charAt(i)] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">Map&lt;Character, String&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">String[] sArr = scan.nextLine().split(<span class="string">" "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; sArr.length; j++) &#123;</span><br><span class="line"><span class="keyword">char</span>[] cmd = sArr[j].toCharArray();</span><br><span class="line"><span class="comment">// 若当前选项不合法，或者不属于该命令，分析停止</span></span><br><span class="line"><span class="keyword">if</span> (!(cmd.length == <span class="number">2</span> &amp;&amp; cmd[<span class="number">0</span>] == <span class="string">'-'</span>) || type[cmd[<span class="number">1</span>]] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若为带参数选项</span></span><br><span class="line"><span class="keyword">if</span> (type[cmd[<span class="number">1</span>]] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">// 若存在参数，则存储到map中；否则，循环结束</span></span><br><span class="line"><span class="keyword">if</span> (j &lt; sArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">map.put(cmd[<span class="number">1</span>], sArr[++j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 不带参数的选项，赋空字符串</span></span><br><span class="line">map.put(cmd[<span class="number">1</span>], <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sb.append(<span class="string">"Case "</span>).append(i + <span class="number">1</span>).append(<span class="string">':'</span>);</span><br><span class="line">map.forEach((k, v) -&gt; &#123;</span><br><span class="line">sb.append(<span class="string">" -"</span>).append(k);</span><br><span class="line"><span class="keyword">if</span> (!v.isEmpty()) &#123;</span><br><span class="line">sb.append(<span class="string">' '</span>).append(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">sb.append(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201409-3.字符串匹配</title>
      <link href="/2019/08/16/ccf-csp-20140903/"/>
      <url>/2019/08/16/ccf-csp-20140903/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给出一个字符串和多行文字，在这些文字中找到字符串出现的那些行。你的程序还需支持大小写敏感选项：当选项打开时，表示同一个字母的大写和小写看作不同的字符；当选项关闭时，表示同一个字母的大写和小写看作相同的字符。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个字符串S，由大小写英文字母组成。<br>　　第二行包含一个数字，表示大小写敏感的选项，当数字为0时表示大小写不敏感，当数字为1时表示大小写敏感。<br>　　第三行包含一个整数n，表示给出的文字的行数。<br>　　接下来n行，每行包含一个字符串，字符串由大小写英文字母组成，不含空格和其他字符。</p><p><strong>输出格式</strong></p><p>　　输出多行，每行包含一个字符串，按出现的顺序依次给出那些包含了字符串S的行。</p><p><strong>样例输入</strong></p><p>Hello<br>1<br>5<br>HelloWorld<br>HiHiHelloHiHi<br>GrepIsAGreatTool<br>HELLO<br>HELLOisNOTHello</p><p><strong>样例输出</strong></p><p>HelloWorld<br>HiHiHelloHiHi<br>HELLOisNOTHello</p><p><strong>样例说明</strong></p><p>　　在上面的样例中，第四个字符串虽然也是Hello，但是大小写不正确。如果将输入的第二行改为0，则第四个字符串应该输出。</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=100，每个字符串的长度不超过100。</p><hr><p><strong>分析：</strong></p><p>这是一道简单的字符串模拟题。</p><p>当大小写敏感时，本题变为判断字符串是否包含某一子串；</p><p>当大小写不敏感时，可以先将字符串和子串都转换为小写（或者大写）形式，接下来的操作，与大小写敏感时一致。</p><p>在C/C++中，判断字符串是否包含某一子串，可以使用<code>strstr()</code>或者字符串的<code>find()</code>；在Java中，可以使用字符串的<code>contains()</code>。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将source转换为小写字符串result</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">to_lower_case</span><span class="params">(<span class="keyword">char</span> source[], <span class="keyword">char</span> result[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = <span class="built_in">strlen</span>(source);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= source[i] &amp;&amp; source[i] &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">result[i] = source[i] + <span class="number">32</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result[i] = source[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result[size] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> pattern[<span class="number">101</span>], str[<span class="number">101</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, pattern);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ignore, n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;ignore, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> * position;</span><br><span class="line"><span class="keyword">char</span> pattern2[<span class="number">101</span>], str2[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line"><span class="keyword">if</span> (ignore == <span class="number">0</span>) &#123;</span><br><span class="line">to_lower_case(pattern, pattern2);</span><br><span class="line">to_lower_case(str, str2);</span><br><span class="line">position = <span class="built_in">strstr</span>(str2, pattern2);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">position = <span class="built_in">strstr</span>(str, pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (position != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.输入</span></span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String pattern = scan.nextLine();</span><br><span class="line"><span class="keyword">boolean</span> ignoreCase = </span><br><span class="line">Integer.parseInt(scan.nextLine().trim()) == <span class="number">0</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> line = Integer.parseInt(scan.nextLine().trim());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.处理并输出</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">String str = scan.nextLine();</span><br><span class="line"><span class="keyword">if</span> ((ignoreCase &amp;&amp; str.toLowerCase().contains(pattern.toLowerCase()))</span><br><span class="line">|| (!ignoreCase &amp;&amp; str.contains(pattern))) &#123;</span><br><span class="line">sb.append(str).append(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201509-4.高速公路</title>
      <link href="/2019/08/15/ccf-csp-20150904/"/>
      <url>/2019/08/15/ccf-csp-20150904/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　某国有<em>n</em>个城市，为了使得城市间的交通更便利，该国国王打算在城市之间修一些高速公路，由于经费限制，国王打算第一阶段先在部分城市之间修一些单向的高速公路。<br>　　现在，大臣们帮国王拟了一个修高速公路的计划。看了计划后，国王发现，有些城市之间可以通过高速公路直接（不经过其他城市）或间接（经过一个或多个其他城市）到达，而有的却不能。如果城市A可以通过高速公路到达城市B，而且城市B也可以通过高速公路到达城市A，则这两个城市被称为便利城市对。<br>　　国王想知道，在大臣们给他的计划中，有多少个便利城市对。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示城市和单向高速公路的数量。<br>　　接下来<em>m</em>行，每行两个整数<em>a</em>, <em>b</em>，表示城市<em>a</em>有一条单向的高速公路连向城市<em>b</em>。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，表示便利城市对的数量。</p><p><strong>样例输入</strong></p><p>5 5<br>1 2<br>2 3<br>3 4<br>4 2<br>3 5</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例说明</strong></p><p><img src="/static/images/ccf-csp-20150904.png" alt="img"><br>　　城市间的连接如图所示。有3个便利城市对，它们分别是(2, 3), (2, 4), (3, 4)，请注意(2, 3)和(3, 2)看成同一个便利城市对。</p><p><strong>评测用例规模与约定</strong></p><p>　　前30%的评测用例满足1 ≤ <em>n</em> ≤ 100, 1 ≤ <em>m</em> ≤ 1000；<br>　　前60%的评测用例满足1 ≤ <em>n</em> ≤ 1000, 1 ≤ <em>m</em> ≤ 10000；<br>　　所有评测用例满足1 ≤ <em>n</em> ≤ 10000, 1 ≤ <em>m</em> ≤ 100000。</p><hr><p><strong>分析：</strong></p><p>本题考察图的<strong>强连通分量</strong>。</p><p>我们只需要统计出在n个城市组成的图中，有多少个强连通分量，每个强连通分量有多少个城市，然后使用高中数学的组合公式，就能够计算出便利城市对的数量。<br>$$<br>C_n^2 = \frac{n \times (n-1)}{2 \times 1}<br>$$<br>求解有向图中的强连通分量，可以采用<strong>tarjan（塔扬）算法</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10001</span>;</span><br><span class="line"><span class="keyword">int</span> deep = <span class="number">0</span>, result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> low[MAX], dfn[MAX];</span><br><span class="line"><span class="keyword">bool</span> visited[MAX];</span><br><span class="line"></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; graph[MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">low[u] = dfn[u] = ++deep;</span><br><span class="line">visited[u] = <span class="literal">true</span>;</span><br><span class="line">st.push(u);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph[u].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = graph[u][i];</span><br><span class="line"><span class="comment">// v未访问</span></span><br><span class="line"><span class="keyword">if</span> (dfn[v] == <span class="number">0</span>) &#123;</span><br><span class="line">tarjan(v);</span><br><span class="line">low[u] = min(low[u], low[v]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (visited[v]) &#123; <span class="comment">// v已被访问，且尚在栈中</span></span><br><span class="line">low[u] = min(low[u], dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line"><span class="keyword">int</span> x, count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">x = st.top();</span><br><span class="line">st.pop();</span><br><span class="line">count++;</span><br><span class="line">visited[x] = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (u != x);</span><br><span class="line">result += count * (count - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">graph[a].push_back(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fill(low, low + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">fill(dfn, dfn + n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">fill(visited, visited + n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dfn[i] == <span class="number">0</span>) &#123;</span><br><span class="line">tarjan(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201709-4.通信网络</title>
      <link href="/2019/08/14/ccf-csp-20170904/"/>
      <url>/2019/08/14/ccf-csp-20170904/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　某国的军队由<em>N</em>个部门组成，为了提高安全性，部门之间建立了<em>M</em>条通路，每条通路只能单向传递信息，即一条从部门<em>a</em>到部门<em>b</em>的通路只能由<em>a</em>向<em>b</em>传递信息。信息可以通过中转的方式进行传递，即如果<em>a</em>能将信息传递到<em>b</em>，<em>b</em>又能将信息传递到<em>c</em>，则<em>a</em>能将信息传递到<em>c</em>。一条信息可能通过多次中转最终到达目的地。<br>　　由于保密工作做得很好，并不是所有部门之间都互相知道彼此的存在。只有当两个部门之间可以直接或间接传递信息时，他们才彼此知道对方的存在。部门之间不会把自己知道哪些部门告诉其他部门。<br><img src="/static/images/ccf-csp-20170904.png" alt="img"><br>　　上图中给了一个4个部门的例子，图中的单向边表示通路。部门1可以将消息发送给所有部门，部门4可以接收所有部门的消息，所以部门1和部门4知道所有其他部门的存在。部门2和部门3之间没有任何方式可以发送消息，所以部门2和部门3互相不知道彼此的存在。<br>　　现在请问，有多少个部门知道所有<em>N</em>个部门的存在。或者说，有多少个部门所知道的部门数量（包括自己）正好是<em>N</em>。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>N</em>, <em>M</em>，分别表示部门的数量和单向通路的数量。所有部门从1到<em>N</em>标号。<br>　　接下来<em>M</em>行，每行两个整数<em>a</em>, <em>b</em>，表示部门<em>a</em>到部门<em>b</em>有一条单向通路。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，表示答案。</p><p><strong>样例输入</strong></p><p>4 4<br>1 2<br>1 3<br>2 4<br>3 4</p><p><strong>样例输出</strong></p><p>2</p><p><strong>样例说明</strong></p><p>　　部门1和部门4知道所有其他部门的存在。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于30%的评测用例，1 ≤ <em>N</em> ≤ 10，1 ≤ <em>M</em> ≤ 20；<br>　　对于60%的评测用例，1 ≤ <em>N</em> ≤ 100，1 ≤ <em>M</em> ≤ 1000；<br>　　对于100%的评测用例，1 ≤ <em>N</em> ≤ 1000，1 ≤ <em>M</em> ≤ 10000。</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>图的遍历算法</strong>。这里采用深度优先遍历。</p><p>设置一个bool型二维数组hasPath，表示任意两个部门之间是否能够传递消息（两个顶点是否相连），初始值均为false，表示不能够传递消息。</p><p>以各部门为起点，均进行一次深度优先遍历。遍历的同时，记录下与当前部门current相连的所有部门u，更新对应的hasPath值，即<code>hashPath[current][u] = hasPath[u][current] = true</code>。</p><p>最后，遍历数组hashPath，统计与所有部门都相连的部门个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用邻接表存储图</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; graph[<span class="number">1001</span>];</span><br><span class="line"><span class="comment">// 两个部门是否能传递消息</span></span><br><span class="line"><span class="keyword">bool</span> hasPath[<span class="number">1001</span>][<span class="number">1001</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"><span class="keyword">bool</span> visited[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 深度优先遍历，记录与当前部门current相连的所有部门u(包括current自己)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> current)</span> </span>&#123;</span><br><span class="line">visited[u] = <span class="literal">true</span>;</span><br><span class="line">hasPath[u][current] = hasPath[current][u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; graph[u].size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[graph[u][i]]) &#123;</span><br><span class="line">dfs(graph[u][i], current);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">graph[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对所有的部门进行深度优先遍历，并更新数组hasPath</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">fill(visited, visited + n + <span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">dfs(i, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">// 若i能和所有的部门传递消息，则count加一</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!hasPath[i][j]) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201609-4.交通规划</title>
      <link href="/2019/08/09/ccf-csp-20160904/"/>
      <url>/2019/08/09/ccf-csp-20160904/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　G国国王来中国参观后，被中国的高速铁路深深的震撼，决定为自己的国家也建设一个高速铁路系统。<br>　　建设高速铁路投入非常大，为了节约建设成本，G国国王决定不新建铁路，而是将已有的铁路改造成高速铁路。现在，请你为G国国王提供一个方案，将现有的一部分铁路改造成高速铁路，使得任何两个城市间都可以通过高速铁路到达，而且从所有城市乘坐高速铁路到首都的最短路程和原来一样长。请你告诉G国国王在这些条件下最少要改造多长的铁路。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示G国城市的数量和城市间铁路的数量。所有的城市由1到<em>n</em>编号，首都为1号。<br>　　接下来<em>m</em>行，每行三个整数<em>a</em>, <em>b</em>, <em>c</em>，表示城市<em>a</em>和城市<em>b</em>之间有一条长度为<em>c</em>的双向铁路。这条铁路不会经过<em>a</em>和<em>b</em>以外的城市。</p><p><strong>输出格式</strong></p><p>　　输出一行，表示在满足条件的情况下最少要改造的铁路长度。</p><p><strong>样例输入</strong></p><p>4 5<br>1 2 4<br>1 3 5<br>2 3 2<br>2 4 3<br>3 4 2</p><p><strong>样例输出</strong></p><p>11</p><p><strong>评测用例规模与约定</strong></p><p>　　对于20%的评测用例，1 ≤ <em>n</em> ≤ 10，1 ≤ <em>m</em> ≤ 50；<br>　　对于50%的评测用例，1 ≤ <em>n</em> ≤ 100，1 ≤ <em>m</em> ≤ 5000；<br>　　对于80%的评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>m</em> ≤ 50000；<br>　　对于100%的评测用例，1 ≤ <em>n</em> ≤ 10000，1 ≤ <em>m</em> ≤ 100000，1 ≤ <em>a</em>, <em>b</em> ≤ n，1 ≤ <em>c</em> ≤ 1000。输入保证每个城市都可以通过铁路达到首都。</p><hr><p>分析：</p><p>本题考察<strong>单源最短路径问题</strong>，可以采用<strong>dijkstra算法</strong>求解。</p><p>本题要求的是<strong>最少要改造的铁路长度</strong>，当出现多条最短路径时，应该选择较短的边。</p><p>例如，在样例中，1-3-4和1-2-4均为1和4之间的最短路径，但是2-4的长度为3，而3-4的长度为2，故应选择3-4。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 1———————(4)——————2</span><br><span class="line"> |/ |</span><br><span class="line"> |       /  |</span><br><span class="line">(5)  --——(2)——-  (3)</span><br><span class="line"> |  /             |</span><br><span class="line"> | /              |</span><br><span class="line"> 3———————(2)-—————4</span><br></pre></td></tr></table></figure><p>使用数组cost存储点u与其前一个点之间的长度。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v, dist;</span><br><span class="line">Node(<span class="keyword">int</span> _v, <span class="keyword">int</span> _dist) &#123;</span><br><span class="line">v = _v;</span><br><span class="line">dist = _dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Edge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">10001</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用邻接表存储的图</span></span><br><span class="line"><span class="built_in">vector</span>&lt;Edge&gt; graph[MAXN];</span><br><span class="line"><span class="keyword">int</span> cost[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> d[MAXN];</span><br><span class="line"><span class="keyword">bool</span> visited[MAXN] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">fill(d, d + n + <span class="number">1</span>, INT_MAX);</span><br><span class="line">fill(cost, cost + n + <span class="number">1</span>, INT_MAX);</span><br><span class="line">d[s] = <span class="number">0</span>;</span><br><span class="line">cost[s] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 最少要改造的铁路长度</span></span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">-1</span>, min = INT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!visited[j] &amp;&amp; d[j] &lt; min) &#123;</span><br><span class="line">u = j;</span><br><span class="line">min = d[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result += cost[u];</span><br><span class="line">visited[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; graph[u].size(); j++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = graph[u][j].v;</span><br><span class="line"><span class="keyword">if</span> (!visited[v] &amp;&amp; d[u] + graph[u][j].dist &lt; d[v]) &#123;</span><br><span class="line">d[v] = d[u] + graph[u][j].dist;</span><br><span class="line">cost[v] = graph[u][j].dist;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (d[u] + graph[u][j].dist == d[v]</span><br><span class="line">&amp;&amp; graph[u][j].dist &lt; cost[v]) &#123;</span><br><span class="line"><span class="comment">// 最短路径相同时，长度较小的边对总长度的影响更小</span></span><br><span class="line">cost[v] = graph[u][j].dist;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> u, v, dist;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u, &amp;v, &amp;dist);</span><br><span class="line">graph[u].push_back(Edge(v, dist));</span><br><span class="line">graph[v].push_back(Edge(u, dist));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dist = dijkstra(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dist);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201412-4.最优灌溉</title>
      <link href="/2019/08/06/ccf-csp-20141204/"/>
      <url>/2019/08/06/ccf-csp-20141204/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　雷雷承包了很多片麦田，为了灌溉这些麦田，雷雷在第一个麦田挖了一口很深的水井，所有的麦田都从这口井来引水灌溉。<br>　　为了灌溉，雷雷需要建立一些水渠，以连接水井和麦田，雷雷也可以利用部分麦田作为“中转站”，利用水渠连接不同的麦田，这样只要一片麦田能被灌溉，则与其连接的麦田也能被灌溉。<br>　　现在雷雷知道哪些麦田之间可以建设水渠和建设每个水渠所需要的费用（注意不是所有麦田之间都可以建立水渠）。请问灌溉所有麦田最少需要多少费用来修建水渠。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个正整数n, m，分别表示麦田的片数和雷雷可以建立的水渠的数量。麦田使用1, 2, 3, ……依次标号。<br>　　接下来m行，每行包含三个整数ai, bi, ci，表示第ai片麦田与第bi片麦田之间可以建立一条水渠，所需要的费用为ci。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，表示灌溉所有麦田所需要的最小费用。</p><p><strong>样例输入</strong></p><p>4 4<br>1 2 1<br>2 3 4<br>2 4 2<br>3 4 3</p><p><strong>样例输出</strong></p><p>6</p><p><strong>样例说明</strong></p><p>　　建立以下三条水渠：麦田1与麦田2、麦田2与麦田4、麦田4与麦田3。</p><p><strong>评测用例规模与约定</strong></p><p>　　前20%的评测用例满足：n≤5。<br>　　前40%的评测用例满足：n≤20。<br>　　前60%的评测用例满足：n≤100。<br>　　所有评测用例都满足：1≤n≤1000，1≤m≤100,000，1≤ci≤10,000。</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>最小生成树</strong>，题目要求的是<strong>最小生成树中的权值之和</strong>。可以采用<strong>kruskal算法</strong>求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 边的两个端点</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="comment">// 边的权值(所需的费用)</span></span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125; Edge;</span><br><span class="line"></span><br><span class="line">Edge edge[<span class="number">100000</span>];</span><br><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="keyword">int</span> usf[<span class="number">1001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a, Edge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = x;</span><br><span class="line"><span class="keyword">while</span> (x != usf[x]) &#123;</span><br><span class="line">x = usf[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路径压缩</span></span><br><span class="line"><span class="keyword">while</span> (a != usf[a]) &#123;</span><br><span class="line"><span class="keyword">int</span> z = a;</span><br><span class="line">a = usf[a];</span><br><span class="line">usf[z] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">usf[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge, edge + m, cmp);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>, result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = find(edge[i].u);</span><br><span class="line"><span class="keyword">int</span> v = find(edge[i].v);</span><br><span class="line"><span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">usf[u] = v;</span><br><span class="line"><span class="comment">// 最小生成树中的权值之和</span></span><br><span class="line">result += edge[i].w;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = kruskal(n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201703-4.地铁修建</title>
      <link href="/2019/08/06/ccf-csp-20170304/"/>
      <url>/2019/08/06/ccf-csp-20170304/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　A市有n个交通枢纽，其中1号和n号非常重要，为了加强运输能力，A市决定在1号到n号枢纽间修建一条地铁。<br>　　地铁由很多段隧道组成，每段隧道连接两个交通枢纽。经过勘探，有m段隧道作为候选，两个交通枢纽之间最多只有一条候选的隧道，没有隧道两端连接着同一个交通枢纽。<br>　　现在有n家隧道施工的公司，每段候选的隧道只能由一个公司施工，每家公司施工需要的天数一致。而每家公司最多只能修建一条候选隧道。所有公司同时开始施工。<br>　　作为项目负责人，你获得了候选隧道的信息，现在你可以按自己的想法选择一部分隧道进行施工，请问修建整条地铁最少需要多少天。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，用一个空格分隔，分别表示交通枢纽的数量和候选隧道的数量。<br>　　第2行到第<em>m</em>+1行，每行包含三个整数<em>a</em>, <em>b</em>, <em>c</em>，表示枢纽<em>a</em>和枢纽<em>b</em>之间可以修建一条隧道，需要的时间为<em>c</em>天。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，修建整条地铁线路最少需要的天数。</p><p><strong>样例输入</strong></p><p>6 6<br>1 2 4<br>2 3 4<br>3 6 7<br>1 4 2<br>4 5 5<br>5 6 6</p><p><strong>样例输出</strong></p><p>6</p><p><strong>样例说明</strong></p><p>　　可以修建的线路有两种。<br>　　第一种经过的枢纽依次为1, 2, 3, 6，所需要的时间分别是4, 4, 7，则整条地铁线需要7天修完；<br>　　第二种经过的枢纽依次为1, 4, 5, 6，所需要的时间分别是2, 5, 6，则整条地铁线需要6天修完。<br>　　第二种方案所用的天数更少。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于20%的评测用例，1 ≤ <em>n</em> ≤ 10，1 ≤ <em>m</em> ≤ 20；<br>　　对于40%的评测用例，1 ≤ <em>n</em> ≤ 100，1 ≤ <em>m</em> ≤ 1000；<br>　　对于60%的评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>m</em> ≤ 10000，1 ≤ <em>c</em> ≤ 1000；<br>　　对于80%的评测用例，1 ≤ <em>n</em> ≤ 10000，1 ≤ <em>m</em> ≤ 100000；<br>　　对于100%的评测用例，1 ≤ <em>n</em> ≤ 100000，1 ≤ <em>m</em> ≤ 200000，1 ≤ <em>a</em>, <em>b</em> ≤ <em>n</em>，1 ≤ <em>c</em> ≤ 1000000。</p><p>　　所有评测用例保证在所有候选隧道都修通时1号枢纽可以通过隧道到达其他所有枢纽。</p><hr><p><strong>分析：</strong></p><p>“所有公司同时开始施工。”因此，本题可认为是<strong>求最小生成树中的最大边权</strong>。</p><p>可以采用<strong>kruskal算法</strong>求解。当1和n连通时，结束kruskal算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 边的两个端点</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="comment">// 需要的时间</span></span><br><span class="line"><span class="keyword">int</span> w;</span><br><span class="line">&#125; Edge;</span><br><span class="line"></span><br><span class="line">Edge edge[<span class="number">200000</span>];</span><br><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="keyword">int</span> usf[<span class="number">100001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a, Edge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = x;</span><br><span class="line"><span class="keyword">while</span> (x != usf[x]) &#123;</span><br><span class="line">x = usf[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路径压缩</span></span><br><span class="line"><span class="keyword">while</span> (a != usf[a]) &#123;</span><br><span class="line"><span class="keyword">int</span> z = a;</span><br><span class="line">a = usf[a];</span><br><span class="line">usf[z] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">usf[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(edge, edge + m, cmp);</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = find(edge[i].u);</span><br><span class="line"><span class="keyword">int</span> v = find(edge[i].v);</span><br><span class="line"><span class="keyword">if</span> (u != v) &#123;</span><br><span class="line">usf[u] = v;</span><br><span class="line"><span class="comment">// 最小生成树中的最大边权</span></span><br><span class="line">result = max(result, edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当1和n连通时，结束循环</span></span><br><span class="line"><span class="keyword">if</span> (find(<span class="number">1</span>) == find(n)) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = kruskal(n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201812-4.数据中心</title>
      <link href="/2019/08/05/ccf-csp-20181204/"/>
      <url>/2019/08/05/ccf-csp-20181204/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20181204-1.png" alt="题目说明1"></p><a id="more"></a><p><img src="/static/images/ccf-csp-20181204-2.png" alt="题目说明2"></p><p><strong>样例输入</strong></p><p>4<br>5<br>1<br>1 2 3<br>1 3 4<br>1 4 5<br>2 3 8<br>3 4 2</p><p><strong>样例输出</strong></p><p>4</p><p><strong>样例说明</strong></p><p>　　下图是样例说明。</p><p><img src="/static/images/ccf-csp-20181204-3.png" alt="样例"></p><p><img src="/static/images/ccf-csp-20181204-4.png" alt="参数范围"></p><hr><p><strong>分析：</strong></p><p>本题考察<strong>最小生成树</strong>，题目要求的是<strong>最小生成树中，最大的边权。</strong>可以采用<strong>kruskal算法</strong>求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v; <span class="comment">// 两个端点的编号</span></span><br><span class="line"><span class="keyword">int</span> w; <span class="comment">//权重</span></span><br><span class="line">&#125; Edge;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 10^5过大，应该在main函数之外定义</span></span><br><span class="line">Edge edge[<span class="number">100000</span>];</span><br><span class="line"><span class="comment">// 并查集</span></span><br><span class="line"><span class="keyword">int</span> ufs[<span class="number">500001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = x;</span><br><span class="line"><span class="keyword">while</span> (x != ufs[x]) &#123;</span><br><span class="line">x = ufs[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 路径压缩</span></span><br><span class="line"><span class="keyword">while</span> (a != ufs[a]) &#123;</span><br><span class="line"><span class="keyword">int</span> z = a;</span><br><span class="line">a = ufs[a];</span><br><span class="line">ufs[z] = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Edge a, Edge b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.w &lt; b.w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ufs[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(edge, edge + m, cmp);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>, result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = find(edge[i].u);</span><br><span class="line"><span class="keyword">int</span> v = find(edge[i].v);</span><br><span class="line"><span class="keyword">if</span> (u != v) &#123;</span><br><span class="line"><span class="comment">// 寻找最小生成树中的最大边权</span></span><br><span class="line">result = max(result, edge[i].w);</span><br><span class="line">ufs[u] = v;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, root;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;root);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> result = kruskal(n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201903-4.消息传递接口</title>
      <link href="/2019/08/05/ccf-csp-20190304/"/>
      <url>/2019/08/05/ccf-csp-20190304/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20190304-1.png" alt="题目描述"></p><a id="more"></a><p><img src="/static/images/ccf-csp-20190304-2.png" alt="样例"></p><p><img src="/static/images/ccf-csp-20190304-3.png" alt="评测用例规定"></p><hr><p><strong>分析：</strong></p><p><strong>1.定义结构体类型Command</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 0表示发送S,1表示接收R</span></span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="comment">// 目标进程</span></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line">&#125; Command;</span><br></pre></td></tr></table></figure><p><strong>2.处理输入</strong></p><p>使用<code>stringstream</code>处理空格，得到各收发指令。每个进程的收发指令，使用<code>queue&lt;Command&gt;</code>存储；每份样例代码，使用<code>vector&lt;queue&lt;Command&gt; &gt; arr</code>存储。</p><p><strong>3.执行模拟操作</strong></p><p>执行如下循环：</p><p>遍历arr，若当前进程<code>arr[i]</code>不为空，此时，如果队首指令cmd的目标进程<code>arr[cmd.target]</code>为空，则循环结束，出现死锁；</p><p>否则，判断目标进程队首指令<code>cmd2</code>的状态与cmd的状态是否相符，以及cmd2的目标进程是否为当前进程，即<code>cmd.status + cmd2.status == 1 &amp;&amp; cmd2.target == i</code>，</p><p>若上述条件满足，则对当前进程和目标进程执行出队操作，继续遍历当前进程的下一个指令。</p><p>当遍历arr，没有出队操作时，循环结束。</p><p>此时，若arr中任一进程不为空，则表示出现了死锁；否则，表示程序顺利执行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 0表示发送S,1表示接收R</span></span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="comment">// 目标进程</span></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line">&#125; Command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t &gt;&gt; n;</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理某份代码</span></span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">queue</span>&lt;Command&gt; &gt; arr;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="comment">// 处理某个进程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;Command&gt; qu;</span><br><span class="line">getline(<span class="built_in">cin</span>, str);</span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; str;</span><br><span class="line"><span class="keyword">while</span> (ss &gt;&gt; str) &#123;</span><br><span class="line">Command cmd;</span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'S'</span>) &#123;</span><br><span class="line">cmd.status = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cmd.status = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num = atoi(str.substr(<span class="number">1</span>, str.size()).c_str());</span><br><span class="line">cmd.target = num;</span><br><span class="line">qu.push(cmd);</span><br><span class="line">&#125;</span><br><span class="line">arr.push_back(qu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i].empty()) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Command cmd = arr[i].front();</span><br><span class="line"><span class="keyword">if</span> (arr[cmd.target].empty()) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Command cmd2 = arr[cmd.target].front();</span><br><span class="line"><span class="keyword">if</span> (cmd.status + cmd2.status == <span class="number">1</span> &amp;&amp; cmd2.target == i) &#123;</span><br><span class="line">arr[i].pop();</span><br><span class="line">arr[cmd.target].pop();</span><br><span class="line">i--;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> deadLock = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!arr[i].empty()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">deadLock = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!deadLock) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201312-2.ISBN号码</title>
      <link href="/2019/08/01/ccf-csp-20131202/"/>
      <url>/2019/08/01/ccf-csp-20131202/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　每一本正式出版的图书都有一个ISBN号码与之对应，ISBN码包括9位数字、1位识别码和3位分隔符，其规定格式如“x-xxx-xxxxx-x”，其中符号“-”是分隔符（键盘上的减号），最后一位是识别码，例如0-670-82162-4就是一个标准的ISBN码。ISBN码的首位数字表示书籍的出版语言，例如0代表英语；第一个分隔符“-”之后的三位数字代表出版社，例如670代表维京出版社；第二个分隔之后的五位数字代表该书在出版社的编号；最后一位为识别码。<br>　　识别码的计算方法如下：<br>　　首位数字乘以1加上次位数字乘以2……以此类推，用所得的结果mod 11，所得的余数即为识别码，如果余数为10，则识别码为大写字母X。例如ISBN号码0-670-82162-4中的识别码4是这样得到的：对067082162这9个数字，从左至右，分别乘以1，2，…，9，再求和，即0×1+6×2+……+2×9=158，然后取158 mod 11的结果4作为识别码。<br>　　编写程序判断输入的ISBN号码中识别码是否正确，如果正确，则仅输出“Right”；如果错误，则输出是正确的ISBN号码。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入只有一行，是一个字符序列，表示一本书的ISBN号码（保证输入符合ISBN号码的格式要求）。</p><p><strong>输出格式</strong></p><p>　　输出一行，假如输入的ISBN号码的识别码正确，那么输出“Right”，否则，按照规定的格式，输出正确的ISBN号码（包括分隔符“-”）。</p><p><strong>样例输入</strong></p><p>0-670-82162-4</p><p><strong>样例输出</strong></p><p>Right</p><p><strong>样例输入</strong></p><p>0-670-82162-0</p><p><strong>样例输出</strong></p><p>0-670-82162-4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> isbn[<span class="number">14</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, isbn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(isbn);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'0'</span> &lt;= isbn[i] &amp;&amp; isbn[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">sum += (isbn[i] - <span class="string">'0'</span>) * count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rear = sum % <span class="number">11</span>;</span><br><span class="line"><span class="keyword">int</span> checkCode = rear == <span class="number">10</span> ? <span class="string">'X'</span> : rear + <span class="string">'0'</span>;</span><br><span class="line"><span class="comment">// ISBN号码的识别码是否正确</span></span><br><span class="line"><span class="keyword">if</span> (isbn[len - <span class="number">1</span>] == checkCode) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Right\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">isbn[len - <span class="number">1</span>] = checkCode;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, isbn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201403-2.窗口</title>
      <link href="/2019/08/01/ccf-csp-20140302/"/>
      <url>/2019/08/01/ccf-csp-20140302/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在某图形操作系统中,有 N 个窗口,每个窗口都是一个两边与坐标轴分别平行的矩形区域。窗口的边界上的点也属于该窗口。窗口之间有层次的区别,在多于一个窗口重叠的区域里,只会显示位于顶层的窗口里的内容。<br>　　当你点击屏幕上一个点的时候,你就选择了处于被点击位置的最顶层窗口,并且这个窗口就会被移到所有窗口的最顶层,而剩余的窗口的层次顺序不变。如果你点击的位置不属于任何窗口,则系统会忽略你这次点击。<br>　　现在我们希望你写一个程序模拟点击窗口的过程。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行有两个正整数,即 N 和 M。(1 ≤ N ≤ 10,1 ≤ M ≤ 10)<br>　　接下来 N 行按照从最下层到最顶层的顺序给出 N 个窗口的位置。 每行包含四个非负整数 x1, y1, x2, y2,表示该窗口的一对顶点坐标分别为 (x1, y1) 和 (x2, y2)。保证 x1 &lt; x2, y1 &lt; y2。<br>　　接下来 M 行每行包含两个非负整数 x, y,表示一次鼠标点击的坐标。<br>　　题目中涉及到的所有点和矩形的顶点的 x, y 坐标分别不超过 2559 和1439。</p><p><strong>输出格式</strong></p><p>　　输出包括 M 行,每一行表示一次鼠标点击的结果。如果该次鼠标点击选择了一个窗口,则输出这个窗口的编号(窗口按照输入中的顺序从 1 编号到 N);如果没有,则输出”IGNORED”(不含双引号)。</p><p><strong>样例输入</strong></p><p>3 4<br>0 0 4 4<br>1 1 5 5<br>2 2 6 6<br>1 1<br>0 0<br>4 4<br>0 5</p><p><strong>样例输出</strong></p><p>2<br>1<br>1<br>IGNORED</p><p><strong>样例说明</strong></p><p>　　第一次点击的位置同时属于第 1 和第 2 个窗口,但是由于第 2 个窗口在上面,它被选择并且被置于顶层。<br>　　第二次点击的位置只属于第 1 个窗口,因此该次点击选择了此窗口并将其置于顶层。现在的三个窗口的层次关系与初始状态恰好相反了。<br>　　第三次点击的位置同时属于三个窗口的范围,但是由于现在第 1 个窗口处于顶层,它被选择。<br>　　最后点击的 (0, 5) 不属于任何窗口。</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>链表</strong>的使用。</p><p>定义一个结构体（类）Window，包含窗口的起始坐标以及窗口编号。采用头插法，将所有的窗口添加到链表中。</p><p>寻找鼠标点击的窗口时，从前往后遍历链表。若鼠标点击的坐标在当前窗口中，则停止遍历。</p><p>若存在这样的窗口，输出其编号。与此同时，先将其从链表中删除，再插入到链表的头部，使其成为置顶窗口。</p><p>若不存在这样的窗口，则输出<code>IGNORED</code>。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> startX, startY, endX, endY;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">Node(<span class="keyword">int</span> _startX, <span class="keyword">int</span> _startY, <span class="keyword">int</span> _endX, <span class="keyword">int</span> _endY, <span class="keyword">int</span> _num) &#123;</span><br><span class="line">startX = _startX;</span><br><span class="line">startY = _startY;</span><br><span class="line">endX = _endX;</span><br><span class="line">endY = _endY;</span><br><span class="line">num = _num;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Window;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">list</span>&lt;Window&gt; ls;</span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">ls.push_front(Window(x1, y1, x2, y2, i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x1, &amp;y1);</span><br><span class="line"><span class="built_in">list</span>&lt;Window&gt;::iterator iter = ls.begin();</span><br><span class="line"><span class="keyword">while</span> (iter != ls.end()) &#123;</span><br><span class="line"><span class="keyword">if</span> (iter-&gt;startX &lt;= x1 &amp;&amp; x1 &lt;= iter-&gt;endX &amp;&amp; iter-&gt;startY &lt;= y1</span><br><span class="line">&amp;&amp; y1 &lt;= iter-&gt;endY) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (iter != ls.end()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, iter-&gt;num);</span><br><span class="line">Window w = *iter;</span><br><span class="line">ls.erase(iter);</span><br><span class="line">ls.push_front(w);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"IGNORED\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line"></span><br><span class="line">LinkedList&lt;Window&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">Window w = <span class="keyword">new</span> Window();</span><br><span class="line">w.startX = scan.nextInt();</span><br><span class="line">w.startY = scan.nextInt();</span><br><span class="line">w.endX = scan.nextInt();</span><br><span class="line">w.endY = scan.nextInt();</span><br><span class="line">w.num = i;</span><br><span class="line">list.addFirst(w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">x = scan.nextInt();</span><br><span class="line">y = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; list.size()) &#123;</span><br><span class="line">Window w = list.get(j);</span><br><span class="line"><span class="keyword">if</span> (w.startX &lt;= x &amp;&amp; x &lt;= w.endX &amp;&amp; w.startY &lt;= y &amp;&amp; y &lt;= w.endY) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j &lt; list.size()) &#123;</span><br><span class="line">Window w = list.remove(j);</span><br><span class="line">list.addFirst(w);</span><br><span class="line">sb.append(w.num).append(<span class="string">"\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">sb.append(<span class="string">"IGNORED"</span>).append(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Window</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> startX;</span><br><span class="line"><span class="keyword">int</span> startY;</span><br><span class="line"><span class="keyword">int</span> endX;</span><br><span class="line"><span class="keyword">int</span> endY;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201409-2.画图</title>
      <link href="/2019/08/01/ccf-csp-20140902/"/>
      <url>/2019/08/01/ccf-csp-20140902/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在一个定义了直角坐标系的纸上，画一个(x1,y1)到(x2,y2)的矩形指将横坐标范围从x1到x2，纵坐标范围从y1到y2之间的区域涂上颜色。<br>　　下图给出了一个画了两个矩形的例子。第一个矩形是(1,1) 到(4, 4)，用绿色和紫色表示。第二个矩形是(2, 3)到(6, 5)，用蓝色和紫色表示。图中，一共有15个单位的面积被涂上颜色，其中紫色部分被涂了两次，但在计算面积时只计算一次。在实际的涂色过程中，所有的矩形都涂成统一的颜色，图中显示不同颜色仅为说明方便。<br><img src="/static/images/ccf-csp-20140902.png" alt="img"><br>　　给出所有要画的矩形，请问总共有多少个单位的面积被涂上颜色。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示要画的矩形的个数。<br>　　接下来n行，每行4个非负整数，分别表示要画的矩形的左下角的横坐标与纵坐标，以及右上角的横坐标与纵坐标。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示有多少个单位的面积被涂上颜色。</p><p><strong>样例输入</strong></p><p>2<br>1 1 4 4<br>2 3 6 5</p><p><strong>样例输出</strong></p><p>15</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=100，0&lt;=横坐标、纵坐标&lt;=100。</p><hr><p><strong>分析：</strong></p><p>定义一个101x101的数组arr，用于标记某点所在的单位（以左下角点代表该单位）是否被涂色，1表示该点所在的单位被涂色，0表示未被涂色，默认为0。</p><p>最后，遍历数组arr，统计其中值为1的元素个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="comment">// 标记某点所在的单位（以左下角点代表该单位）是否被涂色，</span></span><br><span class="line"><span class="comment">// 1表示该点所在的单位被涂色，默认为0</span></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">101</span>][<span class="number">101</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x1; i &lt; x2; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y1; j &lt; y2; j++) &#123;</span><br><span class="line">arr[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">101</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">101</span>; j++) &#123;</span><br><span class="line">count += arr[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201412-2.Z字形扫描</title>
      <link href="/2019/08/01/ccf-csp-20141202/"/>
      <url>/2019/08/01/ccf-csp-20141202/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在图像编码的算法中，需要将一个给定的方形矩阵进行Z字形扫描(Zigzag Scan)。给定一个n×n的矩阵，Z字形扫描的过程如下图所示：<br><img src="/static/images/ccf-csp-20141202.png" alt="img"><br>　　对于下面的4×4的矩阵，<br>　　1 5 3 9<br>　　3 7 5 6<br>　　9 4 6 4<br>　　7 3 1 3<br>　　对其进行Z字形扫描后得到长度为16的序列：<br>　　1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3<br>　　请实现一个Z字形扫描的程序，给定一个n×n的矩阵，输出对这个矩阵进行Z字形扫描的结果。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示矩阵的大小。<br>　　输入的第二行到第n+1行每行包含n个正整数，由空格分隔，表示给定的矩阵。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n×n个整数，由空格分隔，表示输入的矩阵经过Z字形扫描后的结果。</p><p><strong>样例输入</strong></p><p>4<br>1 5 3 9<br>3 7 5 6<br>9 4 6 4<br>7 3 1 3</p><p><strong>样例输出</strong></p><p>1 5 3 9 7 3 9 5 4 7 3 6 6 4 1 3</p><p><strong>评测用例规模与约定</strong></p><p>　　1≤n≤500，矩阵元素为不超过1000的正整数。</p><hr><p><strong>分析：</strong></p><p>在Z字形扫描中，共有4种移动方向：向右、向左下、向下以及向右上。</p><p>扫描的第一步向右走，接下来按照如下规则移动：</p><p>1.当前向右移动。若碰到下边界，则下一步向右上方走；否则，下一步向左下方走。</p><p>2.当前向左下方移动。若碰到下边界，则下一步向右走；若碰到左边界，则下一步向下走；否则，继续向左下方走。</p><p>3.当前向下移动。若碰到右边界，则下一步向左下方走；否则，下一步向右上方走。</p><p>4.当前向右上方移动。若碰到右边界，则下一步向下走；若碰到上边界，则下一步向右走；否则，继续向右上方移动。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> matrix[n][n];</span><br><span class="line"><span class="keyword">int</span> result[n * n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下一步的移动方向，1:向右,2:左下方,3:向下,4:右上方</span></span><br><span class="line"><span class="keyword">int</span> direction = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class="line">result[index++] = matrix[i][j];</span><br><span class="line"><span class="keyword">if</span> (direction == <span class="number">1</span>) &#123;</span><br><span class="line">j++;</span><br><span class="line"><span class="comment">// 若碰到下边界，则向右上方；否则，向左下方</span></span><br><span class="line"><span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">direction = <span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">direction = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">2</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line">j--;</span><br><span class="line"><span class="comment">// 若碰到下边界，则向右行;若碰到左边界,则向下行</span></span><br><span class="line"><span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">direction = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">direction = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (direction == <span class="number">3</span>) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 若碰到右边界，则向左下方;否则，向右上方</span></span><br><span class="line"><span class="keyword">if</span> (j == n - <span class="number">1</span>) &#123;</span><br><span class="line">direction = <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">direction = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">i--;</span><br><span class="line">j++;</span><br><span class="line"><span class="comment">// 若碰到右边界，则向下；若碰到上边界，向右</span></span><br><span class="line"><span class="keyword">if</span> (j == n - <span class="number">1</span>) &#123;</span><br><span class="line">direction = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">direction = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n * n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, result[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201503-2.数字排序</title>
      <link href="/2019/08/01/ccf-csp-20150302/"/>
      <url>/2019/08/01/ccf-csp-20150302/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定<em>n</em>个整数，请统计出每个整数出现的次数，按出现次数从多到少的顺序输出。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示给定数字的个数。<br>　　第二行包含<em>n</em>个整数，相邻的整数之间用一个空格分隔，表示所给定的整数。</p><p><strong>输出格式</strong></p><p>　　输出多行，每行包含两个整数，分别表示一个给定的整数和它出现的次数。按出现次数递减的顺序输出。如果两个整数出现的次数一样多，则先输出值较小的，然后输出值较大的。</p><p><strong>样例输入</strong></p><p>12<br>5 2 3 3 1 3 4 2 5 2 3 5</p><p><strong>样例输出</strong></p><p>3 4<br>2 3<br>5 3<br>1 1<br>4 1</p><p>评测用例规模与约定</p><p>　　1 ≤ <em>n</em> ≤ 1000，给出的数都是不超过1000的非负整数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> count;</span><br><span class="line">Node(<span class="keyword">int</span> _num, <span class="keyword">int</span> _count) &#123;</span><br><span class="line">num = _num;</span><br><span class="line">count = _count;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Pair;</span><br><span class="line"><span class="comment">// 按照出现次数从大到小排序，若次数相同，则按照值从小到大的顺序排列</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Pair a, Pair b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.count != b.count) &#123;</span><br><span class="line"><span class="keyword">return</span> a.count &gt; b.count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, data;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">vector</span>&lt;Pair&gt; arr;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line"><span class="comment">// 判断data是否已经存在</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line"><span class="comment">// 若data已经在arr中，则增加出现次数</span></span><br><span class="line"><span class="keyword">if</span> (arr[i].num == data) &#123;</span><br><span class="line">arr[i].count++;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若data不在arr中</span></span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">arr.push_back(Pair(data, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">sort(arr.begin(), arr.end(), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size(); i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, arr[i].num, arr[i].count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201509-2.日期计算</title>
      <link href="/2019/08/01/ccf-csp-20150902/"/>
      <url>/2019/08/01/ccf-csp-20150902/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定一个年份<em>y</em>和一个整数<em>d</em>，问这一年的第<em>d</em>天是几月几日？<br>　　注意闰年的2月有29天。满足下面条件之一的是闰年：<br>　　1） 年份是4的整数倍，而且不是100的整数倍；<br>　　2） 年份是400的整数倍。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>y</em>，表示年份，年份在1900到2015之间（包含1900和2015）。<br>　　输入的第二行包含一个整数<em>d</em>，<em>d</em>在1至365之间。</p><p><strong>输出格式</strong></p><p>　　输出两行，每行一个整数，分别表示答案的月份和日期。</p><p><strong>样例输入</strong></p><p>2015<br>80</p><p><strong>样例输出</strong></p><p>3<br>21</p><p><strong>样例输入</strong></p><p>2000<br>40</p><p><strong>样例输出</strong></p><p>2<br>9</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> y, d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;y, &amp;d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> months[<span class="number">13</span>] = &#123; <span class="number">0</span>, <span class="number">31</span>, <span class="number">28</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span> &#125;;</span><br><span class="line"><span class="comment">// 判断是否为闰年，闰年二月有29天</span></span><br><span class="line"><span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>) || y % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">months[<span class="number">2</span>] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寻找d所在的月份</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (d - months[i] &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%d\n"</span>, i, d);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">d -= months[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201512-2.消除类游戏</title>
      <link href="/2019/08/01/ccf-csp-20151202/"/>
      <url>/2019/08/01/ccf-csp-20151202/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　消除类游戏是深受大众欢迎的一种游戏，游戏在一个包含有<em>n</em>行<em>m</em>列的游戏棋盘上进行，棋盘的每一行每一列的方格上放着一个有颜色的棋子，当一行或一列上有连续三个或更多的相同颜色的棋子时，这些棋子都被消除。当有多处可以被消除时，这些地方的棋子将同时被消除。<br>　　现在给你一个<em>n</em>行<em>m</em>列的棋盘，棋盘中的每一个方格上有一个棋子，请给出经过一次消除后的棋盘。<br>　　请注意：一个棋子可能在某一行和某一列同时被消除。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，用空格分隔，分别表示棋盘的行数和列数。<br>　　接下来<em>n</em>行，每行<em>m</em>个整数，用空格分隔，分别表示每一个方格中的棋子的颜色。颜色使用1至9编号。</p><p><strong>输出格式</strong></p><p>　　输出<em>n</em>行，每行<em>m</em>个整数，相邻的整数之间使用一个空格分隔，表示经过一次消除后的棋盘。如果一个方格中的棋子被消除，则对应的方格输出0，否则输出棋子的颜色编号。</p><p><strong>样例输入</strong></p><p>4 5<br>2 2 3 1 2<br>3 4 5 1 4<br>2 3 2 1 3<br>2 2 2 4 4</p><p><strong>样例输出</strong></p><p>2 2 3 0 2<br>3 4 5 0 4<br>2 3 2 0 3<br>0 0 0 4 4</p><p><strong>样例说明</strong></p><p>　　棋盘中第4列的1和第4行的2可以被消除，其他的方格中的棋子均保留。</p><p><strong>样例输入</strong></p><p>4 5<br>2 2 3 1 2<br>3 1 1 1 1<br>2 3 2 1 3<br>2 2 3 3 3</p><p><strong>样例输出</strong></p><p>2 2 3 0 2<br>3 0 0 0 0<br>2 3 2 0 3<br>2 2 0 0 0</p><p><strong>样例说明</strong></p><p>　　棋盘中所有的1以及最后一行的3可以被同时消除，其他的方格中的棋子均保留。</p><p><strong>评测用例规模与约定</strong></p><p>　　所有的评测用例满足：1 ≤ <em>n</em>, <em>m</em> ≤ 30。</p><hr><p><strong>分析：</strong></p><p>添加一个nxm的标记数组mark，所有元素的值均初始化为1。</p><p>先从行的角度考虑待消除的棋子，再从列的角度考虑待消除的棋子，并将待消除的方格标记为0。</p><p>最后，遍历棋盘，若<code>mark[i][j] == 1</code>，则输出原棋盘上的棋子；否则，输出0，表示该棋子已被消除。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data[n][m], mark[n][m];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i][j]);</span><br><span class="line">mark[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m - <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (data[i][j] == data[i][j + <span class="number">1</span>]</span><br><span class="line">&amp;&amp; data[i][j + <span class="number">1</span>] == data[i][j + <span class="number">2</span>]) &#123;</span><br><span class="line">mark[i][j] = mark[i][j + <span class="number">1</span>] = mark[i][j + <span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (data[i][j] == data[i + <span class="number">1</span>][j]</span><br><span class="line">&amp;&amp; data[i + <span class="number">1</span>][j] == data[i + <span class="number">2</span>][j]) &#123;</span><br><span class="line">mark[i][j] = mark[i + <span class="number">1</span>][j] = mark[i + <span class="number">2</span>][j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mark[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, data[i][j]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201604-2.俄罗斯方块</title>
      <link href="/2019/07/31/ccf-csp-20160402/"/>
      <url>/2019/07/31/ccf-csp-20160402/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　俄罗斯方块是俄罗斯人阿列克谢·帕基特诺夫发明的一款休闲游戏。<br>　　游戏在一个15行10列的方格图上进行，方格图上的每一个格子可能已经放置了方块，或者没有放置方块。每一轮，都会有一个新的由4个小方块组成的板块从方格图的上方落下，玩家可以操作板块左右移动放到合适的位置，当板块中某一个方块的下边缘与方格图上的方块上边缘重合或者达到下边界时，板块不再移动，如果此时方格图的某一行全放满了方块，则该行被消除并得分。<br>　　在这个问题中，你需要写一个程序来模拟板块下落，你不需要处理玩家的操作，也不需要处理消行和得分。<br>　　具体的，给定一个初始的方格图，以及一个板块的形状和它下落的初始位置，你要给出最终的方格图。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的前15行包含初始的方格图，每行包含10个数字，相邻的数字用空格分隔。如果一个数字是0，表示对应的方格中没有方块，如果数字是1，则表示初始的时候有方块。输入保证前4行中的数字都是0。<br>　　输入的第16至第19行包含新加入的板块的形状，每行包含4个数字，组成了板块图案，同样0表示没方块，1表示有方块。输入保证板块的图案中正好包含4个方块，且4个方块是连在一起的（准确的说，4个方块是四连通的，即给定的板块是俄罗斯方块的标准板块）。<br>　　第20行包含一个1到7之间的整数，表示板块图案最左边开始的时候是在方格图的哪一列中。注意，这里的板块图案指的是16至19行所输入的板块图案，如果板块图案的最左边一列全是0，则它的左边和实际所表示的板块的左边是不一致的（见样例）</p><p><strong>输出格式</strong></p><p>　　输出15行，每行10个数字，相邻的数字之间用一个空格分隔，表示板块下落后的方格图。注意，你不需要处理最终的消行。</p><p><strong>样例输入</strong></p><p>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>1 1 1 0 0 0 1 1 1 1<br>0 0 0 0 1 0 0 0 0 0<br>0 0 0 0<br>0 1 1 1<br>0 0 0 1<br>0 0 0 0<br>3</p><p><strong>样例输出</strong></p><p>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 1 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>1 1 1 1 1 1 1 1 1 1<br>0 0 0 0 1 1 0 0 0 0</p><hr><p><strong>分析：</strong></p><p>用15x10的数组matrix表示整个方格图，用4x2的数组square表示板块中4个方块所在的行和列。</p><p>执行如下循环：</p><p>循环判断板块中第<code>i（0≤i&lt;4）</code>个方块，在matrix中所处位置的下一行是否存在方块，</p><p>即<code>matrix[square[i][0] + 1][square[i][1]] == 1</code>，若存在方块，则循环结束，板块停止移动；</p><p>若板块中各方块的下一行均没有方块，则板块整体下移一行。</p><p>然后，将板块中4个方块，在matrix中所在的格子设置为1，即<code>matrix[square[j][0]][square[j][1]] = 1</code>，其中，0≤j&lt;4。</p><p>最后，输出matrix即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">均<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// matrix存储15x10的方格图，square存储下落的板块中各方块所在的行和列</span></span><br><span class="line"><span class="keyword">int</span> matrix[<span class="number">15</span>][<span class="number">10</span>], square[<span class="number">4</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> left, data, num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">1</span>) &#123;</span><br><span class="line">square[num][<span class="number">0</span>] = i;</span><br><span class="line">square[num++][<span class="number">1</span>] = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 板块图案最左边为第left列，由于下标从0开始，所以实际下标为left-1</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;left);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">square[i][<span class="number">1</span>] += left - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line"><span class="comment">// 判断板块中各方块下一行是否存在方块</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (matrix[square[i][<span class="number">0</span>] + <span class="number">1</span>][square[i][<span class="number">1</span>]] == <span class="number">1</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若下一行均没有方块，则板块整体下落一行</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; flag &amp;&amp; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">square[i][<span class="number">0</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 板块不再移动，将matrix中板块所在的格子，设置为1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">matrix[square[j][<span class="number">0</span>]][square[j][<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, matrix[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201609-2.火车购票</title>
      <link href="/2019/07/27/ccf-csp-20160902/"/>
      <url>/2019/07/27/ccf-csp-20160902/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　请实现一个铁路购票系统的简单座位分配算法，来处理一节车厢的座位分配。<br>　　假设一节车厢有20排、每一排5个座位。为方便起见，我们用1到100来给所有的座位编号，第一排是1到5号，第二排是6到10号，依次类推，第20排是96到100号。<br>　　购票时，一个人可能购一张或多张票，最多不超过5张。如果这几张票可以安排在同一排编号相邻的座位，则应该安排在编号最小的相邻座位。否则应该安排在编号最小的几个空座位中（不考虑是否相邻）。<br>　　假设初始时车票全部未被购买，现在给了一些购票指令，请你处理这些指令。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示购票指令的数量。<br>　　第二行包含<em>n</em>个整数，每个整数<em>p</em>在1到5之间，表示要购入的票数，相邻的两个数之间使用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出<em>n</em>行，每行对应一条指令的处理结果。<br>　　对于购票指令<em>p</em>，输出<em>p</em>张车票的编号，按从小到大排序。</p><p><strong>样例输入</strong></p><p>4<br>2 5 4 2</p><p><strong>样例输出</strong></p><p>1 2<br>6 7 8 9 10<br>11 12 13 14<br>3 4</p><p><strong>样例说明</strong></p><p>　　1) 购2张票，得到座位1、2。<br>　　2) 购5张票，得到座位6至10。<br>　　3) 购4张票，得到座位11至14。<br>　　4) 购2张票，得到座位3、4。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 100，所有购票数量之和不超过100。</p><hr><p><strong>分析：</strong></p><p>用int型数组seat表示各排剩下的座位数，下标从0开始。</p><p>购票时有以下两种情况：</p><p>1.第<em>i</em>排存在p个相邻的空座位。此时，找到空座位的起始编号<code>start =i * 5 + 5 - seat[i] + 1</code>，依次输出p个座位的编号即可；</p><p>2.车厢中不存在相邻的p个空座位。此时，从小到大，依次遍历各排，寻找空座位，输出p个座位的编号（若存在p个空座位）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="comment">// 存储每排剩余的座位数</span></span><br><span class="line"><span class="keyword">int</span> seat[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">seat[i] = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">20</span> &amp;&amp; seat[i] &lt; p) &#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若第i排存在相邻的p个空座位</span></span><br><span class="line"><span class="keyword">if</span> (i &lt; <span class="number">20</span>) &#123;</span><br><span class="line"> <span class="comment">// 起始座位号</span></span><br><span class="line"><span class="keyword">int</span> start = i * <span class="number">5</span> + <span class="number">5</span> - seat[i] + <span class="number">1</span>;</span><br><span class="line">seat[i] -= p;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, start + i);</span><br><span class="line"><span class="keyword">if</span> (i &lt; p - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 若不存在相邻的p个空座位，则寻找编号最小的p个座位</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">20</span> &amp;&amp; p &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (seat[i] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始座位号</span></span><br><span class="line"><span class="keyword">int</span> start = i * <span class="number">5</span> + <span class="number">5</span> - seat[i] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; seat[i] &amp;&amp; j &lt; p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, start + j);</span><br><span class="line"><span class="keyword">if</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">p -= j;</span><br><span class="line">seat[i] -= j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201612-2.工资计算</title>
      <link href="/2019/07/27/ccf-csp-20161202/"/>
      <url>/2019/07/27/ccf-csp-20161202/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　小明的公司每个月给小明发工资，而小明拿到的工资为交完个人所得税之后的工资。假设他一个月的税前工资（扣除五险一金后、未扣税前的工资）为<em>S</em>元，则他应交的个人所得税按如下公式计算：<br>　　1） 个人所得税起征点为3500元，若<em>S</em>不超过3500，则不交税，3500元以上的部分才计算个人所得税，令<em>A</em>=<em>S</em>-3500元；<br>　　2） <em>A</em>中不超过1500元的部分，税率3%；<br>　　3） <em>A</em>中超过1500元未超过4500元的部分，税率10%；<br>　　4） <em>A</em>中超过4500元未超过9000元的部分，税率20%；<br>　　5） <em>A</em>中超过9000元未超过35000元的部分，税率25%；<br>　　6） <em>A</em>中超过35000元未超过55000元的部分，税率30%；<br>　　7） <em>A</em>中超过55000元未超过80000元的部分，税率35%；<br>　　8） <em>A</em>中超过80000元的部分，税率45%；<br>　　例如，如果小明的税前工资为10000元，则<em>A</em>=10000-3500=6500元，其中不超过1500元部分应缴税1500×3%=45元，超过1500元不超过4500元部分应缴税(4500-1500)×10%=300元，超过4500元部分应缴税(6500-4500)×20%=400元。总共缴税745元，税后所得为9255元。<br>　　已知小明这个月税后所得为<em>T</em>元，请问他的税前工资<em>S</em>是多少元。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>T</em>，表示小明的税后所得。所有评测数据保证小明的税前工资为一个整百的数。</p><p><strong>输出格式</strong></p><p>　　输出一个整数<em>S</em>，表示小明的税前工资。</p><p><strong>样例输入</strong></p><p>9255</p><p><strong>样例输出</strong></p><p>10000</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>T</em> ≤ 100000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 税后工资</span></span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="comment">// 各区间最大收税金额</span></span><br><span class="line"><span class="keyword">int</span> range[<span class="number">8</span>] = &#123; <span class="number">3500</span>, <span class="number">1500</span>, <span class="number">3000</span>, <span class="number">4500</span>, <span class="number">26000</span>, <span class="number">20000</span>, <span class="number">25000</span>, INT_MAX &#125;;</span><br><span class="line"><span class="comment">// 各区间税率</span></span><br><span class="line"><span class="keyword">double</span> rate[<span class="number">8</span>] = &#123; <span class="number">0</span>, <span class="number">0.03</span>, <span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.25</span>, <span class="number">0.3</span>, <span class="number">0.35</span>, <span class="number">0.45</span> &#125;;</span><br><span class="line"><span class="comment">// 税前工资</span></span><br><span class="line"><span class="keyword">int</span> salary = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 最大税后工资</span></span><br><span class="line"><span class="keyword">int</span> rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">salary += range[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> last = rear;</span><br><span class="line">rear += range[i] * (<span class="number">1</span> - rate[i]);</span><br><span class="line"><span class="comment">// 寻找税后工资所处的区间</span></span><br><span class="line"><span class="keyword">if</span> (t &lt;= rear) &#123;</span><br><span class="line">salary += (t - last) / (<span class="number">1</span> - rate[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, salary);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201703-2.学生排队</title>
      <link href="/2019/07/26/ccf-csp-20170302/"/>
      <url>/2019/07/26/ccf-csp-20170302/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　体育老师小明要将自己班上的学生按顺序排队。他首先让学生按学号从小到大的顺序排成一排，学号小的排在前面，然后进行多次调整。一次调整小明可能让一位同学出队，向前或者向后移动一段距离后再插入队列。<br>　　例如，下面给出了一组移动的例子，例子中学生的人数为8人。<br>　　0）初始队列中学生的学号依次为1, 2, 3, 4, 5, 6, 7, 8；<br>　　1）第一次调整，命令为“3号同学向后移动2”，表示3号同学出队，向后移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 3, 6, 7, 8；<br>　　2）第二次调整，命令为“8号同学向前移动3”，表示8号同学出队，向前移动3名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 5, 8, 3, 6, 7；<br>　　3）第三次调整，命令为“3号同学向前移动2”，表示3号同学出队，向前移动2名同学的距离，再插入到队列中，新队列中学生的学号依次为1, 2, 4, 3, 5, 8, 6, 7。<br>　　小明记录了所有调整的过程，请问，最终从前向后所有学生的学号依次是多少？<br>　　请特别注意，上述移动过程中所涉及的号码指的是学号，而不是在队伍中的位置。在向后移动时，移动的距离不超过对应同学后面的人数，如果向后移动的距离正好等于对应同学后面的人数则该同学会移动到队列的最后面。在向前移动时，移动的距离不超过对应同学前面的人数，如果向前移动的距离正好等于对应同学前面的人数则该同学会移动到队列的最前面。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示学生的数量，学生的学号由1到<em>n</em>编号。<br>　　第二行包含一个整数<em>m</em>，表示调整的次数。<br>　　接下来m行，每行两个整数p, q，如果q为正，表示学号为p的同学向后移动q，如果q为负，表示学号为p的同学向前移动-q。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n个整数，相邻两个整数之间由一个空格分隔，表示最终从前向后所有学生的学号。</p><p><strong>样例输入</strong></p><p>8<br>3<br>3 2<br>8 -3<br>3 -2</p><p><strong>样例输出</strong></p><p>1 2 4 3 5 8 6 7</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>m</em> ≤ 1000，所有移动均合法。</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>链表</strong>的应用。</p><p>首先，寻找待移动元素在链表中的位置，并将其删除。然后，寻找需要插入的位置，插入该元素。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; ls;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">ls.push_back(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num, step;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;num, &amp;step);</span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = ls.begin();</span><br><span class="line"><span class="comment">// 查找待删除元素的位置</span></span><br><span class="line"><span class="keyword">while</span> (*iter != num) &#123;</span><br><span class="line">iter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 寻找插入位置</span></span><br><span class="line">iter = ls.erase(iter);</span><br><span class="line"><span class="keyword">while</span> (step &lt; <span class="number">0</span>) &#123;</span><br><span class="line">iter--;</span><br><span class="line">step++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (step &gt; <span class="number">0</span>) &#123;</span><br><span class="line">iter++;</span><br><span class="line">step--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入该元素</span></span><br><span class="line">ls.insert(iter, num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = ls.begin(); iter != ls.end(); iter++) &#123;</span><br><span class="line"><span class="keyword">if</span> (iter != ls.begin()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, *iter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line"><span class="comment">// 1.初始化</span></span><br><span class="line">LinkedList&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">list.add(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.查找待移动的元素并删除，然后在待插入的位置，插入该元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> num = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> step = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> index = list.indexOf(num);</span><br><span class="line">list.remove(index);</span><br><span class="line">list.add(index + step, num);</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"><span class="comment">// 3.输出</span></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="number">2</span> * n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> num : list) &#123;</span><br><span class="line">sb.append(num).append(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.deleteCharAt(sb.length() - <span class="number">1</span>);</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python包管理器——pip</title>
      <link href="/2019/07/26/python-pip/"/>
      <url>/2019/07/26/python-pip/</url>
      
        <content type="html"><![CDATA[<p>pip，全称package installer for Python，是python的包管理工具。这里总结下pip中常用的一些命令。</p><a id="more"></a><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意在-V中，V是大写字母</span></span><br><span class="line">pip --version 或者 pip -V</span><br></pre></td></tr></table></figure><h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><ul><li>安装最新版本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名</span><br></pre></td></tr></table></figure><ul><li>指定某个版本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必须写两个等号，且等号左右不能有空格</span></span><br><span class="line">pip install 包名==版本号</span><br></pre></td></tr></table></figure><ul><li>指定版本的范围</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install 包名&gt;=版本号</span><br><span class="line">pip install 包名&lt;=版本号</span><br><span class="line">pip install 包名&gt;版本号</span><br><span class="line">pip install 包名&lt;版本号</span><br></pre></td></tr></table></figure><ul><li>安装依赖文件中列出的所有包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r &lt;requirements file&gt;</span><br></pre></td></tr></table></figure><h3 id="更改源"><a href="#更改源" class="headerlink" title="更改源"></a>更改源</h3><h4 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h4><p>在安装包时，可以使用<code>-i &lt;url&gt;</code>或者<code>--index-url &lt;url&gt;</code>指定临时的Python Package Index（PyPI）源地址（默认为<a href="https://pypi.org/simple）。" target="_blank" rel="noopener">https://pypi.org/simple）。</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install some-package -i 源</span><br></pre></td></tr></table></figure><blockquote><p>PyPI 国内源</p><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple</a></p></blockquote><p>例如，使用清华大学的PyPI镜像来安装NumPy</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h4 id="设为默认"><a href="#设为默认" class="headerlink" title="设为默认"></a>设为默认</h4><p>还是以清华大学的PyPI镜像为例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config set <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>上述操作将在当前用户的主目录下，生成.config/pip/pip.conf，文件内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>如果想要恢复默认的PyPI源，可以使用如下的命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip config unset <span class="keyword">global</span>.index-url</span><br></pre></td></tr></table></figure><h3 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade 包名</span><br><span class="line">pip install -U 包名</span><br></pre></td></tr></table></figure><h3 id="查看已安装的包"><a href="#查看已安装的包" class="headerlink" title="查看已安装的包"></a>查看已安装的包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip list</span><br></pre></td></tr></table></figure><h3 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h3><p>使用search命令可以从PyPI中搜索需要的包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip search 包名</span><br></pre></td></tr></table></figure><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><ul><li>卸载某个包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall 包名</span><br></pre></td></tr></table></figure><ul><li>卸载依赖文件中列出的所有包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall -r &lt;requirements file&gt;</span><br></pre></td></tr></table></figure><h3 id="帮助信息"><a href="#帮助信息" class="headerlink" title="帮助信息"></a>帮助信息</h3><ul><li>如果记不住这些命令，没有关系，使用<code>--help</code>或者<code>-h</code>参数，可以打印帮助信息。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip --help 或者 pip -h</span><br></pre></td></tr></table></figure><ul><li>使用help查看命令详情。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip help 命令</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的激活函数</title>
      <link href="/2019/07/26/deep-learning-activation-function/"/>
      <url>/2019/07/26/deep-learning-activation-function/</url>
      
        <content type="html"><![CDATA[<p>常见的激活函数有sigmoid函数、tanh函数和ReLU函数，本文对这三者进行了分析和比较。</p><a id="more"></a><h3 id="sigmoid函数"><a href="#sigmoid函数" class="headerlink" title="sigmoid函数"></a>sigmoid函数</h3><p>$$<br>\sigma(x) = \frac{1}{1+e^{-x}} \tag{1}<br>$$</p><p><img src="/static/images/sigmoid.png" alt=""></p><p>sigmoid函数的导数为<br>$$<br>\begin{align}<br>\sigma^\prime (x)<br>&amp;= \frac{-e^{-x}}{(1+e^{-x})^2} \\<br>&amp;= \frac{1}{1+e^{-x}} \times \left( 1-\frac{1}{1+e^{-x}} \right) \\<br>&amp;= \sigma(x) (1-\sigma(x))<br>\end{align} \tag{2}<br>$$</p><h3 id="tanh函数"><a href="#tanh函数" class="headerlink" title="tanh函数"></a>tanh函数</h3><p>$$<br>tanh(x) = \frac{sinhx}{coshx} = \frac{e^x-e^{-x}}{e^x+e^{-x}} \tag{3}<br>$$</p><p><img src="/static/images/tanh.png" alt=""></p><p>tanh函数的导数为<br>$$<br>\begin{align}<br>tanh^\prime(x)<br>&amp;= \frac{(e^x + e^{-x})(e^x + e^{-x}) - (e^x - e^{-x})(e^x - e^{-x})}{(e^x + e^{-x})^2} \\<br>&amp;= 1 - tanh^2 (x)<br>\end{align} \tag{4}<br>$$</p><h3 id="ReLU函数"><a href="#ReLU函数" class="headerlink" title="ReLU函数"></a>ReLU函数</h3><p>线性整流函数（Rectified Linear Unit, ReLU），其数学表达式为<br>$$<br>f(x) = max(0,x) \tag{5}<br>$$</p><p><img src="/static/images/relu.png" alt=""></p><p>ReLU的导数为<br>$$<br>f^\prime (x) =<br>\begin{cases}<br>0, &amp; x \leq 0 \\<br>1, &amp; x &gt; 0<br>\end{cases} \tag{6}<br>$$</p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>（1）sigmoid函数将值限制在区间(0,1)中，这可能会限制模型的性能。当值趋近于0或者1时，曲线趋于饱和。</p><p>（2）由于<br>$$<br>\begin{align}<br>tanh(\frac{x}{2}) &amp;= \frac{e^{\frac{x}{2}}-e^{-\frac{x}{2}}}{e^{\frac{x}{2}}+e^{-\frac{x}{2}}} \\<br>&amp;= \frac{1 - e^{-x}}{1 + e^{-x}} \\<br>&amp;= \frac{2 - (1 + e^{-x})}{1 + e^{-x}} \\<br>&amp;= 2 \sigma(x) - 1<br>\end{align} \tag{7}<br>$$<br>因此，tanh函数也只是在一定程度上缓解了sigmoid函数的问题。</p><p>（3）ReLU函数并不会产生饱和问题，能够很好地适应稀疏数据。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>Xiangnan He, Lizi Liao, Hanwang Zhang, Liqiang Nie, Xia Hu and Tat-Seng Chua (2017). <a href="http://dl.acm.org/citation.cfm?id=3052569" target="_blank" rel="noopener">Neural Collaborative Filtering.</a> In Proceedings of WWW ‘17, Perth, Australia, April 03-07, 2017.</p>]]></content>
      
      
      <categories>
          
          <category> deep learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201709-2.公共钥匙盒</title>
      <link href="/2019/07/26/ccf-csp-20170902/"/>
      <url>/2019/07/26/ccf-csp-20170902/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　有一个学校的老师共用<em>N</em>个教室，按照规定，所有的钥匙都必须放在公共钥匙盒里，老师不能带钥匙回家。每次老师上课前，都从公共钥匙盒里找到自己上课的教室的钥匙去开门，上完课后，再将钥匙放回到钥匙盒中。<br>　　钥匙盒一共有<em>N</em>个挂钩，从左到右排成一排，用来挂<em>N</em>个教室的钥匙。一串钥匙没有固定的悬挂位置，但钥匙上有标识，所以老师们不会弄混钥匙。<br>　　每次取钥匙的时候，老师们都会找到自己所需要的钥匙将其取走，而不会移动其他钥匙。每次还钥匙的时候，还钥匙的老师会找到最左边的空的挂钩，将钥匙挂在这个挂钩上。如果有多位老师还钥匙，则他们按钥匙编号从小到大的顺序还。如果同一时刻既有老师还钥匙又有老师取钥匙，则老师们会先将钥匙全还回去再取出。<br>　　今天开始的时候钥匙是按编号从小到大的顺序放在钥匙盒里的。有<em>K</em>位老师要上课，给出每位老师所需要的钥匙、开始上课的时间和上课的时长，假设下课时间就是还钥匙时间，请问最终钥匙盒里面钥匙的顺序是怎样的？</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>N</em>, <em>K</em>。<br>　　接下来<em>K</em>行，每行三个整数<em>w</em>, <em>s</em>, <em>c</em>，分别表示一位老师要使用的钥匙编号、开始上课的时间和上课的时长。可能有多位老师使用同一把钥匙，但是老师使用钥匙的时间不会重叠。<br>　　保证输入数据满足输入格式，你不用检查数据合法性。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含<em>N</em>个整数，相邻整数间用一个空格分隔，依次表示每个挂钩上挂的钥匙编号。</p><p><strong>样例输入</strong></p><p>5 2<br>4 3 3<br>2 2 7</p><p><strong>样例输出</strong></p><p>1 4 3 2 5</p><p><strong>样例说明</strong></p><p>　　第一位老师从时刻3开始使用4号教室的钥匙，使用3单位时间，所以在时刻6还钥匙。第二位老师从时刻2开始使用钥匙，使用7单位时间，所以在时刻9还钥匙。<br>　　每个关键时刻后的钥匙状态如下（X表示空）：<br>　　时刻2后为1X345；<br>　　时刻3后为1X3X5；<br>　　时刻6后为143X5；<br>　　时刻9后为14325。</p><p><strong>样例输入</strong></p><p>5 7<br>1 1 14<br>3 3 12<br>1 15 12<br>2 7 20<br>3 18 12<br>4 21 19<br>5 30 9</p><p><strong>样例输出</strong></p><p>1 2 3 5 4</p><p><strong>评测用例规模与约定</strong></p><p>　　对于30%的评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 10, 1 ≤ <em>w</em> ≤ <em>N</em>, 1 ≤ <em>s</em>, <em>c</em> ≤ 30；<br>　　对于60%的评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 50，1 ≤ <em>w</em> ≤ <em>N</em>，1 ≤ <em>s</em> ≤ 300，1 ≤ <em>c</em> ≤ 50；<br>　　对于所有评测用例，1 ≤ <em>N</em>, <em>K</em> ≤ 1000，1 ≤ <em>w</em> ≤ <em>N</em>，1 ≤ <em>s</em> ≤ 10000，1 ≤ <em>c</em> ≤ 100。</p><hr><p><strong>分析：</strong></p><p>首先，定义结构体Key，包含钥匙的编号num、当前动作的开始时间start以及借还状态borrow。</p><p>定义<code>vector&lt;key&gt;</code>类型的变量list，长度为n的int型数组arr，其值表示钥匙编号，初始化为1到n。</p><p>遍历输入的借还记录，将借和还分别加入到list中。</p><p>然后，对list进行排序，排序规则为：按照时间从大到小的顺序排列；若时间相同，则按照先借后还的顺序排列；若借还状态相同，则按照钥匙的编号从大到小排列。</p><p>当list不为空时，执行如下循环：将最后一个元素出列，若其<code>borrow == true</code>，则找到对应的钥匙编号，将其设置为-1，表示已借出；否则，寻找arr中第一个值为-1的位置，将钥匙还入该位置。</p><p>最后，顺序输出数组arr中的值即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// 钥匙编号</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="comment">// 开始时间</span></span><br><span class="line"><span class="keyword">int</span> start;</span><br><span class="line"><span class="comment">// 借钥匙还是还钥匙</span></span><br><span class="line"><span class="keyword">bool</span> borrow;</span><br><span class="line">Node(<span class="keyword">int</span> _num, <span class="keyword">int</span> _start, <span class="keyword">bool</span> _borrow) &#123;</span><br><span class="line">num = _num;</span><br><span class="line">start = _start;</span><br><span class="line">borrow = _borrow;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Key;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Key a, Key b)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 时间早的在后面，先出列</span></span><br><span class="line"><span class="keyword">if</span> (a.start != b.start) &#123;</span><br><span class="line"><span class="keyword">return</span> a.start &gt; b.start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先借后还，还的先出列</span></span><br><span class="line"><span class="keyword">if</span> (a.borrow != b.borrow) &#123;</span><br><span class="line"><span class="keyword">return</span> a.borrow &amp;&amp; !b.borrow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照编号从大到小排列，小的先出列</span></span><br><span class="line"><span class="keyword">return</span> a.num &gt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i] = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Key&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">int</span> w, s, c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;w, &amp;s, &amp;c);</span><br><span class="line"><span class="built_in">list</span>.push_back(Key(w, s, <span class="literal">true</span>));</span><br><span class="line"><span class="built_in">list</span>.push_back(Key(w, s + c, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line">sort(<span class="built_in">list</span>.begin(), <span class="built_in">list</span>.end(), cmp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty()) &#123;</span><br><span class="line">Key key = <span class="built_in">list</span>.back();</span><br><span class="line"><span class="built_in">list</span>.pop_back();</span><br><span class="line"><span class="keyword">if</span> (key.borrow) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == key.num) &#123;</span><br><span class="line"><span class="comment">// 表示该钥匙已被借出</span></span><br><span class="line">arr[i] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">arr[i] = key.num;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[i]);</span><br><span class="line"><span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTex总结</title>
      <link href="/2019/07/25/latex/"/>
      <url>/2019/07/25/latex/</url>
      
        <content type="html"><![CDATA[<p>LaTex文档的基本格式:</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[option]</span><span class="string">&#123;article&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"><span class="comment">% 所有的其他内容均放在这里</span></span><br><span class="line">content...</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释使用<code>%</code>，例如</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">% 单行注释</span></span><br></pre></td></tr></table></figure><ul><li>多行注释使用<code>\iffalse...\fi</code>，例如</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">iffalse</span></span></span><br><span class="line">Hello <span class="tag">\<span class="name">LaTex</span></span></span><br><span class="line">Why I like it.</span><br><span class="line"><span class="tag">\<span class="name">fi</span></span></span><br></pre></td></tr></table></figure><h3 id="使用中文"><a href="#使用中文" class="headerlink" title="使用中文"></a>使用中文</h3><p>LaTex默认不支持中文，如果要在文档中显示中文，需要引入<code>ctex</code>包</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;ctex&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="文章标题"><a href="#文章标题" class="headerlink" title="文章标题"></a>文章标题</h3><p>在导言区使用<code>\title</code>命令，指定文章的标题。</p><p>示例：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">title</span><span class="string">&#123;your title&#125;</span></span></span><br><span class="line">...</span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">...</span><br><span class="line">    <span class="comment">% 必须加\maketitle，否则，不能显示标题</span></span><br><span class="line">    <span class="tag">\<span class="name">maketitle</span></span> </span><br><span class="line">content...</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">author</span><span class="string">&#123;author name&#125;</span></span></span><br><span class="line"><span class="comment">% 比如\author&#123;Gongshan He&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">content...</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;abstract&#125;</span></span></span><br><span class="line">content...</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;abstract&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>在文档合适的地方，加入如下命令即可。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">tableofcontents</span></span></span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">clearpage</span></span></span><br></pre></td></tr></table></figure><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">% 引入包</span></span><br><span class="line"><span class="tag">\<span class="name">usepackage</span><span class="string">&#123;graphicx&#125;</span></span></span><br><span class="line">....</span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">....</span><br><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;figure&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">includegraphics</span><span class="string">&#123;图片地址&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">caption</span><span class="string">&#123;图片标题&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;figure&#125;</span></span></span><br><span class="line">....</span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;table&#125;</span></span></span><br><span class="line">    <span class="tag">\<span class="name">begin</span><span class="string">&#123;tabular&#125;</span><span class="string">&#123;|ccc|&#125;</span></span></span><br><span class="line">        <span class="tag">\<span class="name">hline</span></span></span><br><span class="line">        直角a &amp; 直角b &amp; 直角c <span class="tag">\<span class="name">\</span></span></span><br><span class="line">        <span class="tag">\<span class="name">hline</span></span></span><br><span class="line">        3 &amp; 4 &amp; 5 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">        5 &amp; 12 &amp; 13 <span class="tag">\<span class="name">\</span></span></span><br><span class="line">        <span class="tag">\<span class="name">hline</span></span></span><br><span class="line">    <span class="tag">\<span class="name">end</span><span class="string">&#123;tabular&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;table&#125;</span></span></span><br></pre></td></tr></table></figure><p>tabular中有一个参数，里面声明了表格中列的模式。|ccc|表示表格有三列，都是居中对齐，在第一列前面和第三列后面各有一条垂直的表格线。类似的还有l（左对齐）和r（右对齐）。</p><p>行与行之间用命令<code>\\</code>隔开，每行内部的表项则用符号&amp;隔开。表格中的横线用\hline产生。</p><h3 id="分栏"><a href="#分栏" class="headerlink" title="分栏"></a>分栏</h3><ul><li>在\documentclass中指定分栏模式</li></ul><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">documentclass</span><span class="string">[twocolumn]</span><span class="string">&#123;article&#125;</span></span></span><br></pre></td></tr></table></figure><ul><li>在正文中使用命令切换。\twocolumn进入双栏模式，\onecolumn进入单栏模式，两个命令都会先使用\clearpage换页，并不产生一页之内单双栏混合的效果。</li></ul><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>可以使用BIBTEX处理参考文献。</p><p>将所有可能会引用的文献放到以.bib结尾的文本文件中。</p><p>使用<code>\bibliographystyle</code>设定参考文献的格式，这通常在导言区完成。</p><p>使用<code>\bibliography</code>打印出参考文献列表。</p><p>例如，当前目录下有一个名为reference.bib的文献数据库，内容如下：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@inproceedings&#123;He:2017:NCF:3038912.3052569,</span><br><span class="line"> author = &#123;He, Xiangnan and Liao, Lizi and Zhang, Hanwang and Nie, Liqiang and Hu, Xia and Chua, Tat-Seng&#125;,</span><br><span class="line"> title = &#123;Neural Collaborative Filtering&#125;,</span><br><span class="line"> booktitle = &#123;Proceedings of the 26th International Conference on World Wide Web&#125;,</span><br><span class="line"> series = &#123;WWW '17&#125;,</span><br><span class="line"> year = &#123;2017&#125;,</span><br><span class="line"> isbn = &#123;978-1-4503-4913-0&#125;,</span><br><span class="line"> location = &#123;Perth, Australia&#125;,</span><br><span class="line"> pages = &#123;173--182&#125;,</span><br><span class="line"> numpages = &#123;10&#125;,</span><br><span class="line"> url = &#123;https://doi.org/10.1145/3038912.3052569&#125;,</span><br><span class="line"> doi = &#123;10.1145/3038912.3052569&#125;,</span><br><span class="line"> acmid = &#123;3052569&#125;,</span><br><span class="line"> publisher = &#123;International World Wide Web Conferences Steering Committee&#125;,</span><br><span class="line"> address = &#123;Republic and Canton of Geneva, Switzerland&#125;,</span><br><span class="line"> keywords = &#123;collaborative filtering, deep learning, implicit feedback, matrix factorization, neural networks&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定数据库文件时，不带bib后缀。可以同时从多个文献数据库中提取文献，文件名用逗号分隔开即可。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">% 从文献数据库reference.bib中获取文献信息，打印参考文献列表</span></span><br><span class="line"><span class="tag">\<span class="name">bibliography</span><span class="string">&#123;reference&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><p>在正文中，使用<code>\cite</code>命令引用需要的文献，<code>\cite</code>命令引用的位置会出现文献的编号，同时将提示LATEX列出所引用的文献</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">\<span class="name">begin</span><span class="string">&#123;document&#125;</span></span></span><br><span class="line">...</span><br><span class="line">ncf<span class="tag">\<span class="name">cite</span><span class="string">&#123;He:2017:NCF:3038912.3052569&#125;</span></span></span><br><span class="line"><span class="comment">% 从文献数据库reference.bib中获取文献信息，打印参考文献列表</span></span><br><span class="line"><span class="tag">\<span class="name">bibliography</span><span class="string">&#123;reference&#125;</span></span></span><br><span class="line"><span class="tag">\<span class="name">end</span><span class="string">&#123;document&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>参看<a href="/2018/07/16/mathjax-tutorial/">MathJax语法</a></p>]]></content>
      
      
      <categories>
          
          <category> latex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201712-2.游戏</title>
      <link href="/2019/07/25/ccf-csp-20171202/"/>
      <url>/2019/07/25/ccf-csp-20171202/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　有<em>n</em>个小朋友围成一圈玩游戏，小朋友从1至<em>n</em>编号，2号小朋友坐在1号小朋友的顺时针方向，3号小朋友坐在2号小朋友的顺时针方向，……，1号小朋友坐在<em>n</em>号小朋友的顺时针方向。<br>　　游戏开始，从1号小朋友开始顺时针报数，接下来每个小朋友的报数是上一个小朋友报的数加1。若一个小朋友报的数为<em>k</em>的倍数或其末位数（即数的个位）为<em>k</em>，则该小朋友被淘汰出局，不再参加以后的报数。当游戏中只剩下一个小朋友时，该小朋友获胜。<br>　　例如，当n=5, k=2时：<br>　　1号小朋友报数1；<br>　　2号小朋友报数2淘汰；<br>　　3号小朋友报数3；<br>　　4号小朋友报数4淘汰；<br>　　5号小朋友报数5；<br>　　1号小朋友报数6淘汰；<br>　　3号小朋友报数7；<br>　　5号小朋友报数8淘汰；<br>　　3号小朋友获胜。</p><p>　　给定<em>n</em>和<em>k</em>，请问最后获胜的小朋友编号为多少？</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入一行，包括两个整数<em>n</em>和<em>k</em>，意义如题目所述。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含一个整数，表示获胜的小朋友编号。</p><p><strong>样例输入</strong></p><p>5 2</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例输入</strong></p><p>7 3</p><p><strong>样例输出</strong></p><p>4</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>k</em> ≤ 9。</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>队列</strong>的应用。</p><p>先将所有小朋友的编号入队，在队列的长度大于1时，执行如下循环：</p><p>若当前报数<code>num % k == 0 || num % 10 == k</code>，则将其出队；否则，让其先出队，再入队。</p><p>当队列中只剩下一个小朋友的编号时，这个人就是获胜者。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qu;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">qu.push(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>, temp;</span><br><span class="line"><span class="keyword">while</span> (qu.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">if</span> (num % k == <span class="number">0</span> || num % <span class="number">10</span> == k) &#123;</span><br><span class="line">qu.pop();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">temp = qu.front();</span><br><span class="line">qu.pop();</span><br><span class="line">qu.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qu.front());</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201809-2.买菜</title>
      <link href="/2019/07/20/ccf-csp-20180902/"/>
      <url>/2019/07/20/ccf-csp-20180902/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　小H和小W来到了一条街上，两人分开买菜，他们买菜的过程可以描述为，去店里买一些菜然后去旁边的一个广场把菜装上车，两人都要买n种菜，所以也都要装n次车。具体的，对于小H来说有n个不相交的时间段$[a_1,b_1],[a_2,b_2]…[a_n,b_n]​$在装车，对于小W来说有n个不相交的时间段$[c_1,d_1],[c_2,d_2]…[c_n,d_n]​$在装车。其中，一个时间段[s, t]表示的是从时刻s到时刻t这段时间，时长为t-s。<br>　　由于他们是好朋友，他们都在广场上装车的时候会聊天，他们想知道他们可以聊多长时间。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个正整数n，表示时间段的数量。<br>　　接下来n行每行两个数$a_i，b_i​$，描述小H的各个装车的时间段。<br>　　接下来n行每行两个数$c_i，d_i​$，描述小W的各个装车的时间段。</p><p><strong>输出格式</strong></p><p>　　输出一行，一个正整数，表示两人可以聊多长时间。</p><p><strong>样例输入</strong></p><p>4<br>1 3<br>5 6<br>9 13<br>14 15<br>2 4<br>5 7<br>10 11<br>13 14</p><p><strong>样例输出</strong></p><p>3</p><p><strong>数据规模和约定</strong></p><p>　　对于所有的评测用例，1 ≤ n ≤ 2000, $a_i &lt; b_i &lt; a_{i+1}，c_i &lt; d_i &lt; c_{i+1}$,对于所有的i(1 ≤ i ≤ n)有，1 ≤ $a_i, b_i, c_i, d_i$ ≤ 1000000。</p><hr><p><strong>分析：</strong></p><p><strong>暴力法：双重循环</strong></p><p>用time表示小H和小W能够聊天的时间。</p><p>用二维数组hArr存储小H装车的n个时间段，二维数组wArr存储小W装车的n个时间段。</p><p>遍历数组hArr，循环内部再遍历数组wArr，</p><p>令x为当前的两个时间段中最大的下界，y为最小的上界，即</p><p><code>x = max(hArr[i][0], wArr[j][0])</code>，<code>y= min(hArr[i][1], wArr[j][1])</code></p><p>若<code>y - x &gt; 0</code>，则表示两个时间段有交叉，<code>time += y - x</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">int</span> arr[][<span class="number">2</span>], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;arr[i][<span class="number">0</span>], &amp;arr[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> hArr[n][<span class="number">2</span>], wArr[n][<span class="number">2</span>];</span><br><span class="line">input(hArr, n);</span><br><span class="line">input(wArr, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = max(hArr[i][<span class="number">0</span>], wArr[j][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">int</span> y = min(hArr[i][<span class="number">1</span>], wArr[j][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (y - x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">time += y - x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于《球状闪电》这本小说</title>
      <link href="/2019/07/19/reading-note-ball-lightning/"/>
      <url>/2019/07/19/reading-note-ball-lightning/</url>
      
        <content type="html"><![CDATA[<p>《球状闪电》是我这个暑期看的第二本小说，前后大概花了一个星期的时间。</p><a id="more"></a><p>小说结尾时，量子态的林云和其父亲林峰将军长篇幅的两人对话，确实有点无聊。但瑕不掩瑜，《球状闪电》仍是一本很不错的小说。</p><p>作为主角的陈博士，大刘没有明说他毕业于哪个学校。但是，根据主角的学校所在地——南京，主角的专业——大气科学，另个一个主角林云的身份——国防科技大学防空武器系统博士，以及2017年的第四轮学科评估，我猜测，应该是南京大学。</p><p>下面是我比较喜欢的一些句子：</p><p>1.投入全部身心钻研，只问耕耘不问收获，不知不觉的专注中，一辈子也就过去了。</p><p>2.美妙人生的关键在于你能迷上什么东西。</p><p>3.我现在的人生好比一颗疾飞的炮弹，除了对到达目标时那一声爆炸的渴望之外什么都没有。</p><p>4.我和它，像两个要用一生时间准备一场决斗的骑士，当我没准备好的时候，既不去见它也不去想它。</p><p>5.窗外的每一片树叶，都使人类的科学显得那么幼稚无力。</p><p>6.像我们这样的人，全部身心长期被某种东西占据着以致最后这种东西成了你的一部分，生活中的其他事，再怎么看也是第二位的。</p><p>7.恒星这东西，如果不是其确实存在，本来可以很容易证明它不可能存在的。</p><p>8.当你渴望某样东西时，道德的约束是多么无力。</p><p>9.以前对我来说万分珍贵的时间，现在变得用之不竭了。</p><p>10.真正值得关注的是现在和未来。</p><p>11.从量子力学的角度来讲，人的死亡过程就是由一个强观察者变为弱观察者再变为非观察者的过程。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201812-2.小明放学</title>
      <link href="/2019/07/19/ccf-csp-20181202/"/>
      <url>/2019/07/19/ccf-csp-20181202/</url>
      
        <content type="html"><![CDATA[<p><strong>题目背景</strong></p><p>　　汉东省政法大学附属中学所在的光明区最近实施了名为“智慧光明”的智慧城市项目。具体到交通领域，通过“智慧光明”终端，可以看到光明区所有红绿灯此时此刻的状态。小明的学校也安装了“智慧光明”终端，小明想利用这个终端给出的信息，估算自己放学回到家的时间。</p><a id="more"></a><p><strong>问题描述</strong></p><p>　　一次放学的时候，小明已经规划好了自己回家的路线，并且能够预测经过各个路段的时间。同时，小明通过学校里安装的“智慧光明”终端，看到了<strong>出发时刻</strong>路上经过的所有红绿灯的指示状态。请帮忙计算小明此次回家所需要的时间。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含空格分隔的三个正整数 r、y、g，表示红绿灯的设置。这三个数均不超过 10^6。<br>　　输入的第二行包含一个正整数 n，表示小明总共经过的道路段数和路过的红绿灯数目。<br>　　接下来的 n 行，每行包含空格分隔的两个整数 k、t。k=0 表示经过了一段道路，将会耗时 t 秒，此处 t 不超过 10^6；k=1、2、3 时，分别表示<strong>出发时刻</strong>，此处的红绿灯状态是红灯、黄灯、绿灯，且倒计时显示牌上显示的数字是 t，此处 t 分别不会超过 r、y、g。</p><p><strong>输出格式</strong></p><p>　　输出一个数字，表示此次小明放学回家所用的时间。</p><p><strong>样例输入</strong></p><p>30 3 30<br>8<br>0 10<br>1 5<br>0 11<br>2 2<br>0 6<br>0 3<br>3 10<br>0 3</p><p><strong>样例输出</strong></p><p>46</p><p><strong>样例说明</strong></p><p>　　小明先经过第一段路，用时 10 秒。第一盏红绿灯出发时是红灯，还剩 5 秒；小明到达路口时，这个红绿灯已经变为绿灯，不用等待直接通过。接下来经过第二段路，用时 11 秒。第二盏红绿灯出发时是黄灯，还剩两秒；小明到达路口时，这个红绿灯已经变为红灯，还剩 11 秒。接下来经过第三、第四段路，用时 9 秒。第三盏红绿灯出发时是绿灯，还剩 10 秒；小明到达路口时，这个红绿灯已经变为红灯，还剩两秒。接下来经过最后一段路，用时 3 秒。共计 10+11+11+9+2+3 = 46 秒。</p><p><strong>评测用例规模与约定</strong></p><p>　　有些测试点具有特殊的性质：<br>　　<em> 前 2 个测试点中不存在任何信号灯。<br>　　测试点的输入数据规模：　　</em> 前 6 个测试点保证 n ≤ 10^3。<br>　　* 所有测试点保证 n ≤ 10^5。</p><hr><p><strong>分析：</strong></p><p>用time表示回家所用的时间。</p><p>遇到道路，即<code>k==0</code>，则将t加到time上；</p><p>遇到红绿灯，则通过取余操作，计算当前交通信号灯的状态：<code>rear = (time - t) % (r + g + y);</code>，其中rear表示某个信号灯已经用掉的时间，</p><p>若为红灯，则将红灯剩余的时间加到time上；</p><p>若为黄灯，则将<strong>黄灯剩余的时间以及一个红灯的时间</strong>加到time上。</p><p><strong>本题需要注意的地方：</strong></p><p>第一，交通灯的变换顺序为：<strong>红-&gt;绿-&gt;黄-&gt;红</strong>。每次遇到黄灯，需要多等待一个红灯的时间。</p><p>第二， n ≤ 10^5，t ≤ 10^6，max(time)=n*t = 10^11。因此，time需要声明为long long类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r, y, g;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;y, &amp;g);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> time = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;k, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">time += t;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">1</span>) &#123; <span class="comment">// 红灯</span></span><br><span class="line"><span class="keyword">if</span> (t &gt; time) &#123;</span><br><span class="line">time = t;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// rear表示某个信号灯已经用掉的时间</span></span><br><span class="line"><span class="keyword">int</span> rear = (time - t) % (g + y + r);</span><br><span class="line"><span class="keyword">if</span> (rear &gt; g &amp;&amp; rear &lt;= g + y) &#123; <span class="comment">// 当前为黄灯</span></span><br><span class="line">time += g + y - rear + r;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rear &gt; g + y) &#123; <span class="comment">// 红灯</span></span><br><span class="line">time += g + y + r - rear;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (k == <span class="number">2</span>) &#123; <span class="comment">// 黄灯</span></span><br><span class="line"><span class="keyword">if</span> (t &gt; time) &#123;</span><br><span class="line">time = t + r;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> rear = (time - t) % (r + g + y);</span><br><span class="line"><span class="keyword">if</span> (rear &lt;= r) &#123; <span class="comment">// 红灯</span></span><br><span class="line">time += r - rear;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rear &gt; r + g) &#123; <span class="comment">//黄灯</span></span><br><span class="line">time += r + g + y - rear + r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// 绿灯</span></span><br><span class="line"><span class="keyword">if</span> (t &lt; time) &#123;</span><br><span class="line"><span class="keyword">int</span> rear = (time - t) % (y + r + g);</span><br><span class="line"><span class="comment">//黄灯</span></span><br><span class="line"><span class="keyword">if</span> (rear &lt;= y) &#123;</span><br><span class="line">time += y - rear + r;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rear &lt;= y + r) &#123;</span><br><span class="line">time += y + r - rear;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若得分为20，则表示没有考虑到黄灯后是红灯；</p><p>若得分为60，则表示没有考虑到数据的取值范围，time&lt;=10^11。</p>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201903-2.二十四点</title>
      <link href="/2019/07/19/ccf-csp-20190302/"/>
      <url>/2019/07/19/ccf-csp-20190302/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20190302-1.png" alt="img1"></p><a id="more"></a><p><img src="/static/images/ccf-csp-20190302-2.png" alt="img2"></p><hr><p><strong>分析：</strong></p><p>本题可以使用栈来解决。</p><p>遇到数字，则直接进栈；</p><p>遇到<code>x</code>，则将栈顶元素top出栈，并将top与下一个数字的乘积，放进栈中；</p><p>遇到<code>/</code>，则将栈顶元素top出栈，并让top除以下一个数字，将商放进栈中；</p><p>遇到<code>-</code>，则将下一个数字的相反数放进栈中（将减法变为加法）。</p><p>最后，将栈中的元素依次出栈，并累加到变量sum中。若sum等于24，则输出<code>Yes</code>；否则，输出<code>No</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入表达式</span></span><br><span class="line"><span class="keyword">char</span> str[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">str[index++] = temp;</span><br><span class="line">&#125;</span><br><span class="line">str[index] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'1'</span> &lt;= str[i] &amp;&amp; str[i] &lt;= <span class="string">'9'</span>) &#123;</span><br><span class="line">st.push(flag * (str[i] - <span class="string">'0'</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'x'</span>) &#123;</span><br><span class="line">data = st.top() * (str[++i] - <span class="string">'0'</span>);</span><br><span class="line">st.pop();</span><br><span class="line">st.push(data);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'/'</span>) &#123;</span><br><span class="line">data = st.top() / (str[++i] - <span class="string">'0'</span>);</span><br><span class="line">st.pop();</span><br><span class="line">st.push(data);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">'-'</span>) &#123;</span><br><span class="line">flag = <span class="number">-1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!st.empty()) &#123;</span><br><span class="line">sum += st.top();</span><br><span class="line">st.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum == <span class="number">24</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201312-1.出现次数最多的数</title>
      <link href="/2019/07/19/ccf-csp-20131201/"/>
      <url>/2019/07/19/ccf-csp-20131201/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定n个正整数，找出它们中出现次数最多的数。如果这样的数有多个，请输出其中最小的一个。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行只有一个正整数n(1 ≤ n ≤ 1000)，表示数字的个数。<br>　　输入的第二行有n个整数s1, s2, …, sn (1 ≤ si ≤ 10000, 1 ≤ i ≤ n)。相邻的数用空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出这n个次数中出现次数最多的数。如果这样的数有多个，输出其中最小的一个。</p><p><strong>样例输入</strong></p><p>6<br>10 1 10 20 30 20</p><p><strong>样例输出</strong></p><p>10</p><hr><p><strong>分析：</strong></p><p>本题考察<strong>哈希表和排序</strong>的简单应用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">10001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">hash[arr[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(arr, arr + n);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[arr[i]] &gt; hash[arr[index]]) &#123;</span><br><span class="line">index = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[index]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201403-1.相反数</title>
      <link href="/2019/07/19/ccf-csp-20140301/"/>
      <url>/2019/07/19/ccf-csp-20140301/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　有 N 个非零且各不相同的整数。请你编一个程序求出它们中有多少对相反数(a 和 -a 为一对相反数)。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　第一行包含一个正整数 N。(1 ≤ N ≤ 500)。<br>　　第二行为 N 个用单个空格隔开的非零整数,每个数的绝对值不超过1000,保证这些整数各不相同。</p><p><strong>输出格式</strong></p><p>　　只输出一个整数,即这 N 个数中包含多少对相反数。</p><p><strong>样例输入</strong></p><p>5<br>1 2 3 -1 -2</p><p><strong>样例输出</strong></p><p>2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] == -arr[j]) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201409-1.相邻数对</title>
      <link href="/2019/07/19/ccf-csp-20140901/"/>
      <url>/2019/07/19/ccf-csp-20140901/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定n个不同的整数，问这些数中有多少对整数，它们的值正好相差1。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示给定整数的个数。<br>　　第二行包含所给定的n个整数。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示值正好相差1的数对的个数。</p><p><strong>样例输入</strong></p><p>6<br>10 2 6 3 7 8</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例说明</strong></p><p>　　值正好相差1的数对包括(2, 3), (6, 7), (7, 8)。</p><p><strong>评测用例规模与约定</strong></p><p>　　1&lt;=n&lt;=1000，给定的整数为不超过10000的非负整数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(arr[i] - arr[j]) == <span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201412-1.门禁系统</title>
      <link href="/2019/07/19/ccf-csp-20141201/"/>
      <url>/2019/07/19/ccf-csp-20141201/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　涛涛最近要负责图书馆的管理工作，需要记录下每天读者的到访情况。每位读者有一个编号，每条记录用读者的编号来表示。给出读者的来访记录，请问每一条记录中的读者是第几次出现。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示涛涛的记录条数。<br>　　第二行包含n个整数，依次表示涛涛的记录中每位读者的编号。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n个整数，由空格分隔，依次表示每条记录中的读者编号是第几次出现。</p><p><strong>样例输入</strong></p><p>5<br>1 2 1 1 3</p><p><strong>样例输出</strong></p><p>1 1 2 3 1</p><p><strong>评测用例规模与约定</strong></p><p>　　1≤n≤1,000，读者的编号为不超过n的正整数。</p><hr><p><strong>分析</strong>：</p><p>本题可以采用<strong>哈希表</strong>求解。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">// n≤1,000</span></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">1001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ++hash[arr[i]]);</span><br><span class="line"><span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1048.Find Coins (25 分)</title>
      <link href="/2019/07/17/pat-advanced-1048/"/>
      <url>/2019/07/17/pat-advanced-1048/</url>
      
        <content type="html"><![CDATA[<p>Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she could only use exactly two coins to pay the exact amount. Since she has as many as 105 coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find two coins to pay for it.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive numbers: <em>N</em> (≤10^5, the total number of coins) and <em>M</em> (≤10^3, the amount of money Eva has to pay). The second line contains <em>N</em> face values of the coins, which are all positive numbers no more than 500. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the two face values <em>V</em>1 and <em>V</em>2 (separated by a space) such that <em>V</em>1+<em>V</em>2=<em>M</em> and <em>V</em>1≤<em>V</em>2. If such a solution is not unique, output the one with the smallest <em>V</em>1. If there is no solution, output <code>No Solution</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 15</span><br><span class="line">1 2 8 7 2 4 11 15</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 11</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7 14</span><br><span class="line">1 8 7 2 4 11 15</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No Solution</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个硬币（每个硬币的面值不超过500），和一个金额M。从N个硬币中选出两个，使得两者的和等于M。然后，按照面值从小到大的顺序，输出这两个硬币的金额V1、V2（V1≤V2）。</p><p>若存在多组硬币满足要求，则输出V1最小的那组值。若不存在这样的两个硬币，则输出<code>No Solution</code>。</p><p><strong>思路：</strong>本题考察<strong>哈希表和排序</strong>的简单应用。</p><p>使用数组hash表示哈希表，下标表示硬币的面值，对应的值表示该面值出现的次数，初始值为0。</p><p>将输入的N个硬币的存在数组arr中。</p><p>首先，遍历数组arr，统计出各面值硬币出现的次数。</p><p>由于题目要求按照从小到大的顺序输出，因此，需要对数组arr进行升序排序。</p><p>接着，再次遍历arr，若<code>m - arr[i] &gt;=0 &amp;&amp; m-arr[i] &lt;= 500 &amp;&amp; hash[m - arr[i]] &gt; 0</code>成立，</p><p>则接着判断<code>m == arr[i] * 2 &amp;&amp; hash[arr[i]] &lt; 2</code>是否成立，</p><p>若成立，则继续下一轮循环；否则，表示已经找到这样两个硬币。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">501</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">hash[arr[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(arr, arr + n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (m - arr[i] &gt;= <span class="number">0</span> &amp;&amp; m - arr[i] &lt;= <span class="number">500</span> &amp;&amp; hash[m - arr[i]] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> * arr[i] == m &amp;&amp; hash[arr[i]] &lt; <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, arr[i], m - arr[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No Solution\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1005.继续(3n+1)猜想 (25 分)</title>
      <link href="/2019/07/16/pat-basic-1005/"/>
      <url>/2019/07/16/pat-basic-1005/</url>
      
        <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。</p><p>当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 <em>n</em>=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 <em>n</em>=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 <em>n</em> 为“关键数”，如果 <em>n</em> 不能被数列中的其他数字所覆盖。</p><p>现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 <em>K</em> (&lt;100)，第 2 行给出 <em>K</em> 个互不相同的待验证的正整数 <em>n</em> (1&lt;<em>n</em>≤100)的值，数字间用空格隔开。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 5 6 7 8 11</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 6</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察<strong>哈希表和排序</strong>的简单应用。</p><p>使用数组hash表示哈希表，下标为给定的正整数，对应的值为该整数出现的次数（或者是否出现），初始值为0。</p><p>遍历输入的K个整数，对每个整数执行如下操作：</p><p>求出它所覆盖的每个数字data，若data不大于100（n≤100），则data在数组hash中的值加一。</p><p>由于题目要求<strong>按从大到小的顺序输出关键数字</strong>，因此，需要对输入的K个整数进行排序。</p><p>最后，再次遍历输入的K个整数，若其在数组hash中的值为0，表示其是关键数字，未被其他数字覆盖。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, data;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">101</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> arr[k];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line"></span><br><span class="line">data = arr[i];</span><br><span class="line"><span class="keyword">while</span> (data != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (data % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">data /= <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">data = (<span class="number">3</span> * data + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若不加该条件判断，建议将数组hash的长度设置为5000及以上</span></span><br><span class="line"><span class="comment">// 97能覆盖的最大值为4616</span></span><br><span class="line"><span class="keyword">if</span> (data &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">hash[data]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(arr, arr + k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isFirst = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[arr[i]] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isFirst) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">isFirst = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201503-1.图像旋转</title>
      <link href="/2019/07/15/ccf-csp-20150301/"/>
      <url>/2019/07/15/ccf-csp-20150301/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　旋转是图像处理的基本操作，在这个问题中，你需要将一个图像逆时针旋转90度。<br>　　计算机中的图像表示可以用一个矩阵来表示，为了旋转一个图像，只需要将对应的矩阵旋转即可。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含两个整数<em>n</em>, <em>m</em>，分别表示图像矩阵的行数和列数。<br>　　接下来<em>n</em>行每行包含<em>m</em>个整数，表示输入的图像。</p><p><strong>输出格式</strong></p><p>　　输出<em>m</em>行，每行包含<em>n</em>个整数，表示原始矩阵逆时针旋转90度后的矩阵。</p><p><strong>样例输入</strong></p><p>2 3<br>1 5 3<br>3 2 4</p><p><strong>样例输出</strong></p><p>3 4<br>5 2<br>1 3</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em>, <em>m</em> ≤ 1,000，矩阵中的数都是不超过1000的非负整数。</p><hr><p><strong>分析：</strong></p><p>n和m的上限为1000。当n和m均达到上限时，数组将包含10^6个元素。因此，该数组应该在main函数外定义。</p><blockquote><p> 全局变量在静态存储区中分配空间；而局部变量在栈中分配存储空间。若局部变量过大，会导致栈溢出。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转置</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201509-1.数列分段</title>
      <link href="/2019/07/15/ccf-csp-20150901/"/>
      <url>/2019/07/15/ccf-csp-20150901/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定一个整数数列，数列中连续相同的最长整数序列算成一段，问数列中共有多少段？</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>，表示数列中整数的个数。<br>　　第二行包含<em>n</em>个整数<em>a</em>1, <em>a</em>2, …, <em>an</em>，表示给定的数列，相邻的整数之间用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示给定的数列有多个段。</p><p><strong>样例输入</strong></p><p>8<br>8 8 8 0 12 12 8 0</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　8 8 8是第一段，0是第二段，12 12是第三段，倒数第二个整数8是第四段，最后一个0是第五段。</p><p><strong>评测用例规模与约定</strong></p><p>　　1 ≤ <em>n</em> ≤ 1000，0 ≤ <em>ai</em> ≤ 1000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="comment">// 数列段数，n &gt;= 1，因此，count初始化为1</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; arr[i] != arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201512-1.数位之和</title>
      <link href="/2019/07/15/ccf-csp-20151201/"/>
      <url>/2019/07/15/ccf-csp-20151201/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定一个十进制整数<em>n</em>，输出<em>n</em>的各位数字之和。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入一个整数<em>n</em>。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示答案。</p><p><strong>样例输入</strong></p><p>20151220</p><p><strong>样例输出</strong></p><p>13</p><p><strong>样例说明</strong></p><p>　　20151220的各位数字之和为2+0+1+5+1+2+2+0=13。</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例满足：0 ≤ <em>n</em> ≤ 1000000000。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sum += n % <span class="number">10</span>;</span><br><span class="line">n = n / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201604-1.折点计数</title>
      <link href="/2019/07/15/ccf-csp-20160401/"/>
      <url>/2019/07/15/ccf-csp-20160401/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定<em>n</em>个整数表示一个商店连续<em>n</em>天的销售量。如果某天之前销售量在增长，而后一天销售量减少，则称这一天为折点，反过来如果之前销售量减少而后一天销售量增长，也称这一天为折点。其他的天都不是折点。如下图中，第3天和第6天是折点。<br><img src="/static/images/ccf-csp-20160401.png" alt="img"><br>　　给定<em>n</em>个整数$a_1, a_2, …, a_n​$表示销售量，请计算出这些天总共有多少个折点。<br>　　为了减少歧义，我们给定的数据保证：在这<em>n</em>天中相邻两天的销售量总是不同的，即$a_{i-1}​$≠$a_i​$。注意，如果两天不相邻，销售量可能相同。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>n</em>。<br>　　第二行包含<em>n</em>个整数，用空格分隔，分别表示$a_1, a_2, …, a_n$。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示折点出现的数量。</p><p><strong>样例输入</strong></p><p>7<br>5 4 1 2 3 6 4</p><p><strong>样例输出</strong></p><p>2</p><p><strong>评测用例规模与约定</strong></p><p>　　所有评测用例满足：1 ≤ <em>n</em> ≤ 1000，每天的销售量是不超过10000的非负整数。</p><hr><p><strong>分析：</strong></p><p>若某点的值比左右相邻点的值都大，或者都小，则该点为折点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 统计折点</span></span><br><span class="line"><span class="keyword">if</span> ((arr[i - <span class="number">1</span>] &gt; arr[i] &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>])</span><br><span class="line">|| (arr[i - <span class="number">1</span>] &lt; arr[i] &amp;&amp; arr[i] &gt; arr[i + <span class="number">1</span>])) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201609-1.最大波动</title>
      <link href="/2019/07/15/ccf-csp-20160901/"/>
      <url>/2019/07/15/ccf-csp-20160901/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　小明正在利用股票的波动程度来研究股票。小明拿到了一只股票每天收盘时的价格，他想知道，这只股票连续几天的最大波动值是多少，即在这几天中某天收盘价格与前一天收盘价格之差的绝对值最大是多少。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含了一个整数<em>n</em>，表示小明拿到的收盘价格的连续天数。<br>　　第二行包含<em>n</em>个正整数，依次表示每天的收盘价格。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示这只股票这<em>n</em>天中的最大波动值。</p><p><strong>样例输入</strong></p><p>6<br>2 5 5 7 3 5</p><p><strong>样例输出</strong></p><p>4</p><p><strong>样例说明</strong></p><p>　　第四天和第五天之间的波动最大，波动值为|3-7|=4。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，2 ≤ <em>n</em> ≤ 1000。股票每一天的价格为1到10000之间的整数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">temp = <span class="built_in">abs</span>(arr[i] - arr[i - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span> (temp &gt; result) &#123;</span><br><span class="line">result = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, result);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201612-1.中间数</title>
      <link href="/2019/07/14/ccf-csp-20161201/"/>
      <url>/2019/07/14/ccf-csp-20161201/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在一个整数序列<em>a</em>1, <em>a</em>2, …, <em>an</em>中，如果存在某个数，大于它的整数数量等于小于它的整数数量，则称其为中间数。在一个序列中，可能存在多个下标不相同的中间数，这些中间数的值是相同的。<br>　　给定一个整数序列，请找出这个整数序列的中间数的值。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含了一个整数<em>n</em>，表示整数序列中数的个数。<br>　　第二行包含<em>n</em>个正整数，依次表示<em>a</em>1, <em>a</em>2, …, <em>an</em>。</p><p><strong>输出格式</strong></p><p>　　如果约定序列的中间数存在，则输出中间数的值，否则输出-1表示不存在中间数。</p><p><strong>样例输入</strong></p><p>6<br>2 6 5 6 3 5</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　比5小的数有2个，比5大的数也有2个。</p><p><strong>样例输入</strong></p><p>4<br>3 4 6 7</p><p><strong>样例输出</strong></p><p>-1</p><p><strong>样例说明</strong></p><p>　　在序列中的4个数都不满足中间数的定义。</p><p><strong>样例输入</strong></p><p>5<br>3 4 6 6 7</p><p><strong>样例输出</strong></p><p>-1</p><p><strong>样例说明</strong></p><p>　　在序列中的5个数都不满足中间数的定义。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>ai</em> ≤ 1000。</p><hr><p><strong>方法一：暴力法</strong></p><p>双重循环，时间复杂度为O(n^2)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否存在中间数</span></span><br><span class="line"><span class="keyword">bool</span> exists = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// left为小于某数的元素个数，right为大于某数的元素个数</span></span><br><span class="line"><span class="keyword">int</span> left, right;</span><br><span class="line">left = right = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">right++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (left == right) &#123;</span><br><span class="line">exists = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重置为0</span></span><br><span class="line">left = right = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!exists) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p>先排序，然后找到中间位置mid。分别统计出左右两边与其不相等的元素个数left、right，若left等于right，则mid代表的元素为中间数；否则，不存在中间数。该方法的时间复杂度为O(n log n)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(arr, arr + n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = n / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// left为小于arr[mid]的元素个数，right为大于arr[mid]的元素个数</span></span><br><span class="line"><span class="keyword">int</span> left = mid, right = n - mid - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] != arr[mid]) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">left--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[i] != arr[mid]) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (left == right) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[mid]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1050.String Subtraction (20 分)</title>
      <link href="/2019/07/14/pat-advanced-1050/"/>
      <url>/2019/07/14/pat-advanced-1050/</url>
      
        <content type="html"><![CDATA[<p>Given two strings <em>S</em>1 and <em>S</em>2, <em>S</em>=<em>S</em>1−<em>S</em>2 is defined to be the remaining string after taking all the characters in <em>S</em>2 from <em>S</em>1. Your task is simply to calculate <em>S</em>1−<em>S</em>2 for any given strings. However, it might not be that simple to do it <strong>fast</strong>.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case consists of two lines which gives <em>S</em>1 and <em>S</em>2, respectively. The string lengths of both strings are no more than 10^4. It is guaranteed that all the characters are visible ASCII codes and white space, and a new line character signals the end of a string.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print <em>S</em>1−<em>S</em>2 in one line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">They are students.</span><br><span class="line">aeiou</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thy r stdnts.</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察哈希表的运用。</p><p>用int型数组hash表示哈希表，下标表示字符，对应的值表示该字符是否在S1中出现，默认为0，表示没有出现。</p><p>首先，遍历S1，将S1中每个字符的hash值设置为1。</p><p>然后，遍历S2中的每个字符，将其在数组hash中的值重置为0，表示在S1中减去该字符。</p><p>最后，遍历S1中的每个字符，若该字符在数组hash中的值为1，则输出该字符；否则，不输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 'z' = 122</span></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">10001</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 输入s1,将s1中每个字符的hash值均设置为1</span></span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">s1[index++] = temp;</span><br><span class="line">hash[(<span class="keyword">int</span>) temp] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">s1[index] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 凡是s2中出现的字符，其hash值均重置为0</span></span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">hash[(<span class="keyword">int</span>) temp] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[(<span class="keyword">int</span>) s1[i]] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s1[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201703-1.分蛋糕</title>
      <link href="/2019/07/14/ccf-csp-20170301/"/>
      <url>/2019/07/14/ccf-csp-20170301/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　小明今天生日，他有<em>n</em>块蛋糕要分给朋友们吃，这<em>n</em>块蛋糕（编号为1到<em>n</em>）的重量分别为<em>a</em>1, <em>a</em>2, …, <em>an</em>。小明想分给每个朋友至少重量为<em>k</em>的蛋糕。小明的朋友们已经排好队准备领蛋糕，对于每个朋友，小明总是先将自己手中编号最小的蛋糕分给他，当这个朋友所分得蛋糕的重量不到<em>k</em>时，再继续将剩下的蛋糕中编号最小的给他，直到小明的蛋糕分完或者这个朋友分到的蛋糕的总重量大于等于<em>k</em>。<br>　　请问当小明的蛋糕分完时，总共有多少个朋友分到了蛋糕。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含了两个整数<em>n</em>, <em>k</em>，意义如上所述。<br>　　第二行包含<em>n</em>个正整数，依次表示<em>a</em>1, <em>a</em>2, …, <em>an</em>。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示有多少个朋友分到了蛋糕。</p><p><strong>样例输入</strong></p><p>6 9<br>2 6 5 6 3 5</p><p><strong>样例输出</strong></p><p>3</p><p><strong>样例说明</strong></p><p>　　第一个朋友分到了前3块蛋糕，第二个朋友分到了第4、5块蛋糕，第三个朋友分到了最后一块蛋糕。</p><p><strong>评测用例规模与约定</strong></p><p>　　对于所有评测用例，1 ≤ <em>n</em> ≤ 1000，1 ≤ <em>k</em> ≤ 10000，1 ≤ <em>ai</em> ≤ 1000。</p><hr><p><strong>分析：</strong></p><p>用count表示分到蛋糕的朋友个数，weight表示分给某个朋友的蛋糕总质量，两者均初始化为0。</p><p>遍历每一块蛋糕，将重量累加到weight中，</p><p>当weight大于等于k，或者当前蛋糕是最后一块蛋糕时，count自增，weight重置为0，继续下一次循环。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="comment">// 分到蛋糕的朋友个数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> weight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">weight += arr[i];</span><br><span class="line"><span class="comment">// 若分得蛋糕的总重量大于等于k，或者当前蛋糕是最后一块蛋糕</span></span><br><span class="line"><span class="keyword">if</span> (weight &gt;= k || i == n - <span class="number">1</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">weight = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201709-1.打酱油</title>
      <link href="/2019/07/14/ccf-csp-20170901/"/>
      <url>/2019/07/14/ccf-csp-20170901/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　小明带着<em>N</em>元钱去买酱油。酱油10块钱一瓶，商家进行促销，每买3瓶送1瓶，或者每买5瓶送2瓶。请问小明最多可以得到多少瓶酱油。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数<em>N</em>，表示小明可用于买酱油的钱数。<em>N</em>是10的整数倍，<em>N</em>不超过300。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示小明最多可以得到多少瓶酱油。</p><p><strong>样例输入</strong></p><p>40</p><p><strong>样例输出</strong></p><p>5</p><p><strong>样例说明</strong></p><p>　　把40元分成30元和10元，分别买3瓶和1瓶，其中3瓶送1瓶，共得到5瓶。</p><p><strong>样例输入</strong></p><p>80</p><p><strong>样例输出</strong></p><p>11</p><p><strong>样例说明</strong></p><p>　　把80元分成30元和50元，分别买3瓶和5瓶，其中3瓶送1瓶，5瓶送2瓶，共得到11瓶。</p><p><strong>分析：</strong></p><p>买5送2，比买3送1划算。因此，尽可能把钱花在买5送2的活动上，剩下的钱继续买3送1的活动，最后才单买。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 每买5瓶送2瓶</span></span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">50</span>) &#123;</span><br><span class="line">count += (n / <span class="number">50</span>) * <span class="number">7</span>;</span><br><span class="line">n %= <span class="number">50</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每买3瓶送1瓶</span></span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">30</span>) &#123;</span><br><span class="line">count += (n / <span class="number">30</span>) * <span class="number">4</span>;</span><br><span class="line">n %= <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">count += n / <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201712-1.最小差值</title>
      <link href="/2019/07/13/ccf-csp-20171201/"/>
      <url>/2019/07/13/ccf-csp-20171201/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　给定<em>n</em>个数，请找出其中相差（差的绝对值）最小的两个数，输出它们的差值的绝对值。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入第一行包含一个整数<em>n</em>。<br>　　第二行包含<em>n</em>个正整数，相邻整数之间使用一个空格分隔。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，表示答案。</p><p><strong>样例输入</strong></p><p>5<br>1 5 4 8 20</p><p><strong>样例输出</strong></p><p>1</p><p><strong>样例说明</strong></p><p>　　相差最小的两个数是5和4，它们之间的差值是1。</p><p><strong>样例输入</strong></p><p>5<br>9 3 6 1 3</p><p><strong>样例输出</strong></p><p>0</p><p><strong>样例说明</strong></p><p>　　有两个相同的数3，它们之间的差值是0.</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，2 ≤ <em>n</em> ≤ 1000，每个给定的整数都是不超过10000的正整数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> span = <span class="number">10000</span>, temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">temp = <span class="built_in">abs</span>(arr[i] - arr[j]);</span><br><span class="line"><span class="keyword">if</span> (temp &lt; span) &#123;</span><br><span class="line">span = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, span);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1041.Be Unique (20 分)</title>
      <link href="/2019/07/13/pat-advanced-1041/"/>
      <url>/2019/07/13/pat-advanced-1041/</url>
      
        <content type="html"><![CDATA[<p>Being unique is so important to people on Mars that even their lottery is designed in a unique way. The rule of winning is simple: one bets on a number chosen from [1,10^4]. The first one who bets on a unique number wins. For example, if there are 7 people betting on { 5 31 5 88 67 88 17 }, then the second one who bets on 31 wins.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a line which begins with a positive integer <em>N</em> (≤10^5) and then followed by <em>N</em> bets. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the winning number in a line. If there is no winner, print <code>None</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7 5 31 5 88 67 88 17</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 888 666 666 888 888</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">None</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个数，输出第一个不重复的数字。若不存在这样的数字，则输出<code>None</code>。</p><p><strong>思路：</strong>本题考察哈希表的运用。</p><p>用数组hash表示哈希表，下标表示待输入的数，取值范围为[1,10^4]，对应值为该数出现的次数，初始值为0。</p><p>设置bool型变量exists，表示是否存在不重复的数字，初始值为false。</p><p>对输入的N个数执行两次遍历，第一次遍历，统计每个数出现的次数；第二次遍历，寻找第一个出现次数为1的数字并输出。若存在这样的数字，则将exists设置为true。</p><p>第二次遍历结束以后，若exists仍为false，表示不存在这样的数字，则输出<code>None</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">10001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> data[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data[i]);</span><br><span class="line">hash[data[i]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否存在赢家</span></span><br><span class="line"><span class="keyword">bool</span> exists = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[data[i]] == <span class="number">1</span>) &#123;</span><br><span class="line">exists = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, data[i]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!exists) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"None\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201809-1.卖菜</title>
      <link href="/2019/07/12/ccf-csp-20180901/"/>
      <url>/2019/07/12/ccf-csp-20180901/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　在一条街上有n个卖菜的商店，按1至n的顺序排成一排，这些商店都卖一种蔬菜。<br>　　第一天，每个商店都自己定了一个价格。店主们希望自己的菜价和其他商店的一致，第二天，每一家商店都会根据他自己和相邻商店的价格调整自己的价格。具体的，每家商店都会将第二天的菜价设置为自己和相邻商店第一天菜价的平均值（用去尾法取整）。<br>　　注意，编号为1的商店只有一个相邻的商店2，编号为n的商店只有一个相邻的商店n-1，其他编号为i的商店有两个相邻的商店i-1和i+1。<br>　　给定第一天各个商店的菜价，请计算第二天每个商店的菜价。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含一个整数n，表示商店的数量。<br>　　第二行包含n个整数，依次表示每个商店第一天的菜价。</p><p><strong>输出格式</strong></p><p>　　输出一行，包含n个正整数，依次表示每个商店第二天的菜价。</p><p><strong>样例输入</strong></p><p>8<br>4 1 3 1 6 5 17 9</p><p><strong>样例输出</strong></p><p>2 2 1 3 4 9 10 13</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，2 ≤ n ≤ 1000，第一天每个商店的菜价为不超过10000的正整数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算第二天的菜价</span></span><br><span class="line"><span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">price = (arr[i] + arr[i + <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == n - <span class="number">1</span>) &#123;</span><br><span class="line">price = (arr[i] + arr[i - <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">price = (arr[i - <span class="number">1</span>] + arr[i] + arr[i + <span class="number">1</span>]) / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201812-1.小明上学</title>
      <link href="/2019/07/12/ccf-csp-20181201/"/>
      <url>/2019/07/12/ccf-csp-20181201/</url>
      
        <content type="html"><![CDATA[<p><strong>题目背景</strong></p><p>　　小明是汉东省政法大学附属中学的一名学生，他每天都要骑自行车往返于家和学校。为了能尽可能充足地睡眠，他希望能够预计自己上学所需要的时间。他上学需要经过数段道路，相邻两段道路之间设有至多一盏红绿灯。<br>　　京州市的红绿灯是这样工作的：每盏红绿灯有红、黄、绿三盏灯和一个能够显示倒计时的显示牌。假设红绿灯被设定为红灯 r 秒，黄灯 y 秒，绿灯 g 秒，那么从 0 时刻起，[0,r) 秒内亮红灯，车辆不许通过；[r, r+g) 秒内亮绿灯，车辆允许通过；[r+g, r+g+y) 秒内亮黄灯，车辆不许通过，然后依次循环。倒计时的显示牌上显示的数字 l（l &gt; 0）是指距离下一次信号灯变化的秒数。</p><a id="more"></a><p><strong>问题描述</strong></p><p>　　一次上学的路上，小明记录下了经过每段路的时间，和各个红绿灯在小明到达路口时的颜色和倒计时秒数。希望你帮忙计算此次小明上学所用的时间。</p><p><strong>输入格式</strong></p><p>　　输入的第一行包含空格分隔的三个正整数 r、y、g，表示红绿灯的设置。这三个数均不超过 10^6。<br>　　输入的第二行包含一个正整数 n（n ≤ 100），表示小明总共经过的道路段数和看到的红绿灯数目。<br>　　接下来的 n 行，每行包含空格分隔的两个整数 k、t。k=0 表示经过了一段道路，耗时 t 秒，此处 t 不超过 10^6；k=1、2、3 时，分别表示看到了一个红灯、黄灯、绿灯，且倒计时显示牌上显示的数字是 t，此处 t 分别不会超过 r、y、g。</p><p><strong>输出格式</strong></p><p>　　输出一个数字，表示此次小明上学所用的时间。</p><p><strong>样例输入</strong></p><p>30 3 30<br>8<br>0 10<br>1 5<br>0 11<br>2 2<br>0 6<br>0 3<br>3 10<br>0 3</p><p><strong>样例输出</strong></p><p>70</p><p><strong>样例说明</strong></p><p>　　小明先经过第一段道路，用时 10 秒，然后等待 5 秒的红灯，再经过第二段道路，用时 11 秒，然后等待 2 秒的黄灯和 30 秒的红灯，再经过第三段、第四段道路，分别用时6、3秒，然后通过绿灯，再经过最后一段道路，用时 3 秒。共计 10 + 5 + 11 + 2 + 30 + 6 + 3 + 3=70 秒。</p><p><strong>评测用例规模与约定</strong></p><p>　　测试点 1, 2 中不存在任何信号灯。<br>　　测试点 3, 4 中所有的信号灯在被观察时均为绿灯。<br>　　测试点 5, 6 中所有的信号灯在被观察时均为红灯。<br>　　测试点 7, 8 中所有的信号灯在被观察时均为黄灯。<br>　　测试点 9, 10 中将出现各种可能的情况。</p><p><strong>分析：</strong></p><p>红绿灯的变换顺序为：红-&gt;绿-&gt;黄-&gt;红…</p><p>因此，每当遇到黄灯时，需要额外加上一个红灯的时间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> r, y, g;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;y, &amp;g);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k, t, time = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红绿灯变色顺序：红-&gt;绿-&gt;黄-&gt;红</span></span><br><span class="line"><span class="comment">// k=1、2、3，表示红、黄、绿</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;k, &amp;t);</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">0</span> || k == <span class="number">1</span> || k == <span class="number">2</span>) &#123;</span><br><span class="line">time += t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (k == <span class="number">2</span>) &#123;</span><br><span class="line">time += r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, time);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1047.编程团体赛 (20 分)</title>
      <link href="/2019/07/11/pat-basic-1047/"/>
      <url>/2019/07/11/pat-basic-1047/</url>
      
        <content type="html"><![CDATA[<p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。</p><p>现给定所有队员的比赛成绩，请你编写程序找出冠军队。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 <em>N</em>（≤10^4），即所有参赛队员总数。随后 <em>N</em> 行，每行给出一位队员的成绩，格式为：<code>队伍编号-队员编号 成绩</code>，其中<code>队伍编号</code>为 1 到 1000 的正整数，<code>队员编号</code>为 1 到 10 的正整数，<code>成绩</code>为 0 到 100 的整数。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3-10 99</span><br><span class="line">11-5 87</span><br><span class="line">102-1 0</span><br><span class="line">102-3 100</span><br><span class="line">11-9 89</span><br><span class="line">3-2 61</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 176</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察的是哈希表的应用。</p><p>用数组hash表示哈希表，其下标表示队伍编号，对应的值为该队伍的比赛成绩，初始值为0。</p><p>遍历输入的N个参赛队员及其成绩score，将该成绩累加到该队员所在队伍的比赛成绩中。</p><p>然后，遍历数组hash，寻找其中比赛成绩最高的队伍，输出其队伍编号和总成绩。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, teamNo, peopleNo, score;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">1001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d-%d %d"</span>, &amp;teamNo, &amp;peopleNo, &amp;score);</span><br><span class="line">hash[teamNo] += score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> maxIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1001</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[i] &gt; hash[maxIndex]) &#123;</span><br><span class="line">maxIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, maxIndex, hash[maxIndex]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1043.输出PATest (20 分)</title>
      <link href="/2019/07/11/pat-basic-1043/"/>
      <url>/2019/07/11/pat-basic-1043/</url>
      
        <content type="html"><![CDATA[<p>给定一个长度不超过 10^4 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 <code>PATestPATest....</code> 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个长度不超过 10^4 的、仅由英文字母构成的非空字符串。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redlesPayBestPATTopTeePHPereatitAPPT</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PATestPATestPTetPTePePee</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察哈希表的简单运用。</p><p>用数组hash表示哈希表，其下标表示字母，对应的值表示该字母的出现次数。</p><p>设置一个bool型变量flag，标记是否还需要输出，默认为true。</p><p>然后，循环执行如下操作：</p><p>按照<code>PATest</code>的顺序，输出对应的字母，并减少其在hash中的值。若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。</p><p>当<code>PATest</code>这六个字母在数组hash中的值全为0时，表示不再需要输出，flag设置为false，循环结束。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">hash[temp]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">7</span>] = &#123; <span class="string">'P'</span>, <span class="string">'A'</span>, <span class="string">'T'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'t'</span> &#125;;</span><br><span class="line"><span class="comment">// flag表示是否还有字符可以输出</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (flag) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[arr[i]] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, arr[i]);</span><br><span class="line">hash[arr[i]]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否所有的字符都已被输出</span></span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[arr[i]] != <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1042.字符统计 (20 分)</title>
      <link href="/2019/07/11/pat-basic-1042/"/>
      <url>/2019/07/11/pat-basic-1042/</url>
      
        <content type="html"><![CDATA[<p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a simple TEST.  There ARE numbers and other symbols 1&amp;2&amp;3...........</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e 7</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察哈希表的应用。</p><p>用数组hash表示哈希表，其下标表示字母，对应值为该字母出现的次数，初始值为0。</p><p>遍历输入字符串中的每一个字符，当该字符为小写字母时，其在hash中的值加一；若为大写字母，则其小写形式的hash值加一。</p><p>最后，遍历数组hash，输出其中的最大值及其对应的最小下标（字母序最小的那个字母）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="comment">// 'z' = 122</span></span><br><span class="line"><span class="keyword">char</span> hash[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= temp &amp;&amp; temp &lt;= <span class="string">'Z'</span>) &#123;</span><br><span class="line">hash[temp + <span class="number">32</span>]++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'a'</span> &lt;= temp &amp;&amp; temp &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">hash[(<span class="keyword">int</span>) temp]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">97</span>; i &lt; <span class="number">123</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (hash[i] &gt; count) &#123;</span><br><span class="line">temp = i;</span><br><span class="line">count = hash[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %d\n"</span>, temp, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201903-1.小中大</title>
      <link href="/2019/07/09/ccf-csp-20190301/"/>
      <url>/2019/07/09/ccf-csp-20190301/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/ccf-csp-20190301-01.png" alt="图片1"></p><a id="more"></a><p><img src="/static/images/ccf-csp-20190301-02.png" alt="图片2"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输入的数据是否为升序</span></span><br><span class="line"><span class="keyword">bool</span> asc = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 最大值</span></span><br><span class="line"><span class="keyword">if</span> (arr[n - <span class="number">1</span>] &gt; arr[<span class="number">0</span>]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[n - <span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">asc = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中位数</span></span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> ((arr[n / <span class="number">2</span> - <span class="number">1</span>] + arr[n / <span class="number">2</span>]) % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, (arr[n / <span class="number">2</span> - <span class="number">1</span>] + arr[n / <span class="number">2</span>]) / <span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f "</span>, (arr[n / <span class="number">2</span> - <span class="number">1</span>] + arr[n / <span class="number">2</span>]) / <span class="number">2.0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr[n / <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最小值</span></span><br><span class="line"><span class="keyword">if</span> (asc) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[<span class="number">0</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, arr[n - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1039.到底买不买 (20 分)</title>
      <link href="/2019/07/07/pat-basic-1039/"/>
      <url>/2019/07/07/pat-basic-1039/</url>
      
        <content type="html"><![CDATA[<p>小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。</p><a id="more"></a><p>为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。</p><p><img src="/static/images/pat-basic-1039.jpg" alt=""></p><p>图 1</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>如果可以买，则在一行中输出 <code>Yes</code> 以及有多少多余的珠子；如果不可以买，则在一行中输出 <code>No</code> 以及缺了多少珠子。其间以 1 个空格分隔。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ppRYYGrrYBR2258</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Yes 8</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ppRYYGrrYB225</span><br><span class="line">YrR8RrY</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No 2</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察的是<strong>哈希表</strong>的使用。</p><ul><li>变量设置</li></ul><p>使用数组hash表示哈希表，其下标表示某字符，值表示该字符出现的次数。</p><p>bool型变量absent，表示是否缺少珠子，初始化为false。</p><p>int型变量count，表示缺少或多出的珠子的个数，初始化为0。</p><ul><li>思路</li></ul><p>首先，使用数组hash统计出摊主的珠串中各字符出现的次数。</p><p>然后，遍历小红想做的珠串，判断每个字符（这里用temp表示）在hash中的值，</p><p>若hash[temp]==0，则表示缺少该字符，count自增，absent设置为true；否则，<code>hash[temp]--</code>。</p><p>最后，判断absent是否为true，若absent == true，则输出<code>No</code>和缺少的珠子个数count；</p><p>否则，输出<code>Yes</code>和多出的珠子个数。此时数组hash中所有值之和，即为多出的珠子个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="comment">// 'z' = 122</span></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">hash[temp]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 是否缺少珠子</span></span><br><span class="line"><span class="keyword">bool</span> absent = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 统计多出或者缺少的珠子个数</span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line"><span class="comment">// 没有某颗珠子</span></span><br><span class="line"><span class="keyword">if</span> (hash[temp] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 统计缺少珠子的个数</span></span><br><span class="line">count++;</span><br><span class="line">absent = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hash[temp]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (absent) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes "</span>);</span><br><span class="line"><span class="comment">// 计算多余珠子的个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">123</span>; i++) &#123;</span><br><span class="line">count += hash[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1038.统计同成绩学生 (20 分)</title>
      <link href="/2019/07/07/pat-basic-1038/"/>
      <url>/2019/07/07/pat-basic-1038/</url>
      
        <content type="html"><![CDATA[<p>本题要求读入 <em>N</em> 名学生的成绩，将获得某一给定分数的学生人数输出。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行给出不超过 10^5 的正整数 <em>N</em>，即学生总人数。随后一行给出 <em>N</em> 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 <em>K</em>（不超过 <em>N</em> 的正整数），随后是 <em>K</em> 个分数，中间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">60 75 90 55 75 99 82 90 75 50</span><br><span class="line">3 75 90 88</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2 0</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题考察的是<strong>哈希表</strong>的运用。</p><p>数组hash表示哈希表，其下标为分数，值为得分等于该分数的学生人数。</p><p>首先，遍历所有学生的得分，用数组hash统计各分数的出现次数。</p><p>然后，输出待查询的分数在数组hash中的值即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, score;</span><br><span class="line"><span class="comment">// 下标表示分数，值表示该分数出现的次数</span></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">101</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score);</span><br><span class="line">hash[score]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;score);</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, hash[score]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1033.旧键盘打字 (20 分)</title>
      <link href="/2019/07/05/pat-basic-1033/"/>
      <url>/2019/07/05/pat-basic-1033/</url>
      
        <content type="html"><![CDATA[<p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10^5 个字符的串。可用的字符包括字母 [<code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>]、数字 <code>0</code>-<code>9</code>、以及下划线 <code>_</code>（代表空格）、<code>,</code>、<code>.</code>、<code>-</code>、<code>+</code>（代表上档键）。题目保证第 2 行输入的文字串非空。</p><p>注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7+IE.</span><br><span class="line">7_This_is_a_test.</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_hs_s_a_tst</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>采用<strong>哈希表</strong>。数组hash以字符为下标，初始值均赋为0。对坏掉的那些键，更新其值为1。</p><p>遍历应该输入的文字时，若对应字符在数组hash中的值为1，则表示该键坏掉了；若为0，则表示该键没坏，输出该字符。</p><p><strong>如果上档键坏掉了，那么大写的英文字母无法被打出</strong>。因此，若当前字符为大写字母，则需要判断上档键是否坏掉。若上档键没坏，则输出该字符；否则，不输出。</p><p>由于<strong>英文字母的坏键以大写给出</strong>，因此，若当前字符为小写字母，则应判断其大写形式在hash中的值是否为1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isNotBroken</span><span class="params">(<span class="keyword">int</span> hash[], <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 若上档键坏了，那么大写的英文字母不能输出。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'Z'</span> &amp;&amp; hash[<span class="string">'+'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">c -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash[c] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 'z'=122</span></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理坏掉的键，更新其值为1</span></span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">hash[temp] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理应该输入的文字</span></span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line"><span class="comment">// 若当前键没坏，则输出</span></span><br><span class="line"><span class="keyword">if</span> (isNotBroken(hash, temp)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1029.旧键盘/PAT甲级 1084.Broken Keyboard (20 分)</title>
      <link href="/2019/07/03/pat-basic-1029/"/>
      <url>/2019/07/03/pat-basic-1029/</url>
      
        <content type="html"><![CDATA[<p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 <code>_</code>（代表空格）组成。题目保证 2 个字符串均非空。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7_This_is_a_test</span><br><span class="line">_hs_s_a_es</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7TI</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>设应该输入的文字为s1，实际被输入的文字为s2。</p><p>使用<strong>哈希表</strong>hash（用数组表示），记录下s1中各字符的出现次数。数组hash以字符为下标，出现次数为值。</p><p>由于小写字母<code>z</code>的ASCII码值为122，因此，数组hash的长度应申明为123。</p><p>然后，遍历s2，对数组hash中相应字符的出现次数，执行自减操作。</p><p>最后，遍历s1，若当前字符c在数组hash中的值大于0，则输出该字符。</p><p>由于题目要求<strong>相同字符只输出一次</strong>，因此，输出字符c后，其在数组hash中的值应赋值为0，即<code>hash[c]=0</code>。</p><p><strong>需要注意的地方：</strong>英文字母只输出大写。因此，在遍历s1（s2）时，若为小写字母，则增加（减少）其大写字母的出现次数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">is_lower</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'a'</span> &lt;= c &amp;&amp; c &lt;= <span class="string">'z'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getline</span><span class="params">(<span class="keyword">char</span> s[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> temp;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((temp = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">s[index++] = temp;</span><br><span class="line">&#125;</span><br><span class="line">s[index] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">81</span>], s2[<span class="number">81</span>];</span><br><span class="line">getline(s1);</span><br><span class="line"><span class="comment">// 'z'=122</span></span><br><span class="line"><span class="keyword">int</span> hash[<span class="number">123</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(s1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (is_lower(s1[i])) &#123;</span><br><span class="line">hash[s1[i] - <span class="number">32</span>]++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hash[s1[i]]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">getline(s2);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s2); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (is_lower(s2[i])) &#123;</span><br><span class="line">hash[s2[i] - <span class="number">32</span>]--;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">hash[s2[i]]--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len1; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (is_lower(s1[i])) &#123;</span><br><span class="line">c = s1[i] - <span class="number">32</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = s1[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (hash[c] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line"><span class="comment">// 相同字符只输出一次</span></span><br><span class="line">hash[c] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在MacOS中配置MySQL</title>
      <link href="/2019/07/01/macos-mysql-installation/"/>
      <url>/2019/07/01/macos-mysql-installation/</url>
      
        <content type="html"><![CDATA[<p>“好记性不如烂笔头。”这里，记录下我在MacOS中安装MySQL的过程。</p><a id="more"></a><p>1.下载及安装</p><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>默认安装路径为<code>/usr/local/mysql</code></p><p>2.启动服务</p><p>在系统偏好设置中，查看MySQL服务是否启动，如果没有启动，则启动服务。</p><p><img src="/static/images/macos-mysql-installation-1.png" alt="图片1"></p><p><img src="/static/images/macos-mysql-installation-2.png" alt="图片2"></p><p>3.配置环境变量</p><p>由于没有配置环境变量，此时，若在终端输入<code>mysql</code>，将找不到命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hgs:bin hegongshan$ mysql</span><br><span class="line">-bash: mysql: command not found</span><br></pre></td></tr></table></figure><p>修改～/.bash_profile文件，在其中添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mysql</span></span><br><span class="line">PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure><p>然后，在终端中输入如下命令，使刚才的配置生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4.检查配置是否成功</p><p>在终端中尝试输出mysql的版本号，检查配置是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hgs:bin hegongshan$ mysql --version</span><br><span class="line">mysql  Ver 8.0.16 for macos10.14 on x86_64 (MySQL Community Server - GPL)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1080.Graduate Admission (30 分)</title>
      <link href="/2019/06/30/pat-advanced-1080/"/>
      <url>/2019/06/30/pat-advanced-1080/</url>
      
        <content type="html"><![CDATA[<p>It is said that in 2011, there are about 100 graduate schools ready to proceed over 40,000 applications in Zhejiang Province. It would help a lot if you could write a program to automate the admission procedure.</p><p>Each applicant will have to provide two grades: the national entrance exam grade $G_E​$, and the interview grade $G_I​$. The final grade of an applicant is ($G_E​$+$G_I​$)/2. The admission rules are:</p><ul><li>The applicants are ranked according to their final grades, and will be admitted one by one from the top of the rank list.</li><li>If there is a tied final grade, the applicants will be ranked according to their national entrance exam grade $G_E​$. If still tied, their ranks must be the same.</li><li>Each applicant may have <em>K</em> choices and the admission will be done according to his/her choices: if according to the rank list, it is one’s turn to be admitted; and if the quota of one’s most preferred shcool is not exceeded, then one will be admitted to this school, or one’s other choices will be considered one by one in order. If one gets rejected by all of preferred schools, then this unfortunate applicant will be rejected.</li><li>If there is a tied rank, and if the corresponding applicants are applying to the same school, then that school must admit all the applicants with the same rank, <strong>even if its quota will be exceeded</strong>.</li></ul><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case.</p><p>Each case starts with a line containing three positive integers: <em>N</em> (≤40,000), the total number of applicants; <em>M</em> (≤100), the total number of graduate schools; and <em>K</em> (≤5), the number of choices an applicant may have.</p><p>In the next line, separated by a space, there are <em>M</em> positive integers. The <em>i</em>-th integer is the quota of the <em>i</em>-th graduate school respectively.</p><p>Then <em>N</em> lines follow, each contains 2+<em>K</em> integers separated by a space. The first 2 integers are the applicant’s $G_E​$ and $G_I​$, respectively. The next <em>K</em> integers represent the preferred schools. For the sake of simplicity, we assume that the schools are numbered from 0 to <em>M</em>−1, and the applicants are numbered from 0 to <em>N</em>−1.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the admission results for all the graduate schools. The results of each school must occupy a line, which contains the applicants’ numbers that school admits. The numbers must be in increasing order and be separated by a space. There must be no extra space at the end of each line. If no applicant is admitted by a school, you must output an empty line correspondingly.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">11 6 3</span><br><span class="line">2 1 2 2 2 3</span><br><span class="line">100 100 0 1 2</span><br><span class="line">60 60 2 3 5</span><br><span class="line">100 90 0 3 4</span><br><span class="line">90 100 1 2 0</span><br><span class="line">90 90 5 1 3</span><br><span class="line">80 90 1 0 2</span><br><span class="line">80 80 0 1 2</span><br><span class="line">80 80 0 1 2</span><br><span class="line">80 70 1 3 2</span><br><span class="line">70 80 1 2 3</span><br><span class="line">100 100 0 2 4</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 10</span><br><span class="line">3</span><br><span class="line">5 6 7</span><br><span class="line">2 8</span><br><span class="line"></span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个考生、M个学校，每个考生可以填报K个学校。</p><p>每个考生的成绩由两部分组成：国家入学考试成绩$G_E$和面试成绩$G_I$，最终成绩为($G_E$+$G_I$)/2。</p><p>按照他们的最终成绩从高到低排序，依次进入录取程序。</p><p>若最终成绩相同，则按照$G_E$从高到低排序。若$G_E$也相同，则排名相同。</p><p>若考生当前志愿学校尚未招满，则考生被录取。否则，依次考虑其他志愿。此外，若当前考生与该校上一个录取的学生排名相同，即使招生计划已满，考生也会被录取。</p><p>最后，输出各校的录取名单，各校录取名单按照学生编号从小到大排序。若某校未录取任何考生，则输出空行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id, rank;</span><br><span class="line"><span class="comment">// 成绩</span></span><br><span class="line"><span class="keyword">int</span> gExam, gInterview, gFinal;</span><br><span class="line"><span class="comment">// 报考院校</span></span><br><span class="line"><span class="keyword">int</span> preferred[<span class="number">5</span>];</span><br><span class="line">&#125; Applicant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node2</span> &#123;</span></span><br><span class="line"><span class="comment">// 计划招生数</span></span><br><span class="line"><span class="keyword">int</span> quota;</span><br><span class="line"><span class="comment">// 上一次录取的学生下标</span></span><br><span class="line"><span class="keyword">int</span> last;</span><br><span class="line"><span class="comment">// 录取名单（学生的编号）</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; admission;</span><br><span class="line">&#125; School;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Applicant a, Applicant b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.gFinal != b.gFinal) &#123;</span><br><span class="line"><span class="keyword">return</span> a.gFinal &gt; b.gFinal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.gExam &gt; b.gExam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">Applicant applicant[n];</span><br><span class="line">School schools[m];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;schools[i].quota);</span><br><span class="line">schools[i].last = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">applicant[i].id = i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;applicant[i].gExam, &amp;applicant[i].gInterview);</span><br><span class="line">applicant[i].gFinal = (applicant[i].gExam + applicant[i].gInterview) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;applicant[i].preferred[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排名</span></span><br><span class="line">sort(applicant, applicant + n, cmp);</span><br><span class="line">applicant[<span class="number">0</span>].rank = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (applicant[i].gFinal == applicant[i - <span class="number">1</span>].gFinal</span><br><span class="line">&amp;&amp; applicant[i].gExam == applicant[i - <span class="number">1</span>].gExam) &#123;</span><br><span class="line">applicant[i].rank = applicant[i - <span class="number">1</span>].rank;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">applicant[i].rank = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 录取过程</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> index = applicant[i].preferred[j];</span><br><span class="line"><span class="keyword">int</span> last = schools[index].last;</span><br><span class="line"><span class="keyword">int</span> size = schools[index].admission.size();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若尚未招满，或者当前学生与上一个录取的学生排名相同</span></span><br><span class="line"><span class="keyword">if</span> (schools[index].quota &gt; size</span><br><span class="line">|| (last != <span class="number">-1</span> &amp;&amp; applicant[last].rank == applicant[i].rank)) &#123;</span><br><span class="line">schools[index].admission.push_back(applicant[i].id);</span><br><span class="line">schools[index].last = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出录取结果</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> size = schools[i].admission.size();</span><br><span class="line"><span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sort(schools[i].admission.begin(), schools[i].admission.end());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; size; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, schools[i].admission[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1083.List Grades (25 分)</title>
      <link href="/2019/06/28/pat-advanced-1083/"/>
      <url>/2019/06/28/pat-advanced-1083/</url>
      
        <content type="html"><![CDATA[<p>Given a list of <em>N</em> student records with name, ID and grade. You are supposed to sort the records with respect to the grade in non-increasing order, and output those student records of which the grades are in a given interval.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case is given in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N</span><br><span class="line">name[1] ID[1] grade[1]</span><br><span class="line">name[2] ID[2] grade[2]</span><br><span class="line">... ...</span><br><span class="line">name[N] ID[N] grade[N]</span><br><span class="line">grade1 grade2</span><br></pre></td></tr></table></figure><p>where <code>name[i]</code> and <code>ID[i]</code> are strings of no more than 10 characters with no space, <code>grade[i]</code> is an integer in [0, 100], <code>grade1</code> and <code>grade2</code> are the boundaries of the grade’s interval. It is guaranteed that all the grades are <strong>distinct</strong>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the student records of which the grades are in the given interval [<code>grade1</code>, <code>grade2</code>] and are in non-increasing order. Each student record occupies a line with the student’s name and ID, separated by one space. If there is no student’s grade in that interval, output <code>NONE</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">Tom CS000001 59</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br><span class="line">60 100</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Mary EE990830</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">Jean AA980920 60</span><br><span class="line">Ann CS01 80</span><br><span class="line">90 95</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NONE</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个学生的姓名name、ID和成绩grade，以及成绩范围[grade1,grade2]。</p><p>先按照成绩从高到低排序，然后输出成绩在[grade1,grade2]内的学生的姓名和ID。</p><p>若没有一个学生的成绩在给定的范围内，则输出<code>NONE</code>。        </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">11</span>], id[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125; Student;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.grade &gt; b.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, low, high;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">Student stu[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s %d"</span>, stu[i].name, stu[i].id, &amp;stu[i].grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;low, &amp;high);</span><br><span class="line"></span><br><span class="line">sort(stu, stu + n, cmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否存在满足条件的学生</span></span><br><span class="line"><span class="keyword">bool</span> exist = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt;= stu[i].grade &amp;&amp; stu[i].grade &lt;= high) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, stu[i].name, stu[i].id);</span><br><span class="line">exist = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!exist) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NONE\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1075.PAT Judge (25 分)</title>
      <link href="/2019/06/28/pat-advanced-1075/"/>
      <url>/2019/06/28/pat-advanced-1075/</url>
      
        <content type="html"><![CDATA[<p>The ranklist of PAT is generated from the status list, which shows the scores of the submissions. This time you are supposed to generate the ranklist for PAT.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 3 positive integers, <em>N</em> (≤10^4), the total number of users, <em>K</em> (≤5), the total number of problems, and <em>M</em> (≤10^5), the total number of submissions. It is then assumed that the user id’s are 5-digit numbers from 00001 to <em>N</em>, and the problem id’s are from 1 to <em>K</em>. The next line contains <em>K</em> positive integers <code>p[i]</code> (<code>i</code>=1, …, <em>K</em>), where <code>p[i]</code> corresponds to the full mark of the i-th problem. Then <em>M</em> lines follow, each gives the information of a submission in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_id problem_id partial_score_obtained</span><br></pre></td></tr></table></figure><p>where <code>partial_score_obtained</code> is either −1 if the submission cannot even pass the compiler, or is an integer in the range [0, <code>p[problem_id]</code>]. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you are supposed to output the ranklist in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rank user_id total_score s[1] ... s[K]</span><br></pre></td></tr></table></figure><p>where <code>rank</code> is calculated according to the <code>total_score</code>, and all the users with the same <code>total_score</code> obtain the same <code>rank</code>; and <code>s[i]</code> is the partial score obtained for the <code>i</code>-th problem. If a user has never submitted a solution for a problem, then “-“ must be printed at the corresponding position. If a user has submitted several solutions to solve one problem, then the highest score will be counted.</p><p>The ranklist must be printed in non-decreasing order of the ranks. For those who have the same rank, users must be sorted in nonincreasing order according to the number of perfectly solved problems. And if there is still a tie, then they must be printed in increasing order of their id’s. For those who has never submitted any solution that can pass the compiler, or has never submitted any solution, they must NOT be shown on the ranklist. It is guaranteed that at least one user can be shown on the ranklist.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">7 4 20</span><br><span class="line">20 25 25 30</span><br><span class="line">00002 2 12</span><br><span class="line">00007 4 17</span><br><span class="line">00005 1 19</span><br><span class="line">00007 2 25</span><br><span class="line">00005 1 20</span><br><span class="line">00002 2 2</span><br><span class="line">00005 1 15</span><br><span class="line">00001 1 18</span><br><span class="line">00004 3 25</span><br><span class="line">00002 2 25</span><br><span class="line">00005 3 22</span><br><span class="line">00006 4 -1</span><br><span class="line">00001 2 18</span><br><span class="line">00002 1 20</span><br><span class="line">00004 1 15</span><br><span class="line">00002 4 18</span><br><span class="line">00001 3 4</span><br><span class="line">00001 4 2</span><br><span class="line">00005 2 -1</span><br><span class="line">00004 2 0</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1 00002 63 20 25 - 18</span><br><span class="line">2 00005 42 20 0 22 -</span><br><span class="line">2 00007 42 - 25 - 17</span><br><span class="line">2 00001 42 18 18 4 2</span><br><span class="line">5 00004 40 15 0 25 -</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个用户、K个题目的满分以及M次提交，其中每次提交包含用户的ID、题号及相应的得分。</p><p>每道题用户可能会提交多次，因此，只记录其最高得分。</p><p>然后，按照总分从高到低排序，若总分相同，则按照获得满分的题目个数从大到小排序；若前两者均相等，则按照用户ID从小到大排序，输出排序后的排名信息。</p><p>若某用户从未提交过代码，或者没有能通过编译的提交，则该用户不出现在最后的排名中。</p><p><strong>需要注意的地方：</strong></p><p>1.题目给出的<code>user_id</code>和<code>problem_id</code>均从1开始；</p><p>2.编译不通过时，<code>partial_score_obtained</code>给出的结果为-1，但得分为0；</p><p>3.用户每个题目的得分，只记录最高分；</p><p>4.计算用户获得满分的题目个数时，需要考虑到同一道题用户可能会多次获得满分；</p><p>5.若某题用户未提交过，则该题的得分为<code>-</code>；</p><p>6.若某用户从未提交过代码，或者没有能通过编译的提交，则该用户不需要输出。</p><p><strong>坑点：</strong>用户id需要提前初始化，否则，无法通过最后一个测试点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> rank, id;</span><br><span class="line"><span class="keyword">int</span> totalScore;</span><br><span class="line"><span class="comment">// solve表示获得满分的题目个数</span></span><br><span class="line"><span class="keyword">int</span> solve;</span><br><span class="line"><span class="comment">// 数组的值，-2表示未提交，-1表示编译错误</span></span><br><span class="line"><span class="keyword">int</span> s[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 是否参加排名</span></span><br><span class="line"><span class="keyword">bool</span> status;</span><br><span class="line">&#125; User;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(User a, User b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.totalScore != b.totalScore) &#123;</span><br><span class="line"><span class="keyword">return</span> a.totalScore &gt; b.totalScore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a.solve != b.solve) &#123;</span><br><span class="line"><span class="keyword">return</span> a.solve &gt; b.solve;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"><span class="keyword">int</span> p[k];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User user[n];</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">user[i].id = i;</span><br><span class="line">user[i].rank = <span class="number">0</span>;</span><br><span class="line">user[i].totalScore = <span class="number">0</span>;</span><br><span class="line">user[i].solve = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line"><span class="comment">// -2表示未提交</span></span><br><span class="line">user[i].s[j] = <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">user[i].status = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> userId, problemId, score;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;userId, &amp;problemId, &amp;score);</span><br><span class="line">userId--;</span><br><span class="line">problemId--;</span><br><span class="line"></span><br><span class="line">user[userId].id = userId + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (score &gt; user[userId].s[problemId]) &#123;</span><br><span class="line"><span class="comment">// 当提交结果，编译通过时</span></span><br><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 计算用户的总分</span></span><br><span class="line">user[userId].totalScore += score;</span><br><span class="line"><span class="keyword">if</span> (user[userId].s[problemId] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">user[userId].totalScore -= user[userId].s[problemId];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 至少有一次编译通过，则参加排名</span></span><br><span class="line">user[userId].status = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算用户得满分的题目个数，score &gt; user[userId].s[problemId]保证solve不会重复累加</span></span><br><span class="line"><span class="keyword">if</span> (score == p[problemId]) &#123;</span><br><span class="line">user[userId].solve++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新题目的最高得分</span></span><br><span class="line">user[userId].s[problemId] = score;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排名</span></span><br><span class="line">sort(user, user + n, cmp);</span><br><span class="line">user[<span class="number">0</span>].rank = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (user[i].totalScore == user[i - <span class="number">1</span>].totalScore) &#123;</span><br><span class="line">user[i].rank = user[i - <span class="number">1</span>].rank;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">user[i].rank = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; user[i].status; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %05d %d"</span>, user[i].rank, user[i].id, user[i].totalScore);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line"><span class="comment">// 该题未提交</span></span><br><span class="line"><span class="keyword">if</span> (user[i].s[j] == <span class="number">-2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" -"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (user[i].s[j] == <span class="number">-1</span>) &#123; <span class="comment">// 提交过，但编译错误</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 0"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, user[i].s[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1055.The World&#39;s Richest (25 分)</title>
      <link href="/2019/06/26/pat-advanced-1055/"/>
      <url>/2019/06/26/pat-advanced-1055/</url>
      
        <content type="html"><![CDATA[<p>Forbes magazine publishes every year its list of billionaires based on the annual ranking of the world’s wealthiest people. Now you are supposed to simulate this job, but concentrate only on the people in a certain range of ages. That is, given the net worths of <em>N</em>people, you must find the <em>M</em> richest people in a given range of their ages.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 2 positive integers: <em>N</em> (≤10^5) - the total number of people, and <em>K</em> (≤10^3) - the number of queries. Then <em>N</em> lines follow, each contains the name (string of no more than 8 characters without space), age (integer in (0, 200]), and the net worth (integer in [−10^6,10^6]) of a person. Finally there are <em>K</em> lines of queries, each contains three positive integers: <em>M</em> (≤100) - the maximum number of outputs, and [<code>Amin</code>, <code>Amax</code>] which are the range of ages. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each query, first print in a line <code>Case #X:</code> where <code>X</code> is the query number starting from 1. Then output the <em>M</em> richest people with their ages in the range [<code>Amin</code>, <code>Amax</code>]. Each person’s information occupies a line, in the format</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name Age Net_Worth</span><br></pre></td></tr></table></figure><p>The outputs must be in non-increasing order of the net worths. In case there are equal worths, it must be in non-decreasing order of the ages. If both worths and ages are the same, then the output must be in non-decreasing alphabetical order of the names. It is guaranteed that there is no two persons share all the same of the three pieces of information. In case no one is found, output <code>None</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">12 4</span><br><span class="line">Zoe_Bill 35 2333</span><br><span class="line">Bob_Volk 24 5888</span><br><span class="line">Anny_Cin 95 999999</span><br><span class="line">Williams 30 -22</span><br><span class="line">Cindy 76 76000</span><br><span class="line">Alice 18 88888</span><br><span class="line">Joe_Mike 32 3222</span><br><span class="line">Michael 5 300000</span><br><span class="line">Rosemary 40 5888</span><br><span class="line">Dobby 24 5888</span><br><span class="line">Billy 24 5888</span><br><span class="line">Nobody 5 0</span><br><span class="line">4 15 45</span><br><span class="line">4 30 35</span><br><span class="line">4 5 95</span><br><span class="line">1 45 50</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Case #1:</span><br><span class="line">Alice 18 88888</span><br><span class="line">Billy 24 5888</span><br><span class="line">Bob_Volk 24 5888</span><br><span class="line">Dobby 24 5888</span><br><span class="line">Case #2:</span><br><span class="line">Joe_Mike 32 3222</span><br><span class="line">Zoe_Bill 35 2333</span><br><span class="line">Williams 30 -22</span><br><span class="line">Case #3:</span><br><span class="line">Anny_Cin 95 999999</span><br><span class="line">Michael 5 300000</span><br><span class="line">Alice 18 88888</span><br><span class="line">Cindy 76 76000</span><br><span class="line">Case #4:</span><br><span class="line">None</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个人的姓名、年龄以及财富。按照财富递减的顺序排序。</p><p>若财富相同，则按照年龄从小到大排序。若年龄也相同，则按照姓名字典序从小到大排序。</p><p>然后，进行K次查询，每次查询给定需要输出的个数M、年龄的取值范围[Amin,Amax]，输出满足条件的人的姓名、年龄和财富。若不存在满足条件的人，则输出<code>None</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">People</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> netWorth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(People a, People b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.netWorth != b.netWorth) &#123;</span><br><span class="line"><span class="keyword">return</span> a.netWorth &gt; b.netWorth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a.age != b.age) &#123;</span><br><span class="line"><span class="keyword">return</span> a.age &lt; b.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.name, b.name) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;k);</span><br><span class="line">People people[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d %d"</span>, people[i].name, </span><br><span class="line">              &amp;people[i].age, &amp;people[i].netWorth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> m, min, max;</span><br><span class="line">sort(people, people + n, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;m, &amp;min, &amp;max);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d:\n"</span>, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (min &lt;= people[j].age &amp;&amp; people[j].age &lt;= max) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d %d\n"</span>, people[j].name, people[j].age,</span><br><span class="line">people[j].netWorth);</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count &gt;= m) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"None\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript访问HTML元素</title>
      <link href="/2019/06/25/js-get-element/"/>
      <url>/2019/06/25/js-get-element/</url>
      
        <content type="html"><![CDATA[<p>在JavaScript中，要想访问HTML元素，可以使用下面几种方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id)</span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(tagName)</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(className)</span><br><span class="line"><span class="built_in">document</span>.querySelector(selector)</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(selector)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="getElementById"><a href="#getElementById" class="headerlink" title="getElementById()"></a>getElementById()</h3><p>该方法返回带有指定ID的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问id为main-div的元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"main-div"</span>);</span><br></pre></td></tr></table></figure><h3 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName()"></a>getElementsByTagName()</h3><p>该方法返回带有指定标签名的所有元素，返回值类型为HTMLCollection。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问标签名为div的所有元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h3><p>该方法返回带有指定class属性值的所有元素，返回值类型为HTMLCollection。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问类名为c-red的所有元素</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"c-red"</span>);</span><br></pre></td></tr></table></figure><h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h3><p>该方法返回带有指定CSS样式选择器的第一个元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问类名为c-red的第一个元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">".c-red"</span>);</span><br></pre></td></tr></table></figure><h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h3><p>该方法返回带有指定CSS样式选择器的所有元素，返回值类型为NodeList。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问类名为c-red的所有元素</span></span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">".c-red"</span>);</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p> 下面是一段简单的html片段。</p><div id="main-div"><div class="c-red"><p id="demo-p">JavaScript</p><p>Java</p><p>C++</p></div><div class="c-red c-green"><p>Python</p><p>Ruby</p><p>Swift</p></div></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main-div"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-red"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demo-p"</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>C++<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c-red c-green"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Python<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Ruby<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Swift<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a id="btn-id" href="javascript:void(0);" target="_blank" rel="noopener"><br>访问ID为demo-p的元素    </a>&nbsp; &nbsp;<a id="btn-tag" href="javascript:void(0);" target="_blank" rel="noopener">访问标签名为p的所有元素</a>  &nbsp;<a id="btn-class-name" href="javascript:void(0);" target="_blank" rel="noopener">访问类名为c-red的所有元素</a> &nbsp;<a id="btn-query" href="javascript:void(0);" target="_blank" rel="noopener">访问类名为c-red的第一个元素</a></p><p><a id="btn-query-all" href="javascript:void(0);" target="_blank" rel="noopener">访问类名为c-red的所有元素（querySelectorAll）</a></p><script type="text/javascript">    window.onload = function() {        f("btn-id","demo-p",1);        f("btn-tag","p",2);        f("btn-class-name","c-red",3);        f("btn-query",".c-red",4);        f("btn-query-all",".c-red",5);    };    function f(btnSelector,selector,type) {        var oBtn = document.getElementById(btnSelector);        oBtn.onclick = function() {            var oDiv1;            if(type == 1) {               oDiv1 = document.getElementById(selector);               alert("元素类型："+oDiv1+"\nid："+oDiv1.getAttribute("id")+"\n文本内容："+oDiv1.firstChild.nodeValue+"\n访问方式：document.getElementById(\""+selector+"\")");            } else if(type == 2) {                  oDiv1 = document.getElementsByTagName(selector);                   alert("元素类型："+oDiv1+"\ntag："+selector+"\n访问方式：document.getElementsByTagName(\""+selector+"\")");            } else if(type == 3) {                oDiv1 = document.getElementsByClassName(selector);                   alert("元素类型："+oDiv1+"\nclass："+selector+"\n访问方式：document.getElementsByClassName(\""+selector+"\")");            } else if(type == 4) {                oDiv1 = document.querySelector(selector);                   alert("元素类型："+oDiv1+"\ncss选择器："+selector+"\n第一个子元素中的文本内容："+oDiv1.firstChild.firstChild.nodeValue+"\n访问方式：document.querySelector(\""+selector+"\")");            } else {                oDiv1 = document.querySelectorAll(selector);                   alert("元素类型："+oDiv1+"\ncss选择器："+selector+"\n选中元素个数："+oDiv1.length+"\n访问方式：document.querySelectorAll(\""+selector+"\")");            }        };    }</script>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1028.List Sorting (25 分)</title>
      <link href="/2019/06/24/pat-advanced-1028/"/>
      <url>/2019/06/24/pat-advanced-1028/</url>
      
        <content type="html"><![CDATA[<p>Excel can sort records according to any column. Now you are supposed to imitate this function.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains two integers <em>N</em> (≤$10^5$) and <em>C</em>, where <em>N</em> is the number of records and <em>C</em> is the column that you are supposed to sort the records with. Then <em>N</em> lines follow, each contains a record of a student. A student’s record consists of his or her distinct ID (a 6-digit number), name (a string with no more than 8 characters without space), and grade (an integer between 0 and 100, inclusive).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output the sorting result in <em>N</em> lines. That is, if <em>C</em> = 1 then the records must be sorted in increasing order according to ID’s; if <em>C</em>= 2 then the records must be sorted in non-decreasing order according to names; and if <em>C</em> = 3 then the records must be sorted in non-decreasing order according to grades. If there are several students who have the same name or grade, they must be sorted according to their ID’s in increasing order.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3 1</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">000001 Zoe 60</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br><span class="line">000002 James 98</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000010 Amy 90</span><br><span class="line">000002 James 98</span><br><span class="line">000007 James 85</span><br><span class="line">000001 Zoe 60</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">000007 James 85</span><br><span class="line">000010 Amy 90</span><br><span class="line">000001 Zoe 60</span><br><span class="line">000002 James 90</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">000001 Zoe 60</span><br><span class="line">000007 James 85</span><br><span class="line">000002 James 90</span><br><span class="line">000010 Amy 90</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个学生的ID、姓名和成绩，根据给定的参数C，进行不同的排序，输出排序后的结果。</p><p>当C==1时，按照ID从小到大排序；</p><p>当C==2时，按照姓名字典序从小到大排序；若姓名相同，则按照ID从小到大排序；</p><p>当C==3时，按照成绩从低到高排序；若成绩相同，则按照ID从小到大排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> id[<span class="number">7</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(struct Student a, struct Student b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> s = <span class="built_in">strcmp</span>(a.name, b.name);</span><br><span class="line"><span class="keyword">if</span> (s == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a.grade == b.grade) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.id, b.id) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a.grade &lt; b.grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;c);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[<span class="title">n</span>];</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s %d"</span>, stu[i].id, stu[i].name, &amp;stu[i].grade);</span><br><span class="line">&#125;</span><br><span class="line">sort(stu, stu + n, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s %d\n"</span>, stu[i].id, stu[i].name, stu[i].grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于《中国太阳》这篇小说</title>
      <link href="/2019/06/21/reading-note-china-sun/"/>
      <url>/2019/06/21/reading-note-china-sun/</url>
      
        <content type="html"><![CDATA[<p>《中国太阳》是刘慈欣发表于2002年的一篇短篇小说，获得了2002年度（第14届）银河奖。</p><a id="more"></a><h3 id="何为中国太阳"><a href="#何为中国太阳" class="headerlink" title="何为中国太阳"></a>何为中国太阳</h3><p>“这是一个面积达三万平方千米的反射镜，它在三万六千千米高的同步轨道上向地球反射阳光。从地面看上去，天空中像多了个太阳。”</p><p>中国太阳可以以多种方式影响天气，改变目标区域的气候。</p><h3 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h3><p>水娃，一个土生土长的农村娃，只上过三年小学。他出生和长大的村庄，常年处于干旱中，只靠着水窖中积下的一点雨水过活。水娃家没钱修水泥窖，用的是土水窖，水一到大热天就臭了。以往，这臭水热开了还能喝，就是苦点儿涩点儿，但这年夏天，那水热开了喝都拉肚子。为了喝点不苦的水、攒钱盖房娶媳妇，水娃就此离开了生活多年的村庄。</p><h3 id="人生目标的转变"><a href="#人生目标的转变" class="headerlink" title="人生目标的转变"></a>人生目标的转变</h3><p><strong>1.人生第一个目标：喝点不苦的水，挣点钱。</strong></p><p>职业：矿区工人，引路人：同村国强，转折事件：国强之死</p><p><strong>2.人生第二个目标：到灯更多、水更甜的城里，挣更多的钱。</strong></p><p>职业：省城擦鞋匠，引路人：邻村二宝，转折事件：中国太阳工程正式启动</p><p><strong>3.人生第三个目标：到更大的城市，见更大的世面，挣更多的钱。</strong></p><p>前往北京，引路人：室友庄宇博士</p><p><strong>4.人生第四个目标：成为一个北京人。</strong></p><p>职业：高空清洁工，转折事件：再遇庄宇</p><p><strong>5.人生第五个目标：飞向太空擦太阳。</strong></p><p>职业：中国太阳上的镜面农夫，引路人：中国太阳工程首席科学家庄宇，转折事件：与史蒂芬·霍金的交往</p><p><strong>6.人生第六个目标：飞向星海，把人类的目光重新引向宇宙深处。</strong></p><p>引路人：史蒂芬·霍金</p><h3 id="佳句摘抄"><a href="#佳句摘抄" class="headerlink" title="佳句摘抄"></a>佳句摘抄</h3><p>1.现代社会充满着机遇，满天都飞着金鸟儿，说不定哪天你一伸手就抓住一只，前提是你得拿自己当回事儿。</p><p>2.有些东西你只有在看见后才知道是什么样儿，凭想象是绝对想不出来的。</p><p>3.事情得从高处才能看清楚。</p><p>4.站在这么高的地方，人想的事情肯定不一样……</p><p>5.有人满足于老婆孩子热炕头，从不向与己无关的尘世之外扫一眼；有的人则用尽全部生命，只为看一眼人类从未见过的事物。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1012.The Best Rank (25 分)</title>
      <link href="/2019/06/20/pat-advanced-1012/"/>
      <url>/2019/06/20/pat-advanced-1012/</url>
      
        <content type="html"><![CDATA[<p>To evaluate the performance of our first year CS majored students, we consider their grades of three courses only: <code>C</code> - C Programming Language, <code>M</code> - Mathematics (Calculus or Linear Algrbra), and <code>E</code> - English. At the mean time, we encourage students by emphasizing on their best ranks – that is, among the four ranks with respect to the three courses and the average grade, we print the best rank for each student.</p><p>For example, The grades of <code>C</code>, <code>M</code>, <code>E</code> and <code>A</code> - Average of 4 students are given as the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">StudentID  C  M  E  A</span><br><span class="line">310101     98 85 88 90</span><br><span class="line">310102     70 95 88 84</span><br><span class="line">310103     82 87 94 88</span><br><span class="line">310104     91 91 91 91</span><br></pre></td></tr></table></figure><p>Then the best ranks for all the students are No.1 since the 1st one has done the best in C Programming Language, while the 2nd one in Mathematics, the 3rd one in English, and the last one in average.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case starts with a line containing 2 numbers <em>N</em> and <em>M</em> (≤2000), which are the total number of students, and the number of students who would check their ranks, respectively. Then <em>N</em> lines follow, each contains a student ID which is a string of 6 digits, followed by the three integer grades (in the range of [0, 100]) of that student in the order of <code>C</code>, <code>M</code> and <code>E</code>. Then there are <em>M</em> lines, each containing a student ID.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each of the <em>M</em> students, print in one line the best rank for him/her, and the symbol of the corresponding rank, separated by a space.</p><p>The priorities of the ranking methods are ordered as <code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>. Hence if there are two or more ways for a student to obtain the same best rank, output the one with the highest priority.</p><p>If a student is not on the grading list, simply output <code>N/A</code>.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">5 6</span><br><span class="line">310101 98 85 88</span><br><span class="line">310102 70 95 88</span><br><span class="line">310103 82 87 94</span><br><span class="line">310104 91 91 91</span><br><span class="line">310105 85 90 90</span><br><span class="line">310101</span><br><span class="line">310102</span><br><span class="line">310103</span><br><span class="line">310104</span><br><span class="line">310105</span><br><span class="line">999999</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 C</span><br><span class="line">1 M</span><br><span class="line">1 E</span><br><span class="line">1 A</span><br><span class="line">3 A</span><br><span class="line">N/A</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个学生，及其C语言（C）、数学（M）、英语（E）三门课的成绩，对包括平均分（A）在内的四个成绩分别进行排名。</p><p>给定M个学生的id，求他们的最好排名及对应的课程（或者平均分）</p><p>当有多个科目取得相同的最好排名时，按照<code>A</code> &gt; <code>C</code> &gt; <code>M</code> &gt; <code>E</code>的顺序，输出其中优先级最大的课程。</p><p>若学生id不存在，则输出<code>N/A</code>。</p><p><strong>需要注意的地方：</strong>1.平均分要四舍五入；2.若分数相同，则排名并列。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="comment">// 0-A,1-C,2-M,3-E</span></span><br><span class="line"><span class="keyword">int</span> score[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> rank[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> best;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 快速判断id是否存在</span></span><br><span class="line"><span class="keyword">int</span> exists[<span class="number">1000000</span>];</span><br><span class="line"><span class="keyword">char</span> course[<span class="number">5</span>] = &#123; <span class="string">'A'</span>, <span class="string">'C'</span>, <span class="string">'M'</span>, <span class="string">'E'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(struct Student s1, struct Student s2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s1.score[flag] &gt; s2.score[flag];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, id;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[<span class="title">n</span>];</span></span><br><span class="line"><span class="comment">// 输入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;stu[i].id);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;stu[i].score[j]);</span><br><span class="line">sum += stu[i].score[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 平均成绩四舍五入</span></span><br><span class="line">stu[i].score[<span class="number">0</span>] = sum / <span class="number">3.0</span> + <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照不同的科目分别排序</span></span><br><span class="line"><span class="keyword">for</span> (flag = <span class="number">0</span>; flag &lt; <span class="number">4</span>; flag++) &#123;</span><br><span class="line">sort(stu, stu + n, cmp);</span><br><span class="line">stu[<span class="number">0</span>].rank[flag] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">stu[j].rank[flag] = j + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 若分数相同，则排名并列</span></span><br><span class="line"><span class="keyword">if</span> (stu[j].score[flag] == stu[j - <span class="number">1</span>].score[flag]) &#123;</span><br><span class="line">stu[j].rank[flag] = stu[j - <span class="number">1</span>].rank[flag];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 计算最佳排名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">exists[stu[i].id] = i + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> rank = n + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (stu[i].rank[j] &lt; rank) &#123;</span><br><span class="line">rank = stu[i].rank[j];</span><br><span class="line">stu[i].best = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;id);</span><br><span class="line"><span class="keyword">int</span> index = exists[id];</span><br><span class="line"><span class="keyword">if</span> (index) &#123;</span><br><span class="line">index -= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> best = stu[index].best;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %c\n"</span>, stu[index].rank[best], course[best]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N/A\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于《流浪地球》这篇小说</title>
      <link href="/2019/06/17/reading-note-the-wandering-earth/"/>
      <url>/2019/06/17/reading-note-the-wandering-earth/</url>
      
        <content type="html"><![CDATA[<p><img alt="The Wandering Earth" src="/static/images/the-wandering-earth.jpg" height="250" width="250"></p><p>《流浪地球》是一篇精彩宏大的小说，这里记录下小说中的一些设定及情节。</p><a id="more"></a><h3 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h3><p>天体物理学家发现太阳内部氢转化为氦的速度加快，氦元素的聚变将在很短的时间内传遍整个太阳内部，由此产生一次叫“<strong>氦闪</strong>”的剧烈爆炸。之后，太阳将变为一颗巨大但暗淡的红巨星。而在氦闪爆发时，<strong>地球将被气化</strong>。这一切将在<strong>四百年内发生</strong>。人类唯一的生路是<strong>向外太空恒星际移民</strong>。而照人类目前的技术力量，全人类移民唯一可行的目标是<strong>半人马座比邻星</strong>，这是距地球最近的恒星，有<strong>四点三光年</strong>的路程。</p><h3 id="人类的逃亡计划"><a href="#人类的逃亡计划" class="headerlink" title="人类的逃亡计划"></a>人类的逃亡计划</h3><p>人类的逃亡分为五步：</p><p>第一步，刹车时代。用地球发动机<strong>使地球停止自转</strong>，使发动机喷口对准地球运行的反方向；</p><p>第二步，逃逸时代。全功率开动地球发动机，<strong>使地球加速到逃逸速度</strong>，飞出太阳系；</p><p>第三步，流浪时代I（加速）。<strong>在外太空继续加速</strong>，飞向比邻星；</p><p>第四步，流浪时代II（减速）。在中途<strong>使地球重新自转</strong>，掉转发动机方向，<strong>开始减速</strong>；</p><p>第五步，新太阳时代。地球泊入比邻星轨道，成为这颗恒星的行星。</p><p>整个移民过程将延续两千五百年时间，一百代人。</p><h3 id="刹车时代"><a href="#刹车时代" class="headerlink" title="刹车时代"></a>刹车时代</h3><p>人类通过“<strong>记忆遗传技术</strong>”使得小娃娃具备了成人的智力水平，因而在四个世纪内就造出了地球发动机。</p><p>地球发动机利用<strong>重元素聚变</strong>，<strong>以岩石为燃料</strong>，<strong>安装在亚洲和美洲大陆上</strong>，因为只有这两个大陆完整坚实的板块结构才能承受发动机对地球巨大的推力。地球发动机共有<strong>一万两千台</strong>，分布在亚洲和美洲大陆的各个平原上。</p><p>地球自转刹车用了四十二年。</p><p>关于地球的卫星——月亮的处理：</p><blockquote class="blockquote-center">人类带不走月球，就在月球上也安装了行星发动机，把它推离地球轨道，以免在地球加速时相撞。<br></blockquote><h3 id="逃逸时代"><a href="#逃逸时代" class="headerlink" title="逃逸时代"></a>逃逸时代</h3><p>人类搬入地下城。</p><blockquote><p>学校教育集中在理工科，艺术和哲学之类的教育被压缩到最少——人类没有这份闲心了。</p></blockquote><p>对于这一时代人类的心理状态和精神生活，大刘是这样描述的：</p><blockquote><p>在这个时代，死亡的威胁和逃生的欲望压倒了一切……对于爱情这类东西，他们只是用余光瞥一下而已，就像赌徒在盯着轮盘的间隙抓住几秒钟喝口水一样。</p></blockquote><p>由于环境的严酷，法律规定每三对新婚配偶中只有一对有生育权，抽签决定。</p><p>地球发动机给了地球很小的加速度，使得地球在绕日运动时，逐渐加速。地球绕太阳运行的速度越快，其运行轨道越扁——近日点距离保持不变，远日点越来越远。地球绕日运行的第十五圈，远日点会到达木星轨道，地球将与木星在几乎相撞的距离上擦身而过。在木星巨大引力的拉动下，地球将最终达到逃逸速度。</p><h3 id="叛乱"><a href="#叛乱" class="headerlink" title="叛乱"></a>叛乱</h3><p>当地球离开木星后，部分人类对太阳氦闪产生了怀疑。通过对太阳的探测，他们认定太阳氦闪是一个人为编造的超级骗局，因而打算推翻联合政府，控制地球发动机，返回原来的地球轨道。叛军所到之处，人民群起响应。</p><p>最终，叛军取得了胜利，地球驾驶台中联合政府方剩下的五千多人全部被冻死。恰恰就是在这个时候，太阳氦闪爆发了。</p><h3 id="流浪时代"><a href="#流浪时代" class="headerlink" title="流浪时代"></a>流浪时代</h3><p>地球发动机将不间断地开动五百年，到时地球将<strong>加速至光速的千分之五</strong>，然后地球将以这个速度<strong>滑行</strong>一千三百年，走完三分之二的航程，然后掉转发动机的方向，<strong>开始长达五百年的减速</strong>。地球将在两千四百年后达到比邻星，再用<strong>一百年时间泊入</strong>这颗恒星的轨道，成为它的一颗行星。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>故事很有传统的家国情怀。</p><p>首先，通过主角的小学老师黎星之口，道出了只顾自己跑的“飞船派”的不足之处，肯定了“地球派”带着地球一起走的做法。</p><p>然后，通过主角爷爷及主角之口，反复表达了人类对未来的向往：“<strong>啊，地球，我的流浪地球啊……</strong>”。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年“锐捷网络杯”华中区高校研究生程序设计大赛K.A good game</title>
      <link href="/2019/06/02/hbppc-2019-problem-k-a-good-game/"/>
      <url>/2019/06/02/hbppc-2019-problem-k-a-good-game/</url>
      
        <content type="html"><![CDATA[<p>Bigbrother is a cute boy who likes to play cards. One day, he gets <em>N</em> cards and every of them has a number $V_i$. Now, he wants to play a game with you.</p><p>He has <em>M</em> operations.</p><p>In the <em>k</em>-th operation, the sum of $V_i$ between intervals [L,R] is <em>S</em>, <em>k×S</em> is the <em>k</em>-th score.</p><p>You can sort the <em>M</em> operations and get the maximum sum of scores.</p><a id="more"></a><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p>There are multiple tests. The first line contains integer T(1≤T≤10).</p><p>The second line contains integer N, M(1 ≤ N,M ≤ 100000)</p><p>The next line contain <em>N</em> numbers $V_i$  (1 ≤$V_i$ ≤ 1000) .</p><p>The following $M​$ lines, each line contains two numbers, L,R(1 ≤ L,R ≤ N).</p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>There are T lines.</p><p>In every line print a single integer — the answer to the problem.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">4 3</span><br><span class="line">1 2 3 4</span><br><span class="line">1 2</span><br><span class="line">2 4</span><br><span class="line">1 4</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">51</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><strong>题目大意：</strong>给定N张牌，每张牌的权值为$V_i$。对这些牌进行M次操作，第k次操作的得分为$k \times S$，其中$S = \sum_{i=L}^{R}V_i$，L和R由输入给出，表示第L和R张牌。对M次操作的先后顺序进行调换，使得总得分最高，输出最高总得分。</p><p><strong>思路：前缀和 加 贪心。</strong></p><p>输入$V_i$时，计算每张牌到第1张牌之间的权值和span[i]。</p><p>然后通过对应的权值之和，计算某一操作的得分S。</p><p>对所有的S进行升序排列，使得较大的S位于序列的后面，从而使得总得分最高。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span> (t--) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="comment">// span[i]存储第i+1张牌到第1张牌之间的权值和</span></span><br><span class="line"><span class="keyword">int</span> span[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">span[i] = arr[i];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 前缀和</span></span><br><span class="line">span[i] = span[i - <span class="number">1</span>] + arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> left, right;</span><br><span class="line"><span class="comment">// 存储单个操作的得分S</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> scores[m];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;left, &amp;right);</span><br><span class="line"><span class="keyword">if</span> (left == <span class="number">1</span>) &#123;</span><br><span class="line">scores[i] = span[right - <span class="number">1</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">scores[i] = span[right - <span class="number">1</span>] - span[left - <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对所有的S进行升序排列</span></span><br><span class="line">sort(scores, scores + m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大总得分</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">sum += (i + <span class="number">1</span>) * scores[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题需要注意的几个地方：<br>$$<br>\max(S) = \max(V_i) \times \max(N) = 10^5 \times 10^3 = 10^8<br>$$</p><p>$$<br>max(sum) = max(S) \times (1+2+\dots+\max(N)) = 10^8 \times \frac{10^5 \times (10^5 + 1)}{2} ≈ 5\times 10^{17}<br>$$</p><p>因此，总得分sum必须用long long存储。</p><p>又因为$\max(k \times S) = 10^5 \times 10^8 = 10^{13}$，因此S必须采用long long存储，否则，$ k \times S$可能会溢出。</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 946.验证栈序列</title>
      <link href="/2019/06/01/leetcode-946-validate-stack-sequences/"/>
      <url>/2019/06/01/leetcode-946-validate-stack-sequences/</url>
      
        <content type="html"><![CDATA[<p>给定 <code>pushed</code> 和 <code>popped</code> 两个序列，只有当它们可能是在最初空栈上进行的推入 push 和弹出 pop 操作序列的结果时，返回 <code>true</code>；否则，返回 <code>false</code> 。</p><a id="more"></a><p><strong>示例 1：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：pushed = [1,2,3,4,5], popped = [4,5,3,2,1]</span><br><span class="line">输出：true</span><br><span class="line">解释：我们可以按以下顺序执行：</span><br><span class="line">push(1), push(2), push(3), push(4), pop() -&gt; 4,</span><br><span class="line">push(5), pop() -&gt; 5, pop() -&gt; 3, pop() -&gt; 2, pop() -&gt; 1</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：pushed = [1,2,3,4,5], popped = [4,3,5,1,2]</span><br><span class="line">输出：false</span><br><span class="line">解释：1 不能在 2 之前弹出。</span><br></pre></td></tr></table></figure><p><strong> 提示：</strong></p><ol><li><code>0 &lt;= pushed.length == popped.length &lt;= 1000</code></li><li><code>0 &lt;= pushed[i], popped[i] &lt; 1000</code></li><li><code>pushed</code> 是 <code>popped</code> 的排列。</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>思路：</strong>模拟进出栈操作。</li></ul><p>对pushed中的每一个元素执行如下操作：</p><p>1.将该元素进栈；</p><p>2.当栈不为空时，判断栈顶元素与popped中的当前元素popped[j]是否相等。若相等，则执行出栈操作，且j++。循环执行该操作，直到条件不满足为止。</p><p>待上述操作执行完后，判断栈是否为空。若栈空，则表示给定的栈序列是合法的；否则，则不合法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateStackSequences</span><span class="params">(<span class="keyword">int</span>[] pushed, <span class="keyword">int</span>[] popped)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用一个数组模拟栈的操作</span></span><br><span class="line">        <span class="keyword">int</span>[] stack = <span class="keyword">new</span> <span class="keyword">int</span>[pushed.length];</span><br><span class="line">        <span class="comment">// 栈的实际长度</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; pushed.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 1.进栈</span></span><br><span class="line">            stack[len++] = pushed[i];</span><br><span class="line">            <span class="comment">// 2.栈不为空时，循环判断栈顶元素与popped的当前元素是否相等</span></span><br><span class="line">            <span class="keyword">while</span>(len != <span class="number">0</span> &amp;&amp; stack[len-<span class="number">1</span>] == popped[j]) &#123;</span><br><span class="line">                <span class="comment">// 出栈</span></span><br><span class="line">                len--;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于研会竞选这件事</title>
      <link href="/2019/05/30/whu-cs-graduate-union-election/"/>
      <url>/2019/05/30/whu-cs-graduate-union-election/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/whu-cs-graduate-union-election.jpg" width="500px" height="500px"></p><p>2019年5月30日，武汉大学计算机学院举办了第十九届研究生代表大会，我成为了计算机学院第十九届研究生会主席团的一名成员。</p><a id="more"></a><h3 id="为什么要参加研会竞选？"><a href="#为什么要参加研会竞选？" class="headerlink" title="为什么要参加研会竞选？"></a>为什么要参加研会竞选？</h3><p>学院研究生会共七个部门，原本以为每个部门要推荐一个人去竞选。我们体育部分管主席起先中意的是另一个同学。老实讲，我也觉得他很合适。但是，合适并不意味着愿意。那个哥们不想去竞选主席，理由是二年级可能会去交流。然后，分管主席找上了我，遂无奈接下了这个任务。</p><p>今年学校改革，我们院只能有5个主席（一正四副，以前是7个主席），报名的只有6个人，因此变成了6选5。</p><h3 id="竞选心路历程"><a href="#竞选心路历程" class="headerlink" title="竞选心路历程"></a>竞选心路历程</h3><p>5月29日，也就是竞选的前一天。当天下午在学院报告厅彩排，我发现其他候选人的PPT和演讲稿都比我要充实丰富。这时候，我已经感觉到自己可能会被刷掉。</p><p>彩排完毕，分管主席肖学长也来了。他和我说，其实他希望我不要选上，所以也没有让我把PPT和演讲稿弄的特别充实。因为他说一旦选上，会比较忙，耽误自己的科研。其实，我也是这么想，所以也一直对室友说，希望自己被刷掉。</p><p>当然，人是比较矛盾的。我既希望自己被刷掉，又不想自己被刷掉。因为如果是拼尽了全力，仍然被刷下来了，说明自己能力不行。此外，我当时想的是，本科的时候没参加过学生会，自己性格又偏内向。如果选上了，能锻炼下自己各方面的能力，对自己是有帮助的。</p><p>另外，还有个小插曲。因为工作人员要控制PPT的播放，所以他们需要我在第二天正式竞选的时候交一张纸质版的演讲稿。那天晚上我回去得比较晚，打印店已经关门了，就想着30日早上打印应该也来得及。事实上，30日早上的时候，时间根本不够，到学院已经将近八点二十分了（九点正式开始，八点半签到）。彼时，学院旁边的打印店还没开门，我还没换正装。于是，决定先去换正装，换完差不多八点半。</p><p>当时，我比较紧张，以为自己需要脱稿演讲了（当时我手头有一张纸质版的演讲稿，是我29日彩排前打印的）。人越是紧张，越是容易忘。幸好，研代会前半部分，是学校和学院的领导们讲话。这时候，另一个同学已经到了学院，他实验室有打印机，我让他帮我打印了。</p><p>这件事，也算是对我的一个警告：凡事要留有余地。当一个“笨人”，每件事情作好最坏的打算，留出足够的周旋时间。</p><h3 id="竞选结果统计"><a href="#竞选结果统计" class="headerlink" title="竞选结果统计"></a>竞选结果统计</h3><p>我的得票为60+（应到投票人为114，实际投票人为100），排在第四位，成功当选主席团。</p><p><img src="/static/images/whu-cs-graduate-union-election2.jpg" width="500px" height="500px"></p><p>从左至右依次是：刘江、万言、赵东星、张士伟、贺巩山、高航。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1015.德才论/PAT甲级 1062.Talent and Virtue (25 分)</title>
      <link href="/2019/05/29/pat-basic-1015/"/>
      <url>/2019/05/29/pat-basic-1015/</url>
      
        <content type="html"><![CDATA[<p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。”</p><p>现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出 3 个正整数，分别为：<em>N</em>（≤10^5），即考生总数；<em>L</em>（≥60），为录取最低分数线，即德分和才分均不低于 <em>L</em> 的考生才有资格被考虑录取；<em>H</em>（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 <em>H</em>，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 <em>L</em> 的考生也按总分排序，但排在第三类考生之后。</p><p>随后 <em>N</em> 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第一行首先给出达到最低分数线的考生人数 <em>M</em>，随后 <em>M</em> 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">14 60 80</span><br><span class="line">10000001 64 90</span><br><span class="line">10000002 90 60</span><br><span class="line">10000011 85 80</span><br><span class="line">10000003 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000005 82 77</span><br><span class="line">10000006 83 76</span><br><span class="line">10000007 90 78</span><br><span class="line">10000008 75 79</span><br><span class="line">10000009 59 90</span><br><span class="line">10000010 88 45</span><br><span class="line">10000012 80 100</span><br><span class="line">10000013 90 99</span><br><span class="line">10000014 66 60</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">10000013 90 99</span><br><span class="line">10000012 80 100</span><br><span class="line">10000003 85 80</span><br><span class="line">10000011 85 80</span><br><span class="line">10000004 80 85</span><br><span class="line">10000007 90 78</span><br><span class="line">10000006 83 76</span><br><span class="line">10000005 82 77</span><br><span class="line">10000002 90 60</span><br><span class="line">10000014 66 60</span><br><span class="line">10000008 75 79</span><br><span class="line">10000001 64 90</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>按照题目要求，可以建立如下的结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="comment">// 准考证号</span></span><br><span class="line"><span class="keyword">int</span> permitNo;</span><br><span class="line"><span class="comment">// 德分</span></span><br><span class="line"><span class="keyword">int</span> personalityScore;</span><br><span class="line"><span class="comment">// 才分</span></span><br><span class="line"><span class="keyword">int</span> abilityScore;</span><br><span class="line"><span class="comment">// 所属类别，1表示才德全尽，2表示德胜才，3表示“才德兼亡”但尚有“德胜才”，4表示其他满足最低要求的考生</span></span><br><span class="line"><span class="keyword">int</span> level;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后进行相应的排序即可。</p><p>完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="comment">// 准考证号</span></span><br><span class="line"><span class="keyword">int</span> permitNo;</span><br><span class="line"><span class="comment">// 德分</span></span><br><span class="line"><span class="keyword">int</span> personalityScore;</span><br><span class="line"><span class="comment">// 才分</span></span><br><span class="line"><span class="keyword">int</span> abilityScore;</span><br><span class="line"><span class="comment">// 所属类别</span></span><br><span class="line"><span class="keyword">int</span> level;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(struct Student stu1, struct Student stu2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (stu1.level != stu2.level) &#123;</span><br><span class="line"><span class="keyword">return</span> stu1.level &lt; stu2.level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按总分排序</span></span><br><span class="line"><span class="keyword">if</span> (stu1.abilityScore + stu1.personalityScore</span><br><span class="line">!= stu2.abilityScore + stu2.personalityScore) &#123;</span><br><span class="line"><span class="keyword">return</span> stu1.abilityScore + stu1.personalityScore</span><br><span class="line">&gt; stu2.abilityScore + stu2.personalityScore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若总分相同，则按德分降序排列</span></span><br><span class="line"><span class="keyword">if</span> (stu1.personalityScore != stu2.personalityScore) &#123;</span><br><span class="line"><span class="keyword">return</span> stu1.personalityScore &gt; stu2.personalityScore;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若德分并列，则按准考证号升序</span></span><br><span class="line"><span class="keyword">return</span> stu1.permitNo &lt; stu2.permitNo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(struct Student stu[], <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, stu[i].permitNo, stu[i].personalityScore,</span><br><span class="line">stu[i].abilityScore);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, low, high, m = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;low, &amp;high);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[<span class="title">n</span>];</span></span><br><span class="line"><span class="keyword">int</span> permitNo, personalityScore, abilityScore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;permitNo, &amp;personalityScore, &amp;abilityScore);</span><br><span class="line"><span class="keyword">if</span> (personalityScore &lt; low || abilityScore &lt; low) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">stu[m].permitNo = permitNo;</span><br><span class="line">stu[m].abilityScore = abilityScore;</span><br><span class="line">stu[m].personalityScore = personalityScore;</span><br><span class="line"><span class="comment">// 才德全尽</span></span><br><span class="line"><span class="keyword">if</span> (personalityScore &gt;= high &amp;&amp; abilityScore &gt;= high) &#123;</span><br><span class="line">stu[m].level = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (personalityScore &gt;= high) &#123; <span class="comment">// 德胜才</span></span><br><span class="line">stu[m].level = <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (abilityScore &gt;= high) &#123;</span><br><span class="line">stu[m].level = <span class="number">4</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// “才德兼亡”但尚有“德胜才”</span></span><br><span class="line"><span class="keyword">if</span> (personalityScore &gt;= abilityScore) &#123;</span><br><span class="line">stu[m].level = <span class="number">3</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">stu[m].level = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">m++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序</span></span><br><span class="line">sort(stu, stu + m, cmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, m);</span><br><span class="line">print(stu, m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 889.根据前序和后序遍历构造二叉树</title>
      <link href="/2019/05/29/leetcode-889-construct-binary-tree-from-preorder-and-postorder-traversal/"/>
      <url>/2019/05/29/leetcode-889-construct-binary-tree-from-preorder-and-postorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>返回与给定的前序和后序遍历匹配的任何二叉树。</p><a id="more"></a><p> <code>pre</code> 和 <code>post</code> 遍历中的值是不同的正整数。</p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]</span><br><span class="line">输出：[1,2,3,4,5,6,7]</span><br></pre></td></tr></table></figure><p> <strong>提示：</strong></p><ul><li><code>1 &lt;= pre.length == post.length &lt;= 30</code></li><li><code>pre[]</code> 和 <code>post[]</code> 都是 <code>1, 2, ..., pre.length</code> 的排列</li><li>每个输入保证至少有一个答案。如果有多个答案，可以返回其中一个。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>思路：</strong>仅知道先序遍历和后序遍历的结果，满足条件的二叉树并不唯一。一种直观的方法是：按照先序遍历和后序遍历的特点，先构造根结点root，然后找出左子树left和右子树right的起止范围，对它们递归执行该过程即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructFromPrePost</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] post)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> constructFromPrePost(pre, post, </span><br><span class="line">                                    <span class="number">0</span>, pre.length-<span class="number">1</span>, <span class="number">0</span>, post.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">constructFromPrePost</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] post, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> preFrom, <span class="keyword">int</span> preTo, <span class="keyword">int</span> postFrom, <span class="keyword">int</span> postTo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.范围判断，当给定的范围不合法时，返回null</span></span><br><span class="line">        <span class="keyword">if</span>(preFrom &gt; preTo || postFrom &gt; postTo) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 2.构造根结点root</span></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(pre[preFrom]);</span><br><span class="line">        <span class="comment">// 3.若仅有一个元素，则直接返回，避免再次执行递归操作</span></span><br><span class="line">        <span class="keyword">if</span>(preFrom == preTo) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.计算左子树的元素个数,i=左子树元素个数-1</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pre[preFrom+<span class="number">1</span>] != post[postFrom + i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.递归构造左右子树</span></span><br><span class="line">        root.left = constructFromPrePost(pre, post,</span><br><span class="line">                                     preFrom+<span class="number">1</span>, preFrom+i+<span class="number">1</span>, postFrom, postFrom+i);</span><br><span class="line">        root.right = constructFromPrePost(pre,post,</span><br><span class="line">                                     preFrom+i+<span class="number">2</span>, preTo, postFrom+i+<span class="number">1</span>, postTo-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 106.从中序与后序遍历序列构造二叉树</title>
      <link href="/2019/05/29/leetcode-106-construct-binary-tree-from-inorder-and-postorder-traversal/"/>
      <url>/2019/05/29/leetcode-106-construct-binary-tree-from-inorder-and-postorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>根据一棵树的中序遍历与后序遍历构造二叉树。</p><a id="more"></a><p><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">中序遍历 inorder = [9,3,15,20,7]</span><br><span class="line">后序遍历 postorder = [9,15,7,20,3]</span><br></pre></td></tr></table></figure><p>返回如下的二叉树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>思路：</strong>按照中序遍历和后序遍历的特点，先构造根结点root，然后找出左子树left和右子树right的起止范围，对它们递归执行该过程即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return buildTree(inorder,postorder,0,postorder.length-1,postorder.length);</span></span><br><span class="line">        <span class="keyword">return</span> buildTree(inorder,postorder,<span class="number">0</span>,inorder.length-<span class="number">1</span>,<span class="number">0</span>,postorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*public TreeNode buildTree(int[] inorder, int[] postorder, </span></span><br><span class="line"><span class="comment">   int inStart, int postEnd, int length) &#123;</span></span><br><span class="line"><span class="comment">        if(length == 0) &#123;</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        TreeNode root = new TreeNode(postorder[postEnd]);</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        int i=0;</span></span><br><span class="line"><span class="comment">        while(root.val != inorder[inStart + i]) &#123;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        root.left = buildTree(inorder, postorder, </span></span><br><span class="line"><span class="comment">        inStart, postEnd - (length - i), i);</span></span><br><span class="line"><span class="comment">        root.right = buildTree(inorder, postorder, </span></span><br><span class="line"><span class="comment">        inStart + i + 1, postEnd-1, length-i-1);</span></span><br><span class="line"><span class="comment">        return root;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder, </span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> inFrom, <span class="keyword">int</span> inTo, <span class="keyword">int</span> postFrom, <span class="keyword">int</span> postTo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inFrom &gt; inTo || postFrom &gt; postTo) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构造根结点root</span></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(postorder[postTo]);</span><br><span class="line">        <span class="comment">// 寻找中序遍历中根结点所在的位置，i表示当前状态下左子树的元素个数</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(root.val != inorder[inFrom + i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对左右子树递归执行该过程</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        inorder    | leftrootright</span></span><br><span class="line"><span class="comment">        index   | inFrom ... inFrom+i-1    inFrom+i inFrom+i+1 ... inTo</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        postorder  | leftright root</span></span><br><span class="line"><span class="comment">        index    | postFrom ... postFrom+i-1  postFrom+i ...postTo-1  postTo</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        root.left = buildTree(inorder, postorder, </span><br><span class="line">                              inFrom, inFrom + i - <span class="number">1</span>, postFrom, postFrom + i - <span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(inorder, postorder, </span><br><span class="line">                              inFrom + i + <span class="number">1</span>, inTo, postFrom + i, postTo - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 105.从前序与中序遍历序列构造二叉树/《剑指Offer》7.重建二叉树</title>
      <link href="/2019/05/29/leetcode-105-construct-binary-tree-from-preorder-and-inorder-traversal/"/>
      <url>/2019/05/29/leetcode-105-construct-binary-tree-from-preorder-and-inorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>根据一棵树的前序遍历与中序遍历构造二叉树。</p><a id="more"></a><p><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前序遍历 preorder = [3,9,20,15,7]</span><br><span class="line">中序遍历 inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure><p>返回如下的二叉树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>思路：</strong>按照先序遍历和中序遍历的特点，先构造根结点root，然后找出左子树left和右子树right的起止范围，对它们递归执行该过程即可。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildTree(preorder,inorder,<span class="number">0</span>,preorder.length-<span class="number">1</span>,</span><br><span class="line">                         <span class="number">0</span>,inorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*public TreeNode buildTree(int[] preorder, int[] inorder,</span></span><br><span class="line"><span class="comment">    int preStart,int inStart,int length) &#123;</span></span><br><span class="line"><span class="comment">        if(length == 0) &#123;</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        TreeNode root = new TreeNode(preorder[preStart]);</span></span><br><span class="line"><span class="comment">        if(length == 1) &#123;</span></span><br><span class="line"><span class="comment">            return root;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        int i=0;</span></span><br><span class="line"><span class="comment">        while(root.val != inorder[inStart + i]) &#123;</span></span><br><span class="line"><span class="comment">            i++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        root.left = buildTree(preorder,inorder,preStart+1,inStart,i);</span></span><br><span class="line"><span class="comment">        root.right = buildTree(preorder,inorder,preStart+i+1,inStart+i+1,length-i-1);</span></span><br><span class="line"><span class="comment">        return root;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder, </span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> preFrom, <span class="keyword">int</span> preTo, <span class="keyword">int</span> inFrom, <span class="keyword">int</span> inTo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preFrom &gt; preTo || inFrom &gt; inTo) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构造根结点root</span></span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[preFrom]);</span><br><span class="line">        <span class="keyword">if</span>(preFrom == preTo) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 寻找中序遍历中根结点所在的位置，i表示当前状态下左子树的元素个数</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(root.val != inorder[inFrom + i]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对左右子树递归执行该过程</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        preorder   | rootleftright</span></span><br><span class="line"><span class="comment">        index   | preFrom     preFrom+1 ... preFrom+i   preFrom+i+1 ... preTo</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        inorder    | leftrootright</span></span><br><span class="line"><span class="comment">        index    | inFrom ... inFrom+i-1  inFrom+i    inFrom+i+1 ... inTo</span></span><br><span class="line"><span class="comment">        -------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        root.left = buildTree(preorder,inorder,</span><br><span class="line">                              preFrom+<span class="number">1</span>,preFrom+i,inFrom,inFrom+i-<span class="number">1</span>);</span><br><span class="line">        root.right = buildTree(preorder,inorder,</span><br><span class="line">                               preFrom+i+<span class="number">1</span>,preTo,inFrom+i+<span class="number">1</span>,inTo);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 1008.先序遍历构造二叉树</title>
      <link href="/2019/05/27/leetcode-1008-construct-binary-search-tree-from-preorder-traversal/"/>
      <url>/2019/05/27/leetcode-1008-construct-binary-search-tree-from-preorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>返回与给定先序遍历 <code>preorder</code> 相匹配的二叉搜索树（binary <strong>search</strong> tree）的根结点。</p><p><em>(回想一下，二叉搜索树是二叉树的一种，其每个节点都满足以下规则，对于 node.left 的任何后代，值总 &lt; node.val，而 node.right 的任何后代，值总 &gt; node.val。此外，先序遍历首先显示节点的值，然后遍历 node.left，接着遍历 node.right。）</em></p><a id="more"></a><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：[8,5,1,7,10,12]</span><br><span class="line">输出：[8,5,10,1,7,null,12]</span><br><span class="line">    8</span><br><span class="line">           / \</span><br><span class="line">          5  10</span><br><span class="line">         / \   \</span><br><span class="line">        1   7   12</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li><code>1 &lt;= preorder.length &lt;= 100</code></li><li>先序 <code>preorder</code> 中的值是不同的。</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：利用先序遍历"><a href="#方法一：利用先序遍历" class="headerlink" title="方法一：利用先序遍历"></a>方法一：利用先序遍历</h4><ul><li><strong>思路：</strong>按照先序遍历的顺序，每次将preorder划分为根节点root、左子树left和右子树right三个部分，然后对left和right递归执行该过程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bstFromPreorder(preorder, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 按照先序遍历构造BST</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(low &lt;= high) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> TreeNode(preorder[low]);</span><br><span class="line">            <span class="comment">// 寻找当前节点的右子树</span></span><br><span class="line">            <span class="keyword">int</span> i = low + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(i &lt;= high &amp;&amp; preorder[i] &lt;= root.val) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// low  low+1 ... i-1 i ... high</span></span><br><span class="line">            <span class="comment">// root      left      right</span></span><br><span class="line">            root.left = bstFromPreorder(preorder, low + <span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">            root.right = bstFromPreorder(preorder, i, high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：直接构造二叉搜索树"><a href="#方法二：直接构造二叉搜索树" class="headerlink" title="方法二：直接构造二叉搜索树"></a>方法二：直接构造二叉搜索树</h4><ul><li><strong>思路：</strong>按照先序遍历构造<strong>二叉搜索树</strong>，等价于按照给定的顺序，直接构造二叉搜索树。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">bstFromPreorder</span><span class="params">(<span class="keyword">int</span>[] preorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(preorder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 将所有的元素依次插入到BST中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> val : preorder) &#123;</span><br><span class="line">            root = insert(root, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将元素插入到BST中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insert</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(val &lt; root.val) &#123;</span><br><span class="line">            root.left = insert(root.left, val);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; root.val) &#123;</span><br><span class="line">            root.right = insert(root.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 102.二叉树的层次遍历</title>
      <link href="/2019/05/26/leetcode-102-binary-tree-level-order-traversal/"/>
      <url>/2019/05/26/leetcode-102-binary-tree-level-order-traversal/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。</p><a id="more"></a><p>例如:<br>给定二叉树: <code>[3,9,20,null,null,15,7]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>返回其层次遍历结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><strong>思路：</strong>使用队列。先将根结点root进队，在队列不为空时循环：</li></ul><p>此时队列中的元素个数size即为二叉树中当前层的节点个数，循环执行size次如下操作：将队首元素出队，若其有左孩子，则将其左孩子进队。若其还有右孩子，再将右孩子也进队。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">            <span class="comment">// 进队</span></span><br><span class="line">            queue.offer(root);</span><br><span class="line">            <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">                List&lt;Integer&gt; levels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">// 当前层的节点个数</span></span><br><span class="line">                <span class="keyword">int</span> size = queue.size();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                    <span class="comment">// 出队</span></span><br><span class="line">                    TreeNode node = queue.poll();</span><br><span class="line">                    levels.add(node.val);</span><br><span class="line">                    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        queue.offer(node.left);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        queue.offer(node.right);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(levels);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 145.二叉树的后序遍历</title>
      <link href="/2019/05/26/leetcode-145-binary-tree-postorder-traversal/"/>
      <url>/2019/05/26/leetcode-145-binary-tree-postorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，返回它的 <em>后序</em> 遍历。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.addAll(postorderTraversal(root.left));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                list.addAll(postorderTraversal(root.right));</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h4><ul><li><strong>思路：</strong>遇到一个节点，将其进栈，并将其所有左节点一一进栈。变量parent表示上一次访问过的节点。当栈不为空时，循环执行如下操作：将栈顶元素node出栈，若node的右孩子就是parent，表示node没有右孩子或者其右子树已被访问过，此时可以访问node节点，然后让parent指向node；否则，将node重新压入栈中，并让其指向右孩子，跳出循环。然后重新执行上述过程，直至栈空。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            TreeNode node = root;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(node);</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 上一次访问的节点</span></span><br><span class="line">                TreeNode parent = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">                    node = stack.pop();</span><br><span class="line">                    <span class="keyword">if</span>(node.right == parent) &#123;</span><br><span class="line">                        list.add(node.val);</span><br><span class="line">                        parent = node;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        stack.push(node);</span><br><span class="line">                        node = node.right;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">while</span>(!stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 94.二叉树的中序遍历</title>
      <link href="/2019/05/25/leetcode-94-binary-tree-inorder-traversal/"/>
      <url>/2019/05/25/leetcode-94-binary-tree-inorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，返回它的<em>中序</em> 遍历。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">输出: [1,3,2]</span><br></pre></td></tr></table></figure><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.addAll(inorderTraversal(root.left));</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            list.addAll(inorderTraversal(root.right));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h4><ul><li><strong>思路：</strong>遇到一个节点，将其进栈，并将其所有左节点一一进栈。此时，栈顶节点node没有左孩子或者左子树均已访问过。然后出栈并访问node，让node指向其右孩子，对右子树进行同样的处理。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            TreeNode node = root;</span><br><span class="line">            <span class="comment">// 刚开始循环或者左子树（包括根结点）已经遍历过时，栈为空，</span></span><br><span class="line">            <span class="comment">// 此时需要使用node != null保证循环执行</span></span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty() || node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将当前节点的所有左节点一一进栈</span></span><br><span class="line">                <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(node);</span><br><span class="line">                    node = node.left;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 此时，栈顶节点没有左孩子或左子树均已访问过</span></span><br><span class="line">                <span class="keyword">if</span>(!stack.isEmpty()) &#123;</span><br><span class="line">                    node = stack.pop();</span><br><span class="line">                    list.add(node.val);</span><br><span class="line">                    <span class="comment">// 处理右孩子</span></span><br><span class="line">                    node = node.right;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 144.二叉树的前序遍历</title>
      <link href="/2019/05/25/leetcode-144-binary-tree-preorder-traversal/"/>
      <url>/2019/05/25/leetcode-144-binary-tree-preorder-traversal/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，返回它的 <em>前序</em> 遍历。</p><a id="more"></a><p> <strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [1,2,3]</span><br></pre></td></tr></table></figure><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            list.add(root.val);</span><br><span class="line">            list.addAll(preorderTraversal(root.left));</span><br><span class="line">            list.addAll(preorderTraversal(root.right));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：迭代"><a href="#方法二：迭代" class="headerlink" title="方法二：迭代"></a>方法二：迭代</h4><ul><li><strong>思路：</strong>先将根结点root进栈，在栈不空时循环：出栈并访问node，若其右孩子节点不为空，则将右孩子节点进栈，若其左孩子节点不为空，再将其左孩子节点进栈。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            stack.push(root);</span><br><span class="line">            <span class="keyword">while</span>(!stack.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">// 1.栈顶元素出栈</span></span><br><span class="line">                TreeNode node = stack.pop();</span><br><span class="line">                list.add(node.val);</span><br><span class="line">                <span class="comment">// 2.若其右孩子节点不为空</span></span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 3.若其左孩子节点不为空</span></span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    stack.push(node.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1025.PAT Ranking (25 分)</title>
      <link href="/2019/05/23/pat-advanced-1025/"/>
      <url>/2019/05/23/pat-advanced-1025/</url>
      
        <content type="html"><![CDATA[<p>Programming Ability Test (PAT) is organized by the College of Computer Science and Technology of Zhejiang University. Each test is supposed to run simultaneously in several places, and the ranklists will be merged immediately after the test. Now it is your job to write a program to correctly merge all the ranklists and generate the final rank.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive number <em>N</em> (≤100), the number of test locations. Then <em>N</em> ranklists follow, each starts with a line containing a positive integer <em>K</em> (≤300), the number of testees, and then <em>K</em> lines containing the registration number (a 13-digit number) and the total score of each testee. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line the total number of testees. Then print the final ranklist in the following format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registration_number final_rank location_number local_rank</span><br></pre></td></tr></table></figure><p>The locations are numbered from 1 to <em>N</em>. The output must be sorted in nondecreasing order of the final ranks. The testees with the same score must have the same rank, and the output must be sorted in nondecreasing order of their registration numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">1234567890001 95</span><br><span class="line">1234567890005 100</span><br><span class="line">1234567890003 95</span><br><span class="line">1234567890002 77</span><br><span class="line">1234567890004 85</span><br><span class="line">4</span><br><span class="line">1234567890013 65</span><br><span class="line">1234567890011 25</span><br><span class="line">1234567890014 100</span><br><span class="line">1234567890012 85</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">9</span><br><span class="line">1234567890005 1 1 1</span><br><span class="line">1234567890014 1 2 1</span><br><span class="line">1234567890001 3 1 2</span><br><span class="line">1234567890003 3 1 2</span><br><span class="line">1234567890004 5 1 4</span><br><span class="line">1234567890012 5 2 2</span><br><span class="line">1234567890002 7 1 5</span><br><span class="line">1234567890013 8 2 3</span><br><span class="line">1234567890011 9 2 4</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>已知有N个考场，每个考场有若干个考生，给定每个考场中考生的准考证号和分数，要求计算排名。按照总排名的先后顺序，输出每个考生的准考证号、总排名、考场号以及考场内排名。</p><p><strong>思路：</strong>先进行考场内排名，然后再进行总排名。分数相同的情况下，按照准考证号从小到大的顺序排列，但其排名是相同的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Testee</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> registrationNumber[<span class="number">14</span>];</span><br><span class="line"><span class="keyword">int</span> finalRank;</span><br><span class="line"><span class="keyword">int</span> locationNumber;</span><br><span class="line"><span class="keyword">int</span> localRank;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 按照分数降序排序，若分数相同，则按照准考证号从小到大排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Testee a, Testee b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a.score != b.score) &#123;</span><br><span class="line"><span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strcmp</span>(a.registrationNumber, b.registrationNumber) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, k, num = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="comment">// max(n) * max(k) = 100 * 300</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Testee</span> <span class="title">testees</span>[30000];</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="comment">// 1.输入考生的准考证号和分数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">Testee testee;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d"</span>, testee.registrationNumber, &amp;testee.score);</span><br><span class="line">testee.locationNumber = i;</span><br><span class="line">testees[num++] = testee;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.计算考场内排名</span></span><br><span class="line">sort(testees + num - k, testees + num, cmp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = num - k; j &lt; num; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == num - k) &#123;</span><br><span class="line">testees[j].localRank = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (testees[j].score == testees[j - <span class="number">1</span>].score) &#123;</span><br><span class="line">testees[j].localRank = testees[j - <span class="number">1</span>].localRank;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">testees[j].localRank = j - (num - k) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.计算总排名</span></span><br><span class="line">sort(testees, testees + num, cmp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>) &#123;</span><br><span class="line">testees[j].finalRank = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (testees[j].score == testees[j - <span class="number">1</span>].score) &#123;</span><br><span class="line">testees[j].finalRank = testees[j - <span class="number">1</span>].finalRank;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">testees[j].finalRank = j + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %d %d %d\n"</span>, testees[j].registrationNumber,</span><br><span class="line">testees[j].finalRank, testees[j].locationNumber,</span><br><span class="line">testees[j].localRank);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1082.Read Number in Chinese (25 分)</title>
      <link href="/2019/05/23/pat-advanced-1082/"/>
      <url>/2019/05/23/pat-advanced-1082/</url>
      
        <content type="html"><![CDATA[<p>Given an integer with no more than 9 digits, you are supposed to read it in the traditional Chinese way. Output <code>Fu</code> first if it is negative. For example, -123456789 is read as <code>Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</code>. Note: zero (<code>ling</code>) must be handled correctly according to the Chinese tradition. For example, 100800 is <code>yi Shi Wan ling ba Bai</code>.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case, which gives an integer with no more than 9 digits.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in a line the Chinese way of reading the number. The characters are separated by a space and there must be no extra space at the end of the line.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-123456789</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100800</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi Shi Wan ling ba Bai</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>按照中文数字的读法，输出给定的整数（不超过9位）。</p><p><strong>思路：</strong>将输入的整数当作字符串来处理。</p><p>首先，判断首位字符是否为<code>-</code>，若为<code>-</code>，则输出<code>Fu</code>。</p><p>然后，设置left、right两个指针，用于标明同一组数字的最高位和最低位，从前向后每次循环只处理一组数字。(字符串从后向前，每四位数字为一组。)</p><p>用hasPrint表示在处理该组数字时，是否输出过非零数字，默认为false。</p><p>用hasZero表示当前数字的前面是否存在累积的零，默认为false。</p><p>若本组输出过至少一个非零数字，且right小于字符串的最大索引，则输出该节数字的单位（万或亿）。</p><p>处理完一组数字后，right后移4位，继续下一次循环，直到left大于等于字符串的长度为止。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> digits[<span class="number">10</span>][<span class="number">5</span>] = &#123; <span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>,</span><br><span class="line"><span class="string">"ba"</span>, <span class="string">"jiu"</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> unit[<span class="number">5</span>][<span class="number">5</span>] = &#123; <span class="string">"Shi"</span>, <span class="string">"Bai"</span>, <span class="string">"Qian"</span>, <span class="string">"Wan"</span>, <span class="string">"Yi"</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> data[<span class="number">11</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, data);</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(data);</span><br><span class="line"><span class="keyword">int</span> left = <span class="number">0</span>, right = len - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 若为负数</span></span><br><span class="line"><span class="keyword">if</span> (len != <span class="number">0</span> &amp;&amp; data[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Fu"</span>);</span><br><span class="line">left = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 找到与left在同一节中的right</span></span><br><span class="line"><span class="keyword">while</span> (left + <span class="number">4</span> &lt;= right) &#123;</span><br><span class="line">right -= <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (left &lt; len) &#123;</span><br><span class="line"><span class="keyword">bool</span> hasPrint = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">bool</span> hasZero = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 处理某一组数字</span></span><br><span class="line"><span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line"><span class="keyword">if</span> (left &gt; <span class="number">0</span> &amp;&amp; data[left] == <span class="string">'0'</span>) &#123;</span><br><span class="line">hasZero = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (hasZero == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" ling"</span>);</span><br><span class="line">hasZero = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">hasPrint = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// 若当前数字不是第一个数字，则输出空格</span></span><br><span class="line"><span class="keyword">if</span> (left &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, digits[data[left] - <span class="string">'0'</span>]);</span><br><span class="line"><span class="keyword">if</span> (right &gt; left) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s"</span>, unit[right - left - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">left++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若本组已经输出过至少一个非零数字，则输出该组数字的单位(万/亿)</span></span><br><span class="line"><span class="keyword">if</span> (hasPrint &amp;&amp; right &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s"</span>, unit[(len - <span class="number">1</span> - right) / <span class="number">4</span> + <span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line">right += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吴军《见识》读书笔记</title>
      <link href="/2019/05/22/reading-note-insight/"/>
      <url>/2019/05/22/reading-note-insight/</url>
      
        <content type="html"><![CDATA[<h3 id="序言-“命”和“运”决定人的一生"><a href="#序言-“命”和“运”决定人的一生" class="headerlink" title="序言  “命”和“运”决定人的一生"></a>序言  “命”和“运”决定人的一生</h3><blockquote><p>一个人小富小贵，可以靠一时的运气……仅仅靠一时运气好是不可能大富大贵的。</p></blockquote><blockquote><p>要想命好，首先要认识命的重要性，即信命和认命。信命是知道自己有所不能，认命则是不超越命运给自己画的线，对于得不到的坦然接受。</p></blockquote><p>我的理解：“信命”就是知道自己做不了什么，比如我性格偏内向，不善言辞，你让我去做推销，我肯定做不好。”认命“就是知道自己能做什么。</p><blockquote><p>但凡人的知识面稍微宽一点，交际的圈子稍微广一点，了解事情稍微全面一点，命就会好很多。</p></blockquote><p>我的理解：1.多读好书，最好涉猎多个领域。以我为例，我想涉猎的领域有文学、心理学、经济学、管理学、计算机等。</p><p>2.多交值得结交的朋友。常言道：在家靠父母，出门靠朋友。</p><p>3.人在信息不全面的情况下，容易做出错误的决定。</p><blockquote><p>性格决定命运。其实决定命运的还包括我们的习惯、行为及其背后的思维方式。思维方式出问题的人，命运之神是永远不会眷顾的。</p></blockquote><p>我的理解：比如，那些过马路不走人行道、闯红灯的人（这里要批评我自己，我有时和别人一起的时候，会跟着别人一起横穿马路），都是思维方式有问题的人。相比不遵守交通规则带来的那一点点时间节省，我们更应该考虑自身的安全。</p><blockquote><p>以认怂的态度对待人生一道又一道的坎，就会不断地被这个世界扇巴掌。</p></blockquote><h3 id="幸福是目的，成功是手段"><a href="#幸福是目的，成功是手段" class="headerlink" title="幸福是目的，成功是手段"></a>幸福是目的，成功是手段</h3><ul><li>人生是一条河</li></ul><blockquote><p>高尔基：给总比拿要快乐得多。</p></blockquote><blockquote><p>人生是一条河，每个人总希望自己这条河能够更宽一点、更深一点、更长一点。要做到更深，是靠自己的修行和对世界的理解；而要做到更宽，则是要和一些志同道合的人在一起共同做一些事情。</p></blockquote><ul><li>这个世界没有欠你什么</li></ul><blockquote><p>……那些指望通过十年寒窗苦读就一下子翻身的人……是不现实的。</p></blockquote><blockquote><p>寒窗苦读是成功的因素之一，和经济条件好、智商高、出身好、长得美一样，都只是其中的一个变量而已，而命运是多个变量互动的结果。这种因为寒窗苦读所以全世界都欠你钱的三观，早一天毁掉比晚一点毁掉好。</p></blockquote><blockquote><p>在任何国家、任何时代，社会都是分层的。</p></blockquote><blockquote><p>没有一个国家、一个社会，会每过两年就把现有的金字塔打碎，然后随机地再建造一个，那样的社会被称为动荡不安。</p></blockquote><blockquote><p>逆袭不成功是常态，成功的反而是少数。逆袭是一个漫长的过程。</p></blockquote><p>我的理解：逆袭是一个漫长的过程，不可能一蹴而就，需要几代人的努力才能实现。</p><blockquote><p>朝为田舍郎，暮登天子堂。</p></blockquote><ul><li>人生最重要的投资</li></ul><blockquote><p>对于年轻人来讲，对自己的投资和在职业上的进步，远比在股市上捞点钱或者向父母借钱买一套房子更为重要，也更为靠得住。当然，还有一个和投资自己至少同样重要甚至更为重要的投资，就是找一个好的配偶。</p></blockquote><blockquote><p>在一个完美的婚姻中，双方都要明白关系的亲密程度和重要性依次是”夫妻优先于子女，更优先于双方的父母“。</p></blockquote><p>我的理解：首先，配偶陪在自己身边的时间远超过父母和儿女。其次，在继承法中，配偶是遗产的第一顺位继承人，子女和父母是第二顺位继承人。</p><ul><li>先让父母成熟起来</li></ul><blockquote><p>人不可能一辈子不栽跟头，如果一定要栽跟头，早一点比晚一点好。</p></blockquote><blockquote><p>在现代社会，婚姻更多是两个人的事情，而不是一大家子一起掺和的事情。</p></blockquote><p>我的理解：在现代社会，大多数夫妻不会与双方父母生活在一起。只要两个人处得来，孝顺双方父母就可以了。儿孙自有儿孙福，双方父母不要过多干涉两个人的生活。</p><ul><li>向死而生</li></ul><blockquote><p>俗话说，除死无大难。</p></blockquote><blockquote><p>与其生不如死地多活两个月，不如用这个钱把人生几十年活好。</p></blockquote><p>我的理解：如果明知抢救不过来，不要花钱抢救我。与其给我延长一点点生命，每天饱受疼痛折磨，不如让我早点离开。</p><h3 id="人生需要做减法"><a href="#人生需要做减法" class="headerlink" title="人生需要做减法"></a>人生需要做减法</h3><ul><li>不做选择的幸福</li></ul><blockquote><p>很多时候，我们把太多的精力花在了选择上，而不是经营上，导致难以精进。或许少些选择，会更加聚焦，也会让我们更幸福、更成功。</p></blockquote><ul><li>西瓜与芝麻</li></ul><blockquote><p>人一旦心志变得非常低，就很难提升自己、让自己走到越来越高的层次上。</p></blockquote><ul><li>生也有涯，知也无涯</li></ul><blockquote><p>《庄子》：吾生也有涯，而知也无涯，以有涯随无涯，殆矣。已而为知者，殆而已矣。</p></blockquote><blockquote><p>人生成功的秘诀在于做减法，而做减法的关键在于能够跳出一般人的思维定式，找到那些其实无关紧要的事情，然后下决心把那些事情放弃掉。</p></blockquote><h3 id="谈谈见识"><a href="#谈谈见识" class="headerlink" title="谈谈见识"></a>谈谈见识</h3><ul><li>我们和天才相差有多远？</li></ul><blockquote><p>凡天才必有过人之处，但是我们和他们之间的差异可能不是生理上的差距，而是在其他方面，比如认识上、见识上、勇气上或方法上。</p></blockquote><ul><li>起跑线和玻璃心</li></ul><blockquote><p><strong>学习是一个长期的事情、一辈子的事情，是马拉松比赛，而不是百米赛跑。</strong></p></blockquote><p>我的理解：终身学习型社会，一时的落后并不要紧。一辈子很长，只要我们不懈努力，终会找到反超的机会。</p><ul><li>论运气</li></ul><blockquote><p>人在运气不好的时候，最需要的不是盲目的努力，而是慢下来思考，有耐心地做事情。</p></blockquote><p>我的理解：思考适合自己的方向，并为之不懈努力。</p><blockquote><p>任何经历只要善于利用都是财富，不善于利用都是浪费时间。一个有心的人，会善于把过去的经历变为今后成功的铺路石。</p></blockquote><blockquote><p><strong>社会上不是强者生存，而是适者生存。</strong></p></blockquote><ul><li>比贫穷更可怕的是什么？</li></ul><blockquote><p><strong>《庄子·外篇·秋水》：夏虫不可以语于冰者，笃于时也；曲士不可以语于道者，束于教也。</strong></p></blockquote><blockquote><p>缺乏见识、缺乏爱、缺乏规矩，是比缺钱更可怕的事情。</p></blockquote><blockquote><p>贫穷可能会在短期内使物质条件差一点，但是并不影响父母在见识、爱和规矩上培养好孩子。</p></blockquote><ul><li>对话庄子：谈谈见识</li></ul><blockquote><p>把目光放远，不要为眼前那一点点成就而沾沾自喜。</p></blockquote><ul><li>阅读的意义</li></ul><blockquote><p>阅读不仅让我们在冷酷无情的科技时代获得喘息，而且重启了大脑深入思考的功能，还是抵抗狭隘、思想控制和舆论支配的方式。</p></blockquote><blockquote><p><strong>牛津大学圣埃德蒙：Study as if you were to live forever, live as if you were to die tomorrow.</strong></p></blockquote><blockquote><p>终身学习，向死而生。</p></blockquote><h3 id="大家智慧"><a href="#大家智慧" class="headerlink" title="大家智慧"></a>大家智慧</h3><ul><li>莎士比亚的智慧：论朋友</li></ul><blockquote><p>《哈姆雷特》：To be or not not be, that is a question.</p></blockquote><blockquote><p>好的朋友是巨大的财富，而损友则是巨大的负资产。</p></blockquote><ul><li>销售大师的智慧</li></ul><blockquote><p><strong>很多人不顾家地去挣钱，讲的理由是为了家人的幸福，其实这种做法本身已经让家人不幸福了。</strong></p></blockquote><p>我的理解：挣钱是手段，幸福生活才是目的。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 108.将有序数组转换为二叉搜索树</title>
      <link href="/2019/05/20/leetcode-108-convert-sorted-array-to-binary-search-tree/"/>
      <url>/2019/05/20/leetcode-108-convert-sorted-array-to-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<p>将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定有序数组: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：直接构造AVL树"><a href="#方法一：直接构造AVL树" class="headerlink" title="方法一：直接构造AVL树"></a>方法一：直接构造AVL树</h4><p>参看<a href="/2019/05/20/leetcode-109-convert-sorted-list-to-binary-search-tree/">LeetCode 109.有序链表转换二叉搜索树</a></p><h4 id="方法二：递归"><a href="#方法二：递归" class="headerlink" title="方法二：递归"></a>方法二：递归</h4><ul><li>思路：以数组的中间元素为界，将数组一分为二。然后对这两个部分递归执行该过程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> createAVL(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">createAVL</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(low &gt; high) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        root.left = createAVL(nums, low, mid-<span class="number">1</span>);</span><br><span class="line">        root.right = createAVL(nums, mid+<span class="number">1</span>, high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 109.有序链表转换二叉搜索树</title>
      <link href="/2019/05/20/leetcode-109-convert-sorted-list-to-binary-search-tree/"/>
      <url>/2019/05/20/leetcode-109-convert-sorted-list-to-binary-search-tree/</url>
      
        <content type="html"><![CDATA[<p>给定一个单链表，其中的元素按升序排序，将其转换为高度平衡的二叉搜索树。</p><p>本题中，一个高度平衡二叉树是指一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过 1。</p><a id="more"></a><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">给定的有序链表： [-10, -3, 0, 5, 9],</span><br><span class="line"></span><br><span class="line">一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树：</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：直接构造AVL树"><a href="#方法一：直接构造AVL树" class="headerlink" title="方法一：直接构造AVL树"></a>方法一：直接构造AVL树</h4><ul><li>思路：遍历链表中的每一个节点，将其插入到AVL树中。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     ListNode next;</span></span><br><span class="line"><span class="comment">     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            root = insert(root,head.val);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// LL型旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">leftRotation</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode node = root.left;</span><br><span class="line">        root.left = node.right;</span><br><span class="line">        node.right = root;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// RR型旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">rightRotation</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode node = root.right;</span><br><span class="line">        root.right = node.left;</span><br><span class="line">        node.left = root;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// LR型旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">leftRightRotation</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        root.left = rightRotation(root.left);</span><br><span class="line">        <span class="keyword">return</span> leftRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// RL型旋转</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">rightLeftRotation</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        root.right = leftRotation(root.right);</span><br><span class="line">        <span class="keyword">return</span> rightRotation(root);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">insert</span><span class="params">(TreeNode root,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> TreeNode(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &lt; root.val) &#123;</span><br><span class="line">            root.left = insert(root.left,x);</span><br><span class="line">            <span class="keyword">if</span>(getHeight(root.left) - getHeight(root.right) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(x &lt; root.left.val) &#123;</span><br><span class="line">                    root = leftRotation(root);</span><br><span class="line">                &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">                    root = leftRightRotation(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; root.val) &#123;</span><br><span class="line">            root.right = insert(root.right,x);</span><br><span class="line">            <span class="keyword">if</span>(getHeight(root.right) - getHeight(root.left) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(x &gt; root.right.val) &#123;</span><br><span class="line">                    root = rightRotation(root);</span><br><span class="line">                &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">                    root = rightLeftRotation(root);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(getHeight(root.left),getHeight(root.right)) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：快慢指针-递归"><a href="#方法二：快慢指针-递归" class="headerlink" title="方法二：快慢指针+递归"></a>方法二：快慢指针+递归</h4><ul><li>思路：通过快慢指针，寻找中间节点。以此节点为界，将链表一分为二。然后对这两个部分递归执行该过程。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class ListNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     ListNode next;</span></span><br><span class="line"><span class="comment">     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedListToBST</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.寻找中间节点</span></span><br><span class="line">        ListNode pre = head;</span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="keyword">null</span> &amp;&amp; fast.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pre = slow;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        TreeNode root = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            root = <span class="keyword">new</span> TreeNode(slow.val);</span><br><span class="line">            <span class="comment">// 2.以中间节点为界，将链表一分为二</span></span><br><span class="line">            pre.next = <span class="keyword">null</span>;</span><br><span class="line">            fast = slow.next;</span><br><span class="line">            <span class="comment">// 3.对左右两个部分递归执行该过程</span></span><br><span class="line">            <span class="keyword">if</span>(slow != head) &#123;</span><br><span class="line">                root.left = sortedListToBST(head);</span><br><span class="line">            &#125;</span><br><span class="line">            root.right = sortedListToBST(fast);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 110.平衡二叉树</title>
      <link href="/2019/05/20/leetcode-110-balanced-binary-tree/"/>
      <url>/2019/05/20/leetcode-110-balanced-binary-tree/</url>
      
        <content type="html"><![CDATA[<p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><blockquote><p>一个二叉树<em>每个节点</em> 的左右两个子树的高度差的绝对值不超过1。</p></blockquote><a id="more"></a><p><strong>示例 1:</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><p>返回 <code>true</code> 。</p><p><strong>示例 2:</strong></p><p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      1</span><br><span class="line">     / \</span><br><span class="line">    2   2</span><br><span class="line">   / \</span><br><span class="line">  3   3</span><br><span class="line"> / \</span><br><span class="line">4   4</span><br></pre></td></tr></table></figure><p>返回 <code>false</code> 。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>本题可以采用递归法，递归表达式如下所示：<br>$$<br>isBalanced(root)=<br>\begin{cases}<br>true, &amp; root为空 \\<br>isBalanced(root.left) \cap isBalanced(root.right), &amp; root节点是平衡的 \\<br>\end{cases}<br>$$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">     int val;</span></span><br><span class="line"><span class="comment">     TreeNode left;</span></span><br><span class="line"><span class="comment">     TreeNode right;</span></span><br><span class="line"><span class="comment">     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Math.abs(getHeight(root.left) - getHeight(root.right)) &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//求树的高度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(getHeight(root.left), getHeight(root.right)) + <span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> binary-tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 CCF CCSP分区赛折戟而归</title>
      <link href="/2019/05/18/2019-ccf-ccsp-division-series/"/>
      <url>/2019/05/18/2019-ccf-ccsp-division-series/</url>
      
        <content type="html"><![CDATA[<p><img src="/static/images/hnu.jpg" alt="湖南大学"></p><a id="more"></a><h3 id="竞赛安排"><a href="#竞赛安排" class="headerlink" title="竞赛安排"></a>竞赛安排</h3><p>今年，CCF决定举办首届CCF CCSP分区赛。CCF官方对其的定位为：分赛区竞赛以CSP认证为初赛，是CCSP总决赛前的复赛。</p><p>全国被分成了七个赛区，分别由七所高校承办：</p><p>东北： 哈尔滨工业大学</p><p>华北：北京邮电大学</p><p>华中：湖南大学</p><p>华东：南京航空航天大学</p><p>华南：深圳大学</p><p>西北：西安电子科技大学</p><p>西南：四川大学</p><p>不同的赛区对参赛资格的要求各不相同。以我所在的华中赛区为例，要求<strong>CSP成绩不低于200分</strong>（近四次认证中的任一次）。</p><h3 id="竞赛题目"><a href="#竞赛题目" class="headerlink" title="竞赛题目"></a>竞赛题目</h3><p>本次竞赛总共三道题，总分300分，时间为6个小时，不限语言（C++/Java/Python），通过一个测试点即可得到该测试点的分数。</p><p>与往常CCF CSP不同的地方是，本次比赛采用OJ的形式，可以看到提交的代码通过了哪些测试点，以及其他人的AC情况。</p><h4 id="第一题-统计CCSP子图个数"><a href="#第一题-统计CCSP子图个数" class="headerlink" title="第一题 统计CCSP子图个数"></a>第一题 统计CCSP子图个数</h4><p><strong>第一题</strong>是关于数据结构中图的应用。题目大意是：<strong>给定一个图，求该图中满足某些性质的子图个数。</strong></p><p>一直以来，图就是我的知识盲区，所以一上来我就蒙了。翻开数据结构书，边敲边想，花了大概一个多小时，看到很多人已经AC了，最终无奈放弃了。</p><p>最后还剩一个小时的时候，我发现本题其实是可以骗分的。</p><p>第一个测试点（14分）不满足题目中给定子图的要求，直接输出0即可，这14分相当于是白送给我们的。</p><p>第二个测试点（34分）刚好满足给定子图的基本要求（4个顶点4条边），因此只涉及到创建图、判断该图是否连通以及图中是否存在回路。最后还剩不到十分钟时，我成功通过了第二个测试点，又骗到了34分。</p><p>因此，第一题我几乎没费什么时间就拿到了<strong>48分</strong>。当然，虽然骗到了将近一半的分数，但其实离真正AC还差得远呢！</p><h4 id="第二题-强化的RAID5"><a href="#第二题-强化的RAID5" class="headerlink" title="第二题 强化的RAID5"></a>第二题 强化的RAID5</h4><p><strong>第二题</strong>是一道字符串模拟题。题目内容<strong>与2019年3月第十六次CCF CSP的第三题几乎一样</strong>。由于本题题目实在太长，我直接就跳过了。</p><p>需要吐槽的是，同样是由于题目冗长，第十六次CSP第三题我直接没做，最终只AC前两道送分题，得了200分。</p><h4 id="第三题-简化的MapReduce"><a href="#第三题-简化的MapReduce" class="headerlink" title="第三题 简化的MapReduce"></a>第三题 简化的MapReduce</h4><p><strong>第三题要求实现一个简化版的MapReduce。</strong>本题只支持C++和Java两种语言，得分的方式也略有不同，程序的正确性只占30%，性能占70%。</p><p>题目给定了一个接口，要求我们实现该接口中的若干方法。主要考查了函数式编程及多线程的知识。</p><p>在C++版中，CCF官方直接给了一个简单的实现，而Java则需要自己实现。</p><p>Java版的实现，主要是基于Java8的Stream API。老实讲，我对Stream API并不太熟悉，幸好题目给了一个统计文件中字母<code>a</code>开头的各单词个数的例子，半猜半看，大致弄懂了每个方法要做什么。午饭前后，我大致完成了本题，结果一提交，只通过了第一个测试点，后面的测试点要么报TLE，要么说格式不正确，最终仅得到了<strong>2.92分</strong>。</p><p>后来，我发现题目中明确告诉我们，C++版给了一个简单的实现，遂直接将官方的实现提交了，结果直接通过了前两个测试点，<strong>得分为20.92分</strong>。</p><h3 id="赛况统计"><a href="#赛况统计" class="headerlink" title="赛况统计"></a>赛况统计</h3><p>华中赛区总共有105人参赛，参赛选手来自武大（包括我在内总计三人）、华科、国防科大、中南、湖南大学、长沙理工等15所高校。我的最终得分为<strong>68.92分</strong>，大致排在90左名。</p><p>金、银、铜奖总计62个，几乎被长沙四校（国防科大、中南、湖大以及长沙理工）包揽了。</p><h3 id="赛后感受"><a href="#赛后感受" class="headerlink" title="赛后感受"></a>赛后感受</h3><p><strong>折腾一次就够了，真的太烧钱啦！</strong></p><p>为了参加本次竞赛，我前前后后总共花费了906元。其中，报名费400元，住宿一晚177元，高铁往返164.5×2=329元（本来想坐普通火车回来的，主要是心神消耗过大，加上特快要4个多小时，到武汉得晚上12点左右）。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1077.Kuchiguse (20 分)</title>
      <link href="/2019/05/16/pat-advanced-1077/"/>
      <url>/2019/05/16/pat-advanced-1077/</url>
      
        <content type="html"><![CDATA[<p>The Japanese language is notorious for its sentence ending particles. Personal preference of such particles can be considered as a reflection of the speaker’s personality. Such a preference is called “Kuchiguse” and is often exaggerated artistically in Anime and Manga. For example, the artificial sentence ending particle “nyan~” is often used as a stereotype for characters with a cat-like personality:</p><ul><li>Itai nyan~ (It hurts, nyan~)</li><li>Ninjin wa iyada nyan~ (I hate carrots, nyan~)</li></ul><p>Now given a few lines spoken by the same character, can you find her Kuchiguse?</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line is an integer <em>N</em> (2≤<em>N</em>≤100). Following are <em>N</em> file lines of 0~256 (inclusive) characters in length, each representing a character’s spoken line. The spoken lines are case sensitive.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the kuchiguse of the character, i.e., the longest common suffix of all <em>N</em> lines. If there is no such suffix, write <code>nai</code>.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Itai nyan~</span><br><span class="line">Ninjin wa iyadanyan~</span><br><span class="line">uhhh nyan~</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nyan~</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Itai!</span><br><span class="line">Ninjinnwaiyada T_T</span><br><span class="line">T_T</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nai</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个字符串，求其最长公共后缀。</p><p><strong>思路：</strong>设maxLen表示最长公共后缀的长度，初始值为258。从第二个字符串开始，将每一个字符串与前一个字符串进行比较，求其公共后缀长度len。若len小于maxLen，则将len赋给maxLen。</p><p>待循环执行完毕后，若maxLen为0，则输出<code>nai</code>。否则，输出最长公共后缀。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">char</span> lines[n][<span class="number">257</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>, maxLen = <span class="number">257</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line"> <span class="comment">// 由于字符串中可能包含空格，故不能采用scanf。</span></span><br><span class="line"><span class="comment">// 且PAT不再支持gets，故采用getchar()逐个字符输入</span></span><br><span class="line"><span class="keyword">while</span> ((c = getchar()) != <span class="string">'\n'</span>) &#123;</span><br><span class="line">lines[i][j++] = c;</span><br><span class="line">&#125;</span><br><span class="line">lines[i][j] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> preIndex = <span class="built_in">strlen</span>(lines[i - <span class="number">1</span>]) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> currentIndex = <span class="built_in">strlen</span>(lines[i]) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; currentIndex &gt;= <span class="number">0</span></span><br><span class="line">&amp;&amp; lines[i][currentIndex--] == lines[i - <span class="number">1</span>][preIndex--]) &#123;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (len &lt; maxLen) &#123;</span><br><span class="line">maxLen = len;</span><br><span class="line">&#125;</span><br><span class="line">len = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (maxLen == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"nai"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> len0 = <span class="built_in">strlen</span>(lines[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len0 - maxLen; i &lt; len0; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, lines[<span class="number">0</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1035.Password (20 分)</title>
      <link href="/2019/05/16/pat-advanced-1035/"/>
      <url>/2019/05/16/pat-advanced-1035/</url>
      
        <content type="html"><![CDATA[<p>To prepare for PAT, the judge sometimes has to generate random passwords for the users. The problem is that there are always some confusing passwords since it is hard to distinguish <code>1</code> (one) from <code>l</code> (<code>L</code> in lowercase), or <code>0</code> (zero) from <code>O</code> (<code>o</code> in uppercase). One solution is to replace <code>1</code>(one) by <code>@</code>, <code>0</code> (zero) by <code>%</code>, <code>l</code> by <code>L</code>, and <code>O</code> by <code>o</code>. Now it is your job to write a program to check the accounts generated by the judge, and to help the juge modify the confusing passwords.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em> (≤1000), followed by <em>N</em> lines of accounts. Each account consists of a user name and a password, both are strings of no more than 10 characters with no space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print the number <em>M</em> of accounts that have been modified, then print in the following <em>M</em> lines the modified accounts info, that is, the user names and the corresponding modified passwords. The accounts must be printed in the same order as they are read in. If no account is modified, print in one line <code>There are N accounts and no account is modified</code> where <code>N</code> is the total number of accounts. However, if <code>N</code> is one, you must print <code>There is 1 account and no account is modified</code> instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Team000002 Rlsp0dfa</span><br><span class="line">Team000003 perfectpwd</span><br><span class="line">Team000001 R1spOdfa</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">Team000002 RLsp%dfa</span><br><span class="line">Team000001 R@spodfa</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">team110 abcdefg332</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There is 1 account and no account is modified</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-3"><a href="#Sample-Input-3" class="headerlink" title="Sample Input 3:"></a>Sample Input 3:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">team110 abcdefg222</span><br><span class="line">team220 abcdefg333</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-3"><a href="#Sample-Output-3" class="headerlink" title="Sample Output 3:"></a>Sample Output 3:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">There are 2 accounts and no account is modified</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>给定N个用户账号（包含用户名和密码），将密码中的<code>1</code>(数字一)替换为<code>@</code>，<code>0</code>(数字零)替换为<code>%</code>，<code>l</code>（小写字母）替换为<code>L</code>，<code>O</code>（大写字母）替换为<code>o</code>。</p><p>输出被更改的账号个数M，以及被更改账号的用户名和更改后的密码。</p><p>若没有账户需要更改，输出<code>There are N accounts and no account is modified</code>，其中N为账号个数。特别地，当N为1时，输出<code>There is 1 account and no account is modified</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Account</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> username[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">char</span> password[<span class="number">11</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Account</span> <span class="title">accounts</span>[<span class="title">n</span>];</span></span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Account</span> <span class="title">a</span>;</span></span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, a.username, a.password);</span><br><span class="line"><span class="keyword">bool</span> isModified = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(a.password); j++) &#123;</span><br><span class="line"><span class="keyword">switch</span>(a.password[j]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'l'</span>:</span><br><span class="line">a.password[j] = <span class="string">'L'</span>;</span><br><span class="line">isModified = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">a.password[j] = <span class="string">'@'</span>;</span><br><span class="line">isModified = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">a.password[j] = <span class="string">'%'</span>;</span><br><span class="line">isModified = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'O'</span>:</span><br><span class="line">a.password[j] = <span class="string">'o'</span>;</span><br><span class="line">isModified = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isModified) &#123;</span><br><span class="line">accounts[len++] = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"There is 1 account and no account is modified\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"There are %d accounts and no account is modified\n"</span>, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Account</span> <span class="title">a</span> = <span class="title">accounts</span>[<span class="title">i</span>];</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, a.username, a.password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 328.奇偶链表</title>
      <link href="/2019/05/10/leetcode-328-odd-even-linked-list/"/>
      <url>/2019/05/10/leetcode-328-odd-even-linked-list/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p><p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL</span><br><span class="line">输出: 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL </span><br><span class="line">输出: 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ul><li>应当保持奇数节点和偶数节点的相对顺序。</li><li>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</li></ul><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：复制法"><a href="#方法一：复制法" class="headerlink" title="方法一：复制法"></a>方法一：复制法</h4><ul><li><p><strong>思路：</strong>复制原链表head，得到新的链表newList，分别对head的奇数节点、newList的偶数节点进行处理。</p></li><li><p><strong>算法实现</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 链表为空，或仅含一个节点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode newList = copy(head);</span><br><span class="line">        ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode rear = root;</span><br><span class="line">        <span class="comment">// 处理奇数节点</span></span><br><span class="line">        <span class="keyword">while</span>(newList != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rear.next = newList;</span><br><span class="line">            rear = newList;</span><br><span class="line">            <span class="keyword">if</span>(newList.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            newList = newList.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理偶数节点</span></span><br><span class="line">        ListNode node = head.next;</span><br><span class="line">         <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rear.next = node;</span><br><span class="line">            rear = node;</span><br><span class="line">            <span class="keyword">if</span>(node.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        rear.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> root.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 复制链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">copy</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode rear = root;</span><br><span class="line">        ListNode node;</span><br><span class="line">        <span class="keyword">while</span>(head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            node = <span class="keyword">new</span> ListNode(head.val);</span><br><span class="line">            rear.next = node;</span><br><span class="line">            rear = node;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>复杂度分析：</strong></li></ul><p>空间复杂度：该方法需要复制原链表，故空间复杂度为O(nodes)</p><p>时间复杂度：O(nodes)</p><h4 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h4><ul><li><strong>思路：</strong>使用奇偶双指针，同时处理奇偶节点，分别得到两个链表，然后将这两个链表链接在一起。</li><li><strong>算法实现</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">oddEvenList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode l1 = head;</span><br><span class="line">        ListNode l2 = head.next;</span><br><span class="line">        ListNode odd = l1;</span><br><span class="line">        ListNode even = l2;</span><br><span class="line">        <span class="comment">// 使用奇偶双指针，同时处理奇偶节点</span></span><br><span class="line">        <span class="keyword">while</span>(even != <span class="keyword">null</span> &amp;&amp; even.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            odd.next = even.next;</span><br><span class="line">            even.next = even.next.next;</span><br><span class="line">            </span><br><span class="line">            odd = odd.next;</span><br><span class="line">            even = even.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将偶数链表拼接到奇数链表后</span></span><br><span class="line">        odd.next = l2;</span><br><span class="line">        <span class="keyword">return</span> l1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>复杂度分析：</strong></li></ul><p>空间复杂度：只使用了常数的额外空间，故空间复杂度为O(1)</p><p>时间复杂度：仅对链表执行一次遍历，故时间复杂度为O(nodes)</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 203.移除链表元素</title>
      <link href="/2019/05/08/leetcode-203-remove-linked-list-elements/"/>
      <url>/2019/05/08/leetcode-203-remove-linked-list-elements/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>删除链表中等于给定值 <strong>val</strong> 的所有节点。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：使用头结点"><a href="#方法一：使用头结点" class="headerlink" title="方法一：使用头结点"></a>方法一：使用头结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        ListNode root = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        root.next = head;</span><br><span class="line">        ListNode node = root;</span><br><span class="line">        <span class="keyword">while</span>(node.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(node.next.val == val) &#123;</span><br><span class="line">                node.next = node.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：不使用头结点"><a href="#方法二：不使用头结点" class="headerlink" title="方法二：不使用头结点"></a>方法二：不使用头结点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// pre表示node的前驱结点</span></span><br><span class="line">        ListNode node = head, pre = head;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(node.val == val) &#123;</span><br><span class="line">                <span class="comment">// 若头结点需要删除</span></span><br><span class="line">                <span class="keyword">if</span>(node == head) &#123;</span><br><span class="line">                    head = head.next;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pre.next = node.next;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = node;</span><br><span class="line">            &#125;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法三：递归法"><a href="#方法三：递归法" class="headerlink" title="方法三：递归法"></a>方法三：递归法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若头结点需要删除</span></span><br><span class="line">        <span class="keyword">if</span>(head.val == val) &#123;</span><br><span class="line">            <span class="keyword">return</span> removeElements(head.next, val);</span><br><span class="line">        &#125;</span><br><span class="line">        head.next = removeElements(head.next, val);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1005.Spell It Right (20 分)</title>
      <link href="/2019/05/08/pat-advanced-1005/"/>
      <url>/2019/05/08/pat-advanced-1005/</url>
      
        <content type="html"><![CDATA[<p>Given a non-negative integer <em>N</em>, your task is to compute the sum of all the digits of <em>N</em>, and output every digit of the sum in English.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies one line which contains an <em>N</em> (≤$10^{100}$).</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the digits of the sum in English words. There must be one space between two consecutive words, but no extra space at the end of a line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12345</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one five</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：给定一个非负数N，计算其各位数字之和，并输出和的每一位的英文表示。</p><p>思路：以字符串的形式读入n，计算其各位数字之和sum，将sum转换为字符串result，输出result每一位对应的英文表示。</p><p>1.纯c风格（不使用c++的string）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">102</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, n);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> digits[<span class="number">10</span>][<span class="number">6</span>] = &#123; <span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>,</span><br><span class="line"><span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(n); i++) &#123;</span><br><span class="line">sum += (n[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">102</span>], index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 倒序存储sum的每一位，使用do...while是为了处理sum为0的情况</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">result[index++] = sum % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">sum /= <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (sum != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != index - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, digits[result[i] - <span class="string">'0'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.c++风格（使用string）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">string</span> digits[<span class="number">10</span>] = &#123; <span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>,</span><br><span class="line"><span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n.size(); i++) &#123;</span><br><span class="line">sum += (n[i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> result = to_string(sum);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; digits[result[i] - <span class="string">'0'</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1001.A+B Format (20 分)</title>
      <link href="/2019/05/07/pat-advanced-1001/"/>
      <url>/2019/05/07/pat-advanced-1001/</url>
      
        <content type="html"><![CDATA[<p>Calculate <em>a</em>+<em>b</em> and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a pair of integers <em>a</em> and <em>b</em> where −10^6≤<em>a</em>,<em>b</em>≤10^6. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, you should output the sum of <em>a</em> and <em>b</em> in one line. The sum must be written in the standard format.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1000000 9</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-999,991</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：计算a+b，然后以每三位加一个逗号<code>,</code>的格式输出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, sum, index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;a, &amp;b);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">sum = -sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 采用do...while，避免当sum = 0时，字符数组s为空</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="comment">// 倒序存储sum</span></span><br><span class="line">s[index++] = sum % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">sum /= <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 每三位添加一个逗号</span></span><br><span class="line"><span class="keyword">if</span> (count % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; sum != <span class="number">0</span>) &#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">s[index++] = <span class="string">','</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">while</span> (sum != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1048.数字加密 (20 分)</title>
      <link href="/2019/05/07/pat-basic-1048/"/>
      <url>/2019/05/07/pat-basic-1048/</url>
      
        <content type="html"><![CDATA[<p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出加密后的结果。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567 368782971</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3695Q8118</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目已知个位为第1位，因此可以考虑先将A、B反转，然后分奇偶位进行相应的操作。</p><p>需要注意的是：当正整数B的长度小于A时，B前面的空缺位置，依然需要执行加密操作。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">char</span> s[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++) &#123;</span><br><span class="line">temp = s[i];</span><br><span class="line">s[i] = s[len - i - <span class="number">1</span>];</span><br><span class="line">s[len - i - <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">101</span>], b[<span class="number">101</span>], c[<span class="number">101</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s"</span>, a, b);</span><br><span class="line">reverse(a);</span><br><span class="line">reverse(b);</span><br><span class="line"><span class="keyword">int</span> lenB = <span class="built_in">strlen</span>(b);</span><br><span class="line"><span class="keyword">int</span> lenA = <span class="built_in">strlen</span>(a);</span><br><span class="line"><span class="keyword">int</span> len = lenA &gt; lenB ? lenA : lenB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> numA = i &lt;= lenA ? a[i - <span class="number">1</span>] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> numB = i &lt;= lenB ? b[i - <span class="number">1</span>] - <span class="string">'0'</span> : <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 若为奇数</span></span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> result = (numA + numB) % <span class="number">13</span>;</span><br><span class="line"><span class="keyword">if</span> (result &lt; <span class="number">10</span>) &#123;</span><br><span class="line">c[i - <span class="number">1</span>] = result + <span class="string">'0'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">10</span>) &#123;</span><br><span class="line">c[i - <span class="number">1</span>] = <span class="string">'J'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">11</span>) &#123;</span><br><span class="line">c[i - <span class="number">1</span>] = <span class="string">'Q'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c[i - <span class="number">1</span>] = <span class="string">'K'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> result = numB - numA;</span><br><span class="line"><span class="keyword">if</span> (result &lt; <span class="number">0</span>) &#123;</span><br><span class="line">c[i - <span class="number">1</span>] = result + <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c[i - <span class="number">1</span>] = result + <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(c) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1024.科学计数法/PAT甲级 1073.Scientific Notation (20 分)</title>
      <link href="/2019/05/05/pat-basic-1024/"/>
      <url>/2019/05/05/pat-basic-1024/</url>
      
        <content type="html"><![CDATA[<p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [+-][1-9]<code>.</code>[0-9]+E[+-][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。</p><p>现以科学计数法的格式给出实数 <em>A</em>，请编写程序按普通数字表示法输出 <em>A</em>，并保证所有有效位都被保留。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 <em>A</em>。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例，在一行中按普通数字表示法输出 <em>A</em>，并保证所有有效位都被保留，包括末尾的 0。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+1.23400E-03</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.00123400</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1.2E+10</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-12000000000</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题的关键是，找到<code>E</code>的位置dot，<code>E</code>前面为数字部分，后面为指数。</p><p>本题需要分以下三种情况考虑：</p><p>（1）<strong>输入的指数部分e为负数</strong>。首先输出<code>0.</code>，然后输出<code>e-1</code>个0，最后将输入的数字部分（不带小数点）原样输出即可。</p><p>（2）<strong>输入的指数部分e为正数，且小数位count小于指数e</strong>。首先将输入的数字部分（不带小数点）原样输出，然后再输出<code>e-count</code>个0即可。</p><p>（3）<strong>输入的指数部分e为正数，且小数位count大于等于指数e</strong>。首先将小数点前的数字部分输出，然后将小数点后e位输出。接着，判断count是否大于e。若大于，先输出小数点，然后将数字部分剩下的<code>count-e</code>位依次输出。</p><p>最后，需要注意的是：若输入为正数，则输出时不带符号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s, e, n, result;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = s.find(<span class="string">"E"</span>);</span><br><span class="line"><span class="comment">// 数字部分</span></span><br><span class="line">n = s.substr(<span class="number">1</span>, index - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 指数部分</span></span><br><span class="line">e = s.substr(index + <span class="number">2</span>, s.size() - index - <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 若为负数</span></span><br><span class="line"><span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">result = s[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = stoi(e);</span><br><span class="line"><span class="keyword">int</span> dot = n.find(<span class="string">"."</span>);</span><br><span class="line"><span class="comment">// 若指数为负</span></span><br><span class="line"><span class="keyword">if</span> (s[index + <span class="number">1</span>] == <span class="string">'-'</span>) &#123;</span><br><span class="line">result += <span class="string">"0."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x - <span class="number">1</span>; i++) &#123;</span><br><span class="line">result += <span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result += n.substr(<span class="number">0</span>, dot) + n.substr(dot + <span class="number">1</span>, n.size() - dot - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> count = n.size() - n.find(<span class="string">"."</span>) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 若指数大于小数位数</span></span><br><span class="line"><span class="keyword">if</span> (count &lt; x) &#123;</span><br><span class="line">result += n.substr(<span class="number">0</span>, dot) + n.substr(dot + <span class="number">1</span>, n.size() - dot - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x - count; i++) &#123;</span><br><span class="line">result += <span class="string">"0"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result += n.substr(<span class="number">0</span>, dot) + n.substr(dot + <span class="number">1</span>, x);</span><br><span class="line"><span class="comment">// 若指数小于小数位数</span></span><br><span class="line"><span class="keyword">if</span> (x &lt; count) &#123;</span><br><span class="line">result += <span class="string">"."</span> + n.substr(dot + x + <span class="number">1</span>, n.size() - dot - x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 264.丑数 II</title>
      <link href="/2019/05/03/leetcode-264-ugly-number-ii/"/>
      <url>/2019/05/03/leetcode-264-ugly-number-ii/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个程序，找出第 <code>n</code> 个丑数。</p><p>丑数就是只包含质因数 <code>2, 3, 5</code> 的<strong>正整数</strong>。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: n = 10</span><br><span class="line">输出: 12</span><br><span class="line">解释: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。</span><br></pre></td></tr></table></figure><p><strong>说明:</strong>  </p><ol><li><code>1</code> 是丑数。</li><li><code>n</code> <strong>不超过</strong>1690。</li></ol><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>三指针法</strong>：使用数组ugly存储所有的丑数，ugly[0] = 1。下一个丑数ugly[i]定义为丑数数组中的值乘以权重2、3和5，所得到的最小值。</p><p>（1）使用三个指针idx2、idx3、idx5，分别表示2应该乘以ugly[idx2]，3应该乘以ugly[idx3]，5应该乘以ugly[idx5]。</p><p>（2）在计算下一个丑数时，若某指针指向的丑数乘以对应的权重所得积最小，则该指针向后移动一位。</p><p>（3）应该使用三个并列的<code>if</code>让指针后移，而不能采用<code>if-else</code>。例如，丑数6，可以由丑数2乘以权重3得到，亦可以由丑数3乘以权重2得到，此时，权重2、3的指针都需要向后移一位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nthUglyNumber</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ugly = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        ugly[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> idx2,idx3,idx5,a,b,c,temp;</span><br><span class="line">        idx2 = idx3 = idx5 = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">            a = <span class="number">2</span> * ugly[idx2];</span><br><span class="line">            b = <span class="number">3</span> * ugly[idx3];</span><br><span class="line">            c = <span class="number">5</span> * ugly[idx5];</span><br><span class="line">            temp = Math.min(Math.min(a,b),c);</span><br><span class="line">            <span class="keyword">if</span>(temp == a) &#123;</span><br><span class="line">                idx2++;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(temp == b) &#123;</span><br><span class="line">                idx3++;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span>(temp == c) &#123;</span><br><span class="line">                idx5++;</span><br><span class="line">            &#125;</span><br><span class="line">            ugly[i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ugly[n-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 263.丑数</title>
      <link href="/2019/05/03/leetcode-263-ugly-number/"/>
      <url>/2019/05/03/leetcode-263-ugly-number/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>编写一个程序判断给定的数是否为丑数。</p><p>丑数就是只包含质因数 <code>2, 3, 5</code> 的<strong>正整数</strong>。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 6</span><br><span class="line">输出: true</span><br><span class="line">解释: 6 = 2 × 3</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 8</span><br><span class="line">输出: true</span><br><span class="line">解释: 8 = 2 × 2 × 2</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 14</span><br><span class="line">输出: false </span><br><span class="line">解释: 14 不是丑数，因为它包含了另外一个质因数 7。</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li><code>1</code> 是丑数。</li><li>输入不会超过 32 位有符号整数的范围: $[−2^{31},  2^{31}-1]$。</li></ol><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：递归"><a href="#方法一：递归" class="headerlink" title="方法一：递归"></a>方法一：递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isUgly(num / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isUgly(num / <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> isUgly(num / <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二：循环"><a href="#方法二：循环" class="headerlink" title="方法二：循环"></a>方法二：循环</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUgly</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(num &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            num /= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(num % <span class="number">3</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            num /= <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(num % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            num /= <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 204.计数质数</title>
      <link href="/2019/05/02/leetcode-204-count-primes/"/>
      <url>/2019/05/02/leetcode-204-count-primes/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>统计所有小于非负整数 <em>n</em> 的质数的数量。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 10</span><br><span class="line">输出: 4</span><br><span class="line">解释: 小于 10 的质数一共有 4 个, 它们是 2, 3, 5, 7 。</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：暴力法"><a href="#方法一：暴力法" class="headerlink" title="方法一：暴力法"></a>方法一：暴力法</h4><p>逐个判断 [ 2 , n )中的每个整数，是否为质数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isPrime(i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">2</span> || x == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= Math.sqrt(x); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的时间复杂度为$O(n\sqrt{n})$。</p><p>由于本题有几个较大的测试用例，如1500000，采用暴力法会超时。</p><h4 id="方法二：埃氏筛法"><a href="#方法二：埃氏筛法" class="headerlink" title="方法二：埃氏筛法"></a>方法二：埃氏筛法</h4><p>埃拉托色尼筛选法(the Sieve of Eratosthenes)，简称埃氏筛法，其主要思想：当某个数为素数时，那么这个数的倍数一定不是素数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; isPrime.length; i++) &#123;</span><br><span class="line">            isPrime[i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isPrime[i]) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; i * j &lt; n; j++) &#123;</span><br><span class="line">                    isPrime[i * j] = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的时间复杂度为$O(n\log{\log{n}})$。</p><h4 id="方法三：欧式筛法"><a href="#方法三：欧式筛法" class="headerlink" title="方法三：欧式筛法"></a>方法三：欧式筛法</h4><p>在埃氏筛选法中，每一个非素数（合数）可能会有多次判断，例如，12，被2 <em> 6判定为非素数，亦会被3 </em> 4判定为非素数。</p><p>为了去除这种重复的判断，只使用一个数的<strong>最小质因数（能整除给定正整数的最小的质数）</strong>来排除该数字，这就是欧式筛选法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 除2以外的偶数，必定为合数</span></span><br><span class="line">        <span class="keyword">int</span>[] prime = <span class="keyword">new</span> <span class="keyword">int</span>[n / <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">boolean</span>[] isPrime = <span class="keyword">new</span> <span class="keyword">boolean</span>[n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; isPrime.length; i++) &#123;</span><br><span class="line">            isPrime[i] = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(isPrime[i]) &#123;</span><br><span class="line">                prime[count++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历当前找到的所有素数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count &amp;&amp; i * prime[j] &lt; n; j++) &#123;</span><br><span class="line">                isPrime[i * prime[j]] = <span class="keyword">false</span>;</span><br><span class="line">                <span class="comment">// 第一个满足条件i % prime[j] == 0的prime[j]，就是i的最小质因数</span></span><br><span class="line">                <span class="comment">// 保证i只被其最小质因数排除</span></span><br><span class="line">                <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法的时间复杂度为$O(n)$。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> math </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1061.Dating (20 分)</title>
      <link href="/2019/04/30/pat-advanced-1061/"/>
      <url>/2019/04/30/pat-advanced-1061/</url>
      
        <content type="html"><![CDATA[<p>Sherlock Holmes received a note with some strange strings: <code>Let&#39;s date! 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>. It took him only a minute to figure out that those strange strings are actually referring to the coded time <code>Thursday 14:04</code> – since the first common capital English letter (case sensitive) shared by the first two strings is the 4th capital letter <code>D</code>, representing the 4th day in a week; the second common character is the 5th capital letter <code>E</code>, representing the 14th hour (hence the hours from 0 to 23 in a day are represented by the numbers from 0 to 9 and the capital letters from <code>A</code> to <code>N</code>, respectively); and the English letter shared by the last two strings is <code>s</code> at the 4th position, representing the 4th minute. Now given two pairs of strings, you are supposed to help Sherlock decode the dating time.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case gives 4 non-empty strings of no more than 60 characters without white space in 4 lines.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the decoded time in one line, in the format <code>DAY HH:MM</code>, where <code>DAY</code> is a 3-character abbreviation for the days in a week – that is, <code>MON</code> for Monday, <code>TUE</code> for Tuesday, <code>WED</code> for Wednesday, <code>THU</code> for Thursday, <code>FRI</code> for Friday, <code>SAT</code> for Saturday, and <code>SUN</code> for Sunday. It is guaranteed that the result is unique for each case.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题（与<a href="/2019/04/30/pat-basic-1014/">PAT乙级 1014.福尔摩斯的约会 (20 分)</a>是同一道题）有以下四个需要注意的地方：</p><p>（1）前面两个字符串中第 1 对相同的<strong>大写英文字母</strong>表示星期。一个星期7天，故其取值范围为<strong>A-G</strong>，而不是A-Z。</p><p>（2）前面两个字符串中第 2 对相同的<strong>字符</strong>（第 1 对相同的大写英文字母出现之后）表示钟点（小时）。一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示。</p><p>（3）后面两个字符串中第 1 对相同的<strong>英文字母</strong>出现的位置（从 0 开始计数）表示分钟。</p><p>（4）小时和分钟不足两位数时，需要在前面添0。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> week[<span class="number">7</span>][<span class="number">4</span>] = &#123; <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">4</span>][<span class="number">61</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len0 = <span class="built_in">strlen</span>(str[<span class="number">0</span>]), len1 = <span class="built_in">strlen</span>(str[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(str[<span class="number">2</span>]), len3 = <span class="built_in">strlen</span>(str[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len0 &amp;&amp; i &lt; len1) &#123;</span><br><span class="line"><span class="comment">// 第一对相同的大写英文字母，取值范围为A-G</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>][i] == str[<span class="number">1</span>][i] &amp;&amp; <span class="string">'A'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'G'</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, week[str[<span class="number">0</span>][i] - <span class="string">'A'</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len0 &amp;&amp; i &lt; len1) &#123;</span><br><span class="line"><span class="comment">// 第二对相同的字符，取值范围为0-9及A-N</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>][i] == str[<span class="number">1</span>][i]</span><br><span class="line">&amp;&amp; ((<span class="string">'A'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'N'</span>)</span><br><span class="line">|| (<span class="string">'0'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'9'</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'N'</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d:"</span>, str[<span class="number">0</span>][i] - <span class="string">'A'</span> + <span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:"</span>, str[<span class="number">0</span>][i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt; len2 &amp;&amp; j &lt; len3) &#123;</span><br><span class="line"><span class="comment">// 第一对相同的英文字母</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">2</span>][j] == str[<span class="number">3</span>][j]</span><br><span class="line">&amp;&amp; ((<span class="string">'A'</span> &lt;= str[<span class="number">2</span>][j] &amp;&amp; str[<span class="number">2</span>][j] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">|| (<span class="string">'a'</span> &lt;= str[<span class="number">2</span>][j] &amp;&amp; str[<span class="number">2</span>][j] &lt;= <span class="string">'z'</span>))) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d\n"</span>, j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1014.福尔摩斯的约会 (20 分)</title>
      <link href="/2019/04/30/pat-basic-1014/"/>
      <url>/2019/04/30/pat-basic-1014/</url>
      
        <content type="html"><![CDATA[<p>大侦探福尔摩斯接到一张奇怪的字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE </span><br><span class="line">2984akDfkkkkggEdsb </span><br><span class="line">s&amp;hgsfdk </span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">THU 14:04</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题有以下四个需要注意的地方：</p><p>（1）前面两个字符串中第 1 对相同的<strong>大写英文字母</strong>表示星期。一个星期7天，故其取值范围为<strong>A-G</strong>，而不是A-Z。</p><p>（2）前面两个字符串中第 2 对相同的<strong>字符</strong>（第 1 对相同的大写英文字母出现之后）表示钟点（小时）。一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示。</p><p>（3）后面两个字符串中第 1 对相同的<strong>英文字母</strong>出现的位置（从 0 开始计数）表示分钟。</p><p>（4）小时和分钟不足两位数时，需要在前面添0。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> week[<span class="number">7</span>][<span class="number">4</span>] = &#123; <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">4</span>][<span class="number">61</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len0 = <span class="built_in">strlen</span>(str[<span class="number">0</span>]), len1 = <span class="built_in">strlen</span>(str[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(str[<span class="number">2</span>]), len3 = <span class="built_in">strlen</span>(str[<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len0 &amp;&amp; i &lt; len1) &#123;</span><br><span class="line"><span class="comment">// 第一对相同的大写英文字母，取值范围为A-G</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>][i] == str[<span class="number">1</span>][i] &amp;&amp; <span class="string">'A'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'G'</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s "</span>, week[str[<span class="number">0</span>][i] - <span class="string">'A'</span>]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">i += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; len0 &amp;&amp; i &lt; len1) &#123;</span><br><span class="line"><span class="comment">// 第二对相同的字符，取值范围为0-9及A-N</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">0</span>][i] == str[<span class="number">1</span>][i]</span><br><span class="line">&amp;&amp; ((<span class="string">'A'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'N'</span>)</span><br><span class="line">|| (<span class="string">'0'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'9'</span>))) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'A'</span> &lt;= str[<span class="number">0</span>][i] &amp;&amp; str[<span class="number">0</span>][i] &lt;= <span class="string">'N'</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d:"</span>, str[<span class="number">0</span>][i] - <span class="string">'A'</span> + <span class="number">10</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:"</span>, str[<span class="number">0</span>][i] - <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (j &lt; len2 &amp;&amp; j &lt; len3) &#123;</span><br><span class="line"><span class="comment">// 第一对相同的英文字母</span></span><br><span class="line"><span class="keyword">if</span> (str[<span class="number">2</span>][j] == str[<span class="number">3</span>][j]</span><br><span class="line">&amp;&amp; ((<span class="string">'A'</span> &lt;= str[<span class="number">2</span>][j] &amp;&amp; str[<span class="number">2</span>][j] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">|| (<span class="string">'a'</span> &lt;= str[<span class="number">2</span>][j] &amp;&amp; str[<span class="number">2</span>][j] &lt;= <span class="string">'z'</span>))) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d\n"</span>, j);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1002.写出这个数 (20 分)</title>
      <link href="/2019/04/30/pat-basic-1002/"/>
      <url>/2019/04/30/pat-basic-1002/</url>
      
        <content type="html"><![CDATA[<p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 $10^{100}​$。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1234567890987654321123456789</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yi san wu</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>由于$10^{100}$太大，因此需要以字符串的形式读入n。将字符串n中的每一位转换为整型，然后累加到sum中。</p><p>接着将sum转换为字符串str。最后，遍历字符串str中的每一位，输出其对应的汉语拼音。</p><p>将整型sum转换为字符串str时，可以采用以下两种方法：</p><p>（1）使用C++中的to_string()函数；</p><p>（2）使用一个字符数组str倒序存储sum的每一个数字。每次通过sum % 10操作得到sum的最后一位，然后令sum /= 10，重复进行上述操作，直至sum = 0。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string&gt;</span></span><br><span class="line"><span class="comment">using namespace std;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int main() &#123;</span></span><br><span class="line"><span class="comment">string digits[10] = &#123; "ling", "yi", "er", "san", "si", "wu", "liu", "qi",</span></span><br><span class="line"><span class="comment">"ba", "jiu" &#125;;</span></span><br><span class="line"><span class="comment">string n;</span></span><br><span class="line"><span class="comment">cin &gt;&gt; n;</span></span><br><span class="line"><span class="comment">int sum = 0;</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; n.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">sum += n[i] - '0';</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">string str = to_string(sum);</span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; str.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">if (i &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; " ";</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; digits[str[i] - '0'];</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cout &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">return 0;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> digits[<span class="number">10</span>][<span class="number">5</span>] = &#123; <span class="string">"ling"</span>, <span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>,</span><br><span class="line"><span class="string">"ba"</span>, <span class="string">"jiu"</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">102</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, n);</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(n); i++) &#123;</span><br><span class="line">sum += n[i] - <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">str[index++] = sum % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">sum /= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; index - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, digits[str[i] - <span class="string">'0'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1031.查验身份证 (15 分)</title>
      <link href="/2019/04/29/pat-basic-1031/"/>
      <url>/2019/04/29/pat-basic-1031/</url>
      
        <content type="html"><![CDATA[<p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下：</p><p>首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值<code>Z</code>；最后按照以下关系对应<code>Z</code>值与校验码<code>M</code>的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Z：0 1 2 3 4 5 6 7 8 9 10</span><br><span class="line">M：1 0 X 9 8 7 6 5 4 3 2</span><br></pre></td></tr></table></figure><p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出正整数<em>N</em>（≤100）是输入的身份证号码的个数。随后<em>N</em>行，每行给出1个18位身份证号码。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p><h3 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">320124198808240056</span><br><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure><h3 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12010X198901011234</span><br><span class="line">110108196711301866</span><br><span class="line">37070419881216001X</span><br></pre></td></tr></table></figure><h3 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">320124198808240056</span><br><span class="line">110108196711301862</span><br></pre></td></tr></table></figure><h3 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">All passed</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>根据题意，当出现以下两种情况时，表示身份证号有问题：</p><p>(1)前17位中出现非数字；（2）最后一位校验码与计算得到的校验码不一致。</p><p>可以编写一个isValid函数（其内部对上述两种情况进行判断），用于判断给定的身份证号是否有效，若有效，则返回true；否则，返回false。</p><p>使用布尔变量allPassed表示输入的身份证号是否全部有效，默认为true。若有一个身份证号无效，则allPassed被设置为false。</p><p>输入结束后，通过判断allPassed是否为true，决定是否输出<code>All passed</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> arr[<span class="number">12</span>] = &#123; <span class="string">'1'</span>, <span class="string">'0'</span>, <span class="string">'X'</span>, <span class="string">'9'</span>, <span class="string">'8'</span>, <span class="string">'7'</span>, <span class="string">'6'</span>, <span class="string">'5'</span>, <span class="string">'4'</span>, <span class="string">'3'</span>, <span class="string">'2'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">17</span>] = &#123; <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">(<span class="keyword">char</span> idcard[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = idcard[i] - <span class="string">'0'</span>;</span><br><span class="line"><span class="comment">// 若前17位中存在非数字，则该号码有问题</span></span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span> || temp &gt; <span class="number">9</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += weight[i] * temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 比较最后一位校验码是否一致</span></span><br><span class="line">sum %= <span class="number">11</span>;</span><br><span class="line"><span class="keyword">return</span> idcard[<span class="number">17</span>] == arr[sum];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">bool</span> allPassed = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">char</span> idcard[<span class="number">19</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, idcard);</span><br><span class="line"><span class="keyword">if</span> (!isValid(idcard)) &#123;</span><br><span class="line">allPassed = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, idcard);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (allPassed) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"All passed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1021.个位数统计 (15 分)</title>
      <link href="/2019/04/29/pat-basic-1021/"/>
      <url>/2019/04/29/pat-basic-1021/</url>
      
        <content type="html"><![CDATA[<p>给定一个 <em>k</em> 位整数 <em>N</em>=$d_{k−1} 10^{k−1}+⋯+d_1 10^1+d_0 (0≤d_i≤9, i=0,⋯,k−1, d_{k−1}&gt;0)$，请编写程序统计每种不同的个位数字出现的次数。例如：给定 <em>N</em>=100311，则有 2 个 0，3 个 1，和 1 个 3。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 <em>N</em>。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对 <em>N</em> 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 <em>N</em> 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100311</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0:2</span><br><span class="line">1:3</span><br><span class="line">3:1</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>用整型数组count表示每种个位数字的出现次数，其下标表示个位数字，值表示对应数字的出现次数。</p><p>以字符串的形式读入k位整数n。遍历该字符串的每一位，将其转换为整型x，并让count[x] += 1。</p><p>最后以 <code>个位数字:出现次数</code> 的格式，输出数组count中值不为0的项。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> n[<span class="number">1001</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(n); i++) &#123;</span><br><span class="line">count[n[i] - <span class="string">'0'</span>] += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (count[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d:%d\n"</span>, i, count[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1006.换个格式输出整数 (15 分)</title>
      <link href="/2019/04/29/pat-basic-1006/"/>
      <url>/2019/04/29/pat-basic-1006/</url>
      
        <content type="html"><![CDATA[<p>让我们用字母 <code>B</code> 来表示“百”、字母 <code>S</code> 表示“十”，用 <code>12...n</code> 来表示不为零的个位数字 <code>n</code>（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，给出正整数 <em>n</em>（&lt;1000）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，用规定的格式输出 <em>n</em>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">234</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BBSSS1234</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SS123</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>给定整数data（data &lt; 1000），通过求商和取模操作，分别得到其百位数b、十位数s和个位数n。然后按照题目要求循环输出即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;data);</span><br><span class="line"><span class="keyword">int</span> b = data / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> s = data % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n = data % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"S"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 148.排序链表</title>
      <link href="/2019/04/26/leetcode-148-sort-list/"/>
      <url>/2019/04/26/leetcode-148-sort-list/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>在 <em>O</em>(<em>n</em> log <em>n</em>) 时间复杂度和常数级空间复杂度下，对链表进行排序。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 4-&gt;2-&gt;1-&gt;3</span><br><span class="line">输出: 1-&gt;2-&gt;3-&gt;4</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: -1-&gt;5-&gt;3-&gt;4-&gt;0</span><br><span class="line">输出: -1-&gt;0-&gt;3-&gt;4-&gt;5</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>本题可以采用归并排序。</p><p>通过快慢指针，仅遍历一次链表就可以找到中间位置，将链表一分为二。</p><p>然后对得到的两个链表递归执行sortList方法，最后对两个有序链表进行二路归并。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 合并两个有序链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode p,ListNode q)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode r = head;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.val &lt; q.val) &#123;</span><br><span class="line">                r.next = p;</span><br><span class="line">                r = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r.next = q;</span><br><span class="line">                r = q;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.next = q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">sortList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过快慢指针，寻找中间位置，将链表一分为二</span></span><br><span class="line">        ListNode p = head,q=head,pre=head;</span><br><span class="line">        <span class="keyword">while</span>(q != <span class="keyword">null</span> &amp;&amp; q.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pre = p;</span><br><span class="line">            p = p.next;</span><br><span class="line">            q = q.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pre.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> merge(sortList(head),sortList(p));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>设链表的长度为<em>n</em></p><p>时间复杂度：<em>O(n log n)</em></p><p>空间复杂度：<em>O</em>(n)</p><h3 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h3><p>执行用时 : 12 ms, 在Sort List的Java提交中击败了37.49% 的用户</p><p>内存消耗 : 44.2 MB, 在Sort List的Java提交中击败了63.30% 的用户</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1009.说反话 （20 分)</title>
      <link href="/2019/04/24/pat-basic-1009/"/>
      <url>/2019/04/24/pat-basic-1009/</url>
      
        <content type="html"><![CDATA[<p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>每个测试用例的输出占一行，输出倒序后的句子。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World Here I Come</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Come I Here World Hello</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题有一种很直接的思路：顺序存储每个单词，然后逆序输出即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">81</span>][<span class="number">81</span>];</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%s"</span>, str[index]) != EOF) &#123;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s"</span>, str[i]);</span><br><span class="line"><span class="keyword">if</span>(i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种思路是先获取输入的字符串，然后从后往前，每碰到空格或者当下标为0时，输出一个单词。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">81</span>];</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// PAT的编译器不支持gets()</span></span><br><span class="line"><span class="keyword">while</span>((c = getchar()) != <span class="string">'\n'</span> &amp;&amp; c != EOF) &#123;</span><br><span class="line">str[index++] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> end = index;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span> || str[i] == <span class="string">' '</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> start = i == <span class="number">0</span> ? i : i + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 输出一个单词</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; end; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, str[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">end = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1058.A+B in Hogwarts （20 分)</title>
      <link href="/2019/04/22/pat-advanced-1058/"/>
      <url>/2019/04/22/pat-advanced-1058/</url>
      
        <content type="html"><![CDATA[<p>If you are a fan of Harry Potter, you would know the world of magic has its own currency system – as Hagrid explained it to Harry, “Seventeen silver Sickles to a Galleon and twenty-nine Knuts to a Sickle, it’s easy enough.” Your job is to write a program to compute <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are given in the standard form of <code>Galleon.Sickle.Knut</code> (<code>Galleon</code> is an integer in [0,10^7], <code>Sickle</code> is an integer in [0, 17), and <code>Knut</code> is an integer in [0, 29)).</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case which occupies a line with <em>A</em> and <em>B</em> in the standard form, separated by one space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.2.1 10.16.27</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14.1.28</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目大意：在一种新的货币体系下，计算货币A、B之和。</p><p>思路：</p><p>（1）一种很直接的思路是将输入的货币A、B转换为Knut的形式，然后相加，最后再转换成<code>Galleon.Sickle.Knut</code>格式。</p><p>这种解法需要注意的是，A、B之和sum可能会超过int的取值范围，因此，需要使用long long存储数据。</p><p>（2）另一种解法是<strong>相加进位</strong>。</p><p>用g、s、k分别表示A、B之和的Galleon、Sickle、Knut。先将A、B的Knut部分加到k上，若此时k大于等于29，则k -= 29，s+=1。然后将A、B的Sickle部分加到s上，若此时s大于等于17，则s -= 17，g+=1。最后将A、B的Galleon部分加到g上即可。</p><p>这里采用第二种解法，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> g1, s1, k1, g2, s2, k2, g, s, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d.%d.%d %d.%d.%d"</span>, &amp;g1, &amp;s1, &amp;k1, &amp;g2, &amp;s2, &amp;k2);</span><br><span class="line">g = s = k = <span class="number">0</span>;</span><br><span class="line">k += k1 + k2;</span><br><span class="line"><span class="keyword">if</span> (k &gt;= <span class="number">29</span>) &#123;</span><br><span class="line"><span class="comment">//s += k / 29; k %= 29;</span></span><br><span class="line">k -= <span class="number">29</span>;</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">s += s1 + s2;</span><br><span class="line"><span class="keyword">if</span> (s &gt;= <span class="number">17</span>) &#123;</span><br><span class="line">s -= <span class="number">17</span>;</span><br><span class="line">g++;</span><br><span class="line">&#125;</span><br><span class="line">g += g1 + g2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d.%d.%d\n"</span>, g, s, k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1027.Colors in Mars （20 分)</title>
      <link href="/2019/04/21/pat-advanced-1027/"/>
      <url>/2019/04/21/pat-advanced-1027/</url>
      
        <content type="html"><![CDATA[<p>People in Mars represent the colors in their computers in a similar way as the Earth people. That is, a color is represented by a 6-digit number, where the first 2 digits are for <code>Red</code>, the middle 2 digits for <code>Green</code>, and the last 2 digits for <code>Blue</code>. The only difference is that they use radix 13 (0-9 and A-C) instead of 16. Now given a color in three decimal numbers (each between 0 and 168), you are supposed to output their Mars RGB values.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case which occupies a line containing the three decimal color values.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the Mars RGB value in the following format: first output <code>#</code>, then followed by a 6-digit number where all the English characters must be upper-cased. If a single color is only 1-digit long, you must print a <code>0</code> to its left.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15 43 71</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#123456</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目大意：</strong>给定三个十进制数，将它们转换为13进制数输出。</p><p>已知给定的十进制数x不超过168，转换成13进制后，不超过两位（13进制下CC = 168）。</p><p>针对本题，一个比较巧妙的办法如下：</p><p>设置一个字符数组radix，将其初始化为“0123456789ABC”，这样，下标0对应字符’0’，下标13对应字符‘A’…转换后的13进制数可以由radix[x / 13]和radix[x % 13]拼接而成。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> radix[<span class="number">14</span>] = <span class="string">"0123456789ABC"</span>;</span><br><span class="line"><span class="keyword">int</span> r, g, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;r, &amp;g, &amp;b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"#"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c"</span>, radix[r / <span class="number">13</span>], radix[r % <span class="number">13</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c"</span>, radix[g / <span class="number">13</span>], radix[g % <span class="number">13</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%c\n"</span>, radix[b / <span class="number">13</span>], radix[b % <span class="number">13</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1019.General Palindromic Number （20 分)</title>
      <link href="/2019/04/20/pat-advanced-1019/"/>
      <url>/2019/04/20/pat-advanced-1019/</url>
      
        <content type="html"><![CDATA[<p>A number that will be the same when it is written forwards or backwards is known as a <strong>Palindromic Number</strong>. For example, 1234321 is a palindromic number. All single digit numbers are palindromic numbers.</p><p>Although palindromic numbers are most often considered in the decimal system, the concept of palindromicity can be applied to the natural numbers in any numeral system. Consider a number <em>N</em>&gt;0 in base <em>b</em>≥2, where it is written in standard notation with <em>k</em>+1 digits $a_i$ as $∑_{i=0}^k(a_i b^i)$. Here, as usual, 0≤$a_i$&lt;<em>b</em> for all <em>i</em> and $a_k$ is non-zero. Then <em>N</em> is palindromic if and only if $a_i=a_{k−i}$ for all <em>i</em>. Zero is written 0 in any base and is also palindromic by definition.</p><p>Given any positive decimal integer <em>N</em> and a base <em>b</em>, you are supposed to tell if <em>N</em> is a palindromic number in base <em>b</em>.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case consists of two positive numbers <em>N</em> and <em>b</em>, where 0&lt;<em>N</em>≤$10^9​$ is the decimal number and 2≤<em>b</em>≤$10^9​$ is the base. The numbers are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, first print in one line <code>Yes</code> if <em>N</em> is a palindromic number in base <em>b</em>, or <code>No</code> if not. Then in the next line, print <em>N</em>as the number in base <em>b</em> in the form “$a_k \ a_{k−1} \ … \ a_0$”. Notice that there must be no extra space at the end of output.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27 2</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">1 1 0 1 1</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">121 5</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">No</span><br><span class="line">4 4 1</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：判断一个给定的十进制数n在b进制下，是否为回文数字（即从左到右与从右到左一样）。</p><p>思路：使用除基取余法，将十进制数n转换为b进制，并将结果反序保存在一个整型数组data中(低位在前，高位在后)。设转换后该数的长度为index，判断数组data的第i个元素与第index - i - 1个元素是否相等，若有一组不相等，则说明其不是回文数字。若全部相等，则说明其是回文数字。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, b, index = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;b);</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">32</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">data[index++] = n % b;</span><br><span class="line">n /= b;</span><br><span class="line">&#125; <span class="keyword">while</span> (n != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (data[i] != data[index - i - <span class="number">1</span>]) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = index - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, data[i]);</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1037.在霍格沃茨找零钱 （20 分)</title>
      <link href="/2019/04/19/pat-basic-1037/"/>
      <url>/2019/04/19/pat-basic-1037/</url>
      
        <content type="html"><![CDATA[<p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 <em>P</em> 和他实付的钱 <em>A</em>，你的任务是写一个程序来计算他应该被找的零钱。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在 1 行中分别给出 <em>P</em> 和 <em>A</em>，格式为 <code>Galleon.Sickle.Knut</code>，其间用 1 个空格分隔。这里 <code>Galleon</code> 是 [0, 10^7] 区间内的整数，<code>Sickle</code> 是 [0, 17) 区间内的整数，<code>Knut</code> 是 [0, 29) 区间内的整数。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.16.27 14.1.28</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3.2.1</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14.1.28 10.16.27</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-3.2.1</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>用g1.s1.k1表示应付的价钱price，g2.s2.k2表示实付的钱money，change表示应该被找的零钱。</p><p>首先，将输入的钱均转换为以纳特(Knut)为单位。转换规则：十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可。</p><p>然后，用money减去price得到change，若change小于0，则表示没带够钱，那么就输出一个负号，然后change取反。</p><p>最后，按照<code>Galleon.Sickle.Knut</code>的格式输出change即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Galleon = <span class="number">17</span> * <span class="number">29</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Sickle = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> g1, s1, k1, g2, s2, k2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d.%d.%d %d.%d.%d"</span>, &amp;g1, &amp;s1, &amp;k1, &amp;g2, &amp;s2, &amp;k2);</span><br><span class="line"><span class="keyword">int</span> price = g1 * Galleon + s1 * Sickle + k1;</span><br><span class="line"><span class="keyword">int</span> money = g2 * Galleon + s2 * Sickle + k2;</span><br><span class="line"><span class="keyword">int</span> change = money - price;</span><br><span class="line"><span class="keyword">if</span> (change &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">change = -change;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d.%d.%d\n"</span>, change / Galleon, change % Galleon / Sickle,</span><br><span class="line">change % Sickle);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“进制转换”编程题总结</title>
      <link href="/2019/04/18/programming-test-radix-conversion/"/>
      <url>/2019/04/18/programming-test-radix-conversion/</url>
      
        <content type="html"><![CDATA[<p>在日常生活中我们一般使用十进制数字，而计算机使用的却是二进制。此外，常见的进制还有八进制、十六进制等。对于两个不同进制，应该如何进行相互转换呢？这里总结下该问题的解题思路。</p><p>对于一个P进制的数，如果要转换为Q进制（2 ≤ P , Q ≤ 16），可以分为两步：</p><p>（1）将P进制数x转换为十进制数y。</p><p>（2）将十进制数y转换为Q进制数z。</p><a id="more"></a><h3 id="将P进制数x转换为十进制数y"><a href="#将P进制数x转换为十进制数y" class="headerlink" title="将P进制数x转换为十进制数y"></a>将P进制数x转换为十进制数y</h3><p>一个P进制数$x=a_1 a_2 \dots a_n$，写成如下形式后，使用十进制的加法和乘法，就可以转换为十进制数y：<br>$$<br>y = a_1 \times P^{n-1} + a_2 \times p^{n-2} + \dots + a_{n-1} \times P + a_n<br>$$<br>这个公式可以用下面的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>, product = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (x != <span class="number">0</span>) &#123;</span><br><span class="line">    y += (x % <span class="number">10</span>) * product;</span><br><span class="line">    x /= <span class="number">10</span>;<span class="comment">//每循环一次丢弃一位</span></span><br><span class="line">    product *= p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将十进制数y转换为Q进制数z"><a href="#将十进制数y转换为Q进制数z" class="headerlink" title="将十进制数y转换为Q进制数z"></a>将十进制数y转换为Q进制数z</h3><p>可以采用”除基取余法“。这里的“基”，是指要转换成的进制Q。因此除基取余的意思就是每次将待转换数除以Q，然后将得到的余数作为低位存储，而商则继续除以Q并继续进行上面的操作，直到商为0时，退出循环。此时，将所有位从后向前输出就可以得到z。</p><p>上述过程可以用下面的代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> z[<span class="number">20</span>], i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    z[i++] = y % Q;</span><br><span class="line">    y /= Q;</span><br><span class="line">&#125; <span class="keyword">while</span> (y != <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>执行完后，数组z从高位i-1到低位0即为Q进制整数z。这里之所以采用do…while循环而不采用while循环，是因为当y恰好等于0时，while循环不会执行，导致结果出错。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] 胡凡，曾磊.《算法笔记》[M].北京：机械工业出版社，2016</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“日期处理”编程题总结</title>
      <link href="/2019/04/18/programming-test-date-handle/"/>
      <url>/2019/04/18/programming-test-date-handle/</url>
      
        <content type="html"><![CDATA[<p>日期处理是一类令人感到头疼的编程题，这里总结下该问题的解题思路。</p><a id="more"></a><p>要解决它，必须先处理好平年和闰年，以及由此产生的二月天数不同、大月和小月等基本问题。</p><p>首先，我们可以使用一个二维数组months表示平年和闰年中每月的天数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> month[<span class="number">13</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">0</span>, <span class="number">0</span> &#125;, &#123; <span class="number">31</span>, <span class="number">31</span> &#125;, &#123; <span class="number">28</span>, <span class="number">29</span> &#125;, &#123; <span class="number">31</span>, <span class="number">31</span> &#125;, &#123; <span class="number">30</span>, <span class="number">30</span> &#125;, </span><br><span class="line">                    &#123;<span class="number">31</span>, <span class="number">31</span> &#125;, &#123; <span class="number">30</span>, <span class="number">30</span> &#125;, &#123; <span class="number">31</span>, <span class="number">31</span> &#125;, &#123; <span class="number">31</span>, <span class="number">31</span> &#125;, &#123; <span class="number">30</span>, <span class="number">30</span> &#125;,</span><br><span class="line">                    &#123; <span class="number">31</span>, <span class="number">31</span> &#125;, &#123;<span class="number">30</span>, <span class="number">30</span> &#125;, &#123; <span class="number">31</span>, <span class="number">31</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><p>然后，我们还需要解决平年和闰年的判别问题：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeap</span><span class="params">(<span class="keyword">int</span> year)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> year % <span class="number">400</span> == <span class="number">0</span> || (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理好了这些基本问题，接下来我们探讨下“日期处理”问题的各个类别及其对应的解题思路。</p><p>”日期处理“编程题大致可以分为以下几类：</p><h3 id="求日期之间相差天数"><a href="#求日期之间相差天数" class="headerlink" title="求日期之间相差天数"></a>求日期之间相差天数</h3><p>求解这类问题有一个很直接的思路，即令日期不断加1天，直到第一个日期等于第二个日期为止。</p><p>具体做法是，如果加了1天之后天数d等于当前月份m所拥有的天数加1，那么就令月份加1，同时将天数d重置为1（即把日期变为下一个月的1号）；如果此时月份m变为了13，那么就令年份y加1，同时将月份m重置为1（即把日期变为下一年的1月）。</p><p>假设给定的两个日期分别为y1年m1月d1日、y2年m2月d2日，求解该问题的算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (y1 &lt; y2 || m1 &lt; m2 || d1 &lt; d2) &#123;</span><br><span class="line">    d1++;</span><br><span class="line">    <span class="keyword">if</span> (d1 == month[m1][isLeap(y1)] + <span class="number">1</span>) &#123;</span><br><span class="line">        m1++;</span><br><span class="line">        d1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m1 == <span class="number">13</span>) &#123;</span><br><span class="line">        y1++;</span><br><span class="line">        m1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方法虽然简单，但可能会比较慢。如果想要加快速度，只需要先把第一个日期的年份不断加1，直到与第二个日期的年份差1为止，期间根据平年或闰年来累加365天或者366天即可。之后再进行不断令天数加1的操作。改进后的算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(y1 &lt; y2 - <span class="number">1</span>) &#123;</span><br><span class="line">    y1++;</span><br><span class="line">    count += <span class="number">365</span>;</span><br><span class="line">    <span class="keyword">if</span>(isLeap(y1)) &#123;</span><br><span class="line">        count += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (y1 &lt; y2 || m1 &lt; m2 || d1 &lt; d2) &#123;</span><br><span class="line">    d1++;</span><br><span class="line">    <span class="keyword">if</span> (d1 == month[m1][isLeap(y1)] + <span class="number">1</span>) &#123;</span><br><span class="line">        m1++;</span><br><span class="line">        d1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m1 == <span class="number">13</span>) &#123;</span><br><span class="line">        y1++;</span><br><span class="line">        m1 = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该问题还有另一种变体：<strong>给定一个日期和相差的天数，求该日期加上（减去）给定天数后的日期。</strong></p><p>假设给定的日期为y年m月d日，相差的天数为days天，求解该问题的算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 日期累加算法</span></span><br><span class="line"><span class="comment">// for(int i=days;i&gt;0;i--)</span></span><br><span class="line"><span class="keyword">while</span> (days--) &#123;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="keyword">if</span> (d == month[m][isLeap(y)] + <span class="number">1</span>) &#123;</span><br><span class="line">        m++;</span><br><span class="line">        d = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">13</span>) &#123;</span><br><span class="line">        y++;</span><br><span class="line">        m = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求某天是星期几"><a href="#求某天是星期几" class="headerlink" title="求某天是星期几"></a>求某天是星期几</h3><p>这类问题，其实可以转换为求日期之间相差天数。</p><p>具体做法是，计算给定日期y年m月d日与已知星期week的日期两者之间相差的天数days，然后让相差天数days对7取模（一周七天），求得余数r，计算r与week之间的间隔，从而得到最终的星期w。</p><p>假设已知某个日期date1是星期w1，要求日期date2（假设晚于date1）是星期w，两者相差days天，求解该问题的算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> r = days % <span class="number">7</span>;</span><br><span class="line"><span class="comment">// 这里星期日用0表示</span></span><br><span class="line">w = (w1 + r) % <span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>若要求的日期date2早于已知日期date1，只需要按如下方式修改上面第三行代码即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w = (w1 - r + <span class="number">7</span>) % <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h3 id="求某天是几月几日"><a href="#求某天是几月几日" class="headerlink" title="求某天是几月几日"></a>求某天是几月几日</h3><p>给定年份和第几天，求该天是几月几号。这类问题与问题一“求日期之间相差天数”的变体十分类似。</p><p>具体做法是，从1月0日开始，每次加1天，然后调整月份（或年份），直至用完给定的天数。</p><p>假设给定的年份为year，天数为days，求解该问题的算法如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">1</span>, d = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (days--) &#123;</span><br><span class="line">    d++;</span><br><span class="line">    <span class="keyword">if</span> (d == month[m][isLeap(y)] + <span class="number">1</span>) &#123;</span><br><span class="line">        m++;</span><br><span class="line">        d = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">13</span>) &#123;</span><br><span class="line">        y++;</span><br><span class="line">        m = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1] 胡凡，曾磊.《算法笔记》[M].北京：机械工业出版社，2016</p>]]></content>
      
      
      <categories>
          
          <category> 程序设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1022.D进制的A+B （20 分)</title>
      <link href="/2019/04/17/pat-basic-1022/"/>
      <url>/2019/04/17/pat-basic-1022/</url>
      
        <content type="html"><![CDATA[<p>输入两个非负 10 进制整数 <em>A</em> 和 <em>B</em> (≤2^30−1)，输出 <em>A</em>+<em>B</em> 的 <em>D</em> (1&lt;<em>D</em>≤10)进制数。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 3 个整数 <em>A</em>、<em>B</em> 和 <em>D</em>。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出 <em>A</em>+<em>B</em> 的 <em>D</em> 进制数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 456 8</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1103</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>设sum = a + b，采用“除基取余法”，将每次sum % d的结果存储在int数组data中，然后令 sum /= d，直至sum==0成立为止。此时数组data中，倒序保存着sum在d进制下每一位的结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, d, sum;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;d);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">data[i++] = sum % d;</span><br><span class="line">sum /= d;</span><br><span class="line">&#125; <span class="keyword">while</span> (sum != <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, data[j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1031.Hello World for U （20 分)</title>
      <link href="/2019/04/15/pat-advanced-1031/"/>
      <url>/2019/04/15/pat-advanced-1031/</url>
      
        <content type="html"><![CDATA[<p>Given any string of <em>N</em> (≥5) characters, you are asked to form the characters into the shape of <code>U</code>. For example, <code>helloworld</code> can be printed as:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h  d</span><br><span class="line">e  l</span><br><span class="line">l  r</span><br><span class="line">lowo</span><br></pre></td></tr></table></figure><p>That is, the characters must be printed in the original order, starting top-down from the left vertical line with <em>n</em>1characters, then left to right along the bottom line with <em>n</em>2 characters, and finally bottom-up along the vertical line with <em>n</em>3 characters. And more, we would like <code>U</code> to be as squared as possible – that is, it must be satisfied that n1=n3=max { <em>k</em> | <em>k</em>≤n2 for all 3≤n2≤<em>N</em> } with n1+n2+n3−2=N.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains one string with no less than 5 and no more than 80 characters in a line. The string contains no white space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the input string in the shape of U as specified in the description.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helloworld!</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">h   !</span><br><span class="line">e   d</span><br><span class="line">l   l</span><br><span class="line">lowor</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目要求：</strong>将输入的字符串以U型图案的方式输出。n1和n3分别是U型图案左右两条竖线的字符数，n2是底部横线的字符数。</p><p><strong>约束条件：</strong></p><p>1.n1=n3</p><p>2.n1≤n2</p><p>3.U型图案尽可能方，即n1在满足上述条件的情况下尽可能大</p><p><strong>思路：</strong>字符串长度n=n1+n2+n3-2，从而2×n1+n2=n+2，下面分情况讨论：</p><p>1.若(n+2) % 3 == 0，即n+2刚好被3整除，此时n1=n2=n3；</p><p>2.若(n+2) % 3 == 1，由于n1=n3且n1≤n2，故n1=n2=(n+2) / 3，n2=(n+2) / 3 + 1；</p><p>3.若(n+2) % 3 == 2，故n1=n2=(n+2) / 3，n2=(n+2) / 3 + 2。</p><p>因此，n1=n3=(n+2) / 3，n2 = (n+2) / 3 + (n+2) % 3。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">81</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line"><span class="keyword">int</span> n = <span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> n1, n2, n3;</span><br><span class="line">n1 = n3 = (n + <span class="number">2</span>) / <span class="number">3</span>;</span><br><span class="line">n2 = (n + <span class="number">2</span>) / <span class="number">3</span> + (n + <span class="number">2</span>) % <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//输出U型图案的左右两侧(不包括属于底部横线的部分)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n1 - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, str[i]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n2 - <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, str[n - i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//输出底部的横线</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n2; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, str[n1 + i - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1027.打印沙漏 （20 分)</title>
      <link href="/2019/04/14/pat-basic-1027/"/>
      <url>/2019/04/14/pat-basic-1027/</url>
      
        <content type="html"><![CDATA[<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure><p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。</p><p>给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p><a id="more"></a><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">19 *</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*****</span><br><span class="line"> ***</span><br><span class="line">  *</span><br><span class="line"> ***</span><br><span class="line">*****</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>设沙漏的行数为x，则组成沙漏需要的符号数为<br>$$<br>\begin{align}<br>m &amp;= 1 + 2\times(3+5+\dots+x)\\<br>&amp;=2(1+3+5+\dots+x)-1<br>\end{align}<br>$$<br>下面我们来推导下奇数求和公式：<br>$$<br>\begin{align}<br>sum &amp;= 1+3+5+\dots+x\\<br>&amp;=1+2+3+4+\dots+x-(2+4+\dots+x-1)\\<br>&amp;=1+2+3+\dots+x-2(1+2+\dots+\frac{x-1}{2})\\<br>&amp;=\frac{x(x+1)}{2} - 2\times\frac{\frac{x-1}{2}(\frac{x-1}{2}+1)}{2}\\<br>&amp;=\frac{(x+1)^2}{4}<br>\end{align}<br>$$<br>因此，组成沙漏需要的符号数$m=2 \times \frac{(x+1)^2}{4} - 1 = \frac{(x+1)^2}{2} - 1$</p><p>在给定符号数n的情况下，要找出所能组成的最大沙漏，只需要找出满足m&lt;=n的最大x即可。</p><p>沙漏的上半部分有$\frac{x}{2}+1$行，每行的符号数为$x-2i$，i表示行号(从0开始)，左侧空格数为$i$。</p><p>沙漏的下半部分有$\frac{x}{2}​$行，每行的符号数为$2i+1​$，i表示行号(从0开始)，左侧空格数为$\frac{x-(2i+1)}{2}​$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;n, &amp;c);</span><br><span class="line">    <span class="comment">//寻找所能组成的最大沙漏</span></span><br><span class="line"><span class="keyword">while</span> ((x + <span class="number">1</span>) * (x + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line">x += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">x -= <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//输出沙漏的上半部分</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x / <span class="number">2</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x - <span class="number">2</span> * i; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//输出沙漏的下半部分</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; x / <span class="number">2</span> + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; (x - (<span class="number">2</span> * i + <span class="number">1</span>)) / <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i + <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n - ((x + <span class="number">1</span>) * (x + <span class="number">1</span>) / <span class="number">2</span> - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1036.跟奥巴马一起编程 （15 分)</title>
      <link href="/2019/04/12/pat-basic-1036/"/>
      <url>/2019/04/12/pat-basic-1036/</url>
      
        <content type="html"><![CDATA[<p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中给出正方形边长 <em>N</em>（3≤<em>N</em>≤20）和组成正方形边的某种字符 C，间隔一个空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10 a</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aaaaaaaaaa</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">a        a</span><br><span class="line">aaaaaaaaaa</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>“为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。”</p><p>设列数为n，行数为row。</p><p>当n为奇数（n % 2 == 1）时，row = n / 2 + 1；</p><p>当n为偶数（n % 2 == 0）时，row = n / 2。</p><p>因此，我们可以得出row = n / 2 + n % 2。</p><p>首先输出第一行的n个c。然后输出中间row-2行，此时只有最左边和最右边各有一个c，中间有n-2个空格。最后输出最后一行的n个c。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, row;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %c"</span>, &amp;n, &amp;c);</span><br><span class="line"><span class="comment">//若n为奇数，则n % 2 == 1,row = n / 2 + 1;</span></span><br><span class="line"><span class="comment">//若n为偶数，则row = n / 2;</span></span><br><span class="line">row = n / <span class="number">2</span> + n % <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; row - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">2</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c\n"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1036.Boys vs Girls （25 分)</title>
      <link href="/2019/04/12/pat-advanced-1036/"/>
      <url>/2019/04/12/pat-advanced-1036/</url>
      
        <content type="html"><![CDATA[<p>This time you are asked to tell the difference between the lowest grade of all the male students and the highest grade of all the female students.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains a positive integer <em>N</em>, followed by <em>N</em> lines of student information. Each line contains a student’s <code>name</code>, <code>gender</code>, <code>ID</code> and <code>grade</code>, separated by a space, where <code>name</code> and <code>ID</code> are strings of no more than 10 characters with no space, <code>gender</code> is either <code>F</code> (female) or <code>M</code> (male), and <code>grade</code>is an integer between 0 and 100. It is guaranteed that all the grades are distinct.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in 3 lines. The first line gives the name and ID of the female student with the highest grade, and the second line gives that of the male student with the lowest grade. The third line gives the difference $grade_F−grade_M$. If one such kind of student is missing, output <code>Absent</code> in the corresponding line, and output <code>NA</code>in the third line instead.</p><h3 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input 1:"></a>Sample Input 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Joe M Math990112 89</span><br><span class="line">Mike M CS991301 100</span><br><span class="line">Mary F EE990830 95</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output 1:"></a>Sample Output 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mary EE990830</span><br><span class="line">Joe Math990112</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input 2:"></a>Sample Input 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">Jean M AA980920 60</span><br></pre></td></tr></table></figure><h3 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output 2:"></a>Sample Output 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Absent</span><br><span class="line">Jean AA980920</span><br><span class="line">NA</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>1.定义结构体类型Person，包含学生姓名name、性别gender、学号id以及成绩grade。</p><p>2.用boy、girl分别表示分数最低的男生、分数最高的女生。并为他们的成绩grade字段初始化，boy的成绩grade赋值为101，girl的成绩grade赋值-1。用person接受每次输入的信息。</p><p>3.若当前person为男性、且成绩低于boy，则将其赋给boy。若当前person为女性，且成绩高于girl，则将其赋给girl。</p><p>4.在输出前，需要分别判断boy.grade == 101、girl.grade == -1 是否成立。若成立，则表示不存在该性别的同学，对应行要输出“Absent”。以上两个条件只要有一个成立，最后girl与boy的分数差就输出“NA”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">char</span> gender;</span><br><span class="line"><span class="keyword">char</span> id[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="comment">//boy表示分数最低的男学生、girl表示分数最高的女学生</span></span><br><span class="line">Person boy, girl, person;</span><br><span class="line">boy.grade = <span class="number">101</span>;</span><br><span class="line">girl.grade = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %c %s %d"</span>, person.name, &amp;person.gender, person.id,</span><br><span class="line">&amp;person.grade);</span><br><span class="line"><span class="keyword">if</span> (person.gender == <span class="string">'M'</span> &amp;&amp; person.grade &lt; boy.grade) &#123;</span><br><span class="line">boy = person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (person.gender == <span class="string">'F'</span> &amp;&amp; person.grade &gt; girl.grade) &#123;</span><br><span class="line">girl = person;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> isMissing = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (girl.grade == <span class="number">-1</span>) &#123;</span><br><span class="line">isMissing = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Absent\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, girl.name, girl.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (boy.grade == <span class="number">101</span>) &#123;</span><br><span class="line">isMissing = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Absent\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, boy.name, boy.id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isMissing) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NA\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, girl.grade - boy.grade);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1006.Sign In and Sign Out （25 分)</title>
      <link href="/2019/04/11/pat-advanced-1006/"/>
      <url>/2019/04/11/pat-advanced-1006/</url>
      
        <content type="html"><![CDATA[<p>At the beginning of every day, the first person who signs in the computer room will unlock the door, and the last one who signs out will lock the door. Given the records of signing in’s and out’s, you are supposed to find the ones who have unlocked and locked the door on that day.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the records for one day. The case starts with a positive integer <em>M</em>, which is the total number of records, followed by <em>M</em> lines, each in the format:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID_number Sign_in_time Sign_out_time</span><br></pre></td></tr></table></figure><p>where times are given in the format <code>HH:MM:SS</code>, and <code>ID_number</code> is a string with no more than 15 characters.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line the ID numbers of the persons who have unlocked and locked the door on that day. The two ID numbers must be separated by one space.</p><p>Note: It is guaranteed that the records are consistent. That is, the sign in time must be earlier than the sign out time for each person, and there are no two persons sign in or out at the same moment.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">CS301111 15:30:28 17:00:10</span><br><span class="line">SC3021234 08:00:00 11:25:25</span><br><span class="line">CS301133 21:45:00 21:58:40</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SC3021234 CS301133</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：输出最早来的人和最晚走的人的id_number。</p><p>1.定义结构体类型Person，存储人的编号idNumber、第一次打卡（Sign in）时间signIn、第二次打卡（Sign out）时间signOut。</p><p>2.用unlock、lock分别表示开门和关门的人。</p><p>3.每当输入一个人的编号及其sign in和sign out时间，若其sign in比unlock早，则将其赋给unlock，若其sign out比lock晚，则将其赋给lock。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> idNumber[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> signIn[<span class="number">9</span>];</span><br><span class="line"><span class="keyword">char</span> signOut[<span class="number">9</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">Person persons[m];</span><br><span class="line">Person unlock, lock;</span><br><span class="line"><span class="built_in">strcpy</span>(unlock.signIn, <span class="string">"23:59:59"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(lock.signOut, <span class="string">"00:00:00"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s %s"</span>, persons[i].idNumber, persons[i].signIn,</span><br><span class="line">persons[i].signOut);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(unlock.signIn, persons[i].signIn) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">unlock = persons[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(lock.signOut, persons[i].signOut) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">lock = persons[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, unlock.idNumber, lock.idNumber);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1011.World Cup Betting （20 分)</title>
      <link href="/2019/04/11/pat-advanced-1011/"/>
      <url>/2019/04/11/pat-advanced-1011/</url>
      
        <content type="html"><![CDATA[<p>With the 2010 FIFA World Cup running, football fans the world over were becoming increasingly excited as the best players from the best teams doing battles for the World Cup trophy in South Africa. Similarly, football betting fans were putting their money where their mouths were, by laying all manner of World Cup bets.</p><p>Chinese Football Lottery provided a “Triple Winning” game. The rule of winning was simple: first select any three of the games. Then for each selected game, bet on one of the three possible results – namely <code>W</code> for win, <code>T</code> for tie, and <code>L</code> for lose. There was an odd assigned to each result. The winner’s odd would be the product of the three odds times 65%.</p><p>For example, 3 games’ odds are given as the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> W    T    L</span><br><span class="line">1.1  2.5  1.7</span><br><span class="line">1.2  3.1  1.6</span><br><span class="line">4.1  1.2  1.1</span><br></pre></td></tr></table></figure><p>To obtain the maximum profit, one must buy <code>W</code> for the 3rd game, <code>T</code> for the 2nd game, and <code>T</code> for the 1st game. If each bet takes 2 yuans, then the maximum profit would be (4.1×3.1×2.5×65%−1)×2=39.31 yuans (accurate up to 2 decimal places).</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case contains the betting information of 3 games. Each game occupies a line with three distinct odds corresponding to <code>W</code>, <code>T</code> and <code>L</code>.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print in one line the best bet of each game, and the maximum profit accurate up to 2 decimal places. The characters and the number must be separated by one space.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.1 2.5 1.7</span><br><span class="line">1.2 3.1 1.6</span><br><span class="line">4.1 1.2 1.1</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T T W 39.31</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：给定三场比赛，及每场比赛赢W、平分T、输L的赔率，选取每场比赛赔率最大的结果下注（赔率分别记为a、b、c），以期获得最大收益。</p><p>分别输出三场比赛的下注情况（W、T 或 L），然后按照<code>（a × b × c × 0.65 - 1）× 2</code>计算收益。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">char</span> results[n + <span class="number">1</span>] = &#123; <span class="string">"WTL"</span> &#125;;</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">double</span> rate = <span class="number">0.65</span>;</span><br><span class="line"><span class="keyword">int</span> perBetMoney = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> product = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">double</span> maxValue = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> maxChar = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x &gt; maxValue) &#123;</span><br><span class="line">maxValue = x;</span><br><span class="line">maxChar = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">product *= maxValue;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, results[maxChar]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.2f\n"</span>, (product * rate - <span class="number">1</span>) * perBetMoney);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1032.挖掘机技术哪家强 （20 分)</title>
      <link href="/2019/04/11/pat-basic-1032/"/>
      <url>/2019/04/11/pat-basic-1032/</url>
      
        <content type="html"><![CDATA[<p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第 1 行给出不超过 10^5 的正整数 <em>N</em>，即参赛人数。随后 <em>N</em> 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">3 65</span><br><span class="line">2 80</span><br><span class="line">1 100</span><br><span class="line">2 70</span><br><span class="line">3 40</span><br><span class="line">3 0</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 150</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>用数组scores保存每个学校的编号及其对应的分数，数组下标为学校编号，值为对应的分数。</p><p>用maxNo、maxScore表示总得分最高的学校的编号、及其总分，均初始化为0。</p><p>每当输入一个编号no和分数score时，让scores[no]增加score，然后与maxScore进行比较，若比maxScore大，则将no、scores[no]分别赋给maxNo、maxScore。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> scores[<span class="number">100001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> maxNo, maxScore, no, score;</span><br><span class="line">maxNo = maxScore = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;no, &amp;score);</span><br><span class="line">scores[no] += score;</span><br><span class="line"><span class="keyword">if</span> (scores[no] &gt; maxScore) &#123;</span><br><span class="line">maxNo = no;</span><br><span class="line">maxScore = scores[no];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, maxNo, maxScore);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1028.人口普查 （20 分)</title>
      <link href="/2019/04/10/pat-basic-1028/"/>
      <url>/2019/04/10/pat-basic-1028/</url>
      
        <content type="html"><![CDATA[<p>某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。</p><p>这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在第一行给出正整数 <em>N</em>，取值在(0,10^5]；随后 <em>N</em> 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 <code>yyyy/mm/dd</code>（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">John 2001/05/12</span><br><span class="line">Tom 1814/09/06</span><br><span class="line">Ann 2121/01/30</span><br><span class="line">James 1814/09/05</span><br><span class="line">Steve 1967/11/20</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 Tom John</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>1.定义结构体类型Person，存储人的姓名name、出生年year、月month、日day。</p><p>2.设定年龄的左右边界，用maxPerson表示具有合理的最大年龄（1814年9月6日）的人，current表示具有合理的最小年龄（2014年9月6日）的人。用youngest表示镇上最年轻的人，oldest表示镇上最年长者，并对他们初始化，分别赋值为maxPerson和current。用count表示输入有效生日的个数。</p><p>3.每当读入一个人的信息时，需要先判断其年龄是否合理（不小于current的年龄，且不超过maxPerson的年龄）。若合理，则将其年龄分别与youngest、oldest的年龄比较。若其年龄比youngest小，则将其赋给youngest。若其年龄比oldest大，则将其赋给oldest。然后count增加1。</p><p>需要注意的是，最终得到的count有可能为0，即输入的测试用例均为无效生日，此时count后没有空格，否则会因为多出一个空格而报“格式错误”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//若p1比p2的年龄大，则返回1；若一样大，返回0；否则，返回-1；</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">old</span><span class="params">(Person p1, Person p2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.year &lt; p2.year) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1.year == p2.year) &#123;</span><br><span class="line"><span class="keyword">if</span> (p1.month &lt; p2.month) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1.month == p2.month) &#123;</span><br><span class="line"><span class="keyword">if</span> (p1.day &lt; p2.day) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (p1.day == p2.day) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> currentYear = <span class="number">2014</span>, currentMonth = <span class="number">9</span>, currentDay = <span class="number">6</span>, maxAge = <span class="number">200</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">Person youngest, oldest, current, maxPerson;</span><br><span class="line">maxPerson.year = currentYear - maxAge;</span><br><span class="line">maxPerson.month = currentMonth;</span><br><span class="line">maxPerson.day = currentDay;</span><br><span class="line">current.year = currentYear;</span><br><span class="line">current.month = currentMonth;</span><br><span class="line">current.day = currentDay;</span><br><span class="line">oldest = current;</span><br><span class="line">youngest = maxPerson;</span><br><span class="line">Person person[n];</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d/%d/%d"</span>, person[i].name, &amp;person[i].year, &amp;person[i].month,</span><br><span class="line">&amp;person[i].day);</span><br><span class="line"><span class="keyword">if</span> (old(person[i], current) &gt;= <span class="number">0</span> &amp;&amp; old(maxPerson, person[i]) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (old(person[i], oldest) == <span class="number">1</span>) &#123;</span><br><span class="line">oldest = person[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (old(youngest, person[i]) == <span class="number">1</span>) &#123;</span><br><span class="line">youngest = person[i];</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %s %s"</span>, oldest.name, youngest.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1004.成绩排名 （20 分)</title>
      <link href="/2019/04/10/pat-basic-1004/"/>
      <url>/2019/04/10/pat-basic-1004/</url>
      
        <content type="html"><![CDATA[<p>读入 <em>n</em>（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，格式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">第 1 行：正整数 n</span><br><span class="line">第 2 行：第 1 个学生的姓名 学号 成绩</span><br><span class="line">第 3 行：第 2 个学生的姓名 学号 成绩</span><br><span class="line">  ... ... ...</span><br><span class="line">第 n+1 行：第 n 个学生的姓名 学号 成绩</span><br></pre></td></tr></table></figure><p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">Joe Math990112 89</span><br><span class="line">Mike CS991301 100</span><br><span class="line">Mary EE990830 95</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mike CS991301</span><br><span class="line">Joe Math990112</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>1.定义一个结构体类型Student，存储学生的姓名name、学号no和成绩grade。</p><p>2.定义两个Student型变量maxGradeStu、minGradeStu分别表示成绩最高、最低的学生，并为maxGradeStu和minGradeStu的成绩grade初始化，分别设为101和0。</p><p>3.每读入一个学生信息，就将其成绩grade与maxGradeStu、minGradeStu的成绩比较，若高于maxGradeStu，则将该学生信息赋给maxGradeStu，若低于minGradeStu，则将该学生赋给minGradeStu。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">char</span> no[<span class="number">11</span>];</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">Student stu[n];</span><br><span class="line">Student maxGradeStu, minGradeStu;</span><br><span class="line">maxGradeStu.grade = <span class="number">0</span>;</span><br><span class="line">minGradeStu.grade = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %s %d"</span>, stu[i].name, stu[i].no, &amp;stu[i].grade);</span><br><span class="line"><span class="keyword">if</span> (maxGradeStu.grade &lt; stu[i].grade) &#123;</span><br><span class="line">maxGradeStu = stu[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (minGradeStu.grade &gt; stu[i].grade) &#123;</span><br><span class="line">minGradeStu = stu[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, maxGradeStu.name, maxGradeStu.no);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s %s\n"</span>, minGradeStu.name, minGradeStu.no);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1041.考试座位号 （15 分)</title>
      <link href="/2019/04/10/pat-basic-1041/"/>
      <url>/2019/04/10/pat-basic-1041/</url>
      
        <content type="html"><![CDATA[<p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行给出一个正整数 <em>N</em>（≤1000），随后 <em>N</em> 行，每行给出一个考生的信息：<code>准考证号 试机座位号 考试座位号</code>。其中<code>准考证号</code>由 16 位数字组成，座位从 1 到 <em>N</em> 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。</p><p>考生信息之后，给出一个正整数 <em>M</em>（≤<em>N</em>），随后一行中给出 <em>M</em> 个待查询的试机座位号码，以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3310120150912233 2 4</span><br><span class="line">3310120150912119 4 1</span><br><span class="line">3310120150912126 1 3</span><br><span class="line">3310120150912002 3 2</span><br><span class="line">2</span><br><span class="line">3 4</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3310120150912002 2</span><br><span class="line">3310120150912119 1</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>根据题目要求，可先定义如下的Struct类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> permitNo;<span class="comment">//16位数字，超过了int的存储范围</span></span><br><span class="line"><span class="keyword">int</span> examSeatNumber;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以采用<strong>哈希表</strong>的思想，将输入的“试机座位号”作为Student数组的下标，以方便查找考试座位号等信息。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> permitNo;</span><br><span class="line"><span class="keyword">int</span> examSeatNumber;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, testSeatNumber, examSeatNumber;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> permitNo;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">Student stus[n + <span class="number">1</span>];<span class="comment">//座位号从1到N编号，故定义数组时增加一个长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %d %d"</span>, &amp;permitNo, &amp;testSeatNumber, &amp;examSeatNumber);</span><br><span class="line">stus[testSeatNumber].permitNo = permitNo;</span><br><span class="line">stus[testSeatNumber].examSeatNumber = examSeatNumber;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;testSeatNumber);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %d\n"</span>, stus[testSeatNumber].permitNo,</span><br><span class="line">stus[testSeatNumber].examSeatNumber);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1009.Product of Polynomials （25 分)</title>
      <link href="/2019/04/08/pat-advanced-1009/"/>
      <url>/2019/04/08/pat-advanced-1009/</url>
      
        <content type="html"><![CDATA[<p>This time, you are supposed to find <em>A</em>×<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p>$K N_1 a_{N1} N_2 a_{N2} … N_K a_{NK}$</p><p>where <em>K</em> is the number of nonzero terms in the polynomial, $N_i​$ and $a_{Ni}​$ (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10，$0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000​$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the product of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 3 3.6 2 6.0 1 1.6</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：计算两个多项式A、B的乘积。</p><p>思路：多项式的乘法运算可以转换为多项式的加法运算（多项式加法运算请参看<a href="/2019/04/08/pat-advanced-1002/">PAT甲级 1002.A+B for Polynomials （25 分)</a>）。</p><p>用double型的数组polynomial存储输入的第一个多项式A，用double型数组polynomial2表示多项式A、B的乘积。</p><p>可以采用<strong>哈希表</strong>的思想，数组polynomial的下标表示指数，值表示系数，如polynomial[n]表示一个指数为n、系数为polynomial[n]的单项式，数组polynomial2亦如此。</p><p>在输入第二个多项式B时，每输入一项（指数exponent和系数coefficient）时，用该项乘以多项式A，即乘以数组polynomial中值不为零的项。当B中的一项乘以A中的第j项时，将数组polynomial2对应下标为 j + exponent的值增加polynomial[j] ×coefficient，即polynomial2[j+exponent] += polynomial[j] ×coefficient。</p><p>需要注意的是，指数N≤1000，两个多项式相乘得到的结果中，指数最大为2000，故polynomial2的长度应设置为2001。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//指数不超过1000</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> k, exponent;</span><br><span class="line"><span class="keyword">double</span> coefficient;</span><br><span class="line"><span class="keyword">double</span> polynomial[MAX + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;, polynomial2[<span class="number">2</span> * MAX + <span class="number">1</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;exponent, &amp;coefficient);</span><br><span class="line">polynomial[exponent] = coefficient;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;exponent, &amp;coefficient);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; MAX + <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (polynomial[j] != <span class="number">0</span>) &#123;</span><br><span class="line">polynomial2[j + exponent] += polynomial[j] * coefficient;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span> * MAX + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (polynomial2[i] != <span class="number">0</span>) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, count);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * MAX; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (polynomial2[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>, i, polynomial2[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1002.A+B for Polynomials （25 分)</title>
      <link href="/2019/04/08/pat-advanced-1002/"/>
      <url>/2019/04/08/pat-advanced-1002/</url>
      
        <content type="html"><![CDATA[<p>This time, you are supposed to find <em>A</em>+<em>B</em> where <em>A</em> and <em>B</em> are two polynomials.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial:</p><p>$K N_1 a_{N1} N_2 a_{N2} … N_K a_{NK}$</p><p>where <em>K</em> is the number of nonzero terms in the polynomial, $N_i​$ and $a_{Ni}​$ (<em>i</em>=1,2,⋯,<em>K</em>) are the exponents and coefficients, respectively. It is given that 1≤<em>K</em>≤10，$0≤N_K&lt;⋯&lt;N_2&lt;N_1≤1000​$.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case you should output the sum of <em>A</em> and <em>B</em> in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2 1 2.4 0 3.2</span><br><span class="line">2 2 1.5 1 0.5</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 2 1.5 1 2.9 0 3.2</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>题目要求：计算两个多项式A、B的和。</p><p>可以采用<strong>哈希表</strong>的思想来实现，使用一个double型的数组polynomial（长度为1001，指数N≤1000）来存储多项式，其下标表示指数，值表示该指数对应的系数，如polynomial[n]表示一个指数为n、系数为polynomial[n]的单项式。</p><p>经过两次输入的累加操作后，polynomial中存储着两个多项式的和。</p><p>输出前，先遍历一次polynomial得到其中非零项的个数。然后从后往前遍历数组polynomial，输出值不为零的下标（指数）及其对应值（系数）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k, exponent;</span><br><span class="line"><span class="keyword">int</span> line = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">1001</span>;</span><br><span class="line"><span class="keyword">double</span> coefficient;</span><br><span class="line"><span class="keyword">double</span> polynomials[MAX] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">while</span> (line--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %lf"</span>, &amp;exponent, &amp;coefficient);</span><br><span class="line">polynomials[exponent] += coefficient;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (polynomials[i] != <span class="number">0</span>) &#123;</span><br><span class="line">len++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = MAX - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (polynomials[i] != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>, i, polynomials[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1010.一元多项式求导 （25 分)</title>
      <link href="/2019/04/07/pat-basic-1010/"/>
      <url>/2019/04/07/pat-basic-1010/</url>
      
        <content type="html"><![CDATA[<p>设计函数求一元多项式的导数。（注：$x^n$（n为整数）的一阶导数为$nx^{n−1}$。）</p><a id="more"></a><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3 4 -5 2 6 1 -2 0</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12 3 -10 1 6 0</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>高中数学告诉我们：$ax^b$的一阶导数为$abx^{b-1}$。</p><p>用coefficient和exponent分别表示多项式非零项的系数和指数，则该单项式的一阶导数为$coefficient \times exponent\ x^{exponent - 1}​$。</p><p>若单项式的指数exponent = 0，其一阶导数为0，不需要输出。故循环输入时，只需考虑指数exponent != 0的情况即可。</p><p>用bool型的变量flag表示是否已经有过输出，默认为false，即没有输出。若已有输出，即flag == true，则在本次输出之前，先输出一个空格，以此保证结尾不会有多余空格。</p><p>值得注意的是，输入的测试用例可能为零多项式。因此，在程序的最后需要判断flag == false是否成立，若成立，则表示输入的多项式为零多项式，此时需输出“0 0”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> coefficient;</span><br><span class="line"><span class="keyword">int</span> exponent;</span><br><span class="line"><span class="comment">//判断是否已经有过输出</span></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;coefficient, &amp;exponent) != EOF) &#123;</span><br><span class="line"><span class="keyword">if</span> (exponent != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, coefficient * exponent, exponent - <span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1065.A+B and C (64bit) （20 分)</title>
      <link href="/2019/04/06/pat-advanced-1065/"/>
      <url>/2019/04/06/pat-advanced-1065/</url>
      
        <content type="html"><![CDATA[<p>Given three integers <em>A</em>, <em>B</em> and <em>C</em> in [−2^63,2^63], you are supposed to tell whether <em>A</em>+<em>B</em>&gt;<em>C</em>.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>The first line of the input gives the positive number of test cases, <em>T</em> (≤10). Then <em>T</em> test cases follow, each consists of a single line containing three integers <em>A</em>, <em>B</em> and <em>C</em>, separated by single spaces.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, output in one line <code>Case #X: true</code> if <em>A</em>+<em>B</em>&gt;<em>C</em>, or <code>Case #X: false</code> otherwise, where <em>X</em> is the case number (starting from 1).</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">9223372036854775807 -9223372036854775808 0</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: false</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>在计算机组成原理中，如果两个正数之和等于负数或是两个负数之和等于正数，那么就是溢出。</strong></p><p>A、B、C的取值范围为 [−2^63,2^63]，而long long的取值范围为[-2^63,2^63)（经测试，测试用例中没有出现2^63的情况，怀疑是题目写错了），故可以采用long long 存储A、B和C。</p><p>设sum=A+B，</p><p>如果A  &gt; 0 , B &gt; 0，则sum可能会发生正溢出。long long可表示的最大值为2^63-1，A+B最大为2^64-2，正溢出后sum的取值范围为[-2^63,-2]（由(2^64-2) % (2^64) = -2可得右边界），此时A+B必定大于C ；</p><p>如果A  &lt; 0 , B &lt; 0 ，则sum可能会发生负溢出。负溢出后sum的取值范围[0,2^63)（由(-2^64) % (2^64) = 0可得左边界），此时A+B必定小于C；</p><p>如果A  &gt; 0 , B &lt; 0 或者 A  &lt; 0 , B &gt; 0 ，则sum不会溢出，此时直接判断sum &gt; C是否成立即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">sum = a + b;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; b &gt; <span class="number">0</span> &amp;&amp; sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; <span class="number">0</span> &amp;&amp; b &lt; <span class="number">0</span> &amp;&amp; sum &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; c) &#123;</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: true\n"</span>, i + <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: false\n"</span>, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1046.Shortest Distance （20 分)</title>
      <link href="/2019/04/05/pat-advanced-1046/"/>
      <url>/2019/04/05/pat-advanced-1046/</url>
      
        <content type="html"><![CDATA[<p>The task is really simple: given <em>N</em> exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains an integer <em>N</em> (in [3,105]), followed by <em>N</em> integer distances <em>D</em>1 <em>D</em>2 ⋯ DN, where Di is the distance between the <em>i</em>-th and the (<em>i</em>+1)-st exits, and DN is between the <em>N</em>-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer <em>M</em> (≤104), with <em>M</em> lines follow, each contains a pair of exits numbers, provided that the exits are numbered from 1 to <em>N</em>. It is guaranteed that the total round trip distance is no more than 107.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print your results in <em>M</em> lines, each contains the shortest distance between the corresponding given pair of exits.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 1 2 4 14 9</span><br><span class="line">3</span><br><span class="line">1 3</span><br><span class="line">2 5</span><br><span class="line">4 1</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">10</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>声明一个数组distances，<code>distances[i]</code>存储从第一个结点，沿顺时针方向，到第i个结点的距离。</p><p>使用sum表示所有结点形成的环的总长度。</p><p>计算结点start和end之间的最短距离时，只需比较shortestDistance = distances[end]-distances[start]和sum-shortestDistance，取两者中的较小者即可。</p><p>需要注意的是，输入的start不一定比end小，故在计算最短距离前，让start为较小结点编号，end为较大结点的编号。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="comment">// 存储从第一个结点，沿顺时针方向，到第i个结点的距离</span></span><br><span class="line"><span class="comment">// i=0这个位置空置不用</span></span><br><span class="line"><span class="keyword">int</span> distances[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>, temp;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;temp);</span><br><span class="line">distances[i] = sum;</span><br><span class="line">sum += temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> start, end;</span><br><span class="line"><span class="keyword">int</span> shortestDistance;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;start, &amp;end);</span><br><span class="line"><span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">temp = start;</span><br><span class="line">start = end;</span><br><span class="line">end = temp;</span><br><span class="line">&#125;</span><br><span class="line">shortestDistance = distances[end] - distances[start];</span><br><span class="line"><span class="comment">// 若 shorestDistance &gt; totalDistance - shorestDistance</span></span><br><span class="line"><span class="keyword">if</span> (sum &lt; <span class="number">2</span> * shortestDistance) &#123;</span><br><span class="line">shortestDistance = sum - shortestDistance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, shortestDistance);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 21.合并两个有序链表</title>
      <link href="/2019/04/05/leetcode-21-merge-two-sorted-lists/"/>
      <url>/2019/04/05/leetcode-21-merge-two-sorted-lists/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p><p><strong>示例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class="line">输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>已知两个有序链表<code>L1</code>和<code>L2</code>，用p和q分别表示<code>L1</code>和<code>L2</code>的当前节点，用<code>L</code>表示合并后的链表，rear表示合并后的链表的最后一个节点。</p><p>当<code>p != null &amp;&amp; q != null</code>时，循环比较p和q的val值，若p大，则将p添加到新链表的末尾，然后p后移；否则将q添加到新链表的末尾，q后移。</p><p>上述循环结束后，p、q至少有一个已经为null。</p><p>若<code>p != null</code>，则将p添加到新链表的末尾。若<code>q != null</code>，则将q添加到新链表的末尾。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        ListNode l = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode p = l1,q = l2,r = l;</span><br><span class="line">        ListNode newNode ;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(p.val &lt;= q.val) &#123;</span><br><span class="line">                newNode = p;</span><br><span class="line">                p = p.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newNode = q;</span><br><span class="line">                q = q.next;</span><br><span class="line">            &#125;</span><br><span class="line">            r.next = newNode;</span><br><span class="line">            r = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.next = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q != <span class="keyword">null</span>) &#123;</span><br><span class="line">            r.next = q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> l.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>设两个有序链表<code>L1</code>和<code>L2</code>的长度分别为n、m。不妨设 n &lt; m，则</p><p>时间复杂度：由于该算法只有一个循环，且循环次数不超过n+m，故时间复杂度为O（n+m）。</p><p>空间复杂度：由于该算法只使用了常数的额外空间，故空间复杂度为O（1）。</p><h3 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h3><p>执行用时 : 1 ms, 在Merge Two Sorted Lists的Java提交中击败了100.00% 的用户</p><p>内存消耗 : 36.8 MB, 在Merge Two Sorted Lists的Java提交中击败了0.97% 的用户</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 25.k个一组翻转链表</title>
      <link href="/2019/04/04/leetcode-25-reverse-nodes-in-k-group/"/>
      <url>/2019/04/04/leetcode-25-reverse-nodes-in-k-group/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出一个链表，每 <em>k</em> 个节点一组进行翻转，并返回翻转后的链表。</p><p><em>k</em> 是一个正整数，它的值小于或等于链表的长度。如果节点总数不是 <em>k</em> 的整数倍，那么将最后剩余节点保持原有顺序。</p><p><strong>示例 :</strong></p><p>给定这个链表：<code>1-&gt;2-&gt;3-&gt;4-&gt;5</code></p><p>当 <em>k</em> = 2 时，应当返回: <code>2-&gt;1-&gt;4-&gt;3-&gt;5</code></p><p>当 <em>k</em> = 3 时，应当返回: <code>3-&gt;2-&gt;1-&gt;4-&gt;5</code></p><p><strong>说明 :</strong></p><ul><li>你的算法只能使用常数的额外空间。</li><li><strong>你不能只是单纯的改变节点内部的值</strong>，而是需要实际的进行节点交换。</li></ul><a id="more"></a><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>首先，为需要返回的链表设置一个头结点list以及尾节点rear。</p><p>然后，使用整数count记录链表的节点个数，每当满足条件<code>count % k == 0</code>时，翻转这k个节点组成的部分链表。</p><p>使用start表示需要翻转的部分链表的第一个节点，用end表示需要翻转的部分链表的最后一个节点。</p><p>使用pre表示翻转后的部分链表的第一个节点，采用头插法，翻转部分链表。翻转完毕后，start成为了该部分链表的最后一个节点。</p><p>接着，让翻转后的链表成为rear的后继，即<code>rear.next = pre</code>，然后让<code>rear = start</code>，并将原链表的下一个节点赋给start，开启新一轮的翻转。</p><p>最后，待循环执行完毕后，若链表后面还有不足k个节点，即<code>count % k != 0</code>，直接让剩余的这部分链表成为rear的后继，即<code>rear = start</code>。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">reverseKGroup</span><span class="params">(ListNode head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        ListNode list = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        ListNode rear = list;</span><br><span class="line">        rear.next = head;</span><br><span class="line"></span><br><span class="line">        ListNode node = list.next;</span><br><span class="line">        ListNode start = node,end;</span><br><span class="line">        ListNode p,q,pre=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span>(count % k == <span class="number">0</span>) &#123;</span><br><span class="line">                end = node;</span><br><span class="line">                node = node.next;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//1.翻转当前的k个节点</span></span><br><span class="line">                end.next = <span class="keyword">null</span>;</span><br><span class="line">                p = start;</span><br><span class="line">                <span class="keyword">while</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    q = p.next;</span><br><span class="line">                    </span><br><span class="line">                    p.next = pre;</span><br><span class="line">                    pre = p;</span><br><span class="line">                    </span><br><span class="line">                    p = q;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//2.将翻转后的部分链表链接到原来的链表尾部</span></span><br><span class="line">                rear.next = pre;</span><br><span class="line">                rear = start;</span><br><span class="line">               </span><br><span class="line">                <span class="comment">//3.开启下一轮翻转</span></span><br><span class="line">                pre=<span class="keyword">null</span>;</span><br><span class="line">                start = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.next; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count % k != <span class="number">0</span>) &#123;</span><br><span class="line">            rear.next = start;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：该算法只遍历链表一次，故时间复杂度为O(n)。</p><p>空间复杂度：该算法只使用了常数的额外空间，故空间复杂度为O(1)</p><h3 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h3><p>执行用时 : 2 ms, 在Reverse Nodes in k-Group的Java提交中击败了100.00% 的用户</p><p>内存消耗 : 37.6 MB, 在Reverse Nodes in k-Group的Java提交中击败了0.93% 的用户</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT甲级 1042.Shuffling Machine （20 分)</title>
      <link href="/2019/04/03/pat-advanced-1042/"/>
      <url>/2019/04/03/pat-advanced-1042/</url>
      
        <content type="html"><![CDATA[<p>Shuffling is a procedure used to randomize a deck of playing cards. Because standard shuffling techniques are seen as weak, and in order to avoid “inside jobs” where employees collaborate with gamblers by performing inadequate shuffles, many casinos employ <strong>automatic shuffling machines</strong>. Your task is to simulate a shuffling machine.</p><p>The machine shuffles a deck of 54 cards according to a given random order and repeats for a given number of times. It is assumed that the initial status of a card deck is in the following order:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S1, S2, ..., S13, </span><br><span class="line">H1, H2, ..., H13, </span><br><span class="line">C1, C2, ..., C13, </span><br><span class="line">D1, D2, ..., D13, </span><br><span class="line">J1, J2</span><br></pre></td></tr></table></figure><p>where “S” stands for “Spade”, “H” for “Heart”, “C” for “Club”, “D” for “Diamond”, and “J” for “Joker”. A given order is a permutation of distinct integers in [1, 54]. If the number at the <em>i</em>-th position is <em>j</em>, it means to move the card from position <em>i</em> to position <em>j</em>. For example, suppose we only have 5 cards: S3, H5, C1, D13 and J2. Given a shuffling order {4, 2, 5, 3, 1}, the result will be: J2, H5, D13, S3, C1. If we are to repeat the shuffling again, the result will be: C1, H5, S3, J2, D13.</p><a id="more"></a><h3 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification:"></a>Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains a positive integer <em>K</em> (≤20) which is the number of repeat times. Then the next line contains the given order. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification:"></a>Output Specification:</h3><p>For each test case, print the shuffling results in one line. All the cards are separated by a space, and there must be no extra space at the end of the line.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input:"></a>Sample Input:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">36 52 37 38 3 39 40 53 54 41 11 12 13 42 43 44 2 4 23 24 25 26 27 6 7 8 48 49 50 51 9 10 14 15 16 5 17 18 19 1 20 21 22 28 29 30 31 32 33 34 35 45 46 47</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output:"></a>Sample Output:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S7 C11 C10 C12 S1 H7 H8 H9 D8 D9 S11 S12 S13 D10 D11 D12 S3 S4 S6 S10 H1 H2 C13 D2 D3 D4 H6 H3 D13 J1 J2 C1 C2 C3 C4 D1 S5 H5 H11 H12 C6 C7 C8 C9 S2 S8 S9 H10 D5 D6 D7 H4 H13 C5</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p><strong>题目大意</strong>：模拟一个洗牌机。共有54张牌，其初始顺序为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">S1, S2, ..., S13, </span><br><span class="line">H1, H2, ..., H13, </span><br><span class="line">C1, C2, ..., C13, </span><br><span class="line">D1, D2, ..., D13, </span><br><span class="line">J1, J2</span><br></pre></td></tr></table></figure><p>给定洗牌次数K ( ≤20 )，以及第i张牌需要放置的位置j，输出洗完以后的牌顺序。</p><p>例如，假定只有五张牌：S3, H5, C1, D13 和 J2。洗牌顺序为{4, 2, 5, 3, 1}，洗完一次后的结果为： J2, H5, D13, S3, C1。若再洗一次，则结果为 C1, H5, S3, J2, D13。</p><p><strong>思路</strong>：</p><p>使用二维数组<code>arr[n][2]</code>存储牌号(<code>[1,54]</code>)及该牌的当前位置，数组<code>numbers[n]</code>存储洗牌顺序。</p><p>每次洗牌，对所有牌执行<code>arr[i][1]=numbers[i]</code>，然后按照牌的当前位置升序排序，即对数组<code>arr[n][2]</code>第二维升序排序。</p><p>上述操作循环执行K次以后，得到最终的牌顺序。</p><p>输出时，按照牌号转换为对应的牌内容。先按照牌号得到其对应的字母编号，如牌号不大于13，则为字母编号为<code>S</code>…然后让牌号对13取模，若余数为0，则该牌的数字编号为<code>13</code>，否则该牌的数字编号为取模后的余数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">54</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[n][<span class="number">2</span>])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">1</span>; j &gt;= i + <span class="number">1</span>; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j][<span class="number">1</span>] &lt; arr[j - <span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">temp = arr[j][<span class="number">1</span>];</span><br><span class="line">arr[j][<span class="number">1</span>] = arr[j - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">arr[j - <span class="number">1</span>][<span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">temp = arr[j][<span class="number">0</span>];</span><br><span class="line">arr[j][<span class="number">0</span>] = arr[j - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">arr[j - <span class="number">1</span>][<span class="number">0</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">int</span> arr[n][<span class="number">2</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> numbers[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i][<span class="number">0</span>] = i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;numbers[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (k--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i][<span class="number">1</span>] = numbers[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">if</span> (arr[i][<span class="number">0</span>] &lt;= <span class="number">13</span>) &#123;</span><br><span class="line">c = <span class="string">'S'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][<span class="number">0</span>] &lt;= <span class="number">26</span>) &#123;</span><br><span class="line">c = <span class="string">'H'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][<span class="number">0</span>] &lt;= <span class="number">39</span>) &#123;</span><br><span class="line">c = <span class="string">'C'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i][<span class="number">0</span>] &lt;= <span class="number">52</span>) &#123;</span><br><span class="line">c = <span class="string">'D'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">c = <span class="string">'J'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r = arr[i][<span class="number">0</span>] % <span class="number">13</span>;</span><br><span class="line"><span class="keyword">int</span> data = r == <span class="number">0</span> ? <span class="number">13</span> : r;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c%d"</span>, c, data);</span><br><span class="line"><span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat甲级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1018.锤子剪刀布 （20 分)</title>
      <link href="/2019/04/01/pat-basic-1018/"/>
      <url>/2019/04/01/pat-basic-1018/</url>
      
        <content type="html"><![CDATA[<p>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示：</p><p><img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="FigCJB.jpg"></p><p>现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>N</em>（≤10^5），即双方交锋的次数。随后 <em>N</em> 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。<code>C</code> 代表“锤子”、<code>J</code> 代表“剪刀”、<code>B</code> 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">C J</span><br><span class="line">J B</span><br><span class="line">C B</span><br><span class="line">B B</span><br><span class="line">B C</span><br><span class="line">C C</span><br><span class="line">C B</span><br><span class="line">J B</span><br><span class="line">B C</span><br><span class="line">J J</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5 3 2</span><br><span class="line">2 3 5</span><br><span class="line">B B</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>设win、draw和defeat分别表示甲赢、平和输的次数，数组aCount[3]和bCount[3]分别表示甲、乙每个手势获胜的次数（下标0表示<code>B</code>，1表示<code>C</code>，2表示<code>J</code>）。</p><p>每次交锋，按照结果赢、平和输，分别改变win、draw和defeat，结果为win时，甲相应手势获胜次数加1；结果为defeat（乙win）时，乙相应手势获胜次数加1。</p><p>最后按照题目要求输出即可。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">getMaxGesture</span><span class="params">(<span class="keyword">int</span> wins[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max, maxIndex;</span><br><span class="line">max = maxIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (wins[i] &gt; max) &#123;</span><br><span class="line">max = wins[i];</span><br><span class="line">maxIndex = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (maxIndex == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'B'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (maxIndex == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'C'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'J'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, win, draw, defeat;</span><br><span class="line">win = draw = defeat = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> aCount[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;, bCount[<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//0-C,1-J,2-B</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">char</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">" %c %c"</span>, &amp;a, &amp;b);</span><br><span class="line"><span class="keyword">if</span> ((a == <span class="string">'C'</span> &amp;&amp; b == <span class="string">'J'</span>) || (a == <span class="string">'J'</span> &amp;&amp; b == <span class="string">'B'</span>)</span><br><span class="line">|| (a == <span class="string">'B'</span> &amp;&amp; b == <span class="string">'C'</span>)) &#123;</span><br><span class="line">win++;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="string">'B'</span>) &#123;</span><br><span class="line">aCount[<span class="number">0</span>]++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == <span class="string">'C'</span>) &#123;</span><br><span class="line">aCount[<span class="number">1</span>]++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">aCount[<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a == b) &#123;</span><br><span class="line">draw++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">defeat++;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="string">'B'</span>) &#123;</span><br><span class="line">bCount[<span class="number">0</span>]++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b == <span class="string">'C'</span>) &#123;</span><br><span class="line">bCount[<span class="number">1</span>]++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">bCount[<span class="number">2</span>]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, win, draw, defeat);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, defeat, draw, win);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %c\n"</span>, getMaxGesture(aCount), getMaxGesture(bCount));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1012.数字分类 （20 分)</title>
      <link href="/2019/04/01/pat-basic-1012/"/>
      <url>/2019/04/01/pat-basic-1012/</url>
      
        <content type="html"><![CDATA[<p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p><ul><li><em>A</em>1 = 能被 5 整除的数字中所有偶数的和；</li><li><em>A</em>2 = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 <em>n</em>1−<em>n</em>2+<em>n</em>3−<em>n</em>4⋯；</li><li><em>A</em>3 = 被 5 除后余 2 的数字的个数；</li><li><em>A</em>4 = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li><li><em>A</em>5 = 被 5 除后余 4 的数字中最大数字。</li></ul><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 <em>N</em>，随后给出 <em>N</em> 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对给定的 <em>N</em> 个正整数，按题目要求计算 <em>A</em>1~<em>A</em>5 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。</p><p>若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">13 1 2 3 4 5 6 7 8 9 10 20 16 18</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">30 11 2 9.7 9</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 1 2 4 5 6 7 9 16</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">N 11 2 N 9</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>按照题目要求，对不同数字执行不同的计算即可。</p><p>以下两点需要注意：</p><p>1.输出时行末不得有多余空格；</p><p>2.若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, a1, a2, a3, a5, a2Index, a4Count;</span><br><span class="line">a1 = a2 = a3 = a5 = a2Index = a4Count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">double</span> a4 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">a1 += x;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">5</span> == <span class="number">1</span>) &#123;</span><br><span class="line">a2 += <span class="built_in">pow</span>(<span class="number">-1</span>, a2Index++) * x;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">5</span> == <span class="number">2</span>) &#123;</span><br><span class="line">a3 += <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">5</span> == <span class="number">3</span>) &#123;</span><br><span class="line">a4 += x;</span><br><span class="line">a4Count++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (x % <span class="number">5</span> == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; a5) &#123;</span><br><span class="line">a5 = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!a1) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!a2Index) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!a3) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!a4Count) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N "</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.1f "</span>, a4 / a4Count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!a5) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"N"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, a5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1046.划拳 （15 分)</title>
      <link href="/2019/03/31/pat-basic-1046/"/>
      <url>/2019/03/31/pat-basic-1046/</url>
      
        <content type="html"><![CDATA[<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。</p><a id="more"></a><p>下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第一行先给出一个正整数 <em>N</em>（≤100），随后 <em>N</em> 行，每行给出一轮划拳的记录，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">甲喊 甲划 乙喊 乙划</span><br></pre></td></tr></table></figure><p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过 100 的正整数（两只手一起划）。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">8 10 9 12</span><br><span class="line">5 10 5 10</span><br><span class="line">3 8 5 12</span><br><span class="line">12 18 1 13</span><br><span class="line">4 16 12 15</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析:"></a>分析:</h3><p>设aCount和bCount分别表示甲、乙两人喝酒的杯数，aSay和bSay分别表示甲、乙喊出的数字，aGive和bGive分别表示甲、乙划出的数字。</p><p>本题共有四种情况，对应三种结果：</p><p>1.甲、乙同赢(aGive == aSay + bSay &amp;&amp; bGive == aSay + bSay)或同输(aGive != aSay + bSay &amp;&amp; bGive != aSay + bSay)：继续下一轮；</p><p>2.甲赢(aGive == aSay + bSay)：乙喝酒，即bCount++；</p><p>3.乙赢(bGive == aSay + bSay)：甲喝酒，即aCount++。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, aCount, bCount;</span><br><span class="line">aCount = bCount = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> aSay, aGive, bSay, bGive;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;aSay, &amp;aGive, &amp;bSay, &amp;bGive);</span><br><span class="line"><span class="comment">//1.同赢或同输</span></span><br><span class="line"><span class="keyword">if</span> ((aGive == aSay + bSay &amp;&amp; bGive == aSay + bSay)</span><br><span class="line">|| (aGive != aSay + bSay &amp;&amp; bGive != aSay + bSay)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.甲赢</span></span><br><span class="line"><span class="keyword">if</span> (aGive == aSay + bSay) &#123;</span><br><span class="line">bCount++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bGive == aSay + bSay) &#123;</span><br><span class="line"><span class="comment">//3.乙赢</span></span><br><span class="line">aCount++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, aCount, bCount);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1026.程序运行时间 （15 分)</title>
      <link href="/2019/03/28/pat-basic-1026/"/>
      <url>/2019/03/28/pat-basic-1026/</url>
      
        <content type="html"><![CDATA[<p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 <em>f</em> 的运行时间，我们只要在调用 <em>f</em> 之前先调用 clock()，获得一个时钟打点数 C1；在 <em>f</em> 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 <em>f</em> 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。</p><p>这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0,10^7]。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 4577973</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12:42:59</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>由于题目要求“不足 1 秒的时间四舍五入到秒”，所以C2-C1后，先加上50，这样如果（C2-C1）/ 100的小数位大于等于0.5则会进位，小于0.5则会被舍去，从而保证四舍五入到秒。</p><p>然后再除以100，得到以秒为单位的总时间n =（C2-C1+50）/ 100。</p><p>n / 3600 得到小时数hour，n % 3600 / 60 则得到了分钟数minute ，n % 3600 % 60则得到了秒数second。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c1, c2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;c1, &amp;c2);</span><br><span class="line"><span class="keyword">int</span> n = (c2 - c1 + <span class="number">50</span>) / <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> hour = n / <span class="number">3600</span>;</span><br><span class="line">n = n % <span class="number">3600</span>;</span><br><span class="line"><span class="keyword">int</span> minute = n / <span class="number">60</span>, second = n % <span class="number">60</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>, hour, minute, second);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种解法：</p><p>使用浮点数来存储以秒为单位的总时间，为最后的秒数second加上0.5，从而保证大于等于0.5的小数位能进位。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c1, c2;</span><br><span class="line"><span class="keyword">double</span> CLK_TCK = <span class="number">100.0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;c1, &amp;c2);</span><br><span class="line"><span class="keyword">double</span> seconds = (c2 - c1) / CLK_TCK;</span><br><span class="line"><span class="keyword">int</span> h = seconds / (<span class="number">60</span> * <span class="number">60</span>);</span><br><span class="line"><span class="keyword">int</span> m = (seconds - h * <span class="number">60</span> * <span class="number">60</span>) / <span class="number">60</span>;</span><br><span class="line"><span class="keyword">int</span> s = seconds - h * <span class="number">60</span> * <span class="number">60</span> - m * <span class="number">60</span> + <span class="number">0.5</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>, h, m, s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1016.部分A+B （15 分)</title>
      <link href="/2019/03/28/pat-basic-1016/"/>
      <url>/2019/03/28/pat-basic-1016/</url>
      
        <content type="html"><![CDATA[<p>正整数 <em>A</em> 的“$D_A​$（为 1 位整数）部分”定义为由 <em>A</em> 中所有 $D_A​$ 组成的新整数 $P_A​$。例如：给定 <em>A</em>=3862767，$D_A​$=6，则 <em>A</em>的“6 部分”$P_A​$是66，因为 <em>A</em> 中有 2 个 6。</p><p>现给定 <em>A</em>、$D_A$、<em>B</em>、$D_A$，请编写程序计算 $P_A+P_B$。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入在一行中依次给出 <em>A</em>、$D_A​$、<em>B</em>、$D_B​$，中间以空格分隔，其中 0&lt;<em>A</em>,<em>B</em>&lt;$10^{10}​$。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>在一行中输出$P_A+P_B​$ 的值。</p><h3 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例 1："></a>输入样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3862767 6 13530293 3</span><br></pre></td></tr></table></figure><h3 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例 1："></a>输出样例 1：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">399</span><br></pre></td></tr></table></figure><h3 id="输入样例-2："><a href="#输入样例-2：" class="headerlink" title="输入样例 2："></a>输入样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3862767 1 13530293 8</span><br></pre></td></tr></table></figure><h3 id="输出样例-2："><a href="#输出样例-2：" class="headerlink" title="输出样例 2："></a>输出样例 2：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>首先以字符数组（或者字符串）的形式输入A和B，</p><p>然后遍历A和B中的每一个字符，</p><p>通过减去’0’得到字符的数字形式，</p><p>接着，判断其是否等于$D_A$、$D_B$，若等于，则进行进位累加操作。</p><p>(1)若从前往后遍历字符数组（或字符串），则累加语句为：</p><p>pa = 10 * pa + da；</p><p>(2)若从后往前遍历字符数组（或字符串），则累加语句为</p><p>pa += da * carray; </p><p>carry *= 10;（carry表示进位，初值为1）。</p><p>循环结束后，得到$P_A$和$P_B​$ 。</p><p>需要注意的是$10^{10}$超过了int的取值范围，故应使用long long 申明$P_A$和$P_B$。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getP</span><span class="params">(<span class="keyword">char</span> a[], <span class="keyword">int</span> da)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pa = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> carry = <span class="number">1</span>;<span class="comment">//进位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">strlen</span>(a) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> ((a[i] - <span class="string">'0'</span>) == da) &#123;</span><br><span class="line">pa += da * carry;</span><br><span class="line">carry *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>], b[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> da, db;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s %d %s %d"</span>, a, &amp;da, b, &amp;db);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, getP(a, da) + getP(b, db));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1011.A+B 和 C （15 分)</title>
      <link href="/2019/03/28/pat-basic-1011/"/>
      <url>/2019/03/28/pat-basic-1011/</url>
      
        <content type="html"><![CDATA[<p>给定区间 [−2^31,2^31] 内的 3 个整数 <em>A</em>、<em>B</em> 和 <em>C</em>，请判断 <em>A</em>+<em>B</em> 是否大于 <em>C</em>。</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>输入第 1 行给出正整数 <em>T</em> (≤10)，是测试用例的个数。随后给出 <em>T</em> 组测试用例，每组占一行，顺序给出 <em>A</em>、<em>B</em> 和 <em>C</em>。整数间以空格分隔。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 <em>A</em>+<em>B</em>&gt;<em>C</em>，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">1 2 3</span><br><span class="line">2 3 4</span><br><span class="line">2147483647 0 2147483646</span><br><span class="line">0 -2147483648 -2147483647</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Case #1: false</span><br><span class="line">Case #2: true</span><br><span class="line">Case #3: true</span><br><span class="line">Case #4: false</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>本题有两点需要注意：</p><p>1.给定的取值范围为 [−2^31,2^31]，因此，A+B有可能会超过int的取值范围，故A、B和C应申明为long long；</p><p>2.输出时编号从1开始。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="keyword">if</span> (a + b &gt; c) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: true\n"</span>, i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: false\n"</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1001.害死人不偿命的(3n+1)猜想 （15 分)</title>
      <link href="/2019/03/28/pat-basic-1001/"/>
      <url>/2019/03/28/pat-basic-1001/</url>
      
        <content type="html"><![CDATA[<p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><a id="more"></a><h3 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h3><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><h3 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h3><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><h3 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>使用count记录总的步数，</p><p>如果n为偶数，则令n=n/2；</p><p>如果n为奇数，则令n=(3*n+1)/2，</p><p>然后步数count++，</p><p>直至n==1结束循环。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, count = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">n /= <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n = (<span class="number">3</span> * n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, count);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++中char * a=&quot;xxx&quot;引发的警告</title>
      <link href="/2019/03/21/c-or-cpp-char-pointer-string-constant-unmodified/"/>
      <url>/2019/03/21/c-or-cpp-char-pointer-string-constant-unmodified/</url>
      
        <content type="html"><![CDATA[<p>在c++中，当char * 指向字符常量时（以下面的程序为例）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> *a = <span class="string">"I love China!"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时，将产生如下warning：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ProblemC.cpp:4:12: warning: conversion from string literal to 'char *' is</span><br><span class="line">      deprecated [-Wc++<span class="number">11</span>-compat-deprecated-writable-strings]</span><br><span class="line">        <span class="keyword">char</span> *a = <span class="string">"I love China!"</span>;</span><br><span class="line">                  ^</span><br><span class="line"><span class="number">1</span> warning generated.</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>为什么会产生该warning呢？</li></ul><p>因为此时a中存储的是“I love China!”在内存中的首地址，而“I love China!”是字符常量，存放在只读区中。程序员有可能通过a去修改“I love China!”的值，从而导致error。</p><ul><li>如何解决该warning呢？</li></ul><p>在定义a时，使用const修饰，表明a所指地址中的内容不允许被修改。示例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *a = <span class="string">"I love China!"</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PAT乙级 1008.数组元素循环右移问题 （20 分)</title>
      <link href="/2019/03/15/pat-basic-1008/"/>
      <url>/2019/03/15/pat-basic-1008/</url>
      
        <content type="html"><![CDATA[<p>一个数组<em>A</em>中存有<em>N</em>（&gt;0）个整数，在<strong>不允许使用另外数组</strong>的前提下，将每个整数循环向右移<em>M</em>（≥0）个位置，即将<em>A</em>中的数据由（$A_0 A_1⋯A_{N−1}$）变换为（$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$）（最后<em>M</em>个数循环移至最前面的<em>M</em>个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p><a id="more"></a><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每个输入包含一个测试用例，第1行输入<em>N</em>（1≤<em>N</em>≤100）和<em>M</em>（≥0）；第2行输入<em>N</em>个整数，之间用空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出循环右移<em>M</em>位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6 2</span><br><span class="line">1 2 3 4 5 6</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 6 1 2 3 4</span><br></pre></td></tr></table></figure><h3 id="解法一：直接法"><a href="#解法一：直接法" class="headerlink" title="解法一：直接法"></a>解法一：直接法</h3><ul><li><p><strong>算法思路</strong>：每次向右移动一位，循环执行m次</p></li><li><p><strong>代码实现</strong></p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="comment">//保存数组的最后一位</span></span><br><span class="line">            <span class="keyword">int</span> temp = arr[n - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">//自后向前，循环后移一位</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            arr[<span class="number">0</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; arr[i];</span><br><span class="line">            <span class="keyword">if</span> (i != n - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：每次向右移动一位，需要执行n次赋值操作，这个过程循环执行m次，所以共执行<strong>nm</strong>次赋值操作，时间复杂度为<strong>O(nm)</strong></li></ul><h3 id="解法二：反转法"><a href="#解法二：反转法" class="headerlink" title="解法二：反转法"></a>解法二：反转法</h3><ul><li><strong>算法思想</strong></li></ul><p>假设N&gt;=M（若N&lt;M，只需令M=M%N即可），数组A中的数据为$A_0 A_1⋯A_{N−1}$，现在需要将数组A循环向右移M个位置，即将$A_{N-M}⋯A_{N−1}$移到数组的前面。</p><p>我们可以将数组A中的数据分为两个部分$A_0 A_1⋯A_{N−M-1}$和$A_{N-M}⋯A_{N−1}$来看，</p><p>（1）先将$A_0 A_1⋯A_{N−M-1}​$反转，得到$A_{N−M-1} ⋯A_1 A_0​$；</p><p>（2）再将$A_{N-M}⋯A_{N−1}​$反转，得到$A_{N-1}⋯A_{N−M}​$</p><p>（3）经过（1）和（2）后，数组A中的数据为$A_{N−M-1} ⋯A_1 A_0 A_{N-1}⋯A_{N−M}$，将数组A中的数据反转，此时数组A中的数据顺序为$A_{N-M}⋯A_{N−1} A_0 A_1⋯A_{N−M−1}$</p><ul><li><strong>代码实现</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m &gt; n) &#123;</span><br><span class="line">m = m % n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 反转前n-m项</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(n-m)/<span class="number">2</span>;i++) &#123;</span><br><span class="line">temp = arr[n-m-i<span class="number">-1</span>];</span><br><span class="line">arr[n-m-i<span class="number">-1</span>] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 反转后m项</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-m;i&lt;n-m/<span class="number">2</span>;i++) &#123;</span><br><span class="line">temp = arr[<span class="number">2</span>*n-m-i<span class="number">-1</span>];</span><br><span class="line">arr[<span class="number">2</span>*n-m-i<span class="number">-1</span>] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 反转整个数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++) &#123;</span><br><span class="line">temp = arr[n-i<span class="number">-1</span>];</span><br><span class="line">arr[n-i<span class="number">-1</span>] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arr[i];</span><br><span class="line"><span class="keyword">if</span> (i != n - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong></li></ul><p>三次反转操作，共执行 $3 \times \frac{n-m}{2}+3 \times [n-\frac{m}{2}-(n-m)]+3 \times \frac{n}{2}=3n$次赋值操作，故时间复杂度为<strong>O(n)</strong></p>]]></content>
      
      
      <categories>
          
          <category> pat乙级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《推荐系统实践》4.推荐系统冷启动问题</title>
      <link href="/2019/03/14/recommender-system-cold-start/"/>
      <url>/2019/03/14/recommender-system-cold-start/</url>
      
        <content type="html"><![CDATA[<p>推荐系统需要根据用户的历史行为和兴趣预测用户未来的行为和兴趣，因此大量的用户行为数据就成为推荐系统的重要组成部分和先决条件。 </p><p>如何在没有大量用户数据的情况下设计个性化推荐系统并且让用户对推荐结果满意从而愿意使用推荐系统，就是<strong>冷启动问题（cold start）</strong>。</p><a id="more"></a><h3 id="冷启动分类"><a href="#冷启动分类" class="headerlink" title="冷启动分类"></a>冷启动分类</h3><ul><li>用户冷启动：如何给新用户做个性化推荐。</li><li>物品冷启动：如何将新的物品推荐给可能对它感兴趣的用户。</li><li>系统冷启动：如何在一个新开发的网站上（还没有用户，也没有用户行为，只有一些物品的信息）设计个性化推荐系统，从而在网站刚发布时就让用户体验到个性化推荐服务。</li></ul><h3 id="利用用户注册信息"><a href="#利用用户注册信息" class="headerlink" title="利用用户注册信息"></a>利用用户注册信息</h3><p>1.利用用户的注册信息可以很好地解决注册用户的冷启动问题。</p><p>当新用户刚注册时，我们不知道他喜欢什么物品，于是只能给他推荐一些热门的商品。但如果我们知道她是一位女性，那么可以给她推荐女性都喜欢的热门商品。虽然这种个性化的粒度很粗，因为所有刚注册的女性看到的都是同样的结果，但相对于不区分男女的方式，这种推荐的精度已经大大提高了。</p><p>2.用户的注册信息分3种：</p><ul><li>人口统计学信息：包括用户的年龄、性别、职业、民族、学历和居住地。</li><li>用户兴趣的描述：有一些网站会让用户用文字描述他们的兴趣。</li><li>从其他网站导入的用户站外行为数据：比如用户通过豆瓣、新浪微博的账号登录，就可以在得到用户同意的情况下获取用户在豆瓣或者新浪微博的一些行为数据和社交网络数据。</li></ul><p>3.基于注册信息的个性化推荐流程基本如下:</p><p>(1) 获取用户的注册信息;</p><p>(2) 根据用户的注册信息对用户分类;</p><p>(3) 给用户推荐他所属分类中用户喜欢的物品。</p><p>4.基于用户注册信息的推荐算法的<strong>核心问题</strong>是计算每种特征的用户喜欢的物品。也就是说，对于</p><p>每种特征f，计算具有这种特征的用户对各个物品的喜好程度preference(f, i)。</p><p>preference( f ,i ) 可以简单地定义为<strong>物品i在具有特征f的用户中的热门程度</strong>：<br>$$<br>preference(f,i) = |N(i) \cap U(f)| \tag{1}<br>$$<br>其中，N(i)是喜欢物品i的用户集合，U(f)是具有特征f的用户集合。</p><p>上面这种定义可以比较准确地预测具有某种特征的用户是否喜欢某个物品。但是，在这种定义下，往往热门的物品会在各种特征的用户中都具有比较高的权重。 </p><p>因此，我们可以将 preference(f,i) 定义为<strong>喜欢物品i的用户中具有特征f的比例</strong>:<br>$$<br>preference(f,i) = \frac{|N(i) \cap U(f)|}{|N(i)|+ \alpha} \tag{2}<br>$$<br>这里分母中使用参数$\alpha​$的目的是<strong>解决数据稀疏问题</strong>。比如有一个物品只被1个用户喜欢过，而这个用户刚好就有特征f，那么就有preference(f,i)=1 。但是，这种情况并没有统计意义，因此我们为分母加上一个比较大的数，可以避免这样的物品产生比较大的权重。</p><h3 id="选择合适的物品启动用户的兴趣"><a href="#选择合适的物品启动用户的兴趣" class="headerlink" title="选择合适的物品启动用户的兴趣"></a>选择合适的物品启动用户的兴趣</h3><p>解决用户冷启动问题的另一个方法是在新用户第一次访问推荐系统时，不立即给用户展示推荐结果，而是给用户提供一些物品，让用户反馈他们对这些物品的兴趣，然后根据用户反馈给提供个性化推荐。</p><p>该方法的<strong>首要问题</strong>是<strong>如何选择物品让用户进行反馈</strong>。</p><p>一般来说，能够用来启动用户兴趣的物品需要具有以下特点:</p><ul><li>比较热门</li></ul><p>如果要让用户对一个物品进行反馈，前提是用户知道这个物品是什么东西。</p><p>以电影为例，如果一开始让用户进行反馈的电影都很冷门，而用户不知道这些电影的情节和内容，也就无法对它们做出准确的反馈。</p><ul><li>具有代表性和区分性：</li></ul><p>启动用户兴趣的物品不能是大众化或老少咸宜的，因为这样的物品对用户的兴趣没有区分性。</p><ul><li>启动物品集合需要有多样性：</li></ul><p>在冷启动时，我们不知道用户的兴趣，而用户兴趣的可能性非常多，为了匹配多样的兴趣，我们需要提供具有很高覆盖率的启动物品集合，这些物品能覆盖几乎所有主流的用户兴趣。</p><h3 id="利用物品的内容信息"><a href="#利用物品的内容信息" class="headerlink" title="利用物品的内容信息"></a>利用物品的内容信息</h3><p>对于基于物品的协同过滤算法（以下简称ItemCF）算法来说，物品冷启动是一个严重的问题了。因为ItemCF算法的原理是给用户推荐和他之前喜欢的物品相似的物品。ItemCF算法会每隔一段时间利用用户行为计算物品相似度表(一般一天计算一次)，在线服务时ItemCF算法会将之前计算好的物品相关度矩阵放在内存中。因此，当新物品加入时，内存中的物品相关表中不会存在这个物品，从而ItemCF算法无法推荐新的物品。</p><p>解决这一问题的办法是<strong>频繁更新物品相似度表</strong>，但基于用户行为计算物品相似度是非常<br>耗时的事情，主要原因是用户行为日志非常庞大。而且，新物品如果不展示给用户，用户就无法<br>对它产生行为，通过行为日志计算是计算不出包含新物品的相关矩阵的。为此，我们只能<strong>利用物品的内容信息计算物品相关表</strong>，并且频繁地更新相关表(比如半小时计算一次)。</p><p>一般来说，物品的内容可以通过向量空间模型表示，该模型会将物品表示成一个关键词向量。</p><p>从文本生成关键词向量的主要步骤：</p><p>（1）对于中文，首先要对文本进行分词，将字流变成词流；</p><p>（2）然后从词流中检测出命名实体(如人名、地名、组织名等)，这些实体和一些其他重要的词将组成关键词集合；</p><p>（3）最后对关键词进行排名，计算每个关键词的权重，从而生成关键词向量。</p><p>对物品d，它的内容表示成一个关键词向量如下:<br>$$<br>d_i = {\left((e_1, w_1),(e_2, w_2),\dots \right)} \tag{3}<br>$$<br>其中，$e_i​$是关键词，$w_i​$是关键词对应的权重。</p><p>在给定物品内容的关键词向量后，物品的内容相似度可以通过向量之间的余弦相似度计算<br>$$<br>w_{ij} = \frac{d_i \cdot d_j}{\sqrt{||d_i||\times||d_j||}} \tag{4}<br>$$<br>得到物品的相似度之后，可以利用ItemCF算法的思想，给用户推荐和他历史上喜欢的物品内容相似的物品。</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《推荐系统实践》3.基于物品的协同过滤算法</title>
      <link href="/2019/03/13/recommender-system-item-based-collaborative-filtering/"/>
      <url>/2019/03/13/recommender-system-item-based-collaborative-filtering/</url>
      
        <content type="html"><![CDATA[<p>基于物品的协同过滤算法（item-based collaborative filtering，以下简称ItemCF）<strong>算法思想</strong>：给用户推荐那些和他们之前喜欢的物品相似的物品。</p><p>不过，ItemCF算法<strong>并不利用物品的内容属性计算物品之间的相似度</strong>，它主要<strong>通过分析用户的行为记录计算物品之间的相似度</strong>。该算法认为，物品A和物品B具有很大的相似度是因为喜欢物品A的用户大都也喜欢物品B。</p><p>基于物品的协同过滤算法可以<strong>利用用户的历史行为给推荐结果提供推荐解释</strong>，比如给用户推荐《天龙八部》的解释可以是因为用户之前喜欢《射雕英雄传》。 </p><p>ItemCF算法主要分为两步。<br>(1) 计算物品之间的相似度。<br>(2) 根据物品的相似度和用户的历史行为给用户生成推荐列表。</p><a id="more"></a><h3 id="计算物品相似度"><a href="#计算物品相似度" class="headerlink" title="计算物品相似度"></a>计算物品相似度</h3><p>可以用下面的公式定义物品的相似度:<br>$$<br>w_{ij} = \frac {|N(i) \cap N(j)|} {|N(i)|}<br>$$<br>这里，分母|N(i)|是喜欢物品i的用户数，而分子 $|N(i) \cap N(j)|​$ 是同时喜欢物品i和物品j的用户数。因此，上述公式可以理解为<strong>喜欢物品i的用户中有多少比例的用户也喜欢物品j</strong>。</p><p>如果物品j很热门，很多人都喜欢， 那么$w_{ij}​$就会很大，接近1。因此，该公式会造成任何物品都会和热门的物品有很大的相似度。为了避免推荐出热门的物品，可以用下面的公式:<br>$$<br>w_{ij} = \frac{|N(i) \cap N(j)|}{\sqrt{|N(i)||N(j)|}}<br>$$<br>这个公式惩罚了物品j的权重，因此减轻了热门物品会和很多物品相似的可能性。</p><p>计算物品相似度时可以首先建立<strong>用户—物品倒排表</strong>(即对每个用户建立一个包含他喜欢的物品的列表)，然后对于每个用户，将他物品列表中的物品两两在共现矩阵C中加1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">item_similarity</span><span class="params">(self, trainset)</span>:</span></span><br><span class="line">    <span class="comment"># 物品相似度矩阵</span></span><br><span class="line">    item_similarity_matrix = &#123;&#125;</span><br><span class="line">    <span class="comment"># 物品流行度</span></span><br><span class="line">    item_popularity = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> user, items <span class="keyword">in</span> trainset.items():</span><br><span class="line">        <span class="keyword">for</span> item1 <span class="keyword">in</span> items:</span><br><span class="line">            <span class="comment"># 构造物品相似度矩阵，计算物品共现次数</span></span><br><span class="line">            item_similarity_matrix.setdefault(item1, defaultdict(int))</span><br><span class="line">            <span class="keyword">for</span> item2 <span class="keyword">in</span> items:</span><br><span class="line">                <span class="keyword">if</span> item1 == item2:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                    item_similarity_matrix[item1][item2] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 统计喜欢item1的用户数</span></span><br><span class="line">                    <span class="keyword">if</span> item1 <span class="keyword">not</span> <span class="keyword">in</span> item_popularity:</span><br><span class="line">                        item_popularity[item1] = <span class="number">0</span></span><br><span class="line">                        item_popularity[item1] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 计算最终的相似度矩阵</span></span><br><span class="line">                        <span class="keyword">for</span> item1, releated_items <span class="keyword">in</span> item_similarity_matrix.items():</span><br><span class="line">                            <span class="keyword">for</span> item2, count <span class="keyword">in</span> releated_items.items():</span><br><span class="line">                                self.item_similarity_matrix[item1][item2] = count / \</span><br><span class="line">                                math.sqrt(item_popularity[item1] * item_popularity[item2])</span><br><span class="line"><span class="keyword">return</span> item_similarity_matrix</span><br></pre></td></tr></table></figure><h3 id="产生推荐列表"><a href="#产生推荐列表" class="headerlink" title="产生推荐列表"></a>产生推荐列表</h3><p>在得到物品之间的相似度后，ItemCF通过如下公式计算用户u对一个物品j的兴趣:<br>$$<br>Interestingness_{uj} = \sum_{i \in N(u) \cap S(j,K)} w_{ji}r_{ui}<br>$$<br>这里N(u)是用户喜欢的物品的集合，S(j,K)是和物品j最相似的K个物品的集合,$w_{ji}​$是物品j和i的相似度，$r_{ui}​$是用户u对物品i的兴趣(对于隐反馈数据集，如果用户u对物品i有过行为，即可令 $r_{ui}=1​$。)该公式的含义是，和用户历史上感兴趣的物品越相似的物品，越有可能在用户的推荐列表中获得比较高的排名。</p><h3 id="关于物品相似度的一些改进"><a href="#关于物品相似度的一些改进" class="headerlink" title="关于物品相似度的一些改进"></a>关于物品相似度的一些改进</h3><ul><li>用户活跃度对物品相似度的影响</li></ul><p>John S. Breese在论文“Empirical Analysis of Predictive Algorithms for Collaborative Filtering ”中提出了一个称为<strong>IUF(Inverse User Frequence)</strong>，即用户活跃度对数的倒数的参数，他认为<strong>活跃用户对物品相似度的贡献应该小于不活跃的用户</strong>，他提出应该增加IUF参数来修正物品相似度的计算公式：<br>$$<br>w_{ij} = \frac{\sum_{u \in N(i) \cap N(j)} \frac{1}{\log{(1+|N(u)|)}}}{\sqrt{|N(i)||N(j)|}}<br>$$<br>当然，上面的公式只是对活跃用户做了一种软性的惩罚，但对于很多过于活跃的用户，为了避免相似度矩阵过于稠密，我们在实际计算中一般直接忽略他的兴趣列表，而不将其纳入到相似度计算的数据集中。</p><ul><li>物品相似度归一化</li></ul><p>研究发现，如果将ItemCF的相似度矩阵按最大值归一化，可以提高推荐的准确率。如果已经得到了物品相似度矩阵w，那么可以用如下公式得到归一化之后的相似度矩阵w’:<br>$$<br>w_{ij}^{‘} = \frac{w_{ij}}{\max_j {w_{ij}}}<br>$$<br>归一化的好处不仅仅在于增加推荐的准确度，它还可以提高推荐的覆盖率和多样性。</p>]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统常用评估指标</title>
      <link href="/2019/03/04/recommender-system-evaluation-metrics/"/>
      <url>/2019/03/04/recommender-system-evaluation-metrics/</url>
      
        <content type="html"><![CDATA[<!--### 推荐系统实验方法在推荐系统中，主要有3种评测推荐效果的实验方法，即离线实验(offline experiment)、用户调查(user study) 和在线实验(online experiment)。#### 离线实验离线实验的方法一般由如下几个步骤构成:(1) 通过日志系统获得用户行为数据，并按照一定格式生成一个标准的数据集; (2) 将数据集按照一定的规则分成训练集和测试集; (3) 在训练集上训练用户兴趣模型，在测试集上进行预测; (4) 通过事先定义的离线指标评测算法在测试集上的预测结果。**好处**：不需要真实用户参与，可以直接快速地计算出来，从而方便、快速地测试大量不同的算法  **缺点**：无法获得很多商业上关注的指标，如点击率、转化率等#### 用户调查用户调查需要有一些真实用户，让他们在需要测试的推荐系统上完成一些任务。在他们完成任务时，我们需要观察和记录他们的行为，并让他们回答一些问题。最后，我们需要通过分析他们的行为和答案了解测试系统的性能。**优点**：可以获得很多体现用户主观感受的指标，相对在线实验风险很低，出现错误后很容易弥补**缺点**：招募测试用户代价较大，很难组织大规模的测试用户，因此会使测试结果的统计意义不足。#### 在线实验在完成离线实验和必要的用户调查后，可以将推荐系统上线做AB测试，将它和旧的算法进行比较。AB测试是一种很常用的在线评测算法的实验方法。它通过一定的规则将用户随机分成几组，并对不同组的用户采用不同的算法，然后通过统计不同组用户的各种不同的评测指标比较不同算法，比如可以统计不同组用户的点击率，通过点击率比较不同算法的性能。**AB测试的优点**：可以公平获得不同算法实际在线时的性能指标，包括商业上关注的指标。**AB测试的缺点**：周期比较长，必须进行长期的实验才能得到可靠的结果。因此一般不会用AB测试测试所有的算法，而只是用它测试那些在离线实验和用户调查中表现很好的算法。### 评测指标在《推荐系统实践》中，作者列举了用户满意度、预测准确度、覆盖率、多样性、新颖性、惊喜度、信任度、实时性、健壮性和商业目标共十种推荐系统的评测指标，这里，我只选取了一部分。#### 用户满意度用户作为推荐系统的重要参与者，其满意度是评测推荐系统的最重要指标。但是，用户满意度没有办法离线计算，只能通过用户调查或者在线实验获得。* 用户调查获得用户满意度主要是通过*调查问卷*的形式。* 在在线系统中，用户满意度主要通过一些对用户行为的统计得到。比如在电子商务网站中，用户如果购买了推荐的商品，就表示他们在一定程度上满意。因此，我们可以利用购买率度量用户的满意度。此外，有些网站会通过设计一些用户反馈界面收集用户满意度。 更一般的情况下，我们可以用点击率、用户停留时间和转化率等指标度量用户的满意度。#### 预测准确度预测准确度度量一个推荐系统或者推荐算法预测用户行为的能力。在计算该指标时需要有一个离线的数据集，该数据集包含用户的历史行为记录。然后，将该数据集通过时间分成训练集和测试集。最后，通过在训练集上建立用户的行为和兴趣模型预测用户在测试集上的行为，并计算预测行为和测试集上实际行为的重合度作为预测准确度。由于离线的推荐算法有不同的研究方向，因此下面将针对不同的研究方向介绍它们的预测准确度指标。 --><h3 id="评分预测"><a href="#评分预测" class="headerlink" title="评分预测"></a>评分预测</h3><p>预测用户对物品评分的行为称为评分预测（rating prediction）。</p><p>评分预测的预测准确度一般通过<strong>均方根误差(Root Mean Squared Error，简称RMSE)和平均绝对误差(Mean Absolute Error，简称MAE)</strong>计算。</p><p>对于测试集中的一个用户u和物品i，令$r_{ui}$是用户对物品i的实际评分，而$\hat{r}_{ui}$是推荐算法给出的预测评分。</p><h4 id="RMSE"><a href="#RMSE" class="headerlink" title="RMSE"></a>RMSE</h4><p>$$<br>RMSE = \sqrt{<br>    \frac {<br>        \sum_{(u,i)\in Test} (r_{ui}-\hat{r}_{ui})^2<br>    }{<br>        \left \vert Test \right \vert<br>    }<br>} \tag{1}<br>$$</p><h4 id="MAE"><a href="#MAE" class="headerlink" title="MAE"></a>MAE</h4><p>MAE采用绝对值计算预测误差，它的定义为:<br>$$<br>MAE = \frac {<br>    \sum_{(u,i) \in Test}{|r_{ui}-\hat{r}_{ui}|}<br>}{<br>    \left \vert Test \right \vert<br>} \tag{2}<br>$$</p><h3 id="TopN推荐"><a href="#TopN推荐" class="headerlink" title="TopN推荐"></a>TopN推荐</h3><p>网站在提供推荐服务时，一般是给用户一个个性化的推荐列表，这种推荐叫做TopN推荐。 </p><p><strong>在推荐系统的论文中，经常可以看到xx@N，它是xx at rank N的缩写。</strong>意为在TopN推荐中，该指标的值。</p><h4 id="Precision-Recall"><a href="#Precision-Recall" class="headerlink" title="Precision/Recall"></a>Precision/Recall</h4><p>TopN推荐的预测准确率一般通过准确率(precision)/召回率(recall)度量。 </p><p>令R(u)是根据用户在训练集上的行为给用户作出的推荐列表，而T(u)是用户在测试集上的行为列表。那么，推荐结果的召回率定义为:<br>$$<br>\mathrm{Recall}@N = \frac {<br>    \sum_{u \in U}|R(u) \cap T(u)|<br>} {<br>    \sum_{u \in U}|T(u)|<br>} \tag{3}<br>$$<br>推荐结果的准确率定义为：<br>$$<br>\mathrm{Precision}@N = \frac {<br>    \sum_{u \in U}|R(u) \cap T(u)|<br>} {<br>    \sum_{u \in U}|R(u)|<br>} \tag{4}<br>$$<br>F1值<br>$$<br>\mathrm{F1} = \frac{<br>    2 \times Precision \times Recall<br>}{<br>    Precision + Recall<br>} \tag{5}<br>$$</p><h4 id="AP-MAP"><a href="#AP-MAP" class="headerlink" title="AP/MAP"></a>AP/MAP</h4><p>精度均值（Average Precision，简称AP)<br>$$<br>AP@N = \frac{<br>    \sum_{k=1}^N<br>    \mathrm{Precision@k \times rel(k)}<br>}{<br>    \min \{<br>        N, \left \vert C_{\mathrm{adopted}} \right \vert<br>    \}<br>} \tag{6}<br>$$<br>其中，rel(k)是指示函数，表示第k个物品是否被采纳<br>$$<br>\mathrm{rel(k)} =<br>\begin{cases}<br>1, &amp; I_k \in C_{\mathrm{adopted}} \\<br>0, &amp; \mathrm{otherwise}<br>\end{cases}<br>$$<br>平均精度均值（Mean Average Precision，简称MAP)<br>$$<br>\mathrm{MAP}@N = \frac{1}{<br>    \left \vert U \right \vert<br>}<br>\sum_{u \in U} \mathrm{AP}@N \tag{7}<br>$$</p><h4 id="Hit-Ratio"><a href="#Hit-Ratio" class="headerlink" title="Hit Ratio"></a>Hit Ratio</h4><p>命中率（Hit Ratio, 简称HR）<br>$$<br>\mathrm{HR}@N = \frac{<br>     \mathrm{hits}<br>}{<br>    \left \vert U \right \vert<br>} \tag{8}<br>$$</p><h4 id="ARHR"><a href="#ARHR" class="headerlink" title="ARHR"></a>ARHR</h4><p>平均命中排序倒数（Average Reciprocal Hit Rank，简称ARHR)<br>$$<br>\mathrm{ARHR}@N = \frac{1} {<br>    \left \vert U \right \vert<br>}<br>\sum_{i=1}^{hits} \frac{1}{<br>    pos_i<br>} \tag{9}<br>$$<br>其中，$pos_i$表示第i次命中时，测试物品在推荐列表中的位置。</p><h4 id="NDCG"><a href="#NDCG" class="headerlink" title="NDCG"></a>NDCG</h4><p>NDCG源自于信息检索领域，用于评估排序质量。在理解NDCG前，需要弄明白CG、DCG以及IDCG的概念。</p><ul><li>CG</li></ul><p>累计收益（Cumulative Gain，简称CG）<br>$$<br>\mathrm{CG}@N = \sum_{i = 1}^N rel_i \tag{10}<br>$$<br>其中，$rel_i$是将物品i推荐给用户得到的“收益”。</p><ul><li>DCG</li></ul><p>直观的想法：“收益”越高的物品，在列表中的位置应该越靠前。</p><p>折扣累计收益（Discounted Cumulative Gain，简称DCG)在CG的基础上，加入了对物品位置的考虑：<br>$$<br>\mathrm{DCG}@N = \sum_{i =1}^N<br>\frac{<br>    rel_i<br>}{<br>  \log_2 (i + 1)<br>} \tag{11}<br>$$<br>DCG的另一种形式：<br>$$<br>\mathrm{DCG}@N = \sum_{i =1}^N<br>\frac{<br>    2^{rel_i} - 1<br>}{<br>  \log_2 (i + 1)<br>} \tag{12}<br>$$</p><p>DCG的第二种形式更常用。当$rel_i \in$ &#123;0,1&#125;时，公式(11)等价于(12)。</p><ul><li>IDCG</li></ul><p>理想的折扣累计收益（Ideal Discounted Cumulative Gain，简称IDCG）：在理想情况下，推荐列表中的物品应按照最终收益从高到低排序。<br>$$<br>\mathrm{IDCG}@N = \sum_{i =1}^{\left \vert REL_N \right \vert}<br>\frac{<br>    2^{rel_i} - 1<br>}{<br>    \log_2 (i + 1)<br>} \tag{13}<br>$$<br>其中，$REL_N$表示按照收益从高到低排序后的N个物品；$rel_i \in$ &#123;0,1&#125;。</p><ul><li>NDCG</li></ul><p>当采用DCG时，不同N下的结果无法直接进行比较。</p><p>为了解决该问题，可以对DCG进行归一化，得到归一化折扣累计收益（Normalized Discounted Cumulative Gain，简称NDCG)：<br>$$<br>\mathrm{NDCG}@N = \frac{DCG@N} {IDCG@N} \tag{14}<br>$$<br>$NDCG \in [0,1]$，其值越大，表示排序的质量越高。</p><p>当$rel_i \in$ &#123;0,1&#125;且采用<strong>留一法</strong>进行评估时，待测物品的收益rel=1，其理想位置j=1<br>$$<br>\mathrm{DCG}@N = \frac{1}{\log_2 (j + 1)} \\<br>\mathrm{IDCG}@N = \frac{1}{\log_2 (1 + 1)} = \frac{1}{\log_2 (2)}<br>$$<br>从而：<br>$$<br>\mathrm{NDCG}@N = \frac{DCG@N} {IDCG@N} = \frac{ \log 2 }{ \log(j + 1) } \tag{15}<br>$$</p><ul><li>示例</li></ul><p>为了便于理解，下面举个例子（源自于维基百科）：</p><p>假设系统给用户u推荐了6部电影，推荐列表为：M1、M2、M3、M4、M5、M6，</p><p>用户u对这些电影的评分依次为：3, 2, 3, 0, 1, 2。</p><p>如果将用户的评分作为推荐该电影获得的收益，那么，该推荐列表的CG值为：<br>$$<br>\mathrm{CG}@6 = \sum_{i=1}^6 rel_i = 3 + 2 + 3 + 0 + 1 + 2 = 11<br>$$</p><table><thead><tr><th style="text-align:center">i</th><th style="text-align:center">$rel_i$</th><th style="text-align:center">$\log_2 (i + 1)$</th><th style="text-align:center">$\frac{rel_i}{\log_2 (i + 1)}$</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">1.585</td><td style="text-align:center">1.262</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1.5</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center">2.322</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">2.585</td><td style="text-align:center">0.387</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">2</td><td style="text-align:center">2.807</td><td style="text-align:center">0.712</td></tr></tbody></table><p>根据上表，计算得到：<br>$$<br>\mathrm{DCG}@6 = \sum_{i =1}^6<br>\frac{<br>    rel_i<br>}{<br>  \log_2 (i + 1)<br>} = 6.861<br>$$</p><p>理想情况下，推荐列表中的电影按照评分从高到低排序：3, 3, 2, 2, 1, 0。从而：<br>$$<br>\begin{align}<br>\mathrm{IDCG}@6 &amp;= \sum_{i =1}^6<br>\frac{<br>    rel_i<br>}{<br>  \log_2 (i + 1)<br>} \\<br>&amp;= \frac{3}{1} + \frac{3}{1.585} + \frac{2}{2} + \frac{2}{2.322} + \frac{1}{2.585} + \frac{0}{2.807} \\<br>&amp;= 7.141<br>\end{align}<br>$$<br>因此：<br>$$<br>\mathrm{NDCG}@6 = \frac{DCG@6} {IDCG@6} = \frac{6.861}{7.141} = 0.961<br>$$</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://en.wikipedia.org/wiki/Discounted_cumulative_gain" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Discounted_cumulative_gain</a></li></ol><!--#### 信任度度量推荐系统的信任度只能通过**问卷调查**的方式，询问用户是否信任推荐系统的推荐结果。提高推荐系统的信任度主要有两种方法。1.首先需要增加推荐系统的**透明度(transparency)**，而增加推荐系统透明度的主要办法是提供推荐解释。只有让用户了解推荐系统的运行机制，让用户认同推荐系统的运行机制，才会提高用户对推荐系统的信任度。2.其次是考虑用户的社交网络信息，**利用用户的好友信息给用户做推荐**，并且用好友进行推荐解释。这是因为用户对他们的好友一般都比较信任，因此如果推荐的商品是好友购买过的，那么他们对推荐结果就会相对比较信任。-->]]></content>
      
      
      <categories>
          
          <category> recommender systems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> recommender systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 82.删除排序链表中的重复元素 II</title>
      <link href="/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/"/>
      <url>/2019/02/27/leetcode-82-remove-duplicates-from-sorted-list-ii/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个排序链表，删除所有含有重复数字的节点，只保留原始链表中 <em>没有重复出现</em> 的数字。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5</span><br><span class="line">输出: 1-&gt;2-&gt;5</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: 1-&gt;1-&gt;1-&gt;2-&gt;3</span><br><span class="line">输出: 2-&gt;3</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="方法一：递归法"><a href="#方法一：递归法" class="headerlink" title="方法一：递归法"></a>方法一：递归法</h4><ul><li>思路</li></ul><p>按照递归的思想，该题可以分为以下三种情况：</p><p>1）待处理的排序链表为空，或者仅含有一个元素。此时，直接返回排序链表的头节点head即可。</p><p>2）待处理的排序链表头部节点head的值为重复元素head.val。此时，依次遍历链表，直至找到第一个值不等于head.val的节点node，对node递归执行deleteDuplicates方法。</p><p>3）第一个节点head的值不是重复元素。此时，对第二个节点递归执行deleteDuplicates方法即可，产生的新链表成为head的后继。</p><ul><li>算法实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.如果链表为空或者仅含一个节点</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.如果链表的头部是重复出现的数字</span></span><br><span class="line"><span class="keyword">if</span>(head.val == head.next.val) &#123;</span><br><span class="line"><span class="keyword">while</span>(head.next != <span class="keyword">null</span> &amp;&amp; head.val == head.next.val) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> deleteDuplicates(head.next);</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//3.如果链表首部节点不需要删除</span></span><br><span class="line">head.next = deleteDuplicates(head.next);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂度分析</li></ul><p>设链表的长度为<em>L</em></p><p>时间复杂度：<em>O</em>(<em>L</em>)，仅对链表执行一次遍历操作</p><p>空间复杂度：<em>O(1)</em>，没有使用额外的变量</p><ul><li>算法效率</li></ul><p>执行用时：1ms，战胜 98.69 % 的 java 提交记录</p><p>内存消耗：38.6 MB</p><h4 id="方法二：非递归法"><a href="#方法二：非递归法" class="headerlink" title="方法二：非递归法"></a>方法二：非递归法</h4><ul><li>思路</li></ul><p>首先我们仍将判断待处理的排序链表是否为空，或仅含有一个节点。</p><p>然后，我们将添加一个哑结点list作为辅助，该结点位于列表头部。哑结点用来简化某些极端情况，例如，需要删除链表的头部。</p><p>在遍历链表的同时，使用while循环寻找与当前节点node值不相等的第一个节点，若while循环得以成功执行，则让得到的新节点成为head的后继；否则，当前节点node与其后继节点值不相等，while循环未被执行，则该节点不需要被删除，head后移。</p><ul><li>算法实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*public class ListNode &#123;</span></span><br><span class="line"><span class="comment">    int val;</span></span><br><span class="line"><span class="comment">    ListNode next;</span></span><br><span class="line"><span class="comment">    ListNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">deleteDuplicates</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line">ListNode list = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">list.next = head;</span><br><span class="line">head = list;</span><br><span class="line">ListNode pre,node;</span><br><span class="line"><span class="keyword">while</span>(head.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">pre = head.next;</span><br><span class="line">node = pre;</span><br><span class="line"><span class="keyword">while</span>(node.next != <span class="keyword">null</span> &amp;&amp; pre.val == node.next.val) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(node == pre) &#123;</span><br><span class="line">head = head.next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">head.next = node.next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> list.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>复杂度分析</li></ul><p>设链表的长度为<em>L</em></p><p>时间复杂度：<em>O(L)</em>，仅对链表执行一次遍历操作</p><p>空间复杂度：<em>O</em>(1)，我们只用了常量级的额外空间</p><ul><li>算法效率</li></ul><p>执行用时：1ms，战胜 98.69 % 的 java 提交记录</p><p>内存消耗：35.2 MB</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 23.合并K个排序链表</title>
      <link href="/2019/02/22/leetcode-23-merge-k-sorted-lists/"/>
      <url>/2019/02/22/leetcode-23-merge-k-sorted-lists/</url>
      
        <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>合并 <em>k</em> 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。</p><p><strong>示例:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">[</span><br><span class="line">  1-&gt;4-&gt;5,</span><br><span class="line">  1-&gt;3-&gt;4,</span><br><span class="line">  2-&gt;6</span><br><span class="line">]</span><br><span class="line">输出: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>已知K个有序链表，采用二路归并实现两个链表的合并，在此基础上，按照折半查找的思想，递归执行二路归并。</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeKSortedLists23</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">     ListNode next;</span><br><span class="line">     ListNode(<span class="keyword">int</span> x) &#123; val = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeKLists</span><span class="params">(ListNode[] lists)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lists == <span class="keyword">null</span> || lists.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lists.length == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> lists[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> merge(lists,<span class="number">0</span>,lists.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">merge</span><span class="params">(ListNode[] lists,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(start &gt; end) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(start == end) &#123;</span><br><span class="line">    <span class="keyword">return</span> lists[start];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">    ListNode l1 = merge(lists,start,mid);</span><br><span class="line">    ListNode l2 = merge(lists,mid+<span class="number">1</span>,end);</span><br><span class="line">    <span class="keyword">return</span> mergeTwoLists(l1,l2);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">mergeTwoLists</span><span class="params">(ListNode l1,ListNode l2)</span> </span>&#123;</span><br><span class="line">    ListNode head = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">    ListNode p = l1, q=l2,node,rear = head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="keyword">null</span> &amp;&amp; q != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(p.val &lt;= q.val) &#123;</span><br><span class="line">    node = <span class="keyword">new</span> ListNode(p.val);</span><br><span class="line">    p = p.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    node = <span class="keyword">new</span> ListNode(q.val);</span><br><span class="line">    q = q.next;</span><br><span class="line">    &#125;</span><br><span class="line">    node.next = <span class="keyword">null</span>;</span><br><span class="line">    rear.next = node;</span><br><span class="line">rear = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">    rear.next = p;</span><br><span class="line">    rear = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q != <span class="keyword">null</span>) &#123;</span><br><span class="line">    rear.next = q;</span><br><span class="line">    rear = q;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p>时间复杂度：O($n\log_2n​$)</p><p>空间复杂度：O($n​$)</p><h3 id="算法效率"><a href="#算法效率" class="headerlink" title="算法效率"></a>算法效率</h3><p>执行用时: 11 ms, 在Merge k Sorted Lists的Java提交中击败了92.02% 的用户</p><p>内存消耗: 28.5 MB, 在Merge k Sorted Lists的Java提交中击败了80.66% 的用户</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linked-list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS常用快捷键总结</title>
      <link href="/2019/01/26/macos-keyboard-shortcut/"/>
      <url>/2019/01/26/macos-keyboard-shortcut/</url>
      
        <content type="html"><![CDATA[<p>2018年双十一期间，博主在京东入手了一台17版256G的MacBook Pro。由于一些外在原因，直到最近一段时间才真正使用上。经过最初的磨合，现在已经比较熟练了。这里总结下MacOS中的一些常用快捷键。</p><a id="more"></a><ul><li><code>control-空格键</code>：切换输入法</li><li><code>command-C</code>：拷贝到剪切板</li><li><code>command-V</code>：粘贴</li><li><code>command-X</code>：剪切</li><li><code>command-Z</code>：撤销上一个命令</li><li><code>command-D</code>：复制（生成文件副本）</li><li><code>command-tab</code>：在打开的应用中切换到下一个最近使用的应用</li><li><code>command-delete</code>：将所选项移到废纸篓（或者将废纸篓中的文件还回原处）</li><li><code>shift-command-delete</code>：清空废纸篓</li><li><code>shift-command-N</code>：在”访达”中创建一个文件夹</li><li><code>shift-command-.</code>:显示隐藏文件（或者恢复隐藏状态）</li><li><code>enter</code>：重命名</li></ul><p>关于MacOS的更多快捷键，请参看<a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> macos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的异常处理</title>
      <link href="/2019/01/17/java-exception-handle/"/>
      <url>/2019/01/17/java-exception-handle/</url>
      
        <content type="html"><![CDATA[<p>Java异常处理<br><a id="more"></a></p><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p>​    在Java中，所有的异常都是继承自Throwable。</p><p>Java中的异常层次结构</p><p>​    派生于Error类或RuntimeException类的所有异常称为非受查（unchecked）异常，所有其他异常称为受查（check）异常。</p><h3 id="声明异常"><a href="#声明异常" class="headerlink" title="声明异常"></a>声明异常</h3><p>​    方法应该在其首部声明所有可能抛出的异常。语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FileInputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException</span></span><br></pre></td></tr></table></figure><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><h3 id="创建异常"><a href="#创建异常" class="headerlink" title="创建异常"></a>创建异常</h3><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><h3 id="finally子句"><a href="#finally子句" class="headerlink" title="finally子句"></a>finally子句</h3><h3 id="带资源的try语句"><a href="#带资源的try语句" class="headerlink" title="带资源的try语句"></a>带资源的try语句</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的命令行工具javap</title>
      <link href="/2019/01/15/java-command-javap/"/>
      <url>/2019/01/15/java-command-javap/</url>
      
        <content type="html"><![CDATA[<p><code>javap</code>，全称<code>java printer</code>，是JDK中的一个基础命令行工具，用于反编译一个或多个class文件。其输出取决于使用的选项。如果未使用任何选项，则<code>javap</code>命令将打印具有包，protected和public权限的字段和方法，并将其输出打印到标准输出<code>stdout</code>。</p><a id="more"></a><p>关于<code>javap</code>的详细用法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -help  --help  -?        输出此用法消息</span><br><span class="line">  -version                 版本信息</span><br><span class="line">  -v  -verbose             输出附加信息</span><br><span class="line">  -l                       输出行号和本地变量表</span><br><span class="line">  -<span class="keyword">public</span>                  仅显示公共类和成员</span><br><span class="line">  -<span class="keyword">protected</span>               显示受保护的/公共类和成员</span><br><span class="line">  -<span class="keyword">package</span>                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  -p  -<span class="keyword">private</span>             显示所有类和成员</span><br><span class="line">  -c                       对代码进行反汇编</span><br><span class="line">  -s                       输出内部类型签名</span><br><span class="line">  -sysinfo                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  -constants               显示最终常量</span><br><span class="line">  -classpath &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  -cp &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  -bootclasspath &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure><p>其中，常用的选项有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-<span class="keyword">public</span></span><br><span class="line">-<span class="keyword">protected</span></span><br><span class="line">-<span class="keyword">package</span></span><br><span class="line">-p -<span class="keyword">private</span></span><br><span class="line">-c </span><br><span class="line">-s</span><br></pre></td></tr></table></figure><p>以下面的程序为例，Main类包含了private、default(缺省)、protected和public四种访问权限的字段和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> UID = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> String name = <span class="string">"Main"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String javaVersion = <span class="string">"1.8"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">printNumber();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"number:"</span>+number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UID:"</span>+UID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"javaVersion:"</span>+javaVersion);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Main main = <span class="keyword">new</span> Main();</span><br><span class="line">main.printUID();</span><br><span class="line">main.printName();</span><br><span class="line">main.printVersion();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译Main.java，得到Main.class文件</p><p>1.<code>javap</code>的默认选项为<code>-package</code>，只输出具有包、protected和public的字段和方法。在命令行中使用<code>javap</code>或者<code>javap -package</code>查看Main.class，输出的内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hgs:~ hegongshan$ javap Main.class </span><br><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> UID;</span><br><span class="line">  <span class="keyword">protected</span> java.lang.String name;</span><br><span class="line">  <span class="keyword">public</span> java.lang.String javaVersion;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printUID</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用<code>javap -public</code>将只输出class文件中的public字段和方法。以Main.class为例，输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hgs:~ hegongshan$ javap -<span class="keyword">public</span> Main.class</span><br><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hegongshan</span>.<span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> java.lang.String javaVersion;</span><br><span class="line">  <span class="keyword">public</span> com.hegongshan.Main();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<code>javap -protected</code>将输出类中的public和protected的字段和方法。以Main.class为例，输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hgs:~ hegongshan$ javap -<span class="keyword">protected</span> Main.class</span><br><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hegongshan</span>.<span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">protected</span> java.lang.String name;</span><br><span class="line">  <span class="keyword">public</span> java.lang.String javaVersion;</span><br><span class="line">  <span class="keyword">public</span> com.hegongshan.Main();</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.<code>javap -p</code>或者<code>javap -private</code>将输出类中的所有字段和方法。以Main.class为例，输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">hgs:~ hegongshan$ javap -p Main.class</span><br><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hegongshan</span>.<span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">  <span class="keyword">int</span> UID;</span><br><span class="line">  <span class="keyword">protected</span> java.lang.String name;</span><br><span class="line">  <span class="keyword">public</span> java.lang.String javaVersion;</span><br><span class="line">  <span class="keyword">public</span> com.hegongshan.Main();</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printNumber</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printUID</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.<code>javap -c</code>将对class文件进行反编译。以Main.class为例，输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">hgs:~ hegongshan$ javap -c Main.class</span><br><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hegongshan</span>.<span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> UID;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> java.lang.String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.String javaVersion;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> com.hegongshan.Main();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       1: invokespecial #14                 // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">       <span class="number">4</span>: aload_0</span><br><span class="line">       <span class="number">5</span>: iconst_1</span><br><span class="line">       6: putfield      #16                 // Field number:I</span><br><span class="line">       <span class="number">9</span>: aload_0</span><br><span class="line">      <span class="number">10</span>: sipush        <span class="number">1234</span></span><br><span class="line">      13: putfield      #18                 // Field UID:I</span><br><span class="line">      <span class="number">16</span>: aload_0</span><br><span class="line">      17: ldc           #20                 // String Main</span><br><span class="line">      19: putfield      #22                 // Field name:Ljava/lang/String;</span><br><span class="line">      <span class="number">22</span>: aload_0</span><br><span class="line">      23: ldc           #24                 // String 1.8</span><br><span class="line">      25: putfield      #26                 // Field javaVersion:Ljava/lang/String;</span><br><span class="line">      <span class="number">28</span>: aload_0</span><br><span class="line">      29: invokespecial #28                 // Method printNumber:()V</span><br><span class="line">      <span class="number">32</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printUID</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">6</span>: dup</span><br><span class="line">       7: ldc           #62                 // String UID:</span><br><span class="line">       9: invokespecial #45                 // Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">12</span>: aload_0</span><br><span class="line">      13: getfield      #18                 // Field UID:I</span><br><span class="line">      16: invokevirtual #48                 // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;</span><br><span class="line">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">25</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">6</span>: dup</span><br><span class="line">       7: ldc           #65                 // String name:</span><br><span class="line">       9: invokespecial #45                 // Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">12</span>: aload_0</span><br><span class="line">      13: getfield      #22                 // Field name:Ljava/lang/String;</span><br><span class="line">      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">25</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: getstatic     #35                 // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: new           #41                 // class java/lang/StringBuilder</span><br><span class="line">       <span class="number">6</span>: dup</span><br><span class="line">       7: ldc           #71                 // String javaVersion:</span><br><span class="line">       9: invokespecial #45                 // Method java/lang/StringBuilder."&lt;init&gt;":(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">12</span>: aload_0</span><br><span class="line">      13: getfield      #26                 // Field javaVersion:Ljava/lang/String;</span><br><span class="line">      16: invokevirtual #67                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">      19: invokevirtual #52                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">      22: invokevirtual #56                 // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">      <span class="number">25</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       0: new           #1                  // class com/hegongshan/Main</span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       4: invokespecial #75                 // Method "&lt;init&gt;":()V</span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: aload_1</span><br><span class="line">       9: invokevirtual #76                 // Method printUID:()V</span><br><span class="line">      <span class="number">12</span>: aload_1</span><br><span class="line">      13: invokevirtual #78                 // Method printName:()V</span><br><span class="line">      <span class="number">16</span>: aload_1</span><br><span class="line">      17: invokevirtual #80                 // Method printVersion:()V</span><br><span class="line">      <span class="number">20</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.<code>javap -s</code>将输出内部类型签名。以Main.class为例，输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">hgs:~ hegongshan$ javap -s Main.class</span><br><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">hegongshan</span>.<span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> UID;</span><br><span class="line">    descriptor: I</span><br><span class="line">  <span class="keyword">protected</span> java.lang.String name;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">  <span class="keyword">public</span> java.lang.String javaVersion;</span><br><span class="line">    descriptor: Ljava/lang/String;</span><br><span class="line">  <span class="keyword">public</span> com.hegongshan.Main();</span><br><span class="line">    descriptor: ()V</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">printUID</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printVersion</span><span class="params">()</span></span>;</span><br><span class="line">    descriptor: ()V</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">    descriptor: ([Ljava/lang/String;)V</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述输出内容中，对于字段，<code>descriptor:</code>后的字符，表示字段的类型，对应关系如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">B      : <span class="keyword">byte</span></span><br><span class="line">C      : <span class="keyword">char</span></span><br><span class="line">D      : <span class="keyword">double</span></span><br><span class="line">F      : <span class="keyword">float</span></span><br><span class="line">I      : <span class="keyword">int</span></span><br><span class="line">J      : <span class="keyword">long</span></span><br><span class="line">L类名;  : 引用类型,如Ljava/lang/String; 表示 String类型</span><br><span class="line">S      : <span class="keyword">short</span></span><br><span class="line">Z      : <span class="keyword">boolean</span></span><br><span class="line">[      : 数组,如[Ljava/lang/String; 表示String[]</span><br></pre></td></tr></table></figure><p>对于方法，<code>descriptor:</code>后的字符<code>(参数类型描述)返回值类型描述</code>，表示方法的参数类型及其返回值的类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V : <span class="keyword">void</span>,表示没有返回值</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内部类实现原理分析</title>
      <link href="/2019/01/14/java-inner-class-implementation-principle/"/>
      <url>/2019/01/14/java-inner-class-implementation-principle/</url>
      
        <content type="html"><![CDATA[<p>​    本文通过分析编译后的class文件，来揭秘Java中内部类的实现原理。</p><a id="more"></a><p>在解开内部类的神秘面纱之前，让我们先来看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OuterClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">System.out.println(<span class="string">"OuterClass初始化"</span>);</span><br><span class="line">System.out.println(<span class="string">"name："</span>+<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"InnerClass初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name.equals(<span class="string">"hegongshan.com"</span>)) &#123;</span><br><span class="line">    name = <span class="string">"software engineering"</span>;</span><br><span class="line">    System.out.println(<span class="string">"InnerClass.print()"</span>);</span><br><span class="line">    System.out.println(<span class="string">"更新后的name："</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OuterClass outer = <span class="keyword">new</span> OuterClass(<span class="string">"hegongshan.com"</span>);</span><br><span class="line">OuterClass.InnerClass inner = outer.new InnerClass();</span><br><span class="line">inner.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">OuterClass初始化</span><br><span class="line">name：hegongshan.com</span><br><span class="line">InnerClass初始化</span><br><span class="line">InnerClass.print()</span><br><span class="line">更新后的name：software engineering</span><br></pre></td></tr></table></figure><p>上述程序编译之后生成了如下两个class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OuterClass$InnerClass.class</span><br><span class="line">OuterClass.class</span><br></pre></td></tr></table></figure><p>可以看到，编译器将内部类InnerClass翻译成了名为<code>OuterClass$InnerClass.class</code>的class文件。</p><p>下面我们在命令行中使用<code>javap</code>命令来查看下编译之后的OuterClass$InnerClass.class文件（关于<code>javap</code>的更多描述请参看<a href="https://www.hegongshan.com/2019/01/15/java-command-javap/">《Java中的命令行工具javap》</a>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在UNIX中，需要对$转义，其他系统中不需要加\</span></span><br><span class="line">javap -p OuterClass\$InnerClass.class</span><br></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"OuterClass.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span>$<span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> OuterClass <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> OuterClass$InnerClass(OuterClass);</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以清楚地看到，编译器为了引用外部类，生成了一个使用final修饰的外部类变量，命名为<code>this$0</code>（名字<code>this$0</code>是由编译器合成的，在自己编写的代码中不能够引用它）。</p><p>另外，可以看到构造器的参数，在InnerClass中，我们并没有写构造方法，编译器为InnerClass自动生成了一个带参数的构造方法，传入一个外部类对象的引用。</p><p>开篇提到，内部类可以访问外围类中的所有方法和变量，即使这些方法和变量声明为private。既然内部类可以被编译器翻译为名字古怪的普通类（虚拟机对此一无所知），内部类如何管理那些额外的访问特权呢？</p><p>再次使用<strong>javap</strong>命令查看生成的<code>Outerclass.class</code>,结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"OuterClass.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> java.lang.String name;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OuterClass</span><span class="params">(java.lang.String)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.String[])</span></span>;</span><br><span class="line">  <span class="keyword">static</span> java.lang.String access$<span class="number">0</span>(OuterClass);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> access$<span class="number">1</span>(OuterClass, java.lang.String);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们注意到，编译器在外围类中添加了两个静态方法<code>access$0</code>和<code>access$1</code>，它们均需要传入一个外围类对象的引用。此外，<code>access$1</code>还需要传入一个字符串变量。（方法名可能稍有不同，如<code>access$00</code>，这取决于你的编译器。）</p><p>内部类通过调用<code>access$0</code>方法，从而实现对外围类的私有属性name的访问；通过调用<code>access$1</code>方法，从而实现对外围类的私有属性name的修改。</p><p>如果编译器能够自动地进行转换，那么我们能不能编写程序实现这种机制呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer outer = <span class="keyword">new</span> Outer(<span class="string">"hegongshan.com"</span>);</span><br><span class="line">Inner inner = <span class="keyword">new</span> Inner(outer);</span><br><span class="line">inner.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Outer outer;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">(Outer outer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.outer = outer;</span><br><span class="line">System.out.println(<span class="string">"Inner初始化"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+Outer.getName(outer));</span><br><span class="line"><span class="keyword">if</span>(Outer.getName(outer).equals(<span class="string">"hegongshan.com"</span>)) &#123;</span><br><span class="line">Outer.setName(outer, <span class="string">"software engineering"</span>);</span><br><span class="line">System.out.println(<span class="string">"更新后的name:"</span>+Outer.getName(outer));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Outer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">System.out.println(<span class="string">"Outer初始化"</span>);</span><br><span class="line">System.out.println(<span class="string">"name:"</span>+name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">getName</span><span class="params">(Outer outer)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> outer.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(Outer outer,String name)</span> </span>&#123;</span><br><span class="line">outer.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Outer初始化</span><br><span class="line">name:hegongshan.com</span><br><span class="line">Inner初始化</span><br><span class="line">name:hegongshan.com</span><br><span class="line">更新后的name:software engineering</span><br></pre></td></tr></table></figure><p>可以看到，通过模仿编译后的class文件中的代码，在Outer中添加一些特殊的方法，在Inner类中添加特殊的构造器，我们在Inner类中访问和修改了Outer类中的私有属性。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的内部类继承</title>
      <link href="/2019/01/13/java-inner-class-extends/"/>
      <url>/2019/01/13/java-inner-class-extends/</url>
      
        <content type="html"><![CDATA[<p>由于Java中的匿名内部类不能被继承，而局部内部类和静态内部类的继承，与普通类继承没有区别。故本文主要描述成员内部类的继承问题。</p><a id="more"></a><p>成员内部类的继承可分为以下三种情况：</p><ul><li>内部类及其子类在同一个外围类中</li><li>内部类及其子类在不同的外围类中</li><li>内部类的子类不是内部类</li></ul><p>下面对这三种情况逐一分析</p><h4 id="内部类及其子类在同一个外围类中"><a href="#内部类及其子类在同一个外围类中" class="headerlink" title="内部类及其子类在同一个外围类中"></a>内部类及其子类在同一个外围类中</h4><p>在这种情况下，内部类和子类都是同一个外围类的内部类，此时成员内部类的继承与普通类的继承没有区别。下面通过一个示例来说明这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Inner"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InheritInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"InheritInner"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">WithInner.InheritInner ii = wi.new InheritInner();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出如下：</span><br><span class="line">Inner</span><br><span class="line">InheritInner</span><br></pre></td></tr></table></figure><p>上述程序编译后，生成了如下的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main.class</span><br><span class="line">WithInner$InheritInner.class</span><br><span class="line">WithInner$Inner.class</span><br><span class="line">WithInner.class</span><br></pre></td></tr></table></figure><p>在<a href="https://www.hegongshan.com/2019/01/14/java-inner-class-implementation-principle/">《Java内部类实现原理分析》</a>中，我们已经知道编译器会为内部类自动添加一个声明为final的外围类字段，并为内部类自动生成一个带参数的构造方法，就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span>$<span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>$<span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> WithInner <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> WithInner$InheritInner(WithInner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>WithInner$InheritInner</code>类和<code>WithInner$Inner</code>类都在<code>WithInner</code>类中，编译器会为<code>WithInner$InheritInner</code>类自动添加声明为final的WithInner，故<code>WithInner$InheritInner</code>类继承<code>WithInner$Inner</code>类时，我们并不需要做什么额外的工作，就像普通类继承一样。</p><h4 id="内部类及其子类在不同的外围类中"><a href="#内部类及其子类在不同的外围类中" class="headerlink" title="内部类及其子类在不同的外围类中"></a>内部类及其子类在不同的外围类中</h4><p>先来看下面的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Inner"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InheritInner</span><span class="params">(WithInner wi)</span> </span>&#123;</span><br><span class="line">wi.<span class="keyword">super</span>();</span><br><span class="line">System.out.println(<span class="string">"InheritInner"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">Outer.InheritInner ii = outer.new InheritInner(wi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出如下：</span><br><span class="line">Inner</span><br><span class="line">InheritInner</span><br></pre></td></tr></table></figure><p>InheritInner继承自内部类WithInner.Inner，由于InheritInner不在WithInner中，编译器不会为其自动添加具有WithInner参数的构造器，当要生成一个构造器时，必须传入一个指向外围类对象的引用。此外，还必须在构造器内使用如下语法，显式地调用其父类WithInner.Inner的构造器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enclosingClassReference.<span class="keyword">super</span>();</span><br></pre></td></tr></table></figure><p>否则，将会产生如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">No enclosing instance of type WithInner is accessible to invoke the <span class="keyword">super</span> constructor. </span><br><span class="line">Must define a constructor and explicitly qualify its <span class="keyword">super</span> constructor invocation</span><br><span class="line"><span class="function">with an instance of <span class="title">WithInner</span> <span class="params">(e.g. x.<span class="keyword">super</span>()</span> where x is an instance of WithInner).</span></span><br></pre></td></tr></table></figure><p>翻译过来就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">没有外围类WithInner的实例，无法调用父类构造器。</span><br><span class="line">必须定义一个构造器，并且用WithInner的实例显式地调用父类构造器。</span><br><span class="line">（如，x.<span class="keyword">super</span>(),其中x是WithInner的一个实例）</span><br></pre></td></tr></table></figure><p>上述程序编译后，生成了如下的class文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Main.class</span><br><span class="line">Outer$InheritInner.class</span><br><span class="line">Outer.class</span><br><span class="line">WithInner$Inner.class</span><br><span class="line">WithInner.class</span><br></pre></td></tr></table></figure><p>使用<code>javap -p</code>查看<code>Outer$InheritInner.class</code>,输出内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">"Main.java"</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span>$<span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>$<span class="title">Inner</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">public</span> Outer$InheritInner(Outer, WithInner);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难想到，编译之后的<code>Outer$InheritInner</code>应该是下面这个样子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span>$<span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>$<span class="title">Inner</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Outer <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">public</span> Outer$InheritInner(Outer outer, WithInner wi) &#123;</span><br><span class="line"><span class="comment">//先初始化父内部类，从而初始化父内部类中的final WithInner this$0，继而通过继承得到对WithInner的引用</span></span><br><span class="line">wi.<span class="keyword">super</span>(wi);</span><br><span class="line"><span class="keyword">this</span>$<span class="number">0</span> = outer;</span><br><span class="line">        ...</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="内部类的子类不是内部类"><a href="#内部类的子类不是内部类" class="headerlink" title="内部类的子类不是内部类"></a>内部类的子类不是内部类</h4><p>下面通过一个示例来说明这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InheritInner</span><span class="params">(WithInner wi)</span> </span>&#123;</span><br><span class="line">wi.<span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">InheritInner ii = <span class="keyword">new</span> InheritInner(wi);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和“内部类及其子类在不同的外围类中”的情况一样，当内部类的子类不是一个内部类时，我们也必须显式地添加一个带外围类对象的构造器，并在构造器内使用如下语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enclosingClassReference.<span class="keyword">super</span>();</span><br></pre></td></tr></table></figure><p>否则，会产生如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">No enclosing instance of type WithInner is available due to some intermediate constructor invocation</span><br></pre></td></tr></table></figure><p>翻译过来就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由于一些中间构造器的调用，没有外围类WithInner的实例可用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的内部类</title>
      <link href="/2019/01/12/java-inner-class/"/>
      <url>/2019/01/12/java-inner-class/</url>
      
        <content type="html"><![CDATA[<p>将一个类的定义放在另一个类的定义内部，这就是内部类。如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从总体上来讲，Java中的内部类可以分为：</p><ul><li>静态内部类（static inner class）：声明为static的内部类</li><li>非静态内部类（non-static inner class）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，非静态内部类又可细分为以下三种：</p><ul><li>成员内部类：作为外部类的成员定义</li><li>局部内部类（local inner class）：在外部类的方法中定义</li><li>匿名内部类（anonymous inner class）：没有名字的内部类</li></ul><p>内部类是一种编译器现象，与虚拟机无关。它可以访问外部类中定义的所有方法和域，即使这些方法和域声明为private。此外，内部类可以使用访问说明符public、protected和private修饰。</p><a id="more"></a><h3 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h3><p><strong>非静态内部类中不能声明static方法，声明的所有静态域都必须是final</strong>。</p><h4 id="内部类的特殊语法"><a href="#内部类的特殊语法" class="headerlink" title="内部类的特殊语法"></a>内部类的特殊语法</h4><p>要想实例化一个非静态内部类，需要使用一种特殊的语法<code>.new</code>，就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OuterClass outer = <span class="keyword">new</span> OuterClass();</span><br><span class="line">InnerClass inner = outer.new InnerClass();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在外部类的作用域之外，可以这样引用内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OuterClass.InnerClass</span><br></pre></td></tr></table></figure><p>下面是示例展示了如何在外部类的作用域之外，实例化它的内部类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OuterClass outer = <span class="keyword">new</span> OuterClass();</span><br><span class="line">OuterClass.InnerClass inner = outer.new InnerClass();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"InnerClass实例化"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">InnerClass实例化</span><br></pre></td></tr></table></figure><p>在内部类中，如果需要使用外部类对象的引用，可以使用外部类的名字后紧跟圆点和<strong><em>this</em></strong>，就像这样<code>OuterClass.this​</code>,下面是一个简单的示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"OuterClass.print()"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> OuterClass <span class="title">getOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> OuterClass.<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OuterClass outer = <span class="keyword">new</span> OuterClass();</span><br><span class="line">InnerClass inner = outer.new InnerClass();</span><br><span class="line">inner.getOuter().print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">OuterClass.print()</span><br></pre></td></tr></table></figure><h4 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h4><p>成员内部类是最常见的内部类，也称为普通内部类。成员内部类作为外部类的成员来定义，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h4><p>在外围类的方法中声明的类，称为局部内部类。下面是一个简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalInnerClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(count);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LocalInnerClass inner = <span class="keyword">new</span> LocalInnerClass();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">inner.service();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer main = <span class="keyword">new</span> Outer();</span><br><span class="line">main.start();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>局部内部类不能用public、protected或private访问说明符声明</strong>。它的优势是对外部世界可以完全地隐藏起来，除了start方法之外，Outer的其他地方均不能访问它。</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>匿名内部类，顾名思义，就是没有命名的内部类。语法格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> SuperType(construction parameters) &#123;</span><br><span class="line">    方法和属性</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是匿名内部类的一个示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function">Counter <span class="title">getCounter</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Counter() &#123;</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(<span class="string">"Counter()"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.print(name);</span><br><span class="line">                <span class="keyword">return</span> count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        Counter c = outer.getCounter();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(c.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">Counter()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p>在上面的程序中，由于getCounter方法中的name这个变量不是外围类中定义的属性，所以必须声明为final类型，才能在匿名内部类中使用（对于局部内部类，情况也是一样的），否则，将产生如下的语法错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot refer to the non-<span class="keyword">final</span> local variable name defined in an enclosing scope</span><br></pre></td></tr></table></figure><p>由于构造器的名字必须与类名相同，而匿名类没有类名，所以匿名类不能有构造器。因此，将参数传递给超类（父类）构造器。在匿名内部类实现接口的时候，不能有任何构造参数。</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>静态内部类，就是声明为static的内部类。<strong>实例化静态内部类，不需要其外围类对象</strong>。下面是一个静态内部类的示例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String className = <span class="string">"OUTER"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">StaticInnerClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(name);</span><br><span class="line">System.out.println(<span class="string">"outer class name:"</span>+className);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer main = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//下面两种实例化方法是等价的</span></span><br><span class="line">StaticInnerClass inner = <span class="keyword">new</span> StaticInnerClass(<span class="string">"inner"</span>);</span><br><span class="line">Outer.StaticInnerClass inner2 = <span class="keyword">new</span> Outer.StaticInnerClass(<span class="string">"inner2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">inner</span><br><span class="line">outer class name:OUTER</span><br><span class="line">inner2</span><br><span class="line">outer class name:OUTER</span><br></pre></td></tr></table></figure><p>值得一提的是，<strong>静态内部类不能访问外围类中的非静态的域和方法</strong>。以上面的程序为例，StaticInnerClass类可以访问到Outer类的className属性，因为className声明为static，但StaticInnerClass类不能访问count。</p><p><strong>什么时候使用静态内部类？</strong>在内部类不需要访问外围类对象的时候，应该使用静态内部类。</p><h3 id="内部类标识符"><a href="#内部类标识符" class="headerlink" title="内部类标识符"></a>内部类标识符</h3><p>对于成员内部类和静态内部类，编译器将会把它编译成文件名为<code>外围类名$内部类名.class</code>的class文件。</p><p>对于匿名内部类，编译器会将它编译名为<code>外围类名$n.class</code>的class文件；对于局部内部类，则被编译为<code>外围类名$n内部类名</code>的class文件。（n是由编译器简单生成的一个数字）</p><p>下面通过一个简单的例子来展示这四种内部类的字节码文件的命名规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NormalCounter</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function">Counter <span class="title">getCounter</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocalCounter</span> <span class="keyword">implements</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> String name = <span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LocalCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"LocalCounter()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(name);</span><br><span class="line"><span class="keyword">return</span> count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LocalCounter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Counter <span class="title">getCounter2</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Counter() &#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"Counter()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.print(name);</span><br><span class="line"><span class="keyword">return</span> count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClass</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Outer lic = <span class="keyword">new</span> Outer();</span><br><span class="line">Counter c1 = lic.getCounter(<span class="string">"Local inner class "</span>);</span><br><span class="line">Counter c2 = lic.getCounter2(<span class="string">"Anonymous inner class "</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(c1.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">System.out.println(c2.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Outer.java编译之后，生成了如下几个class文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Counter.class</span><br><span class="line">Outer$<span class="number">1</span>.class</span><br><span class="line">Outer$<span class="number">1L</span>ocalCounter.class</span><br><span class="line">Outer$NormalCounter.class</span><br><span class="line">Outer$StaticInnerClass.class</span><br><span class="line">Outer.class</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的final关键字</title>
      <link href="/2019/01/10/java-final/"/>
      <url>/2019/01/10/java-final/</url>
      
        <content type="html"><![CDATA[<p>​    在Java中，final关键字可以用于域、方法和类的声明，所处位置不同，其作用也不同。</p><a id="more"></a><h3 id="final域"><a href="#final域" class="headerlink" title="final域"></a>final域</h3><p>使用final声明的域，在使用前必须被初始化，且一旦被初始化便无法改变。下面是一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Main main = <span class="keyword">new</span> Main();</span><br><span class="line"><span class="comment">//main.number = 2; </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想改变number的值时，产生了如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The <span class="keyword">final</span> field Main.number cannot be assigned</span><br></pre></td></tr></table></figure><h4 id="空白final"><a href="#空白final" class="headerlink" title="空白final"></a>空白final</h4><p>空白final是指被声明为final但又未给定初始值的域。必须在构造器中对空白final进行赋值，以确保空白final在使用前被初始化。下面是空白final的一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> number;<span class="comment">//空白final</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Main main = <span class="keyword">new</span> Main(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，综合空白final和定义时已被初始化的final字段，我们可以说：<strong>final字段必须在域的定义处或者构造器中被初始化。</strong></p><h4 id="static-final域和final域的区别"><a href="#static-final域和final域的区别" class="headerlink" title="static final域和final域的区别"></a>static final域和final域的区别</h4><p>当域声明为static final时，表示该字段在类装载时已被初始化，而不是每次创建新对象时都初始化。此外，声明为static final的字段，在该类的所有对象中值是唯一的且不能改变。而final域是在创建对象时才被初始化，每个对象中该字段的值不一定相同，但在同一对象中，该字段的值是唯一的。下面的例子直白地说明了二者的区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"id="</span> + id + <span class="string">",CAPACITY="</span> + CAPACITY;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Main main = <span class="keyword">new</span> Main(<span class="number">2</span>);</span><br><span class="line">System.out.println(main);</span><br><span class="line">Main main2 = <span class="keyword">new</span> Main(<span class="number">3</span>);</span><br><span class="line">System.out.println(main2);</span><br><span class="line">System.out.println(main);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id=<span class="number">2</span>,CAPACITY=<span class="number">10</span></span><br><span class="line">id=<span class="number">3</span>,CAPACITY=<span class="number">10</span></span><br><span class="line">id=<span class="number">2</span>,CAPACITY=<span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="final参数"><a href="#final参数" class="headerlink" title="final参数"></a>final参数</h4><p>Java允许在参数列表中以声明的方式将参数指明为final。这一特性主要用来向匿名类传递数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(<span class="keyword">final</span> String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello "</span>+name);</span><br><span class="line"><span class="comment">//name = "new"+name;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Main main = <span class="keyword">new</span> Main();</span><br><span class="line">main.say(<span class="string">"hgs"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想改变name的值时，将产生如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The <span class="keyword">final</span> local variable name cannot be assigned. It must be blank and not using a compound assignment</span><br></pre></td></tr></table></figure><h3 id="final方法"><a href="#final方法" class="headerlink" title="final方法"></a>final方法</h3><p>使用final声明的方法，表示在子类中不允许被覆盖。下面我们尝试下覆盖父类中的final方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">System.out.println(word);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line"><span class="comment">/*public void say(String word) &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>产生了如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot override the <span class="keyword">final</span> method from Parent</span><br></pre></td></tr></table></figure><h4 id="final和private-关键字"><a href="#final和private-关键字" class="headerlink" title="final和private 关键字"></a>final和private 关键字</h4><p>类中所有的private方法都隐式地指定为是final的。可以将private方法声明为final，但这并不会给方法增加任何额外的意义。</p><h3 id="final类"><a href="#final类" class="headerlink" title="final类"></a>final类</h3><p>当某个类用final声明时，表明这个类不允许被继承。由于final类禁止继承，所以final类中所有的方法都隐式指定为是final的，但类中的域并不会自动地成为final。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">FinalClass fc = <span class="keyword">new</span> FinalClass(<span class="string">"final class"</span>);</span><br><span class="line">System.out.println(<span class="string">"number="</span>+fc.number);</span><br><span class="line">System.out.println(<span class="string">"name="</span>+fc.getName());</span><br><span class="line">fc.setName(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(<span class="string">"name="</span>+fc.getName());</span><br><span class="line"><span class="comment">//fc.number += 1;</span></span><br><span class="line">        <span class="comment">//The final field FinalClass.number cannot be assigned</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> number = <span class="number">1</span>; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FinalClass</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//class ChildFinalClass extends FinalClass&#123;&#125;</span></span><br><span class="line"><span class="comment">//The type ChildFinalClass cannot subclass the final class FinalClass</span></span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number=<span class="number">1</span></span><br><span class="line">name=<span class="keyword">final</span> <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"><span class="title">name</span></span>=name</span><br></pre></td></tr></table></figure><p>在final类中可以给方法添加final修饰符，但这并不会增添任何意义。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年度总结</title>
      <link href="/2019/01/04/2018-year-end-summary/"/>
      <url>/2019/01/04/2018-year-end-summary/</url>
      
        <content type="html"><![CDATA[<p>目标明确，才能不迷失方向！是时候总结下过去一年的收获了，顺便给新的一年制定下计划。<br><a id="more"></a></p><h1 id="2018年度总结"><a href="#2018年度总结" class="headerlink" title="2018年度总结"></a>2018年度总结</h1><ul><li>3月27日，武汉大学计算机学院硕士研究生拟录取结果公布</li><li>4月12日，进入朱卫平老师的智慧爬虫小组</li><li>7月3日，“乐渔”课程教学系统 软件著作权申请（10月15日审批通过）</li><li>9月5日，进入丁立新老师的课题组（原国软的老师不能带原计算机的学生）</li><li>11月22日，结束考研辅导（6月1日开始）</li><li>12月5日，“锐捷杯”华中区研究生程序设计大赛一轮游(accept 3/10)，rank 34/105</li><li>12月16日，第十五次CSP 130分</li></ul><h1 id="2019年度计划"><a href="#2019年度计划" class="headerlink" title="2019年度计划"></a>2019年度计划</h1><ul><li>1-2月，项目开发（软著）</li><li>3月17日，第十六次CSP，目标300</li><li>5月，CET6，标500+</li><li>5月25日，软考系统分析师</li><li>9月22日，第十七次CSP，目标400</li><li>10月，CCSP竞赛，目标铜牌</li><li>11月9日，软考系统架构设计师</li><li>12月，“锐捷杯”华中区研究生程序设计大赛，目标三等奖</li></ul>]]></content>
      
      
      <categories>
          
          <category> 任重而道远 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 任重而道远 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx返回413 Request Entity Too Large</title>
      <link href="/2018/10/14/nginx-413-request-entity-too-large/"/>
      <url>/2018/10/14/nginx-413-request-entity-too-large/</url>
      
        <content type="html"><![CDATA[<ul><li>问题描述</li></ul><p>晚上9点55分，前老板在讨论组中截了一张图片，显示的是课程网站上传文件失败的弹框，弹框内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: JSON.parse: unexpected character at line2 column 1 of the JSON data</span><br></pre></td></tr></table></figure><p>下意识以为是自己代码写的有问题，赶紧在本机测试了下，发现很小的文件都能正常上传，但是稍大一点的文件就会出现如下错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SyntaxError: Unexpected token &lt; in JSON at position 1</span><br></pre></td></tr></table></figure><p>浏览器控制台报错内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">413 Request Entity Too Large</span><br></pre></td></tr></table></figure><p>查看了下Spring MVC的配置文件，上传大小写的足够大，这显然不是Spring MVC的问题。后来发现可能是Nginx的问题，试着改了下本地Nginx的配置文件，果然就传成功了。</p><ul><li>原因</li></ul><p>nginx服务器做反向代理时，对上传的文件大小有限制，默认为2M</p><ul><li>解决办法</li></ul><p>在nginx.conf的http{}中，添加一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size 200m;</span><br></pre></td></tr></table></figure><p>文件大小限制可以根据需求自行改变。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中的空值处理(null)</title>
      <link href="/2018/09/19/sql-null-value/"/>
      <url>/2018/09/19/sql-null-value/</url>
      
        <content type="html"><![CDATA[<p>SQL中的空值处理主要分为以下两种情况：</p><p>1.涉及空值的条件判断；2.涉及空值的更新操作。</p><a id="more"></a><h3 id="涉及空值的条件判断"><a href="#涉及空值的条件判断" class="headerlink" title="涉及空值的条件判断"></a>涉及空值的条件判断</h3><p><strong>where子句中</strong>不能使用 = null 来进行空值判断，<strong>必须使用 is null 和 is not null </strong>。</p><p>示例：</p><p>某些学生选修某门课程后没有参加考试，所以有选课记录，但没有考试成绩。</p><ul><li>试查询缺少成绩的学生的学号和相应的课程号。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,cno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> grade <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><strong>注意，” grade is null “不能写为“ grade = null”。</strong></p><ul><li>查所有有成绩记录的学生的学号和相应的课程号。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sno,cno</span><br><span class="line"><span class="keyword">from</span> sc</span><br><span class="line"><span class="keyword">where</span> grade <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="涉及空值的更新操作"><a href="#涉及空值的更新操作" class="headerlink" title="涉及空值的更新操作"></a>涉及空值的更新操作</h3><p><strong>在update语句的set中，使用 = null  设置某列为空。</strong></p><ul><li>将选修“高级算法分析与设计”课不及格的学生成绩设置为空值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> sc</span><br><span class="line"><span class="keyword">set</span> grade = <span class="literal">null</span></span><br><span class="line"><span class="keyword">where</span> grade &lt; <span class="number">60</span> <span class="keyword">and</span> cno <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> cno </span><br><span class="line">    <span class="keyword">from</span> course</span><br><span class="line">    <span class="keyword">where</span> cname = <span class="string">"高级算法分析与设计"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中删除表中数据的几种方法</title>
      <link href="/2018/09/19/sql-drop-delete-and-truncate-table/"/>
      <url>/2018/09/19/sql-drop-delete-and-truncate-table/</url>
      
        <content type="html"><![CDATA[<p>SQL中删除表数据有以下三种方法：</p><p>1.使用drop table语句；2. 使用delete语句；3. 使用truncate table语句。</p><a id="more"></a><h4 id="drop-table"><a href="#drop-table" class="headerlink" title="drop table"></a>drop table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>功能：删除表，表的结构、表中的数据以及索引等全部被删除。</p><h4 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><p>功能：根据条件删除表中的数据，但不删除表的定义。</p><h4 id="truncate-table"><a href="#truncate-table" class="headerlink" title="truncate table"></a>truncate table</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>功能：清空表中的全部数据，但不删除表的定义。</p><p>truncate table 与delete语句不同的地方在于，</p><p>1.truncate table语句没有where条件。</p><p>2.truncate table语句会使表回到刚创建的初始状态，如重置表中的自增值等，而delete 语句不会。</p><p>3.truncate table语句不会触发触发器，而delete语句会触发触发器。</p><p><strong>若要清空表中的数据，但不删除表，推荐使用 truncate table语句。</strong></p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中的字符匹配（like）</title>
      <link href="/2018/09/19/sql-like/"/>
      <url>/2018/09/19/sql-like/</url>
      
        <content type="html"><![CDATA[<p>like可以用于字符串的匹配，其一般语法如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[not] like '&lt;匹配串&gt;' [escape '&lt;换码字符&gt;']</span><br></pre></td></tr></table></figure><p>其含义是查找指定的属性列值与&lt;匹配串&gt;相匹配的元组。&lt;匹配串&gt;可以是一个完整的字符串，也可以含有通配符 % 和 _ 。</p><ul><li>%：匹配任意长度(长度可以为0)的字符串</li><li>_：匹配任意单个字符(一个汉字占两个字符)</li></ul><a id="more"></a><p>示例：</p><p>1.查询所有姓刘的学生的姓名、学号和性别。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,sno,sex</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'刘%'</span>;</span><br></pre></td></tr></table></figure><p>2.查询所有姓“贺”且全名为两个汉字的学生的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'贺__'</span>;</span><br></pre></td></tr></table></figure><p><strong>由于一个汉字占两个字符，所以贺字后需要跟两个_</strong></p><p>3.查询名字中第二个字为“扬”字的学生姓名和学号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname,sno</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'__扬%'</span>;</span><br></pre></td></tr></table></figure><p>４.查询名字中包含”山”的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">'%山%'</span>;</span><br></pre></td></tr></table></figure><p>５.查询所有不姓刘的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sname</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sname <span class="keyword">not</span> <span class="keyword">like</span> <span class="string">'刘%'</span></span><br></pre></td></tr></table></figure><p><strong>如果需要查询的匹配字符串本身就含有%和_，可以使用escape ‘&lt;换码字符&gt;’对通配符进行转义。</strong></p><p>示例：</p><p>6.查询Algorithms_Design课程的课程号和学分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> cno,credit</span><br><span class="line"><span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">where</span> cname <span class="keyword">like</span> <span class="string">'Algorithms\_Design'</span> escape <span class="string">'\';</span></span><br></pre></td></tr></table></figure><p>7.查询课程名以“算法_”开头，且倒数第二个汉字为“设”的课程详情。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">where</span> cname <span class="keyword">like</span> <span class="string">'算法\_%设__'</span> escape <span class="string">'\';</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>换码字符是可以变化的，一般取不常用的符号。若匹配串中本身含有 “ \ ”，则换码字符可取 “ ? ”等。</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中的各种join</title>
      <link href="/2018/09/14/sql-join/"/>
      <url>/2018/09/14/sql-join/</url>
      
        <content type="html"><![CDATA[<p>SQL中的连接操作很多，这里总结一下。</p><a id="more"></a><p>假设有以下两张表</p><p>教师表teacher</p><table><thead><tr><th style="text-align:center">teacher_id</th><th style="text-align:center">teacher_name</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">刘娟</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">朱卫平</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">刘婧</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">李春葆</td></tr></tbody></table><p>课程表course</p><table><thead><tr><th style="text-align:center">course_id</th><th style="text-align:center">course_name</th><th style="text-align:center">teacher_id</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">商务智能</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">高级算法分析与设计</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">程序设计方法学</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">模式识别</td><td style="text-align:center">2</td></tr></tbody></table><p>sql如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher (</span><br><span class="line">    teacher_id <span class="built_in">int</span>,</span><br><span class="line">    teacher_name <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(teacher_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(teacher_id,teacher_name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'刘娟'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(teacher_id,teacher_name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'朱卫平'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(teacher_id,teacher_name) <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'刘婧'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> teacher(teacher_id,teacher_name) <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">'李春葆'</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">    course_id <span class="built_in">int</span>,</span><br><span class="line">    course_name <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    teacher_id <span class="built_in">int</span>,</span><br><span class="line">    primary <span class="keyword">key</span>(course_id),</span><br><span class="line">    foreign <span class="keyword">key</span>(teacher_id) <span class="keyword">references</span> teacher(teacher_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(course_id,course_name,teacher_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'商务智能'</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(course_id,course_name,teacher_id) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'高级算法分析与设计'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(course_id,course_name,teacher_id) <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'程序设计方法学'</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course(course_id,course_name,teacher_id) <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">'模式识别'</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="cross-join"><a href="#cross-join" class="headerlink" title="cross join"></a>cross join</h3><p>交叉连接(cross join)：如果不带where子句，它将会返回被连接的两个表的笛卡尔积，返回结果的行数等于两个表行数的乘积。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名,...</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">cross</span> <span class="keyword">join</span> table2</span><br><span class="line">[<span class="keyword">where</span> 条件]</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> teacher <span class="keyword">cross</span> <span class="keyword">join</span> course;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------------+--------------+-----------+-----------------------------+------------+</span></span><br><span class="line">| teacher_id | teacher_name | course_id | course_name                 | teacher_id |</span><br><span class="line">+<span class="comment">------------+--------------+-----------+-----------------------------+------------+</span></span><br><span class="line">|          1 | 刘娟         |         1 | 商务智能                    |          2 |</span><br><span class="line">|          2 | 朱卫平       |         1 | 商务智能                    |          2 |</span><br><span class="line">|          3 | 刘婧         |         1 | 商务智能                    |          2 |</span><br><span class="line">|          4 | 李春葆       |         1 | 商务智能                    |          2 |</span><br><span class="line">|          1 | 刘娟         |         2 | 高级算法分析与设计            |          1 |</span><br><span class="line">|          2 | 朱卫平       |         2 | 高级算法分析与设计            |          1 |</span><br><span class="line">|          3 | 刘婧         |         2 | 高级算法分析与设计            |          1 |</span><br><span class="line">|          4 | 李春葆       |         2 | 高级算法分析与设计            |          1 |</span><br><span class="line">|          1 | 刘娟         |         3 | 程序设计方法学               |          3 |</span><br><span class="line">|          2 | 朱卫平       |         3 | 程序设计方法学               |          3 |</span><br><span class="line">|          3 | 刘婧         |         3 | 程序设计方法学               |          3 |</span><br><span class="line">|          4 | 李春葆       |         3 | 程序设计方法学               |          3 |</span><br><span class="line">|          1 | 刘娟         |         4 | 模式识别                    |          2 |</span><br><span class="line">|          2 | 朱卫平       |         4 | 模式识别                    |          2 |</span><br><span class="line">|          3 | 刘婧         |         4 | 模式识别                    |          2 |</span><br><span class="line">|          4 | 李春葆       |         4 | 模式识别                    |          2 |</span><br><span class="line">+<span class="comment">------------+--------------+-----------+-----------------------------+------------+</span></span><br></pre></td></tr></table></figure><h3 id="inner-join"><a href="#inner-join" class="headerlink" title="inner join"></a>inner join</h3><p>等值连接（inner join或join）:返回两张表中相互匹配的行。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名,...</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line">[<span class="keyword">inner</span>] <span class="keyword">join</span> table2</span><br><span class="line"><span class="keyword">on</span> table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure><p>其中的inner是可省略的。</p><p>示例：</p><p>查询每门课程的的课程号、课程名称、教师编号以及教师姓名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> course.*,teacher.teacher_name <span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> teacher</span><br><span class="line"><span class="keyword">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-----------------------------+------------+--------------+</span></span><br><span class="line">| course_id | course_name                 | teacher_id | teacher_name |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+--------------+</span></span><br><span class="line">|         2 | 高级算法分析与设计             |          1 | 刘娟         |</span><br><span class="line">|         1 | 商务智能                     |          2 | 朱卫平        |</span><br><span class="line">|         4 | 模式识别                     |          2 | 朱卫平        |</span><br><span class="line">|         3 | 程序设计方法学                |          3 | 刘婧          |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+--------------+</span></span><br></pre></td></tr></table></figure><h3 id="natural-join"><a href="#natural-join" class="headerlink" title="natural join"></a>natural join</h3><p>自然连接(natural join)：在等值连接的基础上，去掉重复的列名。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名,...</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">natural</span> <span class="keyword">join</span> table2;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">natural</span> <span class="keyword">join</span> teacher</span><br></pre></td></tr></table></figure><p>输出：</p><p>由于course表中已经包含了teacher_id，所以，在进行自然连接时，自动去掉了teacher表中多余的teacher_id。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">------------+-----------+-----------------------------+--------------+</span></span><br><span class="line">| teacher_id | course_id | course_name                 | teacher_name |</span><br><span class="line">+<span class="comment">------------+-----------+-----------------------------+--------------+</span></span><br><span class="line">|          1 |         2 | 高级算法分析与设计             | 刘娟         |</span><br><span class="line">|          2 |         1 | 商务智能                     | 朱卫平       |</span><br><span class="line">|          2 |         4 | 模式识别                     | 朱卫平       |</span><br><span class="line">|          3 |         3 | 程序设计方法学                | 刘婧         |</span><br><span class="line">+<span class="comment">------------+-----------+-----------------------------+--------------+</span></span><br></pre></td></tr></table></figure><h3 id="left-join"><a href="#left-join" class="headerlink" title="left join"></a>left join</h3><p>左外连接(left outer join)：返回左表中的所有行及右表中满足on条件的行，如果右表没有匹配的行，对应列填充NULL。</p><p>其中outer是可省略的，即可写为left join。</p><p>示例：</p><p>查询所有的教师信息，即使他尚未被安排课程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> course.*,teacher.teacher_name <span class="keyword">from</span> teacher</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> course</span><br><span class="line"><span class="keyword">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-----------------------------+------------+--------------+</span></span><br><span class="line">| course_id | course_name                 | teacher_id | teacher_name |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+--------------+</span></span><br><span class="line">|         2 | 高级算法分析与设计             |          1 | 刘娟         |</span><br><span class="line">|         1 | 商务智能                     |          2 | 朱卫平       |</span><br><span class="line">|         4 | 模式识别                     |          2 | 朱卫平       |</span><br><span class="line">|         3 | 程序设计方法学                |          3 | 刘婧         |</span><br><span class="line">|      NULL | NULL                        |       NULL | 李春葆       |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+--------------+</span></span><br></pre></td></tr></table></figure><h3 id="right-join"><a href="#right-join" class="headerlink" title="right join"></a>right join</h3><p>右外连接(right outer join)：返回右表有行和左表中满足on条件的行，如果左表没有匹配的行，对应列填充NULL。</p><p>其中outer是可省略的，即可写为right join。</p><p>示例：</p><p>查询所有的教师信息，即使他尚未被安排课程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">outer</span> <span class="keyword">join</span> teacher</span><br><span class="line"><span class="keyword">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-----------------------------+------------+------------+--------------+</span></span><br><span class="line">| course_id | course_name                 | teacher_id | teacher_id | teacher_name |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+------------+--------------+</span></span><br><span class="line">|         2 | 高级算法分析与设计             |          1 |          1 | 刘娟         |</span><br><span class="line">|         1 | 商务智能                     |          2 |          2 | 朱卫平       |</span><br><span class="line">|         4 | 模式识别                     |          2 |          2 | 朱卫平       |</span><br><span class="line">|         3 | 程序设计方法学                |          3 |          3 | 刘婧         |</span><br><span class="line">|      NULL | NULL                        |       NULL |          4 | 李春葆       |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+------------+--------------+</span></span><br></pre></td></tr></table></figure><h3 id="full-join"><a href="#full-join" class="headerlink" title="full join"></a>full join</h3><p>全外连接(full outer join或full join)：返回左表和右表中的所有行。若某一张表中的行在另一张表中没有匹配的行，对应列填充NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> teacher</span><br><span class="line"><span class="keyword">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>MySQL不支持full outer join，可以使用左连接和右连接的并来实现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> teacher</span><br><span class="line"><span class="keyword">on</span> course.teacher_id = teacher.teacher_id</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> course</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> teacher</span><br><span class="line"><span class="keyword">on</span> course.teacher_id = teacher.teacher_id;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-----------------------------+------------+------------+--------------+</span></span><br><span class="line">| course_id | course_name                 | teacher_id | teacher_id | teacher_name |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+------------+--------------+</span></span><br><span class="line">|         2 | 高级算法分析与设计             |          1 |          1 | 刘娟         |</span><br><span class="line">|         1 | 商务智能                     |          2 |          2 | 朱卫平       |</span><br><span class="line">|         4 | 模式识别                     |          2 |          2 | 朱卫平       |</span><br><span class="line">|         3 | 程序设计方法学                |          3 |          3 | 刘婧         |</span><br><span class="line">|      NULL | NULL                        |       NULL |          4 | 李春葆       |</span><br><span class="line">+<span class="comment">-----------+-----------------------------+------------+------------+--------------+</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL中的并运算(union)</title>
      <link href="/2018/09/12/sql-union/"/>
      <url>/2018/09/12/sql-union/</url>
      
        <content type="html"><![CDATA[<p>union用于合并两个或多个select语句的结果集。</p><p>需要注意的是，union合并的两个或多个表必须有相同的列数，且相应的列必须取自同一个域（即数据类型相似，如都是数值型），此外，每条select语句中列的顺序必须相同。</p><a id="more"></a><p>语法<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> 列名 <span class="keyword">from</span> table2</span><br></pre></td></tr></table></figure></p><p><strong>注意：</strong>union会去除重复行，如果需要保留重复的行，可使用union all。</p><p>示例<br>假设有以下两张雇员表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee_cn(</span><br><span class="line">eno <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(eno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_cn <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'San Zhang'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_cn <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Xindong Wu'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_cn <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Gongshan he'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_cn <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Jiawei Han'</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee_us(</span><br><span class="line">eno <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    primary <span class="keyword">key</span>(eno)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_us <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'Jiawei Han'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_us <span class="keyword">values</span>(<span class="number">2</span>,<span class="string">'Xindong Wu'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_us <span class="keyword">values</span>(<span class="number">3</span>,<span class="string">'Bill Gates'</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee_us <span class="keyword">values</span>(<span class="number">4</span>,<span class="string">'Steve Jobs'</span>);</span><br></pre></td></tr></table></figure><p>查询中国和美国的所有雇员的姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> employee_cn</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> employee_us;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| name        |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| San Zhang   |</span><br><span class="line">| Xindong Wu  |</span><br><span class="line">| Gongshan he |</span><br><span class="line">| Jiawei Han  |</span><br><span class="line">| Bill Gates  |</span><br><span class="line">| Steve Jobs  |</span><br><span class="line">+<span class="comment">-------------+</span></span><br></pre></td></tr></table></figure><p>可以看到，union无法查询出所有的中国和美国雇员，一旦出现同名的雇员，则只有一个被列出。</p><p>下面使用union all。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> employee_cn</span><br><span class="line"><span class="keyword">union</span> all</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> employee_us;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| name        |</span><br><span class="line">+<span class="comment">-------------+</span></span><br><span class="line">| San Zhang   |</span><br><span class="line">| Xindong Wu  |</span><br><span class="line">| Gongshan he |</span><br><span class="line">| Jiawei Han  |</span><br><span class="line">| Jiawei Han  |</span><br><span class="line">| Xindong Wu  |</span><br><span class="line">| Bill Gates  |</span><br><span class="line">| Steve Jobs  |</span><br><span class="line">+<span class="comment">-------------+</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL简单总结</title>
      <link href="/2018/09/08/sql-summary/"/>
      <url>/2018/09/08/sql-summary/</url>
      
        <content type="html"><![CDATA[<p>结构化查询语言（structured query language, 简称SQL）分为四类：</p><p>数据定义语句（Data Definition Language，简称DDL）、数据查询语句（Data Query Language，简称DQL）、数据更新语句（Data Manipulation Language，简称DML）以及数据控制语句。</p><a id="more"></a><h3 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h3><ul><li>表的创建</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名 (</span><br><span class="line">列名 数据类型 列级完整性约束,</span><br><span class="line">...[,表级完整性约束]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>表的删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名 [<span class="keyword">cascade</span> | restrict];</span><br></pre></td></tr></table></figure><ul><li>表的扩充和修改</li></ul><p>1.增加新列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> (列名 数据类型,...);</span><br></pre></td></tr></table></figure><p>2.删除已存在的某个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名 [<span class="keyword">cascade</span> | restrict];</span><br></pre></td></tr></table></figure><p>3.修改原有列的类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">modify</span> 列名 数据类型;</span><br></pre></td></tr></table></figure><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [all | <span class="keyword">distinct</span>]</span><br><span class="line"><span class="keyword">from</span> 表名或视图名[,表名或视图名...]</span><br><span class="line">[<span class="keyword">where</span> 条件表达式]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> 列名<span class="number">1</span> [<span class="keyword">having</span> 条件表达式]]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> 列名<span class="number">2</span> [<span class="keyword">asc</span> | <span class="keyword">desc</span>]];</span><br></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><ul><li>插入数据</li></ul><p>1.插入一条数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(列名,列名,...)] <span class="keyword">values</span>(常量<span class="number">1</span>[,常量<span class="number">2</span>,...]);</span><br></pre></td></tr></table></figure><p>2.插入子查询结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(列名,列名,...)] 查询语句;</span><br></pre></td></tr></table></figure><ul><li>修改数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 </span><br><span class="line"><span class="keyword">set</span> 列名 = 表达式[,列名 = 表达式,...]</span><br><span class="line">[<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure><ul><li>删除数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇异值分解</title>
      <link href="/2018/08/28/matrix-singular-value-decomposition/"/>
      <url>/2018/08/28/matrix-singular-value-decomposition/</url>
      
        <content type="html"><![CDATA[<p>奇异值分解（Singular Value Decomposition，简称SVD），是一种矩阵分解技术，可以用于机器学习中数据集的降维。</p><a id="more"></a><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><ul><li>单位矩阵</li></ul><p>主对角元素全为1，其余元素全为0的n阶矩阵，称为单位矩阵，记为$E_{n}$或$I_{n}$，通常用$E$或$I$表示。</p><blockquote><p>自看机器学习以来，看到好多次$I$这个符号，以前一直不知道是啥意思，原来就是本科线性代数里单位矩阵$E$的另一种表示符号。</p></blockquote><ul><li>正交矩阵</li></ul><p>如果n阶实矩阵满足<br>$$<br>A^{T}A = AA^{T} = I<br>$$<br>则称$A$为正定矩阵。</p><ul><li>正规矩阵</li></ul><p>设$A \in C^{\ m \times n}​$，如果<br>$$<br>A^{H}A = AA^{H}<br>$$<br>则称$A$ 为正规矩阵。</p><ul><li>酉矩阵</li></ul><p>如果n阶复矩阵$A​$满足<br>$$<br>A^{H}A = AA^{H} = I<br>$$<br>则称$A$为酉矩阵。</p><h3 id="奇异值分解"><a href="#奇异值分解" class="headerlink" title="奇异值分解"></a>奇异值分解</h3><p>设$A \in C^{\ m \times n}$，如果存在非负实数$\sigma$和非零向量$u \in C^{n}，v \in C^{m}$使得<br>$$<br>Au = \sigma v，A^{H}v = \sigma u<br>$$<br>则称$\sigma$为$A$的奇异值，$u$和$v$分别称为$A$对应于奇异值$\sigma$的右奇异向量和左奇异向量。<br>$$<br>A^{H}Au = \sigma A^{H} v = \sigma^{2} u<br>$$</p><p>$$<br>A A^{H} v = \sigma A u = \sigma^{2}v<br>$$</p><p>因此，$\sigma^{2}$是$A^{H} A$的特征值，也是$A A^{H}$的特征值，而$u$和$v$分别是$A^{H}A$和$A A^{H}$对应于特征值$\sigma^{2}$的特征向量。</p><p>设$A \in C^{\ m \times n}$，rank（A）=r，且$A^{H}A$的特征值为$\lambda_{1} \geq \lambda_{2} \geq \dots \geq \lambda_{n}$。<br>$$<br>\lambda_{1} \geq \dots \geq \lambda_{r} &gt; \lambda_{r+1} = \dots = \lambda_{n} = 0<br>$$<br>记$k = \min\{m,n\}$，也称$\sigma_{i} = \sqrt{\lambda_{i}} （i=1,\dots,k）$为$A$的奇异值，特别地，称$\sigma_{1}，\dots，\sigma_{r}$为$A$的正奇异值。</p><p>定理：若$A$是正规矩阵，则$A$的奇异值是$A$的特征值的模。</p><p>定理：设$A$是$m \times n$矩阵，且rank（A）= r，则存在m阶酉矩阵$V$和n阶酉矩阵$U$，使得<br>$$<br>V^{H}AU =<br>\begin{bmatrix}<br>\Sigma &amp; 0 \\<br>0 &amp; 0<br>\end{bmatrix}<br>$$<br>其中，$\Sigma = diag（\sigma_{1}，\dots，\sigma_{r}）$，且$\sigma_{1} \geq \dots \geq \sigma_{r} &gt; 0$。</p><p>$U$的列向量是$A^{H}A$的标准正交特征向量，$U$的前 r 列向量是$A^{H}A$对应于r个非零特征值$\sigma_{1}^{2},\dots,\sigma_{r}^{2}$的标准正交特征向量；而$V$的列向量是$AA^{H}$的标准正交特征向量，前 r 列向量恰是$AA^{H}$对应于特征值$\sigma_{1}^{2},\dots,\sigma_{r}^{2}$的标准正交特征向量。</p><p>例题</p><p>设<br>$$<br>A =<br>\begin{bmatrix}<br>0 &amp; 1 \\<br>-1 &amp; 0 \\<br>0 &amp; 2 \\<br>1 &amp; 0 \\<br>\end{bmatrix}<br>$$<br>作出矩阵$A$的奇异值分解。</p><p>解：<br>$$<br>A^{H}A =<br>\begin{bmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\end{bmatrix},<br>AA^{H} =<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 2 &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; -1 \\<br>2 &amp; 0 &amp; 4 &amp; 0 \\<br>0 &amp; -1 &amp; 0 &amp; 1<br>\end{bmatrix},<br>$$<br>则$A$的非零奇异值为$\sqrt{2}，\sqrt{5}$ .</p><p>$A^{H} A $对应于特征值5和2的标准正交特征向量为<br>$$<br>u_1 =<br>\begin{pmatrix}<br>0 \\ 1<br>\end{pmatrix}，<br>u_2 =<br>\begin{pmatrix}<br>1 \\ 0<br>\end{pmatrix}<br>$$<br>$AA^{H}$对应于特征值5和2的标准正交特征向量为<br>$$<br>v_1 =<br>\begin{bmatrix}<br>\frac{1}{\sqrt{5}} \\ 0 \\ \frac{2}{\sqrt{5}} \\ 0<br>\end{bmatrix},<br>v_2 =<br>\begin{bmatrix}<br>0 \\ -\frac{1}{\sqrt{2}} \\ 0 \\ \frac{1}{\sqrt{2}}<br>\end{bmatrix}<br>$$<br>$AA^{H}$对应于特征值0的标准正交特征向量为<br>$$<br>v_3 =<br>\begin{bmatrix}<br>-\frac{2}{\sqrt{5}} \\ 0 \\ \frac{1}{\sqrt{5}} \\ 0<br>\end{bmatrix},<br>v_4 =<br>\begin{bmatrix}<br>0 \\ \frac{1}{\sqrt{2}} \\ 0 \\ \frac{1}{\sqrt{2}}<br>\end{bmatrix}<br>$$<br>因此，$A$的奇异值分解为<br>$$<br>A =<br>\begin{bmatrix}<br>0 &amp; 1 \\<br>-1 &amp; 0 \\<br>0 &amp; 2 \\<br>1 &amp; 0 \\<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>\frac{1}{\sqrt{5}} &amp; 0 &amp; -\frac{2}{\sqrt{5}} &amp; 0\\<br>0 &amp; -\frac{1}{\sqrt{2}} &amp; 0 &amp; \frac{1}{\sqrt{2}}\\<br>\frac{2}{\sqrt{5}} &amp; 0 &amp; \frac{1}{\sqrt{5}} &amp; 0\\<br>0 &amp; \frac{1}{\sqrt{2}} &amp; 0 &amp; \frac{1}{\sqrt{2}}<br>\end{bmatrix}<br>\begin{bmatrix}<br>\sqrt{5} &amp; 0 \\<br>0 &amp; \sqrt{2} \\<br>0 &amp; 0 \\<br>0 &amp; 0<br>\end{bmatrix}<br>\begin{pmatrix}<br>0 &amp; 1 \\<br>1 &amp; 0<br>\end{pmatrix}^{H}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩阵论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量和矩阵的范数</title>
      <link href="/2018/08/27/vector-and-matrix-norm/"/>
      <url>/2018/08/27/vector-and-matrix-norm/</url>
      
        <content type="html"><![CDATA[<p>阅读《机器学习》和《机器学习实战》的时候，都碰到过<strong>范数（norm）</strong>这个概念，这里记录一下。</p><a id="more"></a><h3 id="向量范数"><a href="#向量范数" class="headerlink" title="向量范数"></a>向量范数</h3><ul><li>定义</li></ul><p>设V是数域P上的线性空间，$\lVert \alpha \rVert$是以V中的向量$\alpha$为自变量的非负实值函数，如果它满足以下三个条件：</p><p>（1）非负性：当$\alpha \neq 0$时，$\lVert \alpha \rVert &gt; 0$；当$\alpha = 0$时，$\lVert \alpha \rVert = 0$；</p><p>（2）齐次性：对任意$k \in P，\alpha \in V$，有$\lVert k \alpha \rVert = \lvert k \rvert\ \lVert\alpha \rVert $；</p><p>（3）三角不等式：对任意$\alpha，\beta \in V$，有$\lVert \alpha + \beta \rVert \leq \lVert \alpha \rVert + \lVert \beta \rVert$，</p><p>则称$\lVert \alpha \rVert$ 为向量$\alpha$的<strong>范数</strong>，并称定义了范数的线性空间为<strong>赋范线性空间</strong>。</p><blockquote><p>什么是数域？</p><p>设P是包含0和1在内的数集，如果P中任意两个数的和、差、积、商（除数不为0）仍是P中的数，则称P为一个<strong>数域</strong>。</p></blockquote><ul><li>常见的向量范数</li></ul><p>在n维向量空间$C^n$中，对任意的向量$x = (x_1,x_2,\dots,x_n)^{T} \in C^{n} $,有<br>$$<br>\lVert x \rVert_{1} = \sum_{i=1}^{n} \lvert x_{i} \rvert \tag{1}<br>$$</p><p>$$<br>\lVert x \rVert_{2} = (\sum_{i=1}^{n} \lvert x_{i} \rvert^{2})^{\frac{1}{2}} \tag{2}<br>$$</p><p>$$<br>\lVert x \rVert_{\infty} = \max_{1 \leq i \leq n} \lvert x_{i} \rvert \tag{3}<br>$$</p><p>其中，$\lVert x \rVert_{1}、\lVert x \rVert_{2}、\lVert x \rVert_{\infty}$分别称为<strong>1范数，2范数（Euclid范数或欧式范数）和$\infty$范数</strong>。</p><p>对$1\leq p &lt; +\infty$，在$C^{n}$上定义<br>$$<br>\lVert x \rVert_{p} = (\sum_{i=1}^{n} \lvert x_{i} \rvert^{p})^{\frac{1}{p}}，1 \leq p &lt; +\infty \tag{4}<br>$$<br>$\lVert x \rVert_{p}$称为<strong>p范数</strong>。若未标明p，则默认为2范数。</p><h3 id="矩阵范数"><a href="#矩阵范数" class="headerlink" title="矩阵范数"></a>矩阵范数</h3><ul><li>定义</li></ul><p>设$\lVert \mathbf{A} \rVert$是以$C^{m \times n}$中的矩阵$\mathbf{A}$为自变量的非负实值函数，如果它满足以下三个条件：</p><p>（1）非负性：当$\mathbf{A} \neq 0$时，$\lVert \mathbf{A} \rVert&gt; 0$；当$\mathbf{A}= 0$时，$\lVert \mathbf{A} \rVert = 0$；</p><p>（2）齐次性：对任意$k \in C，\mathbf{A} \in C^{m \times n}$，有$\lVert k \mathbf{A} \rVert = \lvert k \rvert\ \lVert A \rVert $；</p><p>（3）三角不等式：对任意$\mathbf{A}，\mathbf{B} \in C^{m \times n}$，有$\lVert \mathbf{A} + \mathbf{B} \rVert \leq \lVert \mathbf{A} \rVert + \lVert \mathbf{B} \rVert$，</p><p>则称$\lVert \mathbf{A} \rVert$ 为$m \times n$矩阵$\mathbf{A}$的<strong>范数</strong>。</p><ul><li>常见的矩阵范数</li></ul><p>对于$\mathbf{A} = (a_{ij}) \in \mathbf{C}^{m \times n}$，令<br>$$<br>\lVert \mathbf{A} \rVert_{1} \equiv \sum_{i=1}^{m}\sum_{j=1}^{n}\ \lvert a_{ij} \rvert \tag{5}<br>$$</p><p>$$<br>\lVert \mathbf{A} \rVert_{\infty} \equiv \max_{i,\ j}\ \lvert a_{ij} \rvert \tag{6}<br>$$</p><p>$$<br>\lVert \mathbf{A} \rVert_{F} \equiv (\sum_{i=1}^{m}\sum_{j=1}^{n}\ \lvert a_{ij} \rvert^{2})^{\frac{1}{2}}= (tr({\mathbf{A}^{H}\mathbf{A}}))^{\frac{1}{2}} \tag{7}<br>$$</p><p>其中，$\lVert \mathbf{A} \rVert_{F}$称为$\mathbf{A}$的<strong>Frobenius范数</strong>，$A^{H}$是$A$的共轭转置矩阵。</p><h3 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h3><p>1.复矩阵：元素中含有复数的矩阵。</p><p>2.共轭矩阵：</p><p>当$A=(a_{ij})$为复矩阵时，用 $ \overline{a} $ 表示 $a $的共轭复数，记 $\overline{A} = (\overline{a_{ji}})$，则$\overline{A}$为A的共轭矩阵。</p><p>例如，<br>$$<br>A =<br>\begin{vmatrix}<br>3+i &amp; 5\\<br>2-2i &amp; i<br>\end{vmatrix}<br>$$<br>其共轭矩阵$\overline{A}$为<br>$$<br>\overline{A} =<br>\begin{vmatrix}<br>3-i &amp; 5 \\<br>2+2i &amp; -i<br>\end{vmatrix}<br>$$<br>3.共轭转置矩阵</p><p>当$A=(a_{ij})$为复矩阵时，用 $ \overline{a} $ 表示 $a $的共轭复数，记 $\overline{A} = (\overline{a_{ji}})$，则$（\overline{A}）^{T} = \overline{A^{T}}$为A的共轭转置矩阵。</p><p>还是用上面的例子，<br>$$<br>(\overline{A})^{T}  =<br>\begin{vmatrix}<br>3-i &amp; 5 \\<br>2+2i &amp; -i<br>\end{vmatrix}^{T}<br> =<br>\begin{vmatrix}<br>3-i &amp; 2+2i \\<br>5 &amp; -i<br>\end{vmatrix}<br>$$</p><p>4.Hermite矩阵</p><p>n阶复方阵A的对称元素互为共轭，即A的共轭转置矩阵等于它本身，则A是Hermite矩阵。</p><p>例如，<br>$$<br>B =<br>\begin{vmatrix}<br>3 &amp; 2+i \\<br>2-i &amp; 2<br>\end{vmatrix}<br>$$<br>B的共轭转置矩阵如下<br>$$<br>\overline{B}^{T} =<br>\begin{vmatrix}<br>3 &amp; 2-i \\<br>2+i &amp; 2<br>\end{vmatrix}^{T}<br>=<br>\begin{vmatrix}<br>3 &amp; 2+i \\<br>2-i &amp; 2<br>\end{vmatrix} = B<br>$$<br>故，B是一个Hermite矩阵。</p><hr><p>参考资料</p><ul><li>戴华，矩阵论，科学出版社</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之PCA算法</title>
      <link href="/2018/08/26/machine-learning-pca/"/>
      <url>/2018/08/26/machine-learning-pca/</url>
      
        <content type="html"><![CDATA[<p>主成分分析（Principal Component Analysis，简称PCA）。</p><p>$$<br>\begin{align}<br>\hline<br>&amp; PCA算法 \\<br>\hline<br>&amp; 输入：样本集D=\{x_1,x_2,\dots,x_m\};低维空间维数d^{‘} \\<br>&amp; 过程： \\<br>&amp; 1. 对所有样本进行中心化：x_i \leftarrow x_i - \frac{1}{m} \sum_{i=1}^{m} x_i;\\<br>&amp; 2.计算样本的协方差矩阵XX^{T}; \\<br>&amp; 3.对协方差矩阵XX^{T}做特征值分解; \\<br>&amp; 4.取最大的d^{‘}个特征值所对应的特征向量w_1,w_2,\dots,w_{d^{‘}}. \\<br>&amp; 输出：投影矩阵W=(w_1,w_2,\dots,w_{d^{‘}})<br>\end{align}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 降维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之PageRank算法</title>
      <link href="/2018/08/25/machine-learning-pagerank/"/>
      <url>/2018/08/25/machine-learning-pagerank/</url>
      
        <content type="html"><![CDATA[<p>PageRank是一个搜索排名算法，由Sergey Brin和Larry Page在1998年第七届国际万维网大会上提出的。基于这一算法，他们创建了Google搜索引擎。</p><p>在介绍PageRank之前，先来了解一些主要概念。</p><p>页面i的入链（In-links of page i）：从其他网页链接到网页$i$的超链接数，通常不包括来自同一站点内网页的链接。</p><p>网页i的出链（Out-links of page i）：从网页$i$链接到其他网页的超链接数，通常不包括链接到同一站点内网页的超链接。<br><a id="more"></a></p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>根据社交网络的排序声望原理，页面$i$的重要程度（页面$i$的PageRank分数），由所有指向页面i的所有页面的PageRank分数之和决定。因为一个页面可能指向很多其他的页面，它的声望分数应该被所有它指向的页面所共享。</p><p>将网络看做一个有向图G = (V , E)，其中V是所有顶点或结点的集合，例如，所有网页的集合，E是图中有向边的集合，例如，超链接。</p><p>设网络中的网页总数为n，网页i的PageRank分数为P(i)，<br>$$<br>P(i) = \sum_{(j,i) \in E} \frac{P(j)}{O_{j}} \tag{1}<br>$$<br>其中，$O_{j}$是网页$j$的出链数。</p><p>设P是一个由PageRank值组成的n维列向量（n-dimensional column vector）。<br>$$<br>P = (P(1),P(2),\dots,P(n))^{T} \tag{2}<br>$$<br>设A是图的邻接矩阵（adjacency matrix），<br>$$<br>A_{ij} =<br>\begin{cases}<br>\frac{1}{O_{j}},&amp; (i,j) \in E \\<br>0, &amp; 其他<br>\end{cases} \tag{3}<br>$$<br>由公式(1)~(3)，可以得到如下n阶方程组<br>$$<br>P = A^{T}P \tag{4}<br>$$<br>显然，P是一个特征值为1的特征向量（eigenvector）。</p><p>如果满足以下条件：</p><p>1.A是一个随机矩阵；2.A是不可约的；3.A是非周期的。</p><p>那么PageRank向量P就是对应矩阵A的最大特征值1的那个主特征向量。</p><p>实际上，公式(4)也可基于马尔科夫链（Markov chain）推导出来。</p><h3 id="模型修正"><a href="#模型修正" class="headerlink" title="模型修正"></a>模型修正</h3><p>然而，Web图并不满足以上三个条件。</p><p>1.Web图中，A不是一个随机矩阵。</p><ul><li>原因</li></ul><p>有限马尔科夫链的状态转移矩阵是随机矩阵，它要求每个元素都是非负实数，且每行元素之和为1。这要求每一个网页至少要有一个出链，但实际上，很多网页根本就没有出链，从而导致状态转移矩阵A某些行全为0。这样的网页称为悬挂网页。</p><ul><li>解决办法</li></ul><p>从每个悬挂网页$i$向其他各个网页添加一条出链，将网页$i$到其他网页的转换概率均设为$\frac{1}{n}$。也就是说，将A中全为0的行用$\frac{\mathbf{ e}}{n}$（$\mathbf{e}$是元素全为1的n维向量）来替换。</p><p>2.Web图在一般情况下是可约的。</p><ul><li>原因：Web图G不是强连通的。通常存在一些节点对&lt;u, v&gt;，没有从u到v的路径。</li></ul><p>强连通图：若图G中的任意两个顶点$i$和$j$都连通，即从顶点$i$到顶点$j$和从顶点$j$到顶点$i$都存在路径，则图G是强连通图。</p><ul><li>解决办法：同问题三</li></ul><p>3.”A是非周期的”，并不一定成立。</p><p>周期图：状态$i$是周期的，并且具有周期$k&gt;1$，是指存在一个最小的正整数$k$，使得所有从状态$i$出发又回到状态$i$的路径长度都是$k$的整数倍。</p><p>如果一个状态不是周期的（或者$k=1$），那么它就是非周期的。如果一个马尔科夫链的所有状态都是非周期的，那么就说这个马尔科夫链是非周期的。</p><ul><li>解决办法</li></ul><p>从任一页面出发，到每个页面都加上一条链接，并给这一链接分配一个由参数$d$控制的微小转换概率。</p><p>通过以上修正，状态转换矩阵A满足之前的三个条件，从而得到了一个改进后的PageRank模型：<br>$$<br>P = \left[(1-d) \frac{E}{n} + d A^{T}\right]P \tag{5}<br>$$<br>其中，$E=ee^{T}$（e是元素全为1的列向量，从而E是一个nxn的元素全为1的矩阵），n是Web图中的节点总数。</p><p>公式（5）化简后，得到<br>$$<br>P = (1-d)e + dA^{T}P \tag{6}<br>$$<br>其中，e是全为1的列向量。</p><p>从而，可以得到<br>$$<br>P(i) = (1-d) + d \sum_{j=1}^{n} A_{ji} P(j) \tag{7}<br>$$<br>上式等价于<br>$$<br>P(i) = (1-d) + d \sum_{(j,i) \in E} \frac{P(j)}{O_{j}} \tag{8}<br>$$<br>其中，$d$称之为阻尼系数（damping factor），且$0 \leq d  \leq 1$。一些论文中认为，$d = 0.85$是一个不错的选择。</p><p>可以使用幂迭代（power iteration）求解特征向量P，算法如下<br>$$<br>\begin{align}<br>&amp; PageRank-Iterate(G) \\<br>&amp; \quad P_{0} \leftarrow \frac{e}{n} \\<br>&amp; \quad k \leftarrow 1 \\<br>&amp; \quad repeat \\<br>&amp; \qquad P_{k} \leftarrow (1-d)e+dA^{T}P_{k-1}; \\<br>&amp; \qquad k \leftarrow k+1; \\<br>&amp; \quad until\ \Vert P_{k} - P_{k-1} \Vert_{1} &lt; \epsilon \\<br>&amp; \quad return\ P_{k}<br>\end{align}<br>$$</p><hr><p>参考资料</p><ol><li><p>Xindong Wu，<a href="https://link.springer.com/content/pdf/10.1007%2Fs10115-007-0114-2.pdf" target="_blank" rel="noopener">Top 10 algorithms in data mining</a>，Knowledge and Information Systems，2008</p></li><li><p>（美）吴信东，库玛尔编著；李文波，吴素研译.数据挖掘十大算法，清华大学出版社，2013.5</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链接挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之Apriori算法</title>
      <link href="/2018/08/23/machine-learning-apriori/"/>
      <url>/2018/08/23/machine-learning-apriori/</url>
      
        <content type="html"><![CDATA[<p>支持度(support)：数据集中包含该项集的记录所占的比例。</p><p>可信度或置信度（confidence）：</p><p>$A \rightarrow B$的置信度为<br>$$<br>confidence（A\rightarrow B） = \frac{support(A , B)}{support(A)}<br>$$<br>Apriori原理：如果一个项集是非频繁的，那么它的所有超集也是非频繁的。</p><blockquote class="blockquote-center"><br>    If an itemset is not frequent, any of its superset is never frequent.<br></blockquote><p>Apriori算法</p><p>1.从大小为k的频繁项集中生成大小为k+1的候选频繁项集$C_{k+1}$</p><p>2.扫描数据库，计算每一个候选频繁项集的支持度</p><p>3.将满足最小支持度的频繁项集加到$F_{k+1}$中<br>$$<br>\begin{align}<br>\hline<br>&amp; 算法\ Apriori \\<br>\hline \\<br>&amp; F_1 = (大小为1的频繁项集); \\<br>&amp; for(k = 1; F_k \neq \varnothing; k++)\ do\ begin \\<br>&amp; \qquad C_{k+1} = apriori-gen(F_k);//新的候选频繁集 \\<br>&amp; \qquad for\ 所有的交易记录t \in 数据集\ do\ begin \\<br>&amp; \qquad \qquad C_{t}^{‘}= subset(C_{k+1},t);\ //包含在t中的候选集 \\<br>&amp; \qquad \qquad for\ 所有的候选c \in C_{t}^{‘}\ do \\<br>&amp; \qquad \qquad \qquad c.count ++; \\<br>&amp; \qquad \qquad end \\<br>&amp; \qquad \qquad F_{k+1} = \{C \in C_{k+1} |\ c.count \geq 最小的支持度 \} \\<br>&amp; \qquad end \\<br>&amp; end \\<br>&amp; Answer \cup_{k} F_k;<br>\end{align}<br>$$<br>算法第三行中的apriori-gen函数经过下面两步，从$F_k$生成$C_{k+1}$</p><p>1.连接</p><p>通过合并两个大小为k，且前$k-1$项相同的频繁项集$P_k$和$Q_k$，生成大小为k+1的频繁项集$R_{k+1}$<br>$$<br>\begin{align}<br>&amp; R_{k+1} = P_{k} \cup Q_{k} = \{items_{1},\dots ,items_{k-1},items_{k},items_{k^{‘}}\} \\<br>&amp; P_{k} = \{items_{1},\dots ,items_{k-1},items_{k}\} \\<br>&amp; Q_{k} = \{items_{1},\dots ,items_{k-1},items_{k^{‘}}\}<br>\end{align}<br>$$<br>其中，$items_1 &lt; \dots &lt; items_k &lt; items_{k^{‘}}$</p><p>2.剪枝</p><p>检查$R_{k+1}$中的所有大小为的项集中的所有大小为的项集是不是频繁的，删除中的所有大小为的项集中的所有大小为k的项集是不是频繁的，删除$R_{k+1}$中那些非频繁的项集，从而得到中那些非频繁的项集，从而得到$C_{k+1}$。因为$C_{k+1}$中大小为且非频繁的所有子集不是大小为中大小为k且非频繁的所有子集不是大小为k+1的频繁项集的子集。</p><p>示例：</p><p>假设最小支持度为2</p><p>数据库D</p><table><thead><tr><th style="text-align:center">TID</th><th style="text-align:center">Items</th></tr></thead><tbody><tr><td style="text-align:center">100</td><td style="text-align:center">$1 \quad 3 \quad 4$</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">$2 \quad 3 \quad 5$</td></tr><tr><td style="text-align:center">300</td><td style="text-align:center">$1 \quad 2  \quad  3 \quad  5$</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">$2 \quad 5$</td></tr></tbody></table><p>$C_1$</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">{1}</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">{2}</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">{3}</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">{4}</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">{5}</td><td style="text-align:center">3</td></tr></tbody></table><p>$F_1$</p><table><thead><tr><th style="text-align:center">项集</th><th style="text-align:center">支持度</th></tr></thead><tbody><tr><td style="text-align:center">{1}</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">{2}</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">{3}</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">{5}</td><td style="text-align:center">3</td></tr></tbody></table><p>$C_2$</p><table><thead><tr><th style="text-align:center">项集</th><th style="text-align:center">支持度</th></tr></thead><tbody><tr><td style="text-align:center">{ 1, 2 }</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">{ 1, 3 }</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">{ 1, 5 }</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">{ 2, 3 }</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">{ 2, 5 }</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">{ 3, 5 }</td><td style="text-align:center">2</td></tr></tbody></table><p>$F_2$</p><table><thead><tr><th style="text-align:center">项集</th><th style="text-align:center">支持度</th></tr></thead><tbody><tr><td style="text-align:center">{ 1, 3 }</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">{ 2, 3 }</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">{ 2, 5 }</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">{ 3, 5 }</td><td style="text-align:center">2</td></tr></tbody></table><p>$C_3$</p><table><thead><tr><th style="text-align:center">项集</th><th style="text-align:center">支持度</th></tr></thead><tbody><tr><td style="text-align:center">{ 1 , 2 , 3 }</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">{ 1 , 2 , 5 }</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">{ 1 , 3 , 5 }</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">{ 2 , 3 , 5 }</td><td style="text-align:center">2</td></tr></tbody></table><p>$F_3$</p><table><thead><tr><th style="text-align:center">项集</th><th style="text-align:center">支持度</th></tr></thead><tbody><tr><td style="text-align:center">{ 2 , 3 , 5 }</td><td style="text-align:center">2</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关联分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的初始化块</title>
      <link href="/2018/08/23/java-initialization-block/"/>
      <url>/2018/08/23/java-initialization-block/</url>
      
        <content type="html"><![CDATA[<p>Java中的初始化代码块用一对<strong>花括号{}</strong>标明，初始化代码块在构造方法之前执行。</p><a id="more"></a><h3 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h3><p>一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello 初始化代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello 初始化代码块</span><br><span class="line">执行构造方法</span><br></pre></td></tr></table></figure><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>静态代码块用<strong>static{}</strong>来标明。静态代码块在普通代码块之前被调用，且仅在类初始化时，执行一次。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"执行普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"执行Main方法"</span>);</span><br><span class="line">        Main main1 = <span class="keyword">new</span> Main();</span><br><span class="line">        Main main2 = <span class="keyword">new</span> Main();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">执行静态代码块</span><br><span class="line">执行Main方法</span><br><span class="line">执行普通代码块</span><br><span class="line">执行构造方法</span><br><span class="line">执行普通代码块</span><br><span class="line">执行构造方法</span><br></pre></td></tr></table></figure><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>1.在没有继承关系的情况下，执行顺序为：<strong>静态代码块 (-&gt; Main方法) -&gt; 普通代码块 -&gt; 构造方法。</strong></p><p>2.若存在继承关系，以下面的代码为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Son son = <span class="keyword">new</span> Son();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"父类静态代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"父类普通代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Parent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"父类构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"子类静态代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">"子类普通代码块"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"子类构造器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父类静态代码块</span><br><span class="line">子类静态代码块</span><br><span class="line">父类普通代码块</span><br><span class="line">父类构造器</span><br><span class="line">子类普通代码块</span><br><span class="line">子类构造器</span><br></pre></td></tr></table></figure><p>从上面的例子可知，存在继承的情况下，执行顺序为：</p><p>父类静态代码块 -&gt; 子类静态代码块 -&gt; 父类普通代码块 -&gt;  父类构造方法 -&gt; 子类普通代码块 -&gt; 子类构造方法</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的Object类</title>
      <link href="/2018/08/22/java-object/"/>
      <url>/2018/08/22/java-object/</url>
      
        <content type="html"><![CDATA[<p>java.lang.Object是Java中所有类的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> Class&lt;?&gt; getClass();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">notifyAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout, <span class="keyword">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"timeout value is negative"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nanos &lt; <span class="number">0</span> || nanos &gt; <span class="number">999999</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">                                <span class="string">"nanosecond timeout value out of range"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            timeout++;</span><br><span class="line">        &#125;</span><br><span class="line">        wait(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        wait(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的枚举类型</title>
      <link href="/2018/08/20/java-enum/"/>
      <url>/2018/08/20/java-enum/</url>
      
        <content type="html"><![CDATA[<p>枚举类的主要作用是便捷地定义静态常量，替代public static final xxx。</p><p>所有的枚举类型都是java.lang.Enum类的子类，java.lang.Enum的类结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt; </span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><p>方法列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Enum <span class="title">valueOf</span><span class="params">(Class enumClass,String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>枚举类型的一个简单的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，上面定义了一个类，它只有七个实例，这些实例<strong>只能在其他代码之前定义</strong>，并以封号结束。</p><p>如果需要的话，可以在枚举类型中添加一些构造器、方法和域。不过，<strong>枚举类型只能包含私有构造</strong>，且构造器只在构造枚举常量的时候被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">    <span class="comment">//只能在其他代码之前定义</span></span><br><span class="line">    MONDAY(<span class="number">1</span>),TUESDAY(<span class="number">2</span>),WEDNESDAY(<span class="number">3</span>),</span><br><span class="line">    THURSDAY(<span class="number">4</span>),FRIDAY(<span class="number">5</span>),SATURDAY(<span class="number">6</span>),SUNDAY(<span class="number">7</span>); </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line">    <span class="comment">//只在构造枚举常量的时候被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Week</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="name"><a href="#name" class="headerlink" title="name()"></a>name()</h3><p>方法描述：返回枚举常量名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Week.MONDAY.name());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MONDAY</span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h3><p>方法描述：返回枚举常量名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Week.MONDAY.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MONDAY</span><br></pre></td></tr></table></figure><p>通过查看源码，可以看到，toString()方法返回的是name属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Enum <span class="title">valueOf</span><span class="params">(Class enumClass,String name)</span></span>;</span><br></pre></td></tr></table></figure><p>方法描述：返回指定名字、给定类的枚举常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Week week = Enum.valueOf(Week.class,<span class="string">"FRIDAY"</span>);</span><br><span class="line">        System.out.println(week);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FRIDAY</span><br></pre></td></tr></table></figure><h3 id="ordinal"><a href="#ordinal" class="headerlink" title="ordinal()"></a>ordinal()</h3><p>方法描述：返回枚举常量在enum中声明的位置，位置从0开始计数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(Week.THURSDAY.ordinal());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>正如这个方法注释中描述的那样，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Most programmers will have no use for this method. </span><br><span class="line">It is designed for use by sophisticated enum-based data structures,</span><br><span class="line">such as java.util.EnumSet and java.util.EnumMap.</span><br></pre></td></tr></table></figure><p>大多数程序员<strong>用不到这个方法</strong>，它是为EnumSet和EnumMap这些基于枚举的复杂数据结构设计的。</p><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><p>每个枚举类都有一个静态方法values()，它返回一个包含全部枚举值的数组。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Week &#123;</span><br><span class="line">MONDAY(<span class="number">1</span>),TUESDAY(<span class="number">2</span>),WEDNESDAY(<span class="number">3</span>),</span><br><span class="line">    THURSDAY(<span class="number">4</span>),FRIDAY(<span class="number">5</span>),SATURDAY(<span class="number">6</span>),SUNDAY(<span class="number">7</span>);</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Week</span><span class="params">(<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.day = day;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Week[] weeks = Week.values();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span>(Week week : weeks) &#123;            </span><br><span class="line">        sb.append(week.getDay()+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="equals-和"><a href="#equals-和" class="headerlink" title="equals()和=="></a>equals()和==</h3><p>在比较两个枚举类型的值时，不需要调用equals，可以直接使用“==”。</p><p>查看源码，可以知道，Enum类的equals也是直接使用的”==”来比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之局部加权线性回归</title>
      <link href="/2018/08/17/machine-learning-locally-weighted-linear-regression/"/>
      <url>/2018/08/17/machine-learning-locally-weighted-linear-regression/</url>
      
        <content type="html"><![CDATA[<p>局部加权线性回归（Locally Weighted Linear Regression，LWLR）。</p><p>在该算法中，给预测点附近的每个点赋予一定的权重，在这个子集上基于最小均方差来进行普通的回归。</p><p>局部加权线性回归的均值误差可用下式表示<br>$$<br>\sum_{i=1}^{m} w_i (y_i - x_i^{T} \theta_i)^2<br>$$<br>其中，$w_i$是权重，$y_i$是真实值，$x_i$是输入值，$\theta_i$为对应的回归系数。</p><p>回归系数$w$为<br>$$<br>\hat w = (X^{T} W X )^{-1} X^{T} W y<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之线性回归</title>
      <link href="/2018/08/17/machine-learning-linear-regression/"/>
      <url>/2018/08/17/machine-learning-linear-regression/</url>
      
        <content type="html"><![CDATA[<p>线性回归（linear regression），就是将输入项分别乘以一些常量，再将结果加起来得到预测值，而这些常量称之为回归系数。</p><p>线性回归可以用如下的等式来表示：<br>$$<br>Y = X^{T} w<br>$$<br>其中，$Y$为预测值，$X$为输入值，$w$是一个包含回归系数的向量</p><a id="more"></a><p>已知$X$和对应的$Y$，怎么才能找到$w$呢？一个常用的方法就是找出使误差最小的$w$。这里的误差是指预测Y值和真实Y值之间的差值，使用该误差的简单累加将使得正差值和负差值相互抵消，为了避免这种情况，可以使用平方误差。</p><p>平方误差可写为：<br>$$<br>\sum_{i=1}^{m} (y_i - x_i ^{T} w) ^2<br>$$<br>若用矩阵表示，则可写为：<br>$$<br>(Y - X w)^{T} (Y - Xw)<br>$$<br>令<br>$$<br>\begin{align}<br>f(w) &amp;= (Y - X w)^{T} (Y - Xw) \\<br>&amp;= Y^{T} Y - Y^{T} X w - w^{T} X^{T} Y + w^{T} X^{T} X w \\<br>\end{align}<br>$$<br>f(w) 对$w$求导，得到<br>$$<br>\begin{align}<br>\frac{\partial f(w)}{\partial w} &amp;= \frac{\partial (Y^{T} Y)} {\partial w} - \frac{\partial ( Y^{T} X w)} {\partial w} - \frac{\partial (w^{T} X^{T} Y)} {\partial w} + \frac{\partial (w^{T} X^{T} X w )} {\partial w} \\<br>&amp;= 0 - X^{T} Y -  X^{T} Y + 2 X^{T} X w \\<br>&amp;= 2 X^{T} (Xw - Y)<br>\end{align}<br>$$<br>令$\frac{\partial f(w)}{\partial w} = 0$，则<br>$$<br>X^{T} (X w - Y) = 0 \\<br>=&gt; X^{T} X w = X^{T} Y \\<br>$$<br>两边左乘$(X^{T}X)^{-1}$，得<br>$$<br>\hat w = (X^{T} X )^{-1} X^{T} Y<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵求导</title>
      <link href="/2018/08/17/matrix-derivative/"/>
      <url>/2018/08/17/matrix-derivative/</url>
      
        <content type="html"><![CDATA[<p>最近在学习机器学习的时候，经常会碰到矩阵求导，这里记录下矩阵的求导操作。</p><p>向量和矩阵的导数满足乘法法则（product rule）<br>$$<br>\frac {\partial x^{T} \alpha}{ \partial x } = \frac {\partial \alpha^{T} x }{ \partial x } = \alpha<br>$$</p><p>$$<br>\frac {\partial AB} {\alpha x} = \frac{\partial A} {\partial x} B + A \frac{\partial B} {\partial x}<br>$$</p><a id="more"></a><p>由于$A^{-1} A = I$和上式，逆矩阵的导数可表示为<br>$$<br>\frac {\partial A^{-1} } {\partial x} = - A^{-1} \frac {\partial A} {\partial x} A^{-1}<br>$$<br>证明：<br>$$<br>\begin{align}<br>\frac{\partial I} {\partial x} &amp;= \frac{\partial A^{-1} A} {\partial x} \\<br>&amp;= \frac{\partial A} {\partial x} A^{-1} + A \frac{\partial  A^{-1} } {\partial x} \\<br>&amp;= 0<br>\end{align}<br>$$<br>从而，<br>$$<br>\begin{align}<br>&amp;=&gt; -A \frac{\partial  A^{-1} } {\partial x} =  \frac{\partial A} {\partial x} A^{-1} \\<br>&amp;=&gt;  \frac{\partial A^{-1}} {\partial x} =  -A^{-1} \frac{\partial  A } {\partial x} A^{-1}<br>\end{align}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之ssh和scp命令</title>
      <link href="/2018/08/17/linux-command-ssh-and-scp/"/>
      <url>/2018/08/17/linux-command-ssh-and-scp/</url>
      
        <content type="html"><![CDATA[<p>前面我们讲了如何在Windows系统中登录Linux服务器，以及实现windows和Linux之间的文件传输操作。今天我们来讲下在Linux系统（如ubuntu）中如何登录Linux服务器及实现文件传输。</p><p>Linux中使用<strong>ssh命令</strong>登录其他的Linux，使用<strong>scp命令</strong>实现文件传输。</p><a id="more"></a><h3 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h3><p>ssh，全称Secure Shell，是一种用于远程登录的协议。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@IP地址</span><br></pre></td></tr></table></figure><p>示例：</p><p>这里以root用户和 IP 地址118.190.95.35（从网上随便找的一个IP）为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@118.190.95.35</span><br></pre></td></tr></table></figure><h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><p>scp，全称secure copy，用于Linux之间复制文件和目录。</p><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [options] 源文件路径 目标路径</span><br></pre></td></tr></table></figure><p>参数:</p><ul><li>-r：递归复制目录下的所有文件，包括目录本身</li></ul><p>示例：</p><ul><li>从本地上传文件到服务器</li></ul><p>将本地的/home/hegongshan/Desktop/robots.txt文件上传到服务器118.190.95.35的/usr/local/tomcat/目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp /home/hegongshan/Desktop/xxx.txt root@118.190.95.35:/usr/local/tomcat/</span><br></pre></td></tr></table></figure><ul><li>从服务器下载文件</li></ul><p>从118.190.95.35将/usr/local/tomcat/webapps/ROOT.war下载到本机的/home/hegongshan/Desktop/目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@118.190.95.35:/usr/local/tomcat/webapps/ROOT.war /home/hegongshan/Desktop/</span><br></pre></td></tr></table></figure><ul><li>从服务器复制目录（文件夹）</li></ul><p>从118.190.95.35将/usr/local/tomcat/webapps/ROOT复制到本机的/home/hegongshan/Desktop/目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r root@118.190.95.35:/usr/local/tomcat/webapps/ROOT /home/hegongshan/Desktop/</span><br></pre></td></tr></table></figure><p>结果将是在/home/hegongshan/Desktop/下有一个ROOT文件夹。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PuTTY实现Windows和Linux的文件传输</title>
      <link href="/2018/08/17/putty-file-upload-and-download/"/>
      <url>/2018/08/17/putty-file-upload-and-download/</url>
      
        <content type="html"><![CDATA[<p>安装完PuTTY以后，进入命令行界面，就可以使用PuTTY的<strong>pscp命令</strong>进行文件传输。</p><h3 id="pscp"><a href="#pscp" class="headerlink" title="pscp"></a>pscp</h3><p>语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pscp 源文件路径 目标文件路径</span><br></pre></td></tr></table></figure><a id="more"></a><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pscp root@111.199.227.74:/mnt/files/abc.txt D:/file/</span><br></pre></td></tr></table></figure><p>值得一提的是，pscp命令只能用于<strong>文件</strong>的上传下载，若要进行<strong>文件夹（目录）</strong>的上传下载，可以先压缩，然后再使用pscp命令进行文件传输。</p><p>若命令行中显示找不到pscp命令，只需将PuTTY的安装路径添加到系统变量Path中即可。</p>]]></content>
      
      
      <categories>
          
          <category> putty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> putty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PuTTY远程登录Linux服务器</title>
      <link href="/2018/08/16/putty-ssh/"/>
      <url>/2018/08/16/putty-ssh/</url>
      
        <content type="html"><![CDATA[<p>使用PuTTY已经很长时间了，是时候总结下PuTTY的用法了。</p><ul><li>什么是PuTTY?</li></ul><p>下面是PuTTY官网的介绍</p><p>PuTTY is an SSH and telnet client, developed originally by Simon Tatham for the Windows platform. </p><p>翻译过来就是说，PuTTY是Windows平台下的一个SSH客户端。</p><ul><li>为什么要使用PuTTY？</li></ul><p>与商用的XShell相比，PuTTY是开源免费的&gt;_&lt;。</p><a id="more"></a><h3 id="安装PuTTY"><a href="#安装PuTTY" class="headerlink" title="安装PuTTY"></a>安装PuTTY</h3><p>从<a href="https://www.putty.org" target="_blank" rel="noopener">PuTTY官网</a>下载合适的版本，目前的最新稳定版本是0.70。</p><p>成功安装后目录结构如下，我的安装路径为G:\putty</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816183626.png" alt=""></p><h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><p>双击putty.exe，将会显示如下界面</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184134.png" alt=""></p><p>在Host Name(or IP address)，也就是下图中红框标明的地方，输入远程Linux服务器的IP地址</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184446.png" alt=""></p><p>然后点击Open按钮，将会显示如下界面。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816184906.png" alt=""></p><p>在login as：后输入用户名</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185216.png" alt=""></p><p>按照要求输入密码即可登录，值得一提的是，密码是不会显示的，这也很符合Linux设计的哲学。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816185506.png" alt=""></p><h3 id="小经验"><a href="#小经验" class="headerlink" title="小经验"></a>小经验</h3><p>刚才那样的登录，每次都需要输入服务器IP地址，实际上，PuTTY提供了保存IP地址，下次自动导入的功能。</p><p>第一次登录时，输入IP地址，在Saved Sessions下的输入框中输入想保存的名字，然后点击Save按钮（图中用红框标明）。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190008.png" alt=""></p><p>这里以127.0.0.1为例，设置session的名字为server，点击Save按钮，Default Settings下出现了一个server</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/16/20180816190808.png" alt=""></p><p>下一次登录时，只需要选择server，然后点击Load按钮，IP地址将会被自动导入。</p><p>如果不想再保存该IP地址了，则选中session的名字，然后点击Delete按钮即可删除存储的session。</p>]]></content>
      
      
      <categories>
          
          <category> putty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> putty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的定时器Timer</title>
      <link href="/2018/08/02/java-timer/"/>
      <url>/2018/08/02/java-timer/</url>
      
        <content type="html"><![CDATA[<p>在Java中，定时任务功能使用的是Timer类，其主要作用是设置计划任务，</p><p>最近课题组的项目用到了Java中的定时器Timer类，这里记录下定时器Timer的相关知识。</p><p>Timer的构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">(<span class="keyword">boolean</span> isDaemon)</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">(String name, <span class="keyword">boolean</span> isDaemon)</span></span></span><br></pre></td></tr></table></figure><a id="more"></a><p>方法列表如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, <span class="keyword">long</span> delay)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, Date time)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, <span class="keyword">long</span> delay, <span class="keyword">long</span> period)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">schedule</span><span class="params">(TimerTask task, Date firstTime, <span class="keyword">long</span> period)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleAtFixedRate</span><span class="params">(TimerTask task, <span class="keyword">long</span> delay, <span class="keyword">long</span> period)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleAtFixedRate</span><span class="params">(TimerTask task, Date firstTime,<span class="keyword">long</span> period)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">purge</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>但封装任务的类却是TimerTask类，类结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br></pre></td></tr></table></figure><h3 id="schedule-TimerTask-task-Date-time"><a href="#schedule-TimerTask-task-Date-time" class="headerlink" title="schedule(TimerTask task, Date time)"></a>schedule(TimerTask task, Date time)</h3><p>执行任务的时间晚于当前时间，即任务在未来执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Timer;</span><br><span class="line"><span class="keyword">import</span> java.util.TimerTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimerDemo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"成功执行！时间："</span>+Date.from(Instant.now()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">String taskTime = <span class="string">"2018-08-06 20:03:30"</span>;</span><br><span class="line">System.out.println(<span class="string">"计划执行任务时间："</span> + taskTime);</span><br><span class="line">Task task = <span class="keyword">new</span> Task();</span><br><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">System.out.println(<span class="string">"当前时间："</span> + sdf.format(Date.from(Instant.now())));</span><br><span class="line">timer.schedule(task, sdf.parse(taskTime));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/08/06/20180806200425.png" alt=""></p><p>可以看到，任务虽然执行完了，但进程并未销毁。这是为什么呢？</p><p>我们先来看下Timer的无参构造，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="string">"Timer-"</span> + serialNumber());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其内部调用的是如下构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    thread.setName(name);</span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源代码可以得知，创建一个Timer就是启动一个新线程，这个新启动的线程并不是守护进程，它一直在运行。如果需要Timer执行完任务就结束，可以使用如下构造方法，并将参数isDaemon设置为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Timer</span><span class="params">(<span class="keyword">boolean</span> isDaemon)</span></span></span><br></pre></td></tr></table></figure><h3 id="schedule-TimerTask-task-long-delay-long-period"><a href="#schedule-TimerTask-task-long-delay-long-period" class="headerlink" title="schedule(TimerTask task, long delay, long period)"></a>schedule(TimerTask task, long delay, long period)</h3><p>作用：以执行该方法的当前时间作为参考时间，在此基础上延迟指定的毫秒数，再以指定的时间间隔无限次执行某一任务。</p><h3 id="cancel"><a href="#cancel" class="headerlink" title="cancel()"></a>cancel()</h3><p>作用：将任务队列中的全部任务清空。</p><p>（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之AdaBoost</title>
      <link href="/2018/08/02/machine-learning-adaboost/"/>
      <url>/2018/08/02/machine-learning-adaboost/</url>
      
        <content type="html"><![CDATA[<p>AdaBoost（adaptive boosting）算法是提升（boosting）方法的一个最流行版本，1995年由Freund和Schapire提出。其基本思想是使用多个弱分类器（即分类器的性能并不好，错误率较高）来构建一个强分类器。</p><a id="more"></a><h3 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h3><p>训练数据集中的每个样本，并赋予其一个权重，这些权重构成了向量D。一开始，这些权重都初始化成相等值。首先在训练数据集上训练出一个弱分类器并计算该分类器的错误率，然后在同一数据集上再次训练弱分类器。在分类器的第二次训练中，将会重新调整每个样本的权重，其中第一次分对的样本的权重将会降低，而第一次分错的样本的权重将会提高。为了从所有弱分类器中得到最终的分类结果，AdaBoost为每个分类器都分配了一个权重值$\alpha$，这些$\alpha$值是基于每个若分类器的错误率进行计算的。</p><p>错误率$\epsilon$的定义如下：<br>$$<br>\epsilon = \frac{未正确分类的样本数目}{所有样本数目}<br>$$<br>$\alpha$的计算公式如下：<br>$$<br>\alpha = \frac{1}{2} \ln (\frac{1-\epsilon}{\epsilon})<br>$$<br>计算出$\alpha$值后，需要更新权重向量D，以使得那些正确分类的样本的权重降低而错分样本的权重升高。</p><p>D的计算方法如下：<br>$$<br>D_{i} ^{ ( t+1) } =<br>\begin{cases}<br>\frac { D_{i} ^{ (t) } e^{-\alpha} } { sum(D) }, &amp; i分类正确 \\<br>\frac{ D_{i} ^{ (t) } e^{\alpha} }{ sum(D) }, &amp; i分类错误<br>\end{cases}<br>$$<br>在计算出D之后，AdaBoost又开始进入下一轮迭代。AdaBoost算法会不断地重复训练分类器和调整权重的过程，直到训练错误率为0或者弱分类器的数目达到用户的指定值为止。</p><p>$\alpha$作为每个分类器分类结果$G_{m}(x)$的权重，对所有分类器的加权分类结果进行累加求和，<br>$$<br>f(x) = \sum_{m=1}^{N} \alpha_{m} G_{m}(x)<br>$$<br>从而得到最终的分类器</p><p>$$<br>G(x) = sign(f(x)) = sign( \sum_{m=1}^{N} \alpha_{m} G_{m}(x) )<br>$$</p><h3 id="AdaBoost的例子"><a href="#AdaBoost的例子" class="headerlink" title="AdaBoost的例子"></a>AdaBoost的例子</h3><table><thead><tr><th style="text-align:center">序号</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th>10</th></tr></thead><tbody><tr><td style="text-align:center">x</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">4</td><td style="text-align:center">5</td><td style="text-align:center">6</td><td style="text-align:center">7</td><td style="text-align:center">8</td><td>9</td></tr><tr><td style="text-align:center">y</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">-1</td><td style="text-align:center">-1</td><td style="text-align:center">-1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td>-1</td></tr></tbody></table><p>可选的阈值有2.5，5.5和8.5</p><p>若阈值为2.5，则7、8、9分类错误，分类错误率为$e = \frac {3}{10}$</p><p>若阈值为5.5，</p><p>a.<br>$$<br>G(x) =<br>\begin{cases}<br>1, &amp; x &lt; 5.5 \\<br>-1, &amp; x &gt; 5.5<br>\end{cases}<br>$$<br>此时，4、5、６以及7、８、９分类错误，分类误差率为$e = \frac {6}{10}$</p><p>b.<br>$$<br>G(x) =<br>\begin{cases}<br>1, &amp; x &gt; 5.5 \\<br>-1, &amp; x &lt; 5.5<br>\end{cases}<br>$$<br>此时，1、2、3和10分类错误，分类误差率为$e = \frac {4} {10}$</p><p>因此，最低误差率为0.4</p><p>若阈值为8.5，</p><p>a.<br>$$<br>G(x) =<br>\begin{cases}<br>1, &amp; x &lt; 8.5 \\<br>-1, &amp; x &gt; 8.5<br>\end{cases}<br>$$<br>此时，4、5、6分类错误，分类误差率为$e = \frac {3} {10}$</p><p>可以看到当阈值为2.5或8.5时，分类误差率最低，因此，我们可任取其中一个阈值，比如2.5。</p><p>基本分类器<br>$$<br>G(x) =<br>\begin{cases}<br>1, &amp; x &lt; 2.5 \\<br>-1, &amp; x &gt; 2.5<br>\end{cases}<br>$$</p><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>我们可以选择任一分类器作为AdaBoost算法的弱分类器，这里选择单层决策树（decision stump）作为弱分类器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">基于单层决策树的AdaBoost分类器</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdaBoost</span><span class="params">()</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(self,filename)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        从文件中导入数据集</span></span><br><span class="line"><span class="string">        filename : 文件名</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dataMat = []</span><br><span class="line">        labelMat = []</span><br><span class="line">        <span class="keyword">with</span> open(filename) <span class="keyword">as</span> file:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> file.readlines():</span><br><span class="line">                numFeature = len(line.split(<span class="string">'\t'</span>))</span><br><span class="line">                lineArr = []</span><br><span class="line">                currentLine = line.strip().split(<span class="string">"\t"</span>)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(numFeature<span class="number">-1</span>):</span><br><span class="line">                    lineArr.append(float(currentLine[i]))</span><br><span class="line">                dataMat.append(lineArr)</span><br><span class="line">                labelMat.append(float(currentLine[<span class="number">-1</span>]))</span><br><span class="line">        <span class="keyword">return</span> dataMat,labelMat</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_stumpClassify</span><span class="params">(self,dataMatrix,dimension,threshold,thresholdInequality)</span>:</span></span><br><span class="line">        arr = np.ones((np.shape(dataMatrix)[<span class="number">0</span>],<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">if</span> thresholdInequality == <span class="string">'lt'</span>:</span><br><span class="line">            arr[dataMatrix[:,dimension] &lt;= threshold] = <span class="number">-1.0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            arr[dataMatrix[:,dimension] &gt; threshold] = <span class="number">-1.0</span></span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_buildStump</span><span class="params">(self,dataArr,classLabels,D)</span>:</span></span><br><span class="line">        dataMatrix = np.mat(dataArr)</span><br><span class="line">        labelMat = np.mat(classLabels).T</span><br><span class="line">        m,n = np.shape(dataMatrix)</span><br><span class="line">        numSteps = <span class="number">10.0</span></span><br><span class="line">        bestStump = &#123;&#125;</span><br><span class="line">        bestClassEst = np.mat(np.zeros((m,<span class="number">1</span>)))</span><br><span class="line">        minError = np.inf</span><br><span class="line">        <span class="comment"># 遍历每一个特征</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            rangeMin = dataMatrix[:,i].min()</span><br><span class="line">            rangeMax = dataMatrix[:,i].max()</span><br><span class="line">            stepSize = (rangeMax-rangeMin)/numSteps</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">-1</span>,int(numSteps)+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">for</span> inequal <span class="keyword">in</span> [<span class="string">'lt'</span>,<span class="string">'gt'</span>]:</span><br><span class="line">                    threshold = (rangeMin + float(j) * stepSize)</span><br><span class="line">                    predictedVals = self._stumpClassify(dataMatrix,i,threshold,inequal)</span><br><span class="line">                    errArr = np.mat(np.ones((m,<span class="number">1</span>)))</span><br><span class="line">                    errArr[predictedVals == labelMat] = <span class="number">0</span></span><br><span class="line">                    weightedError = D.T * errArr</span><br><span class="line">                    <span class="keyword">if</span> weightedError &lt; minError:</span><br><span class="line">                        minError = weightedError</span><br><span class="line">                        bestClassEst = predictedVals.copy()</span><br><span class="line">                        bestStump[<span class="string">'dimension'</span>] = i</span><br><span class="line">                        bestStump[<span class="string">'threshold'</span>] = threshold</span><br><span class="line">                        bestStump[<span class="string">'inequal'</span>] = inequal</span><br><span class="line">        <span class="keyword">return</span> bestStump,minError,bestClassEst</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adaBoostTrainDS</span><span class="params">(self,dataArr,classLabels,numIter=<span class="number">40</span>)</span>:</span></span><br><span class="line">        <span class="string">"""AdaBoost训练过程"""</span></span><br><span class="line">        weakClassArr = []</span><br><span class="line">        m = np.shape(dataArr)[<span class="number">0</span>]</span><br><span class="line">        D = np.mat(np.ones((m,<span class="number">1</span>))/m)</span><br><span class="line">        aggClassEst = np.mat(np.zeros((m,<span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numIter):</span><br><span class="line">            bestStump,error,classEst = self._buildStump(dataArr, classLabels, D)</span><br><span class="line">            print(<span class="string">"D:"</span>,D.T)</span><br><span class="line">            alpha = float(<span class="number">0.5</span>*np.log((<span class="number">1.0</span>-error)/max(error,<span class="number">1e-16</span>)))</span><br><span class="line">            bestStump[<span class="string">'alpha'</span>] = alpha</span><br><span class="line">            weakClassArr.append(bestStump)</span><br><span class="line">            print(<span class="string">"classEst:"</span>,classEst.T)</span><br><span class="line">            expon = np.multiply(<span class="number">-1</span>*alpha*np.mat(classLabels).T,classEst)</span><br><span class="line">            D = np.multiply(D,np.exp(expon))</span><br><span class="line">            D = D/D.sum()</span><br><span class="line">            aggClassEst += alpha*classEst</span><br><span class="line">            print(<span class="string">"aggClassEst:"</span>,aggClassEst.T)</span><br><span class="line">            aggErrors = np.multiply(np.sign(aggClassEst) != np.mat(classLabels).T,np.ones((m,<span class="number">1</span>)))</span><br><span class="line">            errorRate = aggErrors.sum()/m</span><br><span class="line">            print(<span class="string">"total error:"</span>,errorRate,<span class="string">"\n"</span>)</span><br><span class="line">            <span class="keyword">if</span> errorRate == <span class="number">0.0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> weakClassArr,aggClassEst</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adaClassify</span><span class="params">(self,dataToClass,classifierArr)</span>:</span></span><br><span class="line">        <span class="string">"""AdaBoost分类函数"""</span></span><br><span class="line">        dataMatrix = np.mat(dataToClass)</span><br><span class="line">        m = np.shape(dataMatrix)[<span class="number">0</span>]</span><br><span class="line">        aggClassEstimate = np.mat(np.zeros((m,<span class="number">1</span>)))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(classifierArr)):</span><br><span class="line">            classEstimate = self.stumpClassify(dataMatrix, </span><br><span class="line">                                          classifierArr[i][<span class="string">'dimension'</span>],</span><br><span class="line">                                          classifierArr[i][<span class="string">'threshold'</span>],</span><br><span class="line">                                          classifierArr[i][<span class="string">'inequal'</span>])</span><br><span class="line">            aggClassEstimate += classifierArr[i][<span class="string">'alpha'</span>] * classEstimate</span><br><span class="line">            print(aggClassEstimate)</span><br><span class="line">        <span class="keyword">return</span> np.sign(aggClassEstimate)</span><br></pre></td></tr></table></figure><p>(未完待续)</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列最小最优化算法SMO</title>
      <link href="/2018/07/28/machine-learning-svm-smo/"/>
      <url>/2018/07/28/machine-learning-svm-smo/</url>
      
        <content type="html"><![CDATA[<p>如何高效地实现支持向量机学习呢？常用的是1998年Platt提出的序列最小最优化算法(Sequential minimal optimization，SMO)算法。</p><p>SMO算法要解的是如下的一个最优化问题：<br>$$<br>\min_{\alpha} \left( \frac{1}{2} \sum_{i=1}^N \sum_{j=1}^N \alpha_i \alpha_j y_i y_j K(x_i,x_j) - \sum_{i=1}^N \alpha_i\right) \tag{1}<br>$$</p><p>$$<br>subject \; to \sum_{i=1}^N \alpha_i y_i = 0, \tag{2}<br>$$</p><p>$$<br>0 \leq \alpha_i \leq C, \forall i \tag{3}<br>$$</p><p>整个SMO算法包括两个部分：求解两个变量二次规划的解析方法和选择变量的启发式方法。</p><a id="more"></a><h3 id="两个变量二次规划的求解方法"><a href="#两个变量二次规划的求解方法" class="headerlink" title="两个变量二次规划的求解方法"></a>两个变量二次规划的求解方法</h3><p>假设选择的两个变量是$\alpha_1,\alpha_2$，其他变量$\alpha_i (i=3,4,\dots,N)$是固定的。因此，上面的最优化问题(1)~(3)的子问题可写为<br>$$<br>\min_{\alpha_1,\alpha_2} G(\alpha_1,\alpha_2) = \frac{1}{2} K_{11} \alpha_1^2 + \frac{1}{2} K_{22} \alpha_2^2 + y_1 y_2 K_{12} \alpha_1 \alpha_2 - (\alpha_1 + \alpha_2) + \\<br>y_1 \alpha_1 \sum_{i=3}^{N} y_i \alpha_i K_{i1} + y_2 \alpha_2 \sum_{i=3}^{N} y_i \alpha_i K_{i2} \tag{4}<br>$$</p><p>$$<br>subject \; to \; \alpha_1 y_1 + \alpha_2 y_2 = - \sum_{i=3}^{N} y_i \alpha_i = \beta, \tag{5}<br>$$</p><p>$$<br>0 \leq \alpha_i \leq C, \forall i \tag{6}<br>$$</p><p>其中，$K_{ij} = K(x_i,x_j) ,i,j = 1,2, \dots ,N$，（４）中省略了不含$\alpha_1,\alpha_2$的常数项。</p><p>由于只有两个变量$(\alpha_1,\alpha_2)$，约束可以用二维空间中的图形表示。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/07/28/20180728202502.png" alt=""></p><p>不等式约束（6）使得$（\alpha_1,\alpha_2）$在区域 [0, C] x [0, C] 内，等式约束（５）使得$（\alpha_1,\alpha_2）$在平行于区域 [0, C] x [0, C] 的对角线的直线上。因此要求的是目标函数在一条平行于对角线的线段上的最优值。这使得两个变量的最优化问题成为实质上的单变量的最优化问题，不妨考虑为变量$\alpha_2$的最优化问题。</p><p>假设问题（４）～（６）的初始可行解为$\alpha_1,\alpha_2$，最优解为$\alpha_1^{new},\alpha_2^{new}$，沿着约束方向经剪辑后$\alpha_2$的最优解为$\alpha_2^{new,clipped}$。</p><p>由于$\alpha_2^{new}$满足不等式约束（５），所以最优值$\alpha_2^{new}$的取值范围必须满足条件<br>$$<br>L \leq \alpha_2^{new} \leq H<br>$$<br>其中，L与H分别是$\alpha_2^{new}$所在的对角线段端点的下、上界。</p><p>如果$y_1 \neq y_2$ ，则<br>$$<br>L = \max (0, \alpha_2 - \alpha_1)，H = \min ( C, C + \alpha_2 - \alpha_1  ) \tag{7}<br>$$<br>如果$y_i = y_2$，则<br>$$<br>L = \max (0, \alpha_2 + \alpha_1 - C)，H = \min ( C,  \alpha_2 + \alpha_1  ) \tag{8}<br>$$<br> 记<br>$$<br>w(x) = \sum_{i=1}^{N} \alpha_i y_i K(x_i,x) + b \tag{9}<br>$$<br>令<br>$$<br>E_i = w(x_i) - y_i = \left (   \sum_{i=1}^{N} \alpha_i y_i K(x_i,x) + b \right) - y_i, i = 1,2, \tag{10}<br>$$<br>当i = 1, 2时，$E_i$为函数w(x)对输入$x_i$的预测值与真实输出$y_i$之间的误差。</p><p>由<br>$$<br>\alpha_1 y_1 + \alpha_2 y_2 = \beta　及 　y_i^2 = 1<br>$$<br>$\alpha_1$可表示为<br>$$<br>\alpha_1 = ( \beta - y_2 \alpha_2 ) y_1 \tag{11}<br>$$<br>代入（４）中，得到仅含$\alpha_2$的目标函数：<br>$$<br>G(\alpha_2) = \frac{1}{2} K_{11} ( \beta - y_2 \alpha_2 )^2 + \frac{1}{2} K_{22} \alpha_2^2 + y_2 K_{12} ( \beta - y_2 \alpha_2 ) \alpha_2 -  ( \beta - y_2 \alpha_2 )y_1 - \alpha_2 + \\<br>( \beta - y_2 \alpha_2 ) \sum_{i=3}^{N} y_i \alpha_i K_{i1} + y_2 \alpha_2 \sum_{i=3}^{N} y_i \alpha_i K_{i2}<br>$$<br>对$\alpha_2$求导数，并令其为 0<br>$$<br>\frac {\partial G} {\partial \alpha_2}  = K_{11}( \alpha_2 - \beta y_2) + K_{22} \alpha_2 + y_2 K_{12} (\beta - 2 y_2 \alpha_2) + \\<br>y_1 y_2 -1 -  y_2 \sum_{i=3}^{N} y_i \alpha_i K_{i1} + y_2 \sum_{i=3}^{N} y_i \alpha_i K_{i2} = 0<br>$$</p><p>$$<br>\begin{align}<br>=&gt; ( K_{11} +K_{22} -2 K_{12} ) \alpha_2 &amp;= y_2 ( y_2 - y_1 + \beta K_{11} - \beta K_{12} + \sum_{i=3}^{N} y_i \alpha_i K_{i1} - \sum_{i=3}^{N} y_i \alpha_i K_{i2} ) \\<br>&amp;= y_2 [ y_2 - y_1 + \beta K_{11} - \beta K_{12} + \left(  w(x_1) - \sum_{j=1}^{2} y_j \alpha_j K_{1j}  - b \right) \\<br>&amp; - \left(  w(x_2) - \sum_{j=1}^{2} y_j \alpha_j K_{2j} - b \right) ]<br>\end{align}<br>$$</p><p>将$\beta = \alpha_1 y_1 + \alpha_2 y_2 $代入，得到<br>$$<br>\begin{align}<br>( K_{11} +K_{22} -2 K_{12} ) \alpha_2^{new} &amp;= y_2 \left ( y_2 - y_1 + (\alpha_1 y_1 + \alpha_2 y_2) K_{11} - (\alpha_1 y_1 + \alpha_2 y_2) K_{12} + \\<br>w(x_1) - w(x_2) \tag {12}  - y_1 \alpha_1 K_{11} - y_2 \alpha_2 K_{12} + y_1 \alpha_1 K_{21} + y_2 \alpha_2 K_{22} \right) \\<br>&amp; = y_2 \left( E_1 - E_2 + \alpha_2 y_2 (K_{11} - 2 K_{12} + K_{22}) \right) \\<br>&amp; = \alpha_2 (K_{11} - 2 K_{12} + K_{22}) + y_2(E_1 - E_2)<br>\end{align}<br>$$<br>令<br>$$<br>\eta = K_{11} - 2 K_{12} + K_{22} \tag{13}<br>$$<br>将$\eta$代入（１２）<br>$$<br>\eta \alpha_2^{new} = \alpha_2 \eta + y_2 (E_1 - E_2) \\<br>=&gt; \alpha_2^{new} = \alpha_2 + \frac {y_2 (E_1 - E_2)}{\eta} \tag {14}<br>$$<br>要将$\alpha_2^{new}$限制在区间[L, H]中 ，则<br>$$<br>\alpha_2^{new,clipped} =<br>\begin{cases}<br>H, &amp; \alpha_2^{new} &gt; H \\<br>\alpha_2^{new}, &amp; L \leq \alpha_2^{new} \leq H \\<br>L, &amp;  \alpha_2^{new} &lt; L<br>\end{cases} \tag {15}<br>$$<br>由式（５）可得<br>$$<br>\alpha_1 y_1 + \alpha_2 y_2 = \alpha_1^{new} y_1 + \alpha_2^{new,clipped} y_2<br>$$<br>两边同乘以$y_1$，得<br>$$<br>\alpha_1 + \alpha_2 y_1 y_2 = \alpha_1^{new} + \alpha_2^{new,clipped} y_1 y_2<br>$$<br>从而，<br>$$<br>\alpha_1^{new} = \alpha_1 + y_1 y_2 ( \alpha_2^{new,clipped} - \alpha_2)　\tag{16}<br>$$<br>故，最优化问题（４）～（６）的解为$（\alpha_1^{new},\alpha_2^{new,clipped}）$</p><p>（未完待续。。。）</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MathJax语法</title>
      <link href="/2018/07/16/mathjax-tutorial/"/>
      <url>/2018/07/16/mathjax-tutorial/</url>
      
        <content type="html"><![CDATA[<p>如何在网页中便捷地输入数学公式呢？MathJax就是一个不错的选择。</p><p>使用<code>$</code>或者<code>$$</code>来标明需要MathJax解析的公式。<code>$</code>表示行内公式，而<code>$$</code>表示的数学公式会独占一行，如</p><p><code>$y=ax+b$</code>： $y=ax+b$</p><p><code>$$y=ax+b$$</code>：<br>$$<br>y=ax+b<br>$$</p><a id="more"></a><h4 id="输入分数"><a href="#输入分数" class="headerlink" title="输入分数"></a>输入分数</h4><p>示例：<code>$\frac{1}{3}$</code> 或者　<code>$1 \over 3$</code></p><p>显示：$\frac{1}{3}$</p><h4 id="开根号"><a href="#开根号" class="headerlink" title="开根号"></a>开根号</h4><p>示例：<code>$\sqrt{3}$</code> 或者 <code>$\sqrt[n]{3}$</code></p><p>显示：$\sqrt{3}$、$\sqrt[n]{3}$</p><h4 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h4><p>^表示上标，_表示下标。如果上下标的内容多于一个字符，则需要用{ }括起来。</p><p>示例：<code>$e^2$</code>、<code>$e^{ax+b}$</code>、</p><p>显示：$e^2$、$e^{ax+b}$</p><h4 id="对数"><a href="#对数" class="headerlink" title="对数"></a>对数</h4><ul><li>普通对数：<code>$\log_2{8}$</code> =&gt; $\log_2{8}$</li><li>自然对数：<code>$\ln 8$</code> =&gt; $\ln 8$</li><li>常用对数：<code>$\lg 100$</code> =&gt; $\lg 100$\</li></ul><h4 id="累加、累乘"><a href="#累加、累乘" class="headerlink" title="累加、累乘"></a>累加、累乘</h4><ul><li>累加：<code>$\sum_{i=1}^n (i^2+2i+1)$</code>　=&gt; $\sum_{i=1}^n (i^2+2i+1)$</li><li>累乘：<code>$\prod_{i=1}^n \frac{1}{i^2}$</code> =&gt; $\prod_{i=1}^n \frac{1}{i^2}$</li></ul><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><p>示例：<code>$\vec x$</code> =&gt; $\vec x$</p><h4 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h4><p>示例：<code>$\int_a^b sinx dx$</code> =&gt; $\int_a^b sinx dx$</p><h4 id="无穷"><a href="#无穷" class="headerlink" title="无穷"></a>无穷</h4><p>示例：<code>$\infty$</code> $\Rightarrow$  $\infty$</p><h4 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h4><p>示例：<code>$\frac{\partial f(x,y)}{\partial x}$</code> =&gt; $\frac{\partial f(x,y)}{\partial x}$</p><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>示例：<code>$$(a+b)(a-b)=a^2-b^2 \tag{1.1}$$</code><br>$$<br>(a+b)(a-b)=a^2-b^2 \tag{1.1}<br>$$</p><h4 id="最大、最小"><a href="#最大、最小" class="headerlink" title="最大、最小"></a>最大、最小</h4><p>最大：<code>$$\max_{x} y$$</code><br>$$<br>\max_{x} y<br>$$<br>最小：<code>$$\min_{x} y$$</code><br>$$<br>\min_{x} y<br>$$</p><h4 id="统计估计"><a href="#统计估计" class="headerlink" title="统计估计"></a>统计估计</h4><p>示例：<code>$$\hat y$$</code><br>$$<br>\hat y<br>$$</p><h4 id="向上（下）取整"><a href="#向上（下）取整" class="headerlink" title="向上（下）取整"></a>向上（下）取整</h4><p>向上取整：<code>$$\left \lceil \frac{a}{b} \right \rceil$$</code><br>$$<br>\left \lceil \frac{a}{b} \right \rceil<br>$$<br>向下取整：<code>$$\left \lfloor \frac{a}{b} \right \rfloor$$</code><br>$$<br>\left \lfloor \frac{a}{b} \right \rfloor<br>$$</p><h4 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h4><p>空一格：<code>a\ b</code> =&gt; $a \ b$</p><p>空四格：<code>a \quad b</code> =&gt; $a \quad b$</p><p>空八格：<code>a \qquad b</code> $\Rightarrow$ $a \qquad b$</p><h4 id="绝对值、范数"><a href="#绝对值、范数" class="headerlink" title="绝对值、范数"></a>绝对值、范数</h4><p>绝对值：<code>\lvert x \rvert</code> $\Rightarrow$ $\lvert x \rvert$</p><p>范数：<code>\lVert x \rVert</code> $\Rightarrow$ $\lVert x \rVert$</p><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">y &amp;= (a-b)(a+b) \\</span><br><span class="line">&amp;= a^2 - b^2</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\begin{align}<br>y &amp;= (a-b)(a+b) \\<br>&amp;= a^2 - b^2<br>\end{align}<br>$$</p><h4 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">y=</span><br><span class="line">\begin&#123;cases&#125;</span><br><span class="line">0,&amp; x &lt; 0 \\</span><br><span class="line">0.5,&amp; x = 0 \\</span><br><span class="line">1,&amp; x &gt; 0</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>y=<br>\begin{cases}<br>0,&amp; x &lt; 0 \\<br>0.5,&amp; x = 0 \\<br>1,&amp; x &gt; 0<br>\end{cases}<br>$$</p><h4 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h4><ul><li>不带括号的矩阵</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">A = </span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">2 &amp; 0 \\</span><br><span class="line">0 &amp; 5</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>A =<br>\begin{matrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\end{matrix}<br>$$</p><ul><li>带括号的矩阵</li></ul><p>1.<code>\begin{vmatrix}...\end{vmatrix}</code><br>$$<br>A =<br>\begin{vmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\end{vmatrix}<br>$$</p><p>2.<code>\begin{bmatrix}...\end{bmatrix}</code><br>$$<br>A =<br>\begin{bmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\end{bmatrix}<br>$$</p><p>3.<code>\begin{Bmatrix}...\end{Bmatrix}</code><br>$$<br>A =<br>\begin{Bmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\end{Bmatrix}<br>$$<br>4.<code>\begin{pmatrix}...\end{pmatrix}</code><br>$$<br>A =<br>\begin{pmatrix}<br>2 &amp; 0 \\<br>0 &amp; 5<br>\end{pmatrix}<br>$$</p><h4 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h4><table><thead><tr><th style="text-align:center">省略号</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">水平省略号 $\cdots$</td><td style="text-align:center"><code>\cdots</code></td></tr><tr><td style="text-align:center">垂直省略号 $\vdots$</td><td style="text-align:center"><code>\vdots</code></td></tr><tr><td style="text-align:center">对角省略号 $\ddots$</td><td style="text-align:center"><code>\ddots</code></td></tr></tbody></table><h4 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h4><table><thead><tr><th style="text-align:center">括号</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">$\overbrace{x,y,z}$</td><td style="text-align:center"><code>\overbrace{x,y,z}</code></td></tr><tr><td style="text-align:center">$\underbrace{x_1,x_2}$</td><td style="text-align:center"><code>\underbrace{x_1,x_2}</code></td></tr></tbody></table><h4 id="箭头"><a href="#箭头" class="headerlink" title="箭头"></a>箭头</h4><table><thead><tr><th style="text-align:center">箭头</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">$\uparrow$</td><td style="text-align:center"><code>\uparrow</code></td></tr><tr><td style="text-align:center">$\Uparrow$</td><td style="text-align:center"><code>\Uparrow</code></td></tr><tr><td style="text-align:center">$\downarrow$</td><td style="text-align:center"><code>\downarrow</code></td></tr><tr><td style="text-align:center">$\Downarrow$</td><td style="text-align:center"><code>\Downarrow</code></td></tr><tr><td style="text-align:center">$\rightarrow$</td><td style="text-align:center"><code>\rightarrow</code></td></tr><tr><td style="text-align:center">$\Rightarrow$</td><td style="text-align:center"><code>\Rightarrow</code></td></tr><tr><td style="text-align:center">$\leftarrow$</td><td style="text-align:center"><code>\leftarrow</code></td></tr><tr><td style="text-align:center">$\Leftarrow$</td><td style="text-align:center"><code>\Leftarrow</code></td></tr><tr><td style="text-align:center">$\leftrightarrow$</td><td style="text-align:center"><code>\leftrightarrow</code></td></tr><tr><td style="text-align:center">$\Leftrightarrow$</td><td style="text-align:center"><code>\Leftrightarrow</code></td></tr><tr><td style="text-align:center">$\nearrow$</td><td style="text-align:center"><code>\nearrow</code></td></tr><tr><td style="text-align:center">$\searrow$</td><td style="text-align:center"><code>\searrow</code></td></tr><tr><td style="text-align:center">$\swarrow$</td><td style="text-align:center"><code>\swarrow</code></td></tr><tr><td style="text-align:center">$\nwarrow$</td><td style="text-align:center"><code>\nwarrow</code></td></tr></tbody></table><h4 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h4><table><thead><tr><th style="text-align:center">四则运算</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">$\times$</td><td style="text-align:center"><code>\times</code></td></tr><tr><td style="text-align:center">$\div$</td><td style="text-align:center"><code>\div</code></td></tr></tbody></table><h4 id="特殊乘法"><a href="#特殊乘法" class="headerlink" title="特殊乘法"></a>特殊乘法</h4><ul><li><code>$x \cdot y$</code> =&gt; $x \cdot y$</li><li><code>$x \bullet y$</code> =&gt; $x \bullet y$</li><li><code>$x \odot y$</code> =&gt; $x \odot y$</li><li><code>$x \otimes y$</code> =&gt; $x \otimes y$</li></ul><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><table><thead><tr><th style="text-align:center">关系运算</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">$\leq$</td><td style="text-align:center"><code>\leq</code></td></tr><tr><td style="text-align:center">$\geq$</td><td style="text-align:center"><code>\geq</code></td></tr><tr><td style="text-align:center">$\neq$</td><td style="text-align:center"><code>\neq</code></td></tr><tr><td style="text-align:center">$\approx$</td><td style="text-align:center"><code>\approx</code></td></tr><tr><td style="text-align:center">$\ll$</td><td style="text-align:center"><code>\ll</code></td></tr><tr><td style="text-align:center">$\gg$</td><td style="text-align:center"><code>\gg</code></td></tr><tr><td style="text-align:center">相似于$\sim$</td><td style="text-align:center"><code>\sim</code></td></tr><tr><td style="text-align:center">$\simeq$</td><td style="text-align:center"><code>\simeq</code></td></tr><tr><td style="text-align:center">全等$\cong$</td><td style="text-align:center"><code>\cong</code></td></tr><tr><td style="text-align:center">恒等$\equiv$</td><td style="text-align:center"><code>\equiv</code></td></tr><tr><td style="text-align:center">定义为$\triangleq$</td><td style="text-align:center"><code>\triangleq</code></td></tr><tr><td style="text-align:center">$\prec$</td><td style="text-align:center"><code>\prec</code></td></tr><tr><td style="text-align:center">$\succ$</td><td style="text-align:center"><code>\succ</code></td></tr><tr><td style="text-align:center">正比于$\propto$</td><td style="text-align:center"><code>\propto</code></td></tr><tr><td style="text-align:center">推出 $\to$、$\gets$</td><td style="text-align:center"><code>\to</code>、<code>\gets</code></td></tr></tbody></table><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><table><thead><tr><th style="text-align:center">逻辑运算</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">$\forall$</td><td style="text-align:center"><code>\forall</code></td></tr><tr><td style="text-align:center">$\exists$</td><td style="text-align:center"><code>\exists</code></td></tr><tr><td style="text-align:center">$\land$</td><td style="text-align:center"><code>\land</code></td></tr><tr><td style="text-align:center">$\lor$</td><td style="text-align:center"><code>\lor</code></td></tr><tr><td style="text-align:center">$\lnot$</td><td style="text-align:center"><code>\lnot</code></td></tr></tbody></table><h4 id="集合运算符"><a href="#集合运算符" class="headerlink" title="集合运算符"></a>集合运算符</h4><table><thead><tr><th style="text-align:center">集合运算</th><th style="text-align:center">符号</th><th style="text-align:center">集合运算</th><th style="text-align:center">符号</th><th style="text-align:center">集合运算</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">$\cup$</td><td style="text-align:center"><code>\cup</code></td><td style="text-align:center">$\subseteq$</td><td style="text-align:center"><code>\subseteq</code></td><td style="text-align:center">$\in$</td><td style="text-align:center"><code>\in</code></td></tr><tr><td style="text-align:center">$\cap$</td><td style="text-align:center"><code>\cap</code></td><td style="text-align:center">$\subseteqq$</td><td style="text-align:center"><code>\subseteqq</code></td><td style="text-align:center">$\notin$</td><td style="text-align:center"><code>\notin</code></td></tr><tr><td style="text-align:center">$\subset$</td><td style="text-align:center"><code>\subset</code></td><td style="text-align:center">$\subsetneq$</td><td style="text-align:center"><code>\subsetneq</code></td><td style="text-align:center">$\varnothing$</td><td style="text-align:center"><code>\varnothing</code></td></tr><tr><td style="text-align:center">$\supset$</td><td style="text-align:center"><code>\supset</code></td><td style="text-align:center">$\subsetneqq$</td><td style="text-align:center"><code>\subsetneqq</code></td><td style="text-align:center">$\emptyset$</td><td style="text-align:center"><code>\emptyset</code></td></tr><tr><td style="text-align:center">集合相减 $\setminus$</td><td style="text-align:center"><code>\setminus</code></td><td style="text-align:center">$\supseteq$</td><td style="text-align:center"><code>\supseteq</code></td><td style="text-align:center">$\supsetneqq$</td><td style="text-align:center"><code>\supsetneqq</code></td></tr></tbody></table><h4 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h4><table><thead><tr><th style="text-align:center">小写字母</th><th style="text-align:center">符号</th><th style="text-align:center">大写字母</th><th style="text-align:center">符号</th></tr></thead><tbody><tr><td style="text-align:center">$\alpha$</td><td style="text-align:center"><code>\alpha</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\beta$</td><td style="text-align:center"><code>\beta</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\gamma$</td><td style="text-align:center"><code>\gamma</code></td><td style="text-align:center">$\Gamma$</td><td style="text-align:center"><code>\Gamma</code></td></tr><tr><td style="text-align:center">$\delta$</td><td style="text-align:center"><code>\delta</code></td><td style="text-align:center">$\Delta$</td><td style="text-align:center"><code>Delta</code></td></tr><tr><td style="text-align:center">$\lambda$</td><td style="text-align:center"><code>\lambda</code></td><td style="text-align:center">$\Lambda$</td><td style="text-align:center"><code>\Lambda</code></td></tr><tr><td style="text-align:center">$\eta$</td><td style="text-align:center"><code>\eta</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\epsilon$   $\varepsilon$</td><td style="text-align:center"><code>\epsilon</code>   <code>\varepsilon</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\rho$</td><td style="text-align:center"><code>\rho</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\zeta$</td><td style="text-align:center"><code>\zeta</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\xi$</td><td style="text-align:center"><code>\xi</code></td><td style="text-align:center">$\Xi$</td><td style="text-align:center"><code>\Xi</code></td></tr><tr><td style="text-align:center">$\pi$</td><td style="text-align:center"><code>\pi</code></td><td style="text-align:center">$\Pi$</td><td style="text-align:center"><code>\Pi</code></td></tr><tr><td style="text-align:center">$\theta$</td><td style="text-align:center"><code>\theta</code></td><td style="text-align:center">$\Theta$</td><td style="text-align:center"><code>\Theta</code></td></tr><tr><td style="text-align:center">$ \sigma $</td><td style="text-align:center"><code>\sigma</code></td><td style="text-align:center">$\Sigma$</td><td style="text-align:center"><code>\Sigma</code></td></tr><tr><td style="text-align:center">$\phi$</td><td style="text-align:center"><code>\phi</code></td><td style="text-align:center">$\Phi$</td><td style="text-align:center"><code>\Phi</code></td></tr><tr><td style="text-align:center">$\psi$</td><td style="text-align:center"><code>\psi</code></td><td style="text-align:center">$\Psi$</td><td style="text-align:center"><code>\Psi</code></td></tr><tr><td style="text-align:center">$\mu$</td><td style="text-align:center"><code>\mu</code></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">$\omega$</td><td style="text-align:center"><code>\omega</code></td><td style="text-align:center">$\Omega$</td><td style="text-align:center"><code>\Omega</code></td></tr><tr><td style="text-align:center">$\tau$</td><td style="text-align:center"><code>\tau</code></td><td style="text-align:center"></td></tr></tbody></table><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><ul><li><p>粗体（boldface）：<code>\mathbf{X}</code> =&gt; $\mathbf{X}$</p></li><li><p>罗马体（roman）：<code>\mathrm{d}x</code> =&gt; $\mathrm{d}x$</p></li></ul><p>导数的正式写法：<code>\frac{\mathrm{d} y } {\mathrm{d} x }</code><br>$$<br>\frac{\mathrm{d} y } {\mathrm{d} x }<br>$$<br>以下三种字体仅支持大写字母</p><ul><li><p>书写体（calligraphic）：<code>\mathcal{X}</code> =&gt; $\mathcal{X}$</p></li><li><p>script：<code>\mathscr{X}</code> =&gt; $\mathscr{X}$</p></li><li>黑体（Blackboard bold）：<code>\mathbb{X}</code> =&gt; $\mathbb{X} $</li></ul><h4 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h4><table><thead><tr><th style="text-align:center">特殊符号</th><th style="text-align:center">代码</th></tr></thead><tbody><tr><td style="text-align:center">反斜杠$\backslash$</td><td style="text-align:center"><code>\backslash</code></td></tr><tr><td style="text-align:center">星号$\star$</td><td style="text-align:center"><code>\star</code></td></tr><tr><td style="text-align:center">度数，例如$30^\circ$</td><td style="text-align:center"><code>30^\circ</code></td></tr><tr><td style="text-align:center">手写体$\ell$，区别于数字1</td><td style="text-align:center"><code>\ell</code></td></tr><tr><td style="text-align:center">导数简写，撇$\prime$</td><td style="text-align:center"><code>\prime</code></td></tr><tr><td style="text-align:center">波浪号$\tilde x$</td><td style="text-align:center"><code>\tilde x</code></td></tr><tr><td style="text-align:center">$\overset{def}{=}$、$\overset{b}{a}$</td><td style="text-align:center"><code>\overset{def}{=}</code></td></tr><tr><td style="text-align:center">$\underset{b}{a}$</td><td style="text-align:center"><code>\underset{b}{a}</code></td></tr><tr><td style="text-align:center">单个字符上划线 $\bar b$</td><td style="text-align:center"><code>\bar b</code></td></tr><tr><td style="text-align:center">多个字符上划线 $\overline{ab}$</td><td style="text-align:center"><code>\overline{ab}</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> mathjax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mathjax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性可分支持向量机</title>
      <link href="/2018/07/16/machine-learning-svm-linearly-separable/"/>
      <url>/2018/07/16/machine-learning-svm-linearly-separable/</url>
      
        <content type="html"><![CDATA[<h3 id="线性可分支持向量机"><a href="#线性可分支持向量机" class="headerlink" title="线性可分支持向量机"></a>线性可分支持向量机</h3><p>分离超平面<br>$$<br>\mathbf w \cdot \mathbf x +b = 0　\tag {1}<br>$$</p><p>其中，w为分离超平面的法向量，b为截距</p><p>分类决策函数<br>$$<br>f(x) = sign(\mathbf w \cdot \mathbf x +b)<br>$$<br>其中，sign()称为符号函数，<br>$$<br>sign(x) =<br>\begin{cases}<br>-1, &amp; x &lt; 0 \\<br>0, &amp; x = 0 \\<br>1, &amp; x &gt; 0<br>\end{cases}<br>$$<br><a id="more"></a></p><h3 id="函数间隔"><a href="#函数间隔" class="headerlink" title="函数间隔"></a>函数间隔</h3><p>定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的函数间隔为<br>$$<br>\hat \gamma_i = y_i ( w \cdot x_i + b)<br>$$<br>定义超平面(w,b)关于训练数据集T的函数间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的函数间隔之最小值，即<br>$$<br>\hat \gamma  = \min_{i=1,\dots,N} \hat \gamma_i<br>$$</p><h3 id="几何间隔"><a href="#几何间隔" class="headerlink" title="几何间隔"></a>几何间隔</h3><p>定义：对于给定的训练数据集T和超平面(w,b)，定义超平面(w,b)关于样本点($x_i,y_i$)的几何间隔为<br>$$<br>\gamma_i = y_i \frac {w \cdot x_i + b}{||w||}<br>$$<br>定义超平面(w,b)关于训练数据集T的几何间隔为超平面(w,b)关于T中所有样本点($x_i,y_i$)的几何间隔之最小值，即<br>$$<br>\gamma = \min_{i=1,\dots,N} \gamma_i<br>$$<br>超平面（w，b）关于样本点（$x_i,y_i$）的几何间隔是<code>实例点到超平面的带符号的距离</code>。</p><p>函数间隔和几何间隔有如下关系：<br>$$<br>\gamma_i = \frac{\hat \gamma_i}{||w||}<br>$$</p><p>$$<br>\gamma = \frac{\hat \gamma}{||w||}<br>$$</p><p>若||w||=1，则函数间隔和几何间隔相等。如果超平面参数w和b成比例地改变（超平面没有改变），函数间隔也会按比例改变，而几何间隔不变。</p><h3 id="间隔最大化"><a href="#间隔最大化" class="headerlink" title="间隔最大化"></a>间隔最大化</h3><p>如何求得几何间隔最大的分离超平面，即最大间隔分离超平面呢？可用下面的约束最优化问题来表示<br>$$<br>\max_{w,b} \gamma \\<br>s.t. y_i \frac{w \cdot x_i +b }{||w||} \geq \gamma, i=1,2,\dots,N<br>$$<br>约束条件表示超平面(w,b)关于每个训练样本点的几何间隔至少是$\gamma$</p><p>根据函数间隔和几何间隔的关系，上面的问题可写为<br>$$<br>\max_{w,b} \frac{\hat \gamma}{||w||}<br>$$</p><p>$$<br>s.t. y_i ( w \cdot x_i +b ) \geq \hat \gamma, i=1,2,\dots,N<br>$$</p><p><em>函数间隔$\hat \gamma$的取值并不影响最优化问题的解</em>。因为将w和b按比例改变为$\lambda w 和\lambda b$，这时函数间隔变为$\lambda \hat \gamma$，函数间隔的改变对上面的最优化问题的不等式约束没有影响，对目标函数的优化也没有影响。</p><p>不妨取$\hat \gamma = 1$，将其代入上面的最优化问题，得$\max_{w,b} \frac{1}{||w||}$，又最大化$\frac{1}{||w||}$等价于最小化$\frac{1}{2}||w||^2$。</p><p>故得到了下面的线性可分支持向量机学习的最优化问题<br>$$<br>\min_{w,b} \frac{1}{2}||w||^2<br>$$</p><p>$$<br>s.t. y_i ( w \cdot x_i +b ) - 1 \geq 0, i = 1,2,\dots,N<br>$$</p><p>对式（4）使用拉格朗日乘数法（Lagrange multipliers）可得到其“对偶问题”(dual problem)。对式（4）的每条约束添加拉格朗日乘数$\alpha_i \geq 0$，则该问题的拉格朗日函数可写为<br>$$<br>L(w,b,\alpha) = \frac{1}{2}||w||^2 + \sum_{i=1}^{m} \alpha_i (1-y_i(w \cdot x_i +b)) \tag{5}，\\<br>其中 \alpha = (\alpha_i,\alpha_2,\dots,\alpha_m)^T<br>$$<br>令L(w,b,$\alpha$)对w和b的偏导数为零，<br>$$<br>\begin{align}<br>&amp; \frac{\partial L}{\partial w} = w - \sum_{i=1}^{m} \alpha_i y_i \mathbf x_i = 0\\<br>&amp; \frac{\partial L}{\partial b} = -\sum_{i=1}^{m} \alpha_i y_i = 0<br>\end{align}<br>$$<br>从而，<br>$$<br>w =  \sum_{i=1}^{m} \alpha_i y_i \mathbf x_i \tag {6}<br>$$</p><p>$$<br>0 = \sum_{i=1}^{m} \alpha_i y_i \tag {7}<br>$$</p><p>将式（6）、（7）代入式（5）中，得：<br>$$<br>\begin{align}<br>L(w,b,\alpha) &amp; = \frac{1}{2}  \sum_{i=1}^{m} \alpha_I y_i \mathbf x_i^T   \sum_{j=1}^{m} \alpha_j y_j \mathbf x_j + \sum_{i=1}^{m} \alpha_i ( 1 - y_i( \mathbf x_i \sum_{j=1}^{m} \alpha_j y_j \mathbf x_j^T + b) )\\<br>&amp; =\sum_{i=1}^{m} \alpha_i - \frac{1}{2}\sum_{i=1}^{m} \sum_{j=1}^{m} \alpha_i \alpha_j y_i y_j \mathbf x_i^T x_j<br>\end{align}<br>$$</p><p>故，式(4)的对偶问题为<br>$$<br>\max_\alpha [ \sum_{i=1}^{m} \alpha_i - \frac{1}{2}\sum_{i=1}^{m} \sum_{j=1}^{m} \alpha_i \alpha_j y_i y_j (\mathbf x_i \cdot \mathbf x_j) ] \tag{8} \\<br>s.t. \sum_{i=1}^{m} \alpha_i y_i = 0,\\<br>\alpha_i \geq 0, i = 1,2,\dots,m<br>$$</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>已知一个训练数据集，其正例点是$x_1 = (3,3),x_2 = (4,3)$,负例点是$x_3 = (1,1)$，求线性可分支持向量机。</p><p><strong>解：</strong>对偶问题是<br>$$<br>\min_\alpha  \left ( \frac{1}{2}\sum_{i=1}^{m} \sum_{j=1}^{m} \alpha_i \alpha_j y_i y_j (\mathbf x_i \cdot \mathbf x_j) - \sum_{i=1}^{m} \alpha_i \right) \\<br>=  \frac{1}{2}(18 \alpha_1^2+25 \alpha_2^2 + 2 \alpha_3^2 + 42\alpha_1 \alpha_2 - 12 \alpha_1 \alpha_3 - 14 \alpha_2 \alpha_3) -\alpha_1 - \alpha_2 - \alpha_3 \\<br>s.t. \alpha_1 + \alpha_2 - \alpha_3 = 0 \\<br>\alpha_i \geq 0 , i = 1,2,3<br>$$<br>将$\alpha_3 = \alpha_1 + \alpha_2$代入目标函数并记为<br>$$<br>s(\alpha_1,\alpha_2) = 4 \alpha_1^2 + \frac{13}{2} \alpha_2^2 + 10 \alpha_1 \alpha_2 - 2 \alpha_1 - 2 \alpha_2<br>$$</p><p>对$\alpha_1,\alpha_2$求偏导数，并其为0<br>$$<br>\frac{\partial s}{\partial \alpha_1} = 8 \alpha_1 + 10 \alpha_2 - 2 = 0\\<br>\frac{\partial s}{\partial \alpha_2} = 13 \alpha_2 + 10 \alpha_1 - 2 = 0<br>$$<br>联立上式，解得：<br>$$<br>\alpha_1 = \frac{3}{2}, \alpha_2 = -1<br>$$<br>从而，$s(\alpha_1,\alpha_2)在（\frac{3}{2}, -1）$取极值，但该点不满足约束条件$\alpha_2 \geq 0$，所以最小值应在边界上取得。</p><p>当$\alpha_1 = 0$时，<br>$$<br>\begin{align}<br>s(\alpha_2) &amp;= \frac{13}{2} \alpha_2^2 - 2 \alpha_2 \\<br>&amp;=  \frac{13}{2} (\alpha_2^2 - \frac{4}{13} \alpha_2) \\<br>&amp;=  \frac{13}{2} (\alpha_2 - \frac{2}{13})^2 - \frac{2}{13}<br>\end{align}<br>$$<br>显然，当$\alpha_2 = \frac{2}{13}$时，$s(\alpha_1,\alpha_2)$取得最小值$s(0,\frac{2}{13}) = - \frac{2}{13}$。</p><p>同理可得，当$\alpha_2 = 0$时，$s(\alpha_1,\alpha_2)$的最小值$s(\frac{1}{4},0) = - \frac{1}{4}$。</p><p>故，$s(\alpha_1,\alpha_2)$在$\alpha_1 = \frac{1}{4} ,\alpha_2 = 0)$处达到最小，此时，$\alpha_3 = \frac{1}{4}$</p><p>因此，$\alpha_1^* = \alpha_3^* = \frac{1}{4}$对应的实例点$x_1,x_3$是支持向量。<br>$$<br>\begin{align}<br>w_1^{*} &amp; = \alpha_1^{*} y_1 x_{11} + \alpha_3^{*} y_3 x_{31}\\<br>&amp;=\frac{1}{4} \times 1 \times 3 + \frac{1}{4} \times (-1) \times 1\\<br>&amp;=\frac{1}{2}<br>\end{align}<br>$$<br>同理可得，<br>$$<br>w_2^* = \alpha_1^* y_1 x_{12} + \alpha_3^* y_3 x_{32} =\frac{1}{2}<br>$$</p><p>$$<br>\begin{align}<br>b^* &amp;= y_1 - [ \alpha_1^*y_1(x_1 \cdot x_1)  + \alpha_3^*y_3(x_3 \cdot x_1)] \\<br>&amp;= 1 - \left( \frac{1}{4} \times 1 \times [ (3,3) \cdot (3,3) ] + \frac{1}{4} \times (-1) \times [(1,1) \cdot (3,3) \right) \\<br>&amp;= -2<br>\end{align}<br>$$</p><p>故，分离超平面为<br>$$<br>\frac{1}{2}x^{(1)} + \frac{1}{2} x^{(1)} - 2 = 0<br>$$<br>分类决策函数为<br>$$<br>f(x) = sign \left( \frac{1}{2}x^{(1)} + \frac{1}{2} x^{(1)} - 2 \right)<br>$$</p><p>（未完待续。。。）</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之logistic回归</title>
      <link href="/2018/07/10/machine-learning-logistic-regression/"/>
      <url>/2018/07/10/machine-learning-logistic-regression/</url>
      
        <content type="html"><![CDATA[<p>对于二分类任务，其输出标记为y ∈ {0,1}，因此我们需要一个将自变量z转换为0/1值，最理想的是</p><p>“单位阶跃函数”（unit-step function），亦称Heaviside函数。<br>$$<br>y=<br>\begin{cases}<br>0,  &amp; \text{z &lt; 0} \\<br>0.5, &amp; \text{z = 0} \\<br>1,  &amp; \text{z &gt; 0}<br>\end{cases}<br>$$<br><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/heaviside.png" alt=""></p><p>然而，单位阶跃函数的问题在于：该函数是一个不连续的分段函数，它在x=0处从0瞬间跳跃到了1。</p><p>我们希望找到一个近似单位阶跃函数的“替代函数”（surrogate function），并希望它单调可微。对数几率函数正是这样一个替代函数。</p><p>对数几率函数：<br>$$<br>y=\frac{1}{1+e^{-z}}<br>$$<br><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_1.png" alt=""></p><p><img src="http://p64uw9x5j.bkt.clouddn.com/image/2018/07/15/logistic_2.png" alt=""></p><p>对数几率函数是一种Sigmoid函数（形似S的函数），它将z值转化为一个接近0或1的y值。从上面[-5,5]以及[-60,60]两张局部图可以看出，其在[-5,5]这个区间范围内变化很陡，函数值从0快速跳跃到了1。</p><a id="more"></a><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>在每个特征上都乘以一个<strong>回归系数</strong>，然后把所有的结果值相加，将这个总和代入Sigmoid函数中，进而得到一个范围在0~1之间的数值。任何大于0.5的数据被分入1类，小于0.5则被归入0类。</p><p>二项logistic回归模型：<br>$$<br>P(Y=1|x)=\frac{1}{1+e^{-(w \cdot x + b)}}=\frac{e^{w \cdot x+b}}{1+e^{w \cdot x+b}}=h(x)<br>$$</p><p>$$<br>P(Y=0|x)=\frac{1}{1+e^{w \cdot x+b}}<br>$$</p><p>其中，x ∈ $R^n$是输入向量，w ∈ $R^n$是权重向量，$w \cdot x$为w和x的内积。</p><p>方便起见，将输入向量和权重向量加以扩充，仍记作w，x，即<br>$$<br>w = (w^{(1)},w^{(2)},\dots,w^{(n)},b)^T<br>$$</p><p>$$<br>x=(x^{(1)},x^{(2)},\dots,x^{(n)},1)^T<br>$$</p><p>此时，二项logistic回归模型：<br>$$<br>P(Y=1|x)=\frac{e^{w \cdot x}}{1+e^{w \cdot x}}=h(x)<br>$$</p><p>$$<br>P(Y=0|x)=\frac{1}{1+e^{w \cdot x}}<br>$$</p><p>我们可以通过最大似然估计法（maximum likelihood method）来估计w。</p><p>似然函数：<br>$$<br>\prod^{n}_{i=1}[{h(x_i)]^{y_i}}[1-h(x_i)]^{1-y_i}<br>$$<br>对数似然函数：<br>$$<br>L(w)=\sum^n_{i=1} [ {y_i \ln h(x_i)+(1-y_i) \ln (1-h(x_i))}]\\<br>=\sum^n_{i=1} [y_i \ln \frac{h(x_i)}{1-h(x_i)}+\ln(1-h(x_i))]\\<br>=\sum^n_{i=1}[{y_i ( w \cdot x_i)-\ln(1+\rm e^{w \cdot  x_i})}]<br>$$<br>从而<br>$$<br>\hat w = argmax_w L(w)<br>$$</p><h3 id="求最优回归系数"><a href="#求最优回归系数" class="headerlink" title="求最优回归系数"></a>求最优回归系数</h3><h4 id="梯度上升法"><a href="#梯度上升法" class="headerlink" title="梯度上升法"></a>梯度上升法</h4><h5 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h5><p>大学高等数学下册中说，沿梯度方向的方向导数最大，也就是说，梯度方向是函数f(x,y)在某一点(x,y)处增长最快的方向。</p><p>要找到某函数的最大值，最好的方法就是沿着该函数的梯度方向探寻。</p><p>梯度上升算法的迭代公式：</p><p>$$<br>w=w+\alpha \cdot grad L(w)<br>$$<br>其中，$\alpha$为步长，表示每次沿梯度方向移动的距离；grad L(w)表示L(w)的梯度。</p><p>梯度公式<br>$$<br>grad f(x,y,z) = \frac{\partial f}{\partial x} \cdot \vec i + \frac{\partial f}{\partial y} \cdot \vec j + \frac{\partial f}{\partial z} \cdot \vec k<br>$$<br>根据之前求得的对数似然函数，对w求偏导数<br>$$<br>\frac{\partial L(w)}{\partial w}=\sum^n_{i=1}[{y_i x_{i}} - \frac{x_{i}e^{w \cdot x_i}}{1+e^{w \cdot x_i}}]\\<br>=\sum^n_{i=1}{x_{i}(y_i-h(x_i))}<br>$$<br>故<br>$$<br>grad L(w_1,w_2,\dots,w_n)<br>=\sum_{k=1}^n \frac{\partial L(w)}{\partial w_k}\cdot \vec{i_k}\\<br>= (  \sum_{i=1}^{n}x_{i1}(y_i-h(\vec{x_i})), \sum_{i=1}^{n}x_{i2}(y_i-h(\vec{x_i})),\dots,\sum_{i=1}^{n}x_{in}(y_i-h(\vec{x_i})))^T<br>$$</p><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(inputVector)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span>/(<span class="number">1</span>+np.exp(-inputVector))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientAscent</span><span class="params">(dataMatrix,classLabels,iterations=<span class="number">500</span>,alpha=<span class="number">0.001</span>)</span>:</span></span><br><span class="line">    <span class="string">"""梯度上升算法"""</span></span><br><span class="line">    dataMatrix = np.mat(dataMatrix)</span><br><span class="line">    <span class="comment"># transpose()将矩阵转置</span></span><br><span class="line">    labelMatrix = np.mat(classLabels).transpose()</span><br><span class="line">    m,n = np.shape(dataMatrix)</span><br><span class="line">    weights = ones((n,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(iterations):</span><br><span class="line">        h = sigmoid(dataMatrix*weights)</span><br><span class="line">        error = (labelMatrix-h)</span><br><span class="line">        weights = weights + alpha * dataMatrix.transpose() * error</span><br><span class="line"> <span class="keyword">return</span> weights</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classifyVector</span><span class="params">(inputVector,weights)</span>:</span></span><br><span class="line">    <span class="string">"""logistic回归分类函数"""</span></span><br><span class="line">    p = sigmoid(inputVector*weights)</span><br><span class="line">    <span class="keyword">if</span> p &gt; <span class="number">0.5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h5 id="随机梯度上升"><a href="#随机梯度上升" class="headerlink" title="随机梯度上升"></a>随机梯度上升</h5><p>一次仅用一个样本点来更新回归系数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">randomGradientAscent</span><span class="params">(dataMatrix,classLabels,alpha=<span class="number">0.001</span>)</span>:</span></span><br><span class="line">    <span class="string">"""随机梯度上升算法"""</span></span><br><span class="line">    m,n = np.shape(dataMatrix)</span><br><span class="line">    weights = np.ones(n)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">        <span class="comment"># dataMatrix[i]*weights 逐元素相乘</span></span><br><span class="line">        h = sigmoid(sum(dataMatrix[i]*weights))</span><br><span class="line">        error = classLabels[i]-h</span><br><span class="line">        weights = weights + alpha*dataMatrix[i]*error</span><br><span class="line"><span class="keyword">return</span> weights</span><br></pre></td></tr></table></figure><h5 id="改进的随机梯度上升"><a href="#改进的随机梯度上升" class="headerlink" title="改进的随机梯度上升"></a>改进的随机梯度上升</h5><p>改进</p><ul><li>动态调整alpha</li><li>随机选取样本来更新回归系数</li></ul><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">improvedRandomGradientAscent</span><span class="params">(dataMatrix,classLabels,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 iterations=<span class="number">500</span>,alpha=<span class="number">0.001</span>)</span></span></span><br><span class="line">m,n = np.shape(dataMatrix)</span><br><span class="line">    weights = np.ones(n)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(iterations):</span><br><span class="line">        dataIndex = range(m)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            alpha = alpha + <span class="number">4</span>/(<span class="number">1</span>+i+j)</span><br><span class="line">            randomIndex = int(np.random.uniform(<span class="number">0</span>,len(dataIndex)))</span><br><span class="line">            h = sigmoid(sum(dataMatrix[randomIndex]*weights))</span><br><span class="line">            error = classLabels[randomIndex] - h</span><br><span class="line">            weights = weights + alpha * error * dataMatrix[randomIndex]</span><br><span class="line">            <span class="keyword">del</span> dataIndex[randomIndex]</span><br><span class="line">    <span class="keyword">return</span> weights</span><br></pre></td></tr></table></figure><h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>梯度下降法与梯度上升法类似，用于求函数的最小值，其迭代公式如下：<br>$$<br>w=w-\alpha \cdot grad L(w)<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之朴素贝叶斯</title>
      <link href="/2018/07/02/machine-learning-navie-bayes/"/>
      <url>/2018/07/02/machine-learning-navie-bayes/</url>
      
        <content type="html"><![CDATA[<p>在讲朴素贝叶斯之前，我们先来回顾一下大学二年级概率论中的相关知识．</p><p>条件概率公式：</p><p>$$P(A|B) = \frac{P(AB)}{P(B)}$$ </p><p>$$=&gt; P(AB) = P(A|B)P(B)$$</p><p>全概率公式：</p><p>$$P(A)=\sum_{i=1}^{\infty}{P(B_i)P(A|B_i)}$$</p><p>贝叶斯公式：</p><p>$$P(B_i|A)=\frac{P(AB_i)}{P(A)}=\frac{P(A|B_i)P(B_i)}{\sum_{i=1}^{\infty}{P(B_i)P(A|B_i)}}$$</p><a id="more"></a><h3 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h3><p>朴素贝叶斯是贝叶斯决策理论的一部分，而贝叶斯决策理论的核心思想是<strong>选择具有最高概率的决策</strong>．</p><p>举个很简单的例子，一般网站评论或者游戏聊天都会对侮辱性词汇进行屏蔽过滤．</p><p>假设现在存在一条评论，如何判断它是否包含侮辱性词汇？我们用P1(w)表示评论w包含侮辱性词汇的概率，用p2(w)表示评论w不包含侮辱性词汇的概率，那么对于评论w，可以用下面的规则来判断它的类别：</p><ul><li>如果P1(w) &gt; P2(w) ，那么w为包含侮辱性词汇的评论．</li><li>如果P2(w) &gt; P1(w)，那么w为不包含侮辱性词汇的评论．</li></ul><h3 id="假设前提"><a href="#假设前提" class="headerlink" title="假设前提"></a>假设前提</h3><p>朴素贝叶斯是用于文档分类的常用算法，它是基于以下假设对贝叶斯分类器的一个扩展．</p><ul><li>特征之间相互独立，即一个特征出现的可能性与其他特征没有关系．比如，如果文档中一个词出现的概率不依赖于文档中的其他词，那么文档中词与词之间相互独立．</li><li>每个特征同等重要．</li></ul><p>我们知道这两个假设过于简单，这也是之所以称之为朴素（navie）贝叶斯的原因．</p><h3 id="理论模型"><a href="#理论模型" class="headerlink" title="理论模型"></a>理论模型</h3><p>$$P(c|\mathbf{x})=\frac{P(c)P(\mathbf{x}|c)}{P(\mathbf{x})}$$</p><p>其中，P(c)是类＂先验＂(prior)概率，$P(\mathbf{x}|c)$是样本x相对于类标记c的类条件概率，或称为＂似然＂，$P(\mathbf{x})$是用于归一化的＂证据＂因子．</p><p>对于给定样本x，证据因子$P(\mathbf{x})$与类标记无关，因此估计$P(c|\mathbf{x})$的问题就转化为如何基于训练数据D来估计先验概率P(c)和条件概率$P(\mathbf{x}|c)$</p><p>根据大数定律，当训练集包含充足的独立同分布样本时，P(c)可通过各类样本出现的频率来进行估计．</p><p>对于条件概率$P(\mathbf{x}|c)$来说，由于假设x的各个属性相互独立，因此</p><p>$$P(\mathbf{x}|c) = P(x_1x_2…x_n|c) = P(x_1|c)P(x_2|c) \cdot\cdot\cdot P(x_n|c) = \prod_{i=1}^{n}{P(x_i|c)}$$ </p><p>其中，n为<strong>x</strong>的属性个数</p><p>由于连乘操作易造成下溢出，即太多很小的数相乘导致结果四舍五入后得到0，通常使用对数进行处理，将连乘变为累加，从而避免下溢出．因此，</p><p>令$$L = P(c)P(\mathbf{x}|c)$$</p><p>则$$log L = log P(c) + log P(\mathbf{x}|c) = log P(c) + \sum_{i=1}^{n}{log P(x_i|c)}$$</p><h3 id="拉普拉斯修正"><a href="#拉普拉斯修正" class="headerlink" title="拉普拉斯修正"></a>拉普拉斯修正</h3><p>为了避免其他属性（特征）携带的信息被训练集中未出现的属性值＂抹去＂，即为了避免多个条件概率相乘时某个概率值为0，导致最后的乘积为0，在估计概率值时通常要进行＂平滑＂，常用＂拉普拉斯修正＂．</p><p>具体来说，令N表示训练集D中可能的类别数，$N_i$表示第i个属性可能的取值数，则</p><p>$$P(c)=\frac{|D_c|+1}{|D|+N}$$</p><p>$$P(w_i|c)=\frac{|D_{c,x_i}|+1}{|D_c|+N_i}$$</p><h3 id="示例：文本分类"><a href="#示例：文本分类" class="headerlink" title="示例：文本分类"></a>示例：文本分类</h3><p>朴素贝叶斯分类器通常有以下两种实现方式</p><ul><li>词集模型：将每个词的出现与否作为一个特征，值为1表示词条出现在文档中，0表示词条未出现</li><li>词袋模型：将每个词在文档中出现的次数作为一个特征</li></ul><p>下面我们用词集模型，来实现一个区分某一评论是否包含侮辱性词汇的朴素贝叶斯分类器．</p><p>创建一个bayes.py文件，</p><ul><li>将训练集转化为词汇列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVocabularyList</span><span class="params">(dataset)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    从数据集中抽取不重复的词汇列表</span></span><br><span class="line"><span class="string">    dataset: 给定的数据集</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    vocabularySet = set([])　<span class="comment">#　创建一个空集合 </span></span><br><span class="line">    <span class="keyword">for</span> document <span class="keyword">in</span> dataset:</span><br><span class="line">        <span class="comment"># 操作符｜表示求两个集合的并集</span></span><br><span class="line">        vocabularySet = vocabulary | set(document)</span><br><span class="line">    <span class="keyword">return</span> list(vocabularySet)</span><br></pre></td></tr></table></figure><ul><li>将训练集中的某一条数据转化为向量</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setOfWords2Vector</span><span class="params">(vocabularyList,inputSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    根据词汇列表，将输入的数据集转化为与词汇列表维度相同的向量</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 创建一个长度为len(vocabularyList)，所含元素都为0的向量</span></span><br><span class="line">    <span class="comment"># 等价于 </span></span><br><span class="line">    <span class="comment"># returnVector = []</span></span><br><span class="line">    <span class="comment"># for i in range(len(vocabularyList)):</span></span><br><span class="line">    <span class="comment">#     returnVector[i] = 0</span></span><br><span class="line">    returnVector = [<span class="number">0</span>]*len(vocabularyList)</span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> inputSet:</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> vocabularyList:</span><br><span class="line">            returnVector[vocabularyList.index(word)] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> returnVector</span><br></pre></td></tr></table></figure><ul><li>创建朴素贝叶斯分类器训练函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trainNavieBayes</span><span class="params">(trainMatrix,trainCategory)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    贝叶斯分类器训练函数</span></span><br><span class="line"><span class="string">    trainMatrix: numpy中array类型，是由训练集转化的所有向量组成的矩阵</span></span><br><span class="line"><span class="string">    trainCategory: 由矩阵中每一向量的所属类别组成的列表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    numTrainDocs = len(trainMatrix)</span><br><span class="line">    numWords = len(trainMatrix[<span class="number">0</span>])</span><br><span class="line">    <span class="comment"># pAbusive = sum(trainCategory)/float(numTrainDocs)</span></span><br><span class="line">    <span class="comment"># 拉普拉斯修正</span></span><br><span class="line">    pAbusive = (sum(trainCategory) + <span class="number">1</span>)/(float(numTrainDocs) + <span class="number">2</span>)</span><br><span class="line">    p0Vector = zeros(numWords);p1Vector = zeros(numWords)</span><br><span class="line">    <span class="comment"># 计算某一类别下的总词数</span></span><br><span class="line">    <span class="comment"># p0NumWords = 0.0;p1NumWords = 0.0</span></span><br><span class="line">    <span class="comment"># 使用拉普拉斯修正后</span></span><br><span class="line">    p0NumWords = <span class="number">2.0</span>;p1NumWords = <span class="number">2.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numTrainDocs):</span><br><span class="line">        <span class="keyword">if</span> trainCategory[i] == <span class="number">1</span>:</span><br><span class="line">            p1Vector += trainMatrix[i]</span><br><span class="line">            p1NumWords += sum(trainMatrix[i])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            p0Vector += trainMatrix[i]</span><br><span class="line">            p0NumWords += sum(trainMatrix[i])</span><br><span class="line">    <span class="comment"># 用某个类别下某个词出现的次数除以该类别下的总词数，</span></span><br><span class="line">    <span class="comment"># 即求得某一类别c在每一个属性上的概率p(ci)</span></span><br><span class="line">    <span class="comment"># p0Vector = p0Vector/p0NumWords</span></span><br><span class="line">    <span class="comment"># p1Vector = p1Vector/p1NumWords</span></span><br><span class="line">    p0Vector = log(p0Vector/p0NumWords)</span><br><span class="line">    p1Vector = log(p1Vector/p1NumWords)</span><br><span class="line">    <span class="keyword">return</span> p0Vector,p1Vector,pAbusive</span><br></pre></td></tr></table></figure><ul><li>创建朴素贝叶斯分类函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classifyNavieBayes</span><span class="params">(vector2Classify,p0Vector,p1Vector,pc1)</span>:</span></span><br><span class="line">    p1 = sum(vector2Classify*p1Vector) + log(pc1)</span><br><span class="line">    p0 = sum(vector2Classify*p0Vector) + log(<span class="number">1.0</span>-pc1)</span><br><span class="line">    <span class="keyword">if</span> p1 &gt; p0:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>上面程序的第2行，就是在求</p><p>$$log L = log P(c) + log P(\mathbf{x}|c) = log P(c) + \sum_{i=1}^{n}{log P(x_i|c)}$$</p><p>接下来我们测试一下刚才的分类器是否有效</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    postingList = [[<span class="string">'my'</span>,<span class="string">'dog'</span>,<span class="string">'has'</span>,<span class="string">'flea'</span>,<span class="string">'problems'</span>,<span class="string">'help'</span>,<span class="string">'please'</span>],</span><br><span class="line">                  [<span class="string">'maybe'</span>,<span class="string">'not'</span>,<span class="string">'take'</span>,<span class="string">'him'</span>,<span class="string">'to'</span>,<span class="string">'dog'</span>,<span class="string">'park'</span>,<span class="string">'stupid'</span>],</span><br><span class="line">                  [<span class="string">'my'</span>,<span class="string">'dalmation'</span>,<span class="string">'is'</span>,<span class="string">'so'</span>,<span class="string">'cute'</span>,<span class="string">'I'</span>,<span class="string">'love'</span>,<span class="string">'him'</span>],</span><br><span class="line">                  [<span class="string">'stop'</span>,<span class="string">'posting'</span>,<span class="string">'stupid'</span>,<span class="string">'worthless'</span>,<span class="string">'garbage'</span>],</span><br><span class="line">                  [<span class="string">'mr'</span>,<span class="string">'licks'</span>,<span class="string">'ate'</span>,<span class="string">'my'</span>,<span class="string">'steak'</span>,<span class="string">'how'</span>,<span class="string">'to'</span>,<span class="string">'stop'</span>,<span class="string">'him'</span>],</span><br><span class="line">                  [<span class="string">'quit'</span>,<span class="string">'buying'</span>,<span class="string">'worthless'</span>,<span class="string">'dog'</span>,<span class="string">'food'</span>,<span class="string">'stupid'</span>]]</span><br><span class="line">    <span class="comment"># 0表示正常言论，１表示包含侮辱性词汇的评论</span></span><br><span class="line">    categoryVector = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> postingList,categoryVector</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testNavieBayes</span><span class="params">()</span>:</span></span><br><span class="line">    listOfPosts,listClasses = loadDataSet()</span><br><span class="line">    vocabularyList = createVocabularyList(listOfPosts)</span><br><span class="line">    trainMatrix = []</span><br><span class="line">    <span class="keyword">for</span> post <span class="keyword">in</span> listOfPosts:</span><br><span class="line">        trainMatrix.append(setOfWords2Vector(vocabularyList,post))</span><br><span class="line">    p0Vector,p1Vector,pc1 = trainNavieBayes(array(trainMatrix),array(listClaasses))</span><br><span class="line">    testPost = [<span class="string">'love'</span>,<span class="string">'my'</span>,<span class="string">'dalmation'</span>]</span><br><span class="line">    testVector = array(setOfWords2Vector(vocabularyList,testPost))</span><br><span class="line">    print(str(testPost)+<span class="string">" 被分类为:"</span>+</span><br><span class="line">          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))</span><br><span class="line">    </span><br><span class="line">    testPost = [<span class="string">'stupid'</span>,<span class="string">'garbage'</span>]</span><br><span class="line">    testVector = array(setOfWords2Vector(vocabularyList,testPost))</span><br><span class="line">    print(str(testPost)+<span class="string">" 被分类为:"</span>+</span><br><span class="line">          classifNavieBayes(testVector,p0Vector,p1Vector,pc1))</span><br></pre></td></tr></table></figure><hr><p>参考资料</p><ul><li>机器学习实战, Peter Harrington, 人民邮电出版社</li><li>机器学习, 周志华, 清华大学出版社</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习之k-近邻算法</title>
      <link href="/2018/06/27/machine-learning-knn/"/>
      <url>/2018/06/27/machine-learning-knn/</url>
      
        <content type="html"><![CDATA[<p>k-近邻算法（k-Nearest Neighbor，简称kNN）,工作原理：</p><p>存在一个样本数据集合，也称作训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一数据与所属分类的对应关系．</p><p>输入没有标签的新数据后，将新数据的每个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似的数据（最近邻）的分类标签．一般来说，只选择样本数据集中前k个最相似的数据，这就是k-近邻算法中k的出处，通常k是不大于20的整数．</p><p>最后，选择k个最相似数据中<strong>出现次数最多的分类</strong>，作为新数据的分类．</p><a id="more"></a><h3 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h3><p>创建一个kNN.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(inputData,dataSet,labels,k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    k-近邻算法</span></span><br><span class="line"><span class="string">    inputData: 需要预测分类的数据</span></span><br><span class="line"><span class="string">    dataSet: 训练样本集</span></span><br><span class="line"><span class="string">    labels: 样本集的分类标签</span></span><br><span class="line"><span class="string">    k: k-近邻算法中k,选择最近邻居的数目</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 取得样本集合中的样本个数，shape是numpy中用于计算矩阵维度的元组，这里的shape[0]可以理解为求二维矩阵dataSet的行数</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 求输入数据与样本集合的差值，tile()是numpy中用于扩展矩阵的函数，这里是将inputData扩展为dataSize行的矩阵，以确保inputData与dataSize同维度，可以相减</span></span><br><span class="line">    differenceMatrix = tile(inputData,(dataSize,<span class="number">1</span>)) - dataSet</span><br><span class="line">    <span class="comment"># 差矩阵的每个元素平方</span></span><br><span class="line">    sqDifferenceMatrix = sqDifferenceMatrix**<span class="number">2</span></span><br><span class="line">    <span class="comment"># 对平方后的差距阵每一行求和</span></span><br><span class="line">    sqDistances = sqDifferenceMatrix.sum(axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 求得输入数据与所有样本的距离</span></span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span></span><br><span class="line">    <span class="comment"># 按照从小到大的顺序对距离列表中的每个距离排序，按排序顺序返回排序之前的索引号</span></span><br><span class="line">    sortedDistanceIndicies = distances.argsort()</span><br><span class="line">    <span class="comment"># kClassData 用于存储最相似的k个数据中出现的所有分类及该分类出现的次数，以分类标签作为键，以频度作为值</span></span><br><span class="line">    kClassData = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        label = labels[sortedDistanceIndicies[k]]</span><br><span class="line">        <span class="comment"># 以下三行，书上简写为kClassCount[label] = kClassData.get(label,0) + 1</span></span><br><span class="line">        <span class="comment"># 其中的get()方法，表示若不存在键label，则执行kClassData[label] = 0</span></span><br><span class="line">        <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> kClassData:</span><br><span class="line">            kClassData[label] = <span class="number">0</span></span><br><span class="line">        kClassData[label] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 对kClassData　按出现的频度降序排序</span></span><br><span class="line">    <span class="comment"># 书上这里写的是kClassData.iteritems()，这是python2中字典的方法，python3中只有items()方法</span></span><br><span class="line">    sortedkClassData = sorted(kClassData.items(),</span><br><span class="line">                              key=operator.itemgetter(<span class="number">1</span>),</span><br><span class="line">                              reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># 返回k个最相似数据中出现频度最高的分类标签</span></span><br><span class="line">    <span class="keyword">return</span> sortedkClassData[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>上面的程序使用了<strong>欧式距离公式</strong>，计算两个n维向量A和B之间的距离:</p><p>$$d=\sqrt{\sum_{i=1}^n{(A_i- B_i)^2}}$$</p><p>例如，点(2,1,5)和(1,2,3)之间的距离计算为：</p><p>$$d=\sqrt{(2-1)^2+(1-2)^2+(5-3)^2}$$</p><h3 id="测试算法"><a href="#测试算法" class="headerlink" title="测试算法"></a>测试算法</h3><p>已知6部电影的打斗镜头，接吻镜头及其类型（模拟的数据），判断一部已知打斗镜头和接吻镜头数的新电影，它的类型是动作片，还是爱情片，具体数据如下:</p><table><thead><tr><th style="text-align:center">电影名称</th><th style="text-align:center">打斗镜头</th><th style="text-align:center">接吻镜头</th><th style="text-align:center">电影类型</th></tr></thead><tbody><tr><td style="text-align:center">小时代</td><td style="text-align:center">0</td><td style="text-align:center">50</td><td style="text-align:center">爱情片</td></tr><tr><td style="text-align:center">鬼吹灯之寻龙诀</td><td style="text-align:center">100</td><td style="text-align:center">15</td><td style="text-align:center">动作片</td></tr><tr><td style="text-align:center">战狼</td><td style="text-align:center">150</td><td style="text-align:center">5</td><td style="text-align:center">动作片</td></tr><tr><td style="text-align:center">让子弹飞</td><td style="text-align:center">80</td><td style="text-align:center">2</td><td style="text-align:center">动作片</td></tr><tr><td style="text-align:center">左耳</td><td style="text-align:center">6</td><td style="text-align:center">50</td><td style="text-align:center">爱情片</td></tr><tr><td style="text-align:center">心花路放</td><td style="text-align:center">5</td><td style="text-align:center">40</td><td style="text-align:center">爱情片</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">18</td><td style="text-align:center">90</td><td style="text-align:center">待定</td></tr></tbody></table><p>我们当然可以一眼看出来，这部新电影应该是爱情片，但是，如何让程序自动预测它的类别呢？</p><p>创建一个test.py，代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kNN</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    dataSet = array([<span class="number">0</span>,<span class="number">50</span>],[<span class="number">100</span>,<span class="number">15</span>],[<span class="number">150</span>,<span class="number">5</span>],</span><br><span class="line">                   [<span class="number">80</span>,<span class="number">2</span>],[<span class="number">6</span>,<span class="number">50</span>],[<span class="number">5</span>,<span class="number">40</span>])</span><br><span class="line">    labels = [<span class="string">'爱情片'</span>,<span class="string">'动作片'</span>,<span class="string">'动作片'</span>,<span class="string">'动作片'</span>,<span class="string">'爱情片'</span>,<span class="string">'爱情片'</span>]</span><br><span class="line">    <span class="keyword">return</span> dataSet,labels</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">testKNN</span><span class="params">()</span>:</span></span><br><span class="line">inputData = [<span class="number">18</span>,<span class="number">90</span>]</span><br><span class="line">dataSet,labels = createDataSet()</span><br><span class="line"><span class="keyword">return</span> kNN.classify(inputData,dataSet,labels,<span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">label = testKNN()</span><br><span class="line">print(label)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">爱情片</span><br></pre></td></tr></table></figure><p>可以看到，kNN算法确实准确的预测了新电影的分类．</p><h3 id="算法改进"><a href="#算法改进" class="headerlink" title="算法改进"></a>算法改进</h3><p>欧式距离中，数字差值越大的属性对计算结果的影响也越大．若想消除这种影响，使各属性权重相等，可以<strong>将数值归一化</strong>，如将取值范围处理为0到1，或者-1到1之间．</p><p>下面的公式可以将任意取值范围的特征值转化为0到1区间内的值：</p><p>$$newValue = \frac{oldValue-min}{max-min}$$</p><p>其中，min和max分别是数据集中某一特征（属性）的最小值和最大值</p><p>在kNN.py中新增如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoNorm</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    <span class="string">"""将训练集中的数据归一化"""</span></span><br><span class="line">    minValues = dataSet.min(<span class="number">0</span>)</span><br><span class="line">    maxValues = dataSet.max(<span class="number">0</span>)</span><br><span class="line">    ranges = maxValues - minValues</span><br><span class="line">    normDataSet = zeros(shape(dataSet))    </span><br><span class="line">    m = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    normDataSet = dataSet - tile(minVals,(m,<span class="number">1</span>))</span><br><span class="line">    normDataSet = normDataSet/tile(ranges,(m,<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> normDataSet</span><br></pre></td></tr></table></figure><p>接着修改classify()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(inputData,dataSet,labels,k)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    k-近邻算法</span></span><br><span class="line"><span class="string">    inputData: 需要预测分类的数据</span></span><br><span class="line"><span class="string">    dataSet: 训练样本集</span></span><br><span class="line"><span class="string">    labels: 样本集的分类标签</span></span><br><span class="line"><span class="string">    k: k-近邻算法中k,选择最近邻居的数目</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    dataSet = autoNorm(dataSet)<span class="comment"># 添加这一行</span></span><br><span class="line">    dataSetSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    differenceMatrix = tile(inputData,(dataSize,<span class="number">1</span>)) - dataSet</span><br><span class="line">    sqDifferenceMatrix = sqDifferenceMatrix**<span class="number">2</span></span><br><span class="line">    sqDistances = sqDifferenceMatrix.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span></span><br><span class="line">    sortedDistanceIndicies = distances.argsort()</span><br><span class="line">    kClassData = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        label = labels[sortedDistanceIndicies[k]]</span><br><span class="line">        <span class="keyword">if</span> label <span class="keyword">not</span> <span class="keyword">in</span> kClassData:</span><br><span class="line">            kClassData[label] = <span class="number">0</span></span><br><span class="line">        kClassData[label] += <span class="number">1</span></span><br><span class="line">    sortedkClassData = sorted(kClassData.items(),</span><br><span class="line">                              key=operator.itemgetter(<span class="number">1</span>),</span><br><span class="line">                              reverse=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedkClassData[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib入门</title>
      <link href="/2018/06/26/python-matplotlib/"/>
      <url>/2018/06/26/python-matplotlib/</url>
      
        <content type="html"><![CDATA[<p>Matplotlib是一个Python的2D绘图库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><h3 id="设置图片标题"><a href="#设置图片标题" class="headerlink" title="设置图片标题"></a>设置图片标题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.title(<span class="string">'title'</span>)</span><br></pre></td></tr></table></figure><h3 id="设置x-y轴文字"><a href="#设置x-y轴文字" class="headerlink" title="设置x/y轴文字"></a>设置x/y轴文字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlabel(<span class="string">'xlabel'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'ylabel'</span>)</span><br></pre></td></tr></table></figure><h3 id="设置x-y轴的刻度范围"><a href="#设置x-y轴的刻度范围" class="headerlink" title="设置x/y轴的刻度范围"></a>设置x/y轴的刻度范围</h3><p>默认情况下，matplotlib的坐标轴刻度并不会从0开始。通过xlim()和ylim()方法，设置x/y轴的刻度范围，可以让x/y轴的刻度从0开始。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlim(xmin,xmax)</span><br><span class="line">plt.ylim(ymin,ymax)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xlim(xmin=<span class="number">0</span>, xmax=<span class="number">1000</span>)</span><br><span class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h3 id="设置x-y轴的刻度"><a href="#设置x-y轴的刻度" class="headerlink" title="设置x/y轴的刻度"></a>设置x/y轴的刻度</h3><p>可以使用xticks()和yticks()方法，设置x/y轴需要显示的所有刻度值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.xticks(ticks=<span class="keyword">None</span>, labels=<span class="keyword">None</span>, **kwargs)</span><br><span class="line">plt.yticks(ticks=<span class="keyword">None</span>, labels=<span class="keyword">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以50为步长，x轴的刻度为0,50,100,150,...,900,950</span></span><br><span class="line">plt.xticks(np.arange(<span class="number">0</span>, <span class="number">950</span>, step=<span class="number">50</span>))</span><br></pre></td></tr></table></figure><h3 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="使用中文"><a href="#使用中文" class="headerlink" title="使用中文"></a>使用中文</h3><p>Matplotlib默认是不支持中文的。因此，如果要显示中文，可以导入本地的中文字体库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置字体，fname为本地字体库的所在路径</span></span><br><span class="line">font = FontProperties(fname=<span class="string">'/System/Library/Fonts/Hiragino Sans GB.ttc'</span>,size=<span class="number">14</span>)</span><br><span class="line"><span class="comment"># 在用到中文的地方，设置fontproperties</span></span><br><span class="line">plt.title(<span class="string">"出行时段分布"</span>,fontproperties=font)</span><br></pre></td></tr></table></figure><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><p>绘制折线图，需要使用matplotlib.pyplot中的<strong>plot</strong>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plot([x], y, [fmt], *, data=<span class="keyword">None</span>, **kwargs)</span><br><span class="line">plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)</span><br></pre></td></tr></table></figure><h4 id="线条样式及颜色"><a href="#线条样式及颜色" class="headerlink" title="线条样式及颜色"></a>线条样式及颜色</h4><p>fmt由标记（marker）、线条样式（linestyle）以及颜色（color）组成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># marker、line以及color均为可选</span></span><br><span class="line">fmt = <span class="string">'[marker][line][color]'</span></span><br></pre></td></tr></table></figure><ul><li>Markers</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">符号描述</span><br><span class="line">--------------</span><br><span class="line"> o圆形</span><br><span class="line"> v下三角</span><br><span class="line"> ^上三角</span><br><span class="line"> s正方形</span><br><span class="line"> *星号</span><br><span class="line"> +加号</span><br><span class="line"> xX</span><br><span class="line"> D等边菱形</span><br><span class="line"> d不等边菱形</span><br></pre></td></tr></table></figure><ul><li>Line Styles</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">符号描述</span><br><span class="line">--------------</span><br><span class="line"> -实线</span><br><span class="line"> --虚线</span><br><span class="line"> -.点划线</span><br><span class="line"> :点线</span><br></pre></td></tr></table></figure><ul><li>Colors</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">符号描述</span><br><span class="line">--------------</span><br><span class="line"> bblue</span><br><span class="line"> ggreen</span><br><span class="line"> rred</span><br><span class="line"> ccyan 蓝绿色</span><br><span class="line"> mmagenta 洋红色</span><br><span class="line"> yyellow</span><br><span class="line"> kblack</span><br><span class="line"> wwhite</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">y = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>]</span><br><span class="line"><span class="comment"># 带圆形标记的红色实线</span></span><br><span class="line">plt.plot(y, <span class="string">'o-r'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="常用关键字参数"><a href="#常用关键字参数" class="headerlink" title="常用关键字参数"></a>常用关键字参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">符号描述</span><br><span class="line">--------------------------------</span><br><span class="line">color <span class="keyword">or</span> ccolor</span><br><span class="line">linestyle <span class="keyword">or</span> lsfloat</span><br><span class="line">linewidth <span class="keyword">or</span> lwfloat</span><br><span class="line">markermarker style</span><br><span class="line">markersize <span class="keyword">or</span> msfloat</span><br><span class="line">label线条的名字</span><br></pre></td></tr></table></figure><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><p>绘制散点图，需要使用matplotlib.pyplot中的<strong>scatter</strong>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">y = [i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> x]</span><br><span class="line">plt.scatter(x,y,linewidth=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">'Squares Numbers'</span>,fontsize=<span class="number">24</span>)</span><br><span class="line">plt.xlabel(<span class="string">'value'</span>,fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">'square of value'</span>,fontsize=<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">plt.tick_params(axis=<span class="string">'both'</span>,labelsize=<span class="number">14</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h3><p>绘制柱状图，需要使用matplotlib.pyplot中的<strong>bar</strong>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bar(x, height, width=<span class="number">0.8</span>, bottom=<span class="keyword">None</span>, *, align=<span class="string">'center'</span>, data=<span class="keyword">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><h3 id="饼状图"><a href="#饼状图" class="headerlink" title="饼状图"></a>饼状图</h3><p>绘制饼状图，需要使用matplotlib.pyplot中的<strong>pie</strong>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pie(x, explode=<span class="keyword">None</span>, labels=<span class="keyword">None</span>, colors=<span class="keyword">None</span>, autopct=<span class="keyword">None</span>,</span><br><span class="line">        pctdistance=<span class="number">0.6</span>, shadow=<span class="keyword">False</span>, labeldistance=<span class="number">1.1</span>, startangle=<span class="keyword">None</span>,</span><br><span class="line">        radius=<span class="keyword">None</span>, counterclock=<span class="keyword">True</span>, wedgeprops=<span class="keyword">None</span>, textprops=<span class="keyword">None</span>,</span><br><span class="line">        center=(<span class="number">0</span>, <span class="number">0</span>), frame=<span class="keyword">False</span>, rotatelabels=<span class="keyword">False</span>, hold=<span class="keyword">None</span>, data=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><h3 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h3><p>保存图片，需要使用matplotlib.pyplot中的savefig方法。</p><p>需要注意的是：<strong>savefig必须在show方法之前执行</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.savefig(<span class="string">'./test.eps'</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="添加水平-垂直线"><a href="#添加水平-垂直线" class="headerlink" title="添加水平/垂直线"></a>添加水平/垂直线</h3><p>可以使用hlines()和vlines()方法分别绘制水平、垂直线段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.vlines(x=0, ymin=0, ymax=1, linestyles=&apos;dashed&apos;)</span><br><span class="line">plt.hlines(y=0.5, xmin=-10, xmax=10, linestyles=&apos;dashed&apos;)</span><br></pre></td></tr></table></figure><h3 id="显示图例"><a href="#显示图例" class="headerlink" title="显示图例"></a>显示图例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><h3 id="显示网格"><a href="#显示网格" class="headerlink" title="显示网格"></a>显示网格</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plt.grid(b=<span class="keyword">None</span>, which=<span class="string">'major'</span>, axis=<span class="string">'both'</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>b：是否显示网格</p><p>which：在哪些刻度上画网格线（主刻度|小刻度），可选的值有{‘major’, ‘minor’, ‘both’}</p><p>axis：在哪个轴上画网格线，可选的值有{‘both’, ‘x’, ‘y’}</p><p>其他关键字参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">符号描述</span><br><span class="line">----------------------------------</span><br><span class="line">color <span class="keyword">or</span> c网格线的颜色</span><br><span class="line">linestyle <span class="keyword">or</span> ls 网格线的样式</span><br><span class="line">linewidth <span class="keyword">or</span> lw 线的宽度</span><br></pre></td></tr></table></figure><h3 id="更改坐标轴的位置"><a href="#更改坐标轴的位置" class="headerlink" title="更改坐标轴的位置"></a>更改坐标轴的位置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gca，get current axis</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏右边和顶部的线条</span></span><br><span class="line">ax.spines[<span class="string">'right'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line">ax.spines[<span class="string">'top'</span>].set_color(<span class="string">'none'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴和y轴所在的位置</span></span><br><span class="line">ax.xaxis.set_ticks_position(<span class="string">'bottom'</span>)</span><br><span class="line">ax.yaxis.set_ticks_position(<span class="string">'left'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置x轴和y轴的交点为(0,0)</span></span><br><span class="line">ax.spines[<span class="string">'bottom'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br><span class="line">ax.spines[<span class="string">'left'</span>].set_position((<span class="string">'data'</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h3 id="对LaTex的支持"><a href="#对LaTex的支持" class="headerlink" title="对LaTex的支持"></a>对LaTex的支持</h3><p>在需要输入LaTex公式的地方，使用一对美元符$$包裹起来，就像这样<code>r&#39;sigmoid(x)=$\frac{1}{1+e^{-x}}$&#39;</code>，不要忘记前面的字母r（告诉编译器后面的字符串是个raw string，不需要对反斜杠进行转义）。</p><p>示例：</p><p>绘制Sigmoid函数，并在图例中显示sigmoid的数学表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x = np.arange(start=<span class="number">-10</span>, stop=<span class="number">10</span>, step=<span class="number">0.1</span>)</span><br><span class="line">y = <span class="number">1</span> / (<span class="number">1</span> + math.e ** (-x))</span><br><span class="line">plt.plot(x, y, linewidth=<span class="number">3</span>, label=<span class="string">r'sigmoid(x)=$\frac&#123;1&#125;&#123;1+e^&#123;-x&#125;&#125;$'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'x'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sigmoid(x)'</span>, fontsize=<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(np.arange(<span class="number">-10</span>, <span class="number">11</span>, step=<span class="number">1</span>))</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">1.1</span>, step=<span class="number">0.1</span>))</span><br><span class="line">plt.ylim(ymin=<span class="number">0</span>, ymax=<span class="number">1</span>)</span><br><span class="line">plt.xlim(xmin=<span class="number">-10</span>, xmax=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">plt.vlines(x=<span class="number">0</span>, ymin=<span class="number">0</span>, ymax=<span class="number">1</span>, linestyles=<span class="string">'dashed'</span>)</span><br><span class="line">plt.hlines(y=<span class="number">0.5</span>, xmin=<span class="number">-10</span>, xmax=<span class="number">10</span>, linestyles=<span class="string">'dashed'</span>)</span><br><span class="line"></span><br><span class="line">plt.legend()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>输出：</p><p><img src="/static/images/sigmoid-legend.png" alt=""></p><p>更多信息，参看<a href="https://matplotlib.org/api/pyplot_summary.html" target="_blank" rel="noopener">https://matplotlib.org/api/pyplot_summary.html</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NumPy入门</title>
      <link href="/2018/06/25/python-numpy/"/>
      <url>/2018/06/25/python-numpy/</url>
      
        <content type="html"><![CDATA[<p>NumPy（Numerical Python）是高性能科学计算和数据分析的基础包。</p><p>按照标准约定，我们在使用NumPy时，最好遵循如下格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="ndarray"><a href="#ndarray" class="headerlink" title="ndarray"></a>ndarray</h3><p>ndarray是一个n维数组对象，其中的所有元素必须是相同类型的值。</p><p>ndarray常见属性：</p><ul><li>shape：表示各个维度大小的元组</li><li>dtype：表示数组数据类型的对象</li></ul><p>通过NumPy中的array()函数，即可将一切序列型的对象转换为NumPy中的数组。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1.1</span>,<span class="number">23</span>,<span class="number">1234</span>,<span class="number">5</span>]])</span><br><span class="line">print(data.shape)</span><br><span class="line">print(data.dtype)</span><br></pre></td></tr></table></figure><h4 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h4><p>NumPy中的ndarray支持逐元素的算术运算<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>和<code>//</code>等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"></span><br><span class="line">data2 = np.array([[<span class="number">11</span>,<span class="number">21</span>,<span class="number">31</span>],[<span class="number">41</span>,<span class="number">51</span>,<span class="number">61</span>],[<span class="number">71</span>,<span class="number">81</span>,<span class="number">91</span>]])</span><br><span class="line">print(<span class="string">'data1和data2逐元素相加：'</span>)</span><br><span class="line">print(data1 + data2)</span><br><span class="line">print(<span class="string">'data1和data2逐元素相减：'</span>)</span><br><span class="line">print(data2 - data1)</span><br><span class="line">print(<span class="string">'data1和data2逐元素相乘：'</span>)</span><br><span class="line">print(data1 * data2)</span><br><span class="line">print(<span class="string">'data2和data1逐元素相除：'</span>)</span><br><span class="line">print(data2 / data1)</span><br><span class="line">print(<span class="string">'data2和data1逐元素相除取余：'</span>)</span><br><span class="line">print(data2 % data1)</span><br><span class="line">print(<span class="string">'data2和data1逐元素相除取商：'</span>)</span><br><span class="line">print(data2 // data1)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">data1和data2逐元素相加：</span><br><span class="line">[[ <span class="number">12</span>  <span class="number">23</span>  <span class="number">34</span>]</span><br><span class="line"> [ <span class="number">45</span>  <span class="number">56</span>  <span class="number">67</span>]</span><br><span class="line"> [ <span class="number">78</span>  <span class="number">89</span> <span class="number">100</span>]]</span><br><span class="line">data1和data2逐元素相减：</span><br><span class="line">[[<span class="number">10</span> <span class="number">19</span> <span class="number">28</span>]</span><br><span class="line"> [<span class="number">37</span> <span class="number">46</span> <span class="number">55</span>]</span><br><span class="line"> [<span class="number">64</span> <span class="number">73</span> <span class="number">82</span>]]</span><br><span class="line">data1和data2逐元素相乘：</span><br><span class="line">[[ <span class="number">11</span>  <span class="number">42</span>  <span class="number">93</span>]</span><br><span class="line"> [<span class="number">164</span> <span class="number">255</span> <span class="number">366</span>]</span><br><span class="line"> [<span class="number">497</span> <span class="number">648</span> <span class="number">819</span>]]</span><br><span class="line">data2和data1逐元素相除：</span><br><span class="line">[[<span class="number">11.</span>         <span class="number">10.5</span>        <span class="number">10.33333333</span>]</span><br><span class="line"> [<span class="number">10.25</span>       <span class="number">10.2</span>        <span class="number">10.16666667</span>]</span><br><span class="line"> [<span class="number">10.14285714</span> <span class="number">10.125</span>      <span class="number">10.11111111</span>]]</span><br><span class="line">data2和data1逐元素相除取余：</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">1</span>]]</span><br><span class="line">data2和data1逐元素相除取商：</span><br><span class="line">[[<span class="number">11</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]</span><br><span class="line"> [<span class="number">10</span> <span class="number">10</span> <span class="number">10</span>]]</span><br></pre></td></tr></table></figure><h4 id="将NumPy中的ndarray转换为Python中的list"><a href="#将NumPy中的ndarray转换为Python中的list" class="headerlink" title="将NumPy中的ndarray转换为Python中的list"></a>将NumPy中的ndarray转换为Python中的list</h4><p>使用ndarray的tolist()函数，可以将NumPy数组转换为Python中的list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">1.1</span>,<span class="number">23</span>,<span class="number">1234</span>,<span class="number">5</span>]])</span><br><span class="line">print(type(data))</span><br><span class="line">ls = data.tolist()</span><br><span class="line">print(ls)</span><br><span class="line">print(type(ls))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br><span class="line">[[1.0, 2.0, 4.0, 5.0], [1.1, 23.0, 1234.0, 5.0]]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">list</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组复制"><a href="#数组复制" class="headerlink" title="数组复制"></a>数组复制</h4><p>使用ndarray的copy()方法，可以创建数组副本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">data = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">12</span>,<span class="number">23</span>,<span class="number">1234</span>,<span class="number">5</span>]])</span><br><span class="line">x = data.copy()</span><br><span class="line">print(x <span class="keyword">is</span> data)</span><br><span class="line">print(x == data)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">False</span></span><br><span class="line">[[ <span class="keyword">True</span>  <span class="keyword">True</span>  <span class="keyword">True</span>  <span class="keyword">True</span>]</span><br><span class="line"> [ <span class="keyword">True</span>  <span class="keyword">True</span>  <span class="keyword">True</span>  <span class="keyword">True</span>]]</span><br></pre></td></tr></table></figure><h3 id="zeros-ones"><a href="#zeros-ones" class="headerlink" title="zeros, ones"></a>zeros, ones</h3><p>除了可以使用array()函数创建数组外，还可以使用zeros、ones来创建数组。</p><p>接受参数：</p><ul><li>表示维度大小的元组shape</li><li>表示数据类型的dtype</li></ul><p>返回：一个指定维度且元素值全为0或1的数组</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 创建一个１行３列的全0数组</span></span><br><span class="line">print(np.zeros(<span class="number">3</span>))</span><br><span class="line"><span class="comment"># 创建一个３行3列的全0数组</span></span><br><span class="line">print(np.zeros((<span class="number">3</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">print(np.ones(<span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span>]]</span><br><span class="line">[<span class="number">1.</span> <span class="number">1.</span> <span class="number">1.</span>]</span><br></pre></td></tr></table></figure><p>可以看到，如果我们只传入一个数字n，则会创建一个1xn的数组。</p><h3 id="shape"><a href="#shape" class="headerlink" title="shape"></a>shape</h3><p>shape()函数用于测量NumPy中数组、矩阵等的维度，返回一个表示维度的元组。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">print(np.shape([[<span class="number">1</span>, <span class="number">2</span>]]))</span><br><span class="line">print(np.shape([<span class="number">0</span>]))</span><br><span class="line">data = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]],</span><br><span class="line">                [[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]])</span><br><span class="line">print(np.shape(data))</span><br><span class="line"></span><br><span class="line">print(data.shape)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">1</span>,)</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="full"><a href="#full" class="headerlink" title="full"></a>full</h3><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">full(shape, fill_value, dtype=<span class="keyword">None</span>, order=<span class="string">'C'</span>)</span><br></pre></td></tr></table></figure><ul><li>shape：数组的维度</li><li>fill_value：填充的值</li><li>dtype：指定的数据类型</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">print(np.full((<span class="number">2</span>,<span class="number">2</span>),<span class="number">1.</span>))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">1.</span> <span class="number">1.</span>]]</span><br></pre></td></tr></table></figure><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><h4 id="broadcast-to"><a href="#broadcast-to" class="headerlink" title="broadcast_to"></a>broadcast_to</h4><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">broadcast_to(array, shape, subok=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><ul><li>array：待广播的数组</li><li>shape：期望的维度（用元组表示）</li></ul><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(np.broadcast_to(x, (<span class="number">2</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h4 id="tile"><a href="#tile" class="headerlink" title="tile"></a>tile</h4><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tile(A, reps)</span><br></pre></td></tr></table></figure><p>沿着每个轴，将数组中的元素重复指定次数。</p><p><a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html" target="_blank" rel="noopener">https://docs.scipy.org/doc/numpy/reference/generated/numpy.tile.html</a></p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">print(np.tile(x,<span class="number">3</span>))</span><br><span class="line">print(np.tile(x,(<span class="number">2</span>,<span class="number">2</span>)))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]]</span><br></pre></td></tr></table></figure><h3 id="eye"><a href="#eye" class="headerlink" title="eye"></a>eye</h3><p>eye()函数用于创建一个指定大小的单位数组(类似于线性代数中的单位矩阵)。</p><p>接受参数：一个表示维度大小的整数</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">       [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure><h3 id="arange"><a href="#arange" class="headerlink" title="arange"></a>arange</h3><p>arange()函数类似于python中的range()，但它返回的是一个NumPy数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.arange(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br></pre></td></tr></table></figure><h3 id="mat"><a href="#mat" class="headerlink" title="mat"></a>mat</h3><p>mat()函数用于创建矩阵。</p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><h4 id="seed"><a href="#seed" class="headerlink" title="seed"></a>seed</h4><p>设置随机数生成器种子。保证每次运行，生成的随机数相同。</p><h4 id="randint"><a href="#randint" class="headerlink" title="randint"></a>randint</h4><p>函数原型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">numpy.random.randint(low, high=<span class="keyword">None</span>, size=<span class="keyword">None</span>, dtype=<span class="string">'l'</span>)</span><br></pre></td></tr></table></figure><p>返回一个或者多个随机整数，范围从低（包括）到高（不包括），即[low, high)。如果没有写参数high的值，则返回[0,low)的值。</p><h4 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h4><p>打乱ndarray中数据的顺序。</p><h3 id="保存-加载NumPy对象"><a href="#保存-加载NumPy对象" class="headerlink" title="保存/加载NumPy对象"></a>保存/加载NumPy对象</h3><p>要想保存NumPy对象，可以使用numpy.save()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.save(np.ones((<span class="number">1</span>,)),<span class="string">'./test.npy'</span>)</span><br></pre></td></tr></table></figure><p>加载保存在本地的NumPy对象，可以使用numpy.load()方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">np.load(<span class="string">'./test.npy'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java位运算符</title>
      <link href="/2018/06/16/java-bitwise-operation/"/>
      <url>/2018/06/16/java-bitwise-operation/</url>
      
        <content type="html"><![CDATA[<p>在讲位运算符之前，我们先来回顾下本科时学过的一些计算机基础知识。</p><p>所谓原码就是二进制定点表示法，即最高位为符号位，正数为0，负数为1，其余位表示数值的大小。</p><p>反码：正数的反码与其原码相同，负数的反码是其原码逐位求反（符号位除外）。</p><p>补码：正数的补码与其原码相同，负数的补码为其反码加1。</p><p>整数在内存中是以补码的形式存储的。</p><a id="more"></a><p>一个简单的例子：</p><p>5的原码、补码、反码为<br>$$<br>原码：0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0101 \\<br>反码：0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0101 \\<br>补码：0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0101<br>$$<br>-4的原码、补码、反码为：<br>$$<br>原码：1000 \ 0000 \quad  0000 \  0000 \quad   0000 \  0000 \quad  0000 \ 0100 \\<br>反码：1111 \ 1111 \quad 1111 \ 1111 \quad  1111 \ 1111 \quad 1111 \ 1011 \\<br>补码：1111 \ 1111 \quad 1111 \ 1111 \quad  1111 \ 1111 \quad 1111 \ 1100<br>$$</p><p>反过来，已知补码如何求原码呢？</p><p>已知补码如下，求其十进制表示？<br>$$<br>1111 \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1000<br>$$<br>先通过补码求得反码，即补码减去1<br>$$<br>\ 1111 \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1000 \\<br>\underline{- 0000 \ 0000  \quad 0000  \ 0000  \quad 0000  \ 0000  \quad 0000  \ 0001} \\<br>= 1111 \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1111  \quad 1111  \ 0111<br>$$<br>除最高位（符号位）外，其他位按位求反，就得到了原码<br>$$<br>(1000 \ 0000  \quad 0000  \ 0000  \quad 0000  \ 0000  \quad 0000  \ 1000)_2 = -8<br>$$<br>有了上面这些知识，位运算就很容易理解了。</p><h3 id="按位与-amp"><a href="#按位与-amp" class="headerlink" title="按位与&amp;"></a>按位与&amp;</h3><p>按位与运算的运算符是“&amp;”，是双目运算符。如果两个操作数对应位都是1，则结果位为1，否则为0。</p><p>示例：5 &amp; -4 = 4<br>$$<br>5的补码\\<br>\overbrace  {0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0101} \\<br>\&amp; \\<br>\underbrace{1111 \ 1111 \quad 1111 \ 1111 \quad  1111 \ 1111 \quad 1111 \ 1100 } \\<br>-4的补码 \\<br>\Downarrow \\<br>\underbrace{0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0100} \\<br>5\&amp;-4的结果为十进制整数4<br>$$</p><h3 id="按位或"><a href="#按位或" class="headerlink" title="按位或|"></a>按位或|</h3><p>按位与运算的运算符是“|”，是双目运算符。如果两个操作数对应位都是0，则结果才是0，否则为1。</p><p>示例：3 | 6 = 7<br>$$<br>3的补码 \\<br>\overbrace  {0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0011} \\<br>| \\<br>\underbrace{0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0110} \\<br>6的补码  \\<br>\Downarrow \\<br>\underbrace{0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0111} \\<br>3 | 6的结果为十进制整数7<br>$$</p><h3 id="按位非"><a href="#按位非" class="headerlink" title="按位非~"></a>按位非~</h3><p>按位非运算，也称“按位取反”运算，运算符为“~”，是单目运算符。</p><p>运算法则：将操作数二进制中的1全部修改为0，0全部改为1</p><p>示例：~7 = -8<br>$$<br>7的补码\\<br>\overbrace  {0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0111} \\<br>\Downarrow \\<br>\underbrace{1111 \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1111  \quad 1111  \ 1000} \\<br>\sim7的结果为十进制整数-8<br>$$</p><h3 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或^"></a>按位异或^</h3><p>按位异或运算的运算符是“^”，是双目运算符。</p><p>运算法则：当两个操作数的二进制表示相同（同为0或同为1）时，结果为0，否则为1。</p><p>示例：7^3 = 4<br>$$<br>7的补码 \\<br>\overbrace{0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0111} \\<br> \wedge \\<br>\underbrace{0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0011} \\<br>3的补码　\\<br>\Downarrow \\<br>\underbrace{0000 \ 0000 \quad 0000 \ 0000 \quad  0000 \ 0000 \quad 0000 \ 0100} \\<br>7^{\wedge} 3的结果为十进制整数4<br>$$</p><h3 id="移位运算符"><a href="#移位运算符" class="headerlink" title="移位运算符"></a>移位运算符</h3><p>Java语言中的移位运算符有3种，其操作的数据类型只有byte、short、char、int和long5种类型。</p><ul><li>左移运算符&lt;&lt;。左移空出的位置补0。</li></ul><p>如12&lt;&lt;1 = 24：</p><p>$$<br>\quad \quad \quad \underline{0 \quad  0 \quad  0 \quad  0 \quad  1 \quad  1 \quad  0 \quad  0 }\\<br>\quad 抛弃 \rightarrow  0 \quad  \underline{0 \quad  0\quad  0\quad  1 \quad   1\quad  0\quad  0} \quad  0 \leftarrow 补零 \\<br>结果为 2^{4}+2^{3} = 24<br>$$</p><ul><li>右移运算符&gt;&gt;。如果最高位为0，则右移空出的位置补0；如果最高位为1，空出的位置补1。</li></ul><p>如12&gt;&gt;1 = 6：</p><p>$$<br>\underline{0 \quad  0\quad  0\quad  0\quad  1\quad  1\quad  0 \quad  0 }\\<br>\quad 补零\rightarrow  0 \quad  \underline{0 \quad  0 \quad 0\quad  0\quad  1 \quad   1\quad  0}  \quad 0 \leftarrow 抛弃\\<br>结果为 2^{2}+2^{1} = 6<br>$$</p><ul><li>无符号右移运算符&gt;&gt;&gt;。不管最高位是0还是1，右移空出的位置都补0。</li></ul><p>简单来说，一个数左移n位，相当于这个数乘以2的n次方；右移n位，相当于除以2的n次方。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的进制表示</title>
      <link href="/2018/06/10/java-binary-octal-decimal-hexadecimal/"/>
      <url>/2018/06/10/java-binary-octal-decimal-hexadecimal/</url>
      
        <content type="html"><![CDATA[<p>平时做题也好，写程序或算法也罢，我们经常会见到诸如0Xfff、0b1000等数据，那么它们到底是什么意思呢？</p><p>其实0x、0b等是不同进制的前缀，旨在告诉编译器后面的数字是几进制的数据，而非默认的十进制数据。</p><a id="more"></a><p><strong>二进制（binary）</strong>：<strong>以0b或者0B为前缀</strong>，例如0b1000，等价于十进制的$1*2^3$=8</p><p><strong>需要注意的是</strong>，0b（0B）这种写法是从jdk1.7才有的</p><p><strong>八进制（octal）</strong>：<strong>以0为前缀</strong>，例如：070，等价于十进制的$7*8^1+0*8$=56</p><p><strong>十进制（decimal）</strong>：没有前缀，默认情况下数字均为十进制表示</p><p><strong>十六进制（hexadecimal）</strong>：<strong>以0x或者0X为前缀</strong>，例如算法中很常见的0xfff</p><p>上面的0是数字0，而不是字母o</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> binary1 = <span class="number">0b1000</span>;<span class="comment">//8</span></span><br><span class="line">System.out.println(binary1);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> binary2 = <span class="number">0B111</span>;<span class="comment">//7</span></span><br><span class="line">System.out.println(binary2);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> octal = <span class="number">070</span>;<span class="comment">//56</span></span><br><span class="line">System.out.println(octal);</span><br><span class="line">        </span><br><span class="line"><span class="keyword">int</span> hexadecimal = <span class="number">0xfff</span>;<span class="comment">//4095</span></span><br><span class="line">System.out.println(hexadecimal);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">56</span></span><br><span class="line"><span class="number">4095</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(C/C++版)之单链表的实现</title>
      <link href="/2018/06/07/data-structure-singlelinkedlist-in-c-or-c/"/>
      <url>/2018/06/07/data-structure-singlelinkedlist-in-c-or-c/</url>
      
        <content type="html"><![CDATA[<p class="text-center">用C/C++实现的单链表</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">/*以下所有方法中的index从1开始，而不是0. */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125; LinkedList;<span class="comment">//单链表</span></span><br><span class="line"><span class="comment">//如果参数写为LinkedList * list，并不会改变实参的值，但可以改变实参指针变量所指向的变量的值</span></span><br><span class="line"><span class="comment">//初始化单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(LinkedList * &amp;<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">list</span> = (LinkedList *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line"><span class="built_in">list</span>-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(LinkedList * <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkedList * <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList * p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p-&gt;data);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算单链表长度，头结点不算在内</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(LinkedList * <span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkedList * p = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*//判断index是否为正确的位置索引，索引号从1开始到length(list)</span></span><br><span class="line"><span class="comment">static bool isPositionIndex(LinkedList * list,int index) &#123;</span></span><br><span class="line"><span class="comment">if(index &gt; 0 &amp;&amp; index &lt;= length(list))</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">//判断index是否为正确的可添加结点的位置索引，索引号从1开始到length(list)+1</span></span><br><span class="line"><span class="comment">static bool isPositionIndexForAdd(LinkedList * list,int index) &#123;</span></span><br><span class="line"><span class="comment">if(index &gt; 0 &amp;&amp; index &lt;= length(list) + 1)</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//在单链表尾部添加结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(LinkedList * &amp;<span class="built_in">list</span>,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList * p,* last = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span>(last-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">last = last-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">p = (LinkedList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">last-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在索引位置为index处插入新的结点</span></span><br><span class="line"><span class="comment">//下面的写法，只遍历了一次单链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(LinkedList * &amp;<span class="built_in">list</span>,<span class="keyword">int</span> index,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkedList * newNode,* p = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; count &lt; index - <span class="number">1</span>)<span class="comment">//找到index结点的前一个结点</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//不存在第index-1个结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">newNode = (LinkedList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkedList));</span><br><span class="line">newNode-&gt;data = e;</span><br><span class="line">newNode-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = newNode;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*//下面的写法，  遍历了两遍单链表</span></span><br><span class="line"><span class="comment">bool add(LinkedList * &amp;list,int index,ElemType e)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//判断给定的index是否合理</span></span><br><span class="line"><span class="comment">if(!isPositionIndexForAdd(list,index))</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">int count = 0;</span></span><br><span class="line"><span class="comment">LinkedList * newNode,* p = list;</span></span><br><span class="line"><span class="comment">while(p != NULL &amp;&amp; count &lt; index - 1)//找到index结点的前一个结点</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">count++;</span></span><br><span class="line"><span class="comment">p = p-&gt;next;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">newNode = (LinkedList *)malloc(sizeof(LinkedList));</span></span><br><span class="line"><span class="comment">newNode-&gt;data = e;</span></span><br><span class="line"><span class="comment">newNode-&gt;next = p-&gt;next;</span></span><br><span class="line"><span class="comment">p-&gt;next = newNode;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//获取单链表中位置索引为index的元素，并将值赋给e</span></span><br><span class="line"><span class="comment">//只遍历一次</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(LinkedList * <span class="built_in">list</span>,<span class="keyword">int</span> index,ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList * p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; count &lt; index)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//不存在第index个结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">e = p-&gt;data;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*//需要遍历两次单链表</span></span><br><span class="line"><span class="comment">bool get(LinkedList * list,int index,ElemType &amp;e)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if(!isPositionIndex(list,index))</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">LinkedList * p = list-&gt;next;</span></span><br><span class="line"><span class="comment">int count = 1;</span></span><br><span class="line"><span class="comment">while(p != NULL &amp;&amp; count &lt; index)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">count++;</span></span><br><span class="line"><span class="comment">p = p-&gt;next;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">e = p-&gt;data;</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">/*//另一种更简洁的写法</span></span><br><span class="line"><span class="comment">ElemType get(LinkedList * list,int index)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">LinkedList * p = list-&gt;next;</span></span><br><span class="line"><span class="comment">int count = 1;</span></span><br><span class="line"><span class="comment">while(p != NULL &amp;&amp; count &lt; index)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">count++;</span></span><br><span class="line"><span class="comment">p = p-&gt;next;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">if(p == NULL)//不存在第index个结点</span></span><br><span class="line"><span class="comment">return NULL;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return p-&gt;data;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//删除最后一个结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(LinkedList * &amp;<span class="built_in">list</span>,ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList * oldNode,* p = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">while</span>(p-&gt;next-&gt;next != <span class="literal">NULL</span>)<span class="comment">//找最后一个结点的前驱结点</span></span><br><span class="line">&#123;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">oldNode = p-&gt;next;</span><br><span class="line">e =oldNode-&gt;data;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">free</span>(oldNode);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除第index个结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(LinkedList * &amp;<span class="built_in">list</span>,<span class="keyword">int</span> index,ElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">LinkedList * oldNode, * p = <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; count &lt; index - <span class="number">1</span>)<span class="comment">//找到第index-1个结点</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//不存在第index-1个结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">oldNode = p-&gt;next;</span><br><span class="line"><span class="comment">//这里需要特别注意，必须判断oldNode是否为NULL</span></span><br><span class="line"><span class="keyword">if</span>(oldNode == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">e = oldNode-&gt;data;</span><br><span class="line">p-&gt;next = oldNode-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(oldNode);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在单链表中元素e首次出现的位置 ，若不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(LinkedList * <span class="built_in">list</span>,ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">LinkedList * p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; p-&gt;data != e)</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁单链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(LinkedList * &amp;<span class="built_in">list</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinkedList * pre = <span class="built_in">list</span>,* p = <span class="built_in">list</span>-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(pre);</span><br><span class="line">pre = p;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(pre);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;<span class="comment">//声明LinkedList.h中的ElemType为int类型</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkedList.h"</span><span class="comment">//包含头文件时，尖括号用于引入系统库，自己定义的头文件，需要使用引号引入</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkedList * <span class="built_in">list</span>;</span><br><span class="line">init(<span class="built_in">list</span>);</span><br><span class="line">add(<span class="built_in">list</span>,<span class="number">20</span>);</span><br><span class="line">add(<span class="built_in">list</span>,<span class="number">20</span>);</span><br><span class="line">add(<span class="built_in">list</span>,<span class="number">21</span>);</span><br><span class="line">add(<span class="built_in">list</span>,<span class="number">22</span>);</span><br><span class="line">add(<span class="built_in">list</span>,<span class="number">23</span>);</span><br><span class="line">add(<span class="built_in">list</span>,<span class="number">2</span>,<span class="number">100</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"长度：%d\n"</span>,length(<span class="built_in">list</span>));</span><br><span class="line">print(<span class="built_in">list</span>);</span><br><span class="line">ElemType e;</span><br><span class="line"><span class="keyword">if</span>(get(<span class="built_in">list</span>,<span class="number">4</span>,e))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第4个结点的值为：%d\n"</span>,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"100首次出现的位置为：%d\n"</span>,indexOf(<span class="built_in">list</span>,<span class="number">100</span>));</span><br><span class="line"><span class="keyword">if</span>(remove(<span class="built_in">list</span>,<span class="number">3</span>,e))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"第3个结点的值为：%d\n"</span>,e);</span><br><span class="line"><span class="keyword">if</span>(remove(<span class="built_in">list</span>,e))</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"最后一个结点的值为：%d\n"</span>,e);</span><br><span class="line">print(<span class="built_in">list</span>);</span><br><span class="line">destroy(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">长度：<span class="number">6</span></span><br><span class="line"><span class="number">20</span> <span class="number">100</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> </span><br><span class="line">第<span class="number">4</span>个结点的值为：<span class="number">21</span></span><br><span class="line"><span class="number">100</span>首次出现的位置为：<span class="number">2</span></span><br><span class="line">第<span class="number">3</span>个结点的值为：<span class="number">20</span></span><br><span class="line">最后一个结点的值为：<span class="number">23</span></span><br><span class="line"><span class="number">20</span> <span class="number">100</span> <span class="number">21</span> <span class="number">22</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201803-3.URL映射</title>
      <link href="/2018/06/06/ccf-csp-20180303/"/>
      <url>/2018/06/06/ccf-csp-20180303/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　URL 映射是诸如 Django、Ruby on Rails 等网页框架 (web frameworks) 的一个重要组件。对于从浏览器发来的 HTTP 请求，URL 映射模块会解析请求中的 URL 地址，并将其分派给相应的处理代码。现在，请你来实现一个简单的 URL 映射功能。<br>　　本题中 URL 映射功能的配置由若干条 URL 映射规则组成。当一个请求到达时，URL 映射功能会将请求中的 URL 地址按照配置的先后顺序逐一与这些规则进行匹配。当遇到第一条完全匹配的规则时，匹配成功，得到匹配的规则以及匹配的参数。若不能匹配任何一条规则，则匹配失败。<br>　　本题输入的 URL 地址是以斜杠 / 作为分隔符的路径，保证以斜杠开头。其他合法字符还包括大小写英文字母、阿拉伯数字、减号 -、下划线 _ 和小数点 .。例如，/person/123/ 是一个合法的 URL 地址，而 /person/123? 则不合法（存在不合法的字符问号 ?）。另外，英文字母区分大小写，因此 /case/ 和 /CAse/ 是不同的 URL 地址。<br>　　对于 URL 映射规则，同样是以斜杠开始。除了可以是正常的 URL 地址外，还可以包含参数，有以下 3 种：<br>　　字符串 &lt;str&gt;：用于匹配一段字符串，注意字符串里不能包含斜杠。例如，abcde0123。<br>　　整数 &lt;int&gt;：用于匹配一个不带符号的整数，全部由阿拉伯数字组成。例如，01234。<br>　　路径 &lt;path&gt;：用于匹配一段字符串，字符串可以包含斜杠。例如，abcd/0123/。<br>　　以上 3 种参数都必须匹配非空的字符串。简便起见，题目规定规则中 &lt;str&gt; 和 &lt;int&gt; 前面一定是斜杠，后面要么是斜杠，要么是规则的结束（也就是该参数是规则的最后一部分）。而 &lt;path&gt; 的前面一定是斜杠，后面一定是规则的结束。无论是 URL 地址还是规则，都不会出现连续的斜杠。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入第一行是两个正整数 <em>n</em> 和 <em>m</em>，分别表示 URL 映射的规则条数和待处理的 URL 地址个数，中间用一个空格字符分隔。<br>　　第 2 行至第 <em>n</em>+1 行按匹配的先后顺序描述 URL 映射规则的配置信息。第 <em>i</em>+1 行包含两个字符串 <em>pi</em> 和 <em>ri</em>，其中 <em>pi</em> 表示 URL 匹配的规则，<em>ri</em> 表示这条 URL 匹配的名字。两个字符串都非空，且不包含空格字符，两者中间用一个空格字符分隔。<br>　　第 <em>n</em>+2 行至第 <em>n</em>+<em>m</em>+1 行描述待处理的 URL 地址。第 <em>n</em>+1+<em>i</em> 行包含一个字符串 <em>qi</em>，表示待处理的 URL 地址，字符串中不包含空格字符。</p><p><strong>输出格式</strong></p><p>　　输入共 <em>m</em> 行，第 <em>i</em> 行表示 <em>qi</em> 的匹配结果。如果匹配成功，设匹配了规则 <em>pj</em> ，则输出对应的 <em>rj</em>。同时，如果规则中有参数，则在同一行内依次输出匹配后的参数。注意整数参数输出时要把前导零去掉。相邻两项之间用一个空格字符分隔。如果匹配失败，则输出 404。</p><p><strong>样例输入</strong></p><p>5 4<br>/articles/2003/ special_case_2003<br>/articles/&lt;int&gt;/ year_archive<br>/articles/&lt;int&gt;/&lt;int&gt;/ month_archive<br>/articles/&lt;int&gt;/&lt;int&gt;/&lt;str&gt;/ article_detail<br>/static/&lt;path&gt; static_serve<br>/articles/2004/<br>/articles/1985/09/aloha/<br>/articles/hello/<br>/static/js/jquery.js</p><p><strong>样例输出</strong></p><p>year_archive 2004<br>article_detail 1985 9 aloha<br>404<br>static_serve js/jquery.js</p><p><strong>样例说明</strong></p><p>　　对于第 1 个地址 /articles/2004/，无法匹配第 1 条规则，可以匹配第 2 条规则，参数为 2004。<br>　　对于第 2 个地址 /articles/1985/09/aloha/，只能匹配第 4 条规则，参数依次为 1985、9（已经去掉前导零）和 aloha。<br>　　对于第 3 个地址 /articles/hello/，无法匹配任何一条规则。<br>　　对于第 4 个地址 /static/js/jquery.js，可以匹配最后一条规则，参数为 js/jquery.js。</p><p><strong>数据规模和约定</strong></p><p>　　1 ≤ <em>n</em> ≤ 100，1 ≤ <em>m</em> ≤ 100。<br>　　所有输入行的长度不超过 100 个字符（不包含换行符）。<br>　　保证输入的规则都是合法的。</p><hr><p><strong>分析：</strong></p><p>若使用常规的字符串操作，解决本题将十分困难。因此，下面采用<strong>正则表达式</strong>求解。</p><p>主要的思路为：将输入规则中的<code>&lt;int&gt;</code>、<code>&lt;str&gt;</code>和<code>&lt;path&gt;</code>替换为对应的正则表达式<code>(\\d+)</code>、<code>([-\\w\\.]+)</code>和<code>(.+)</code>。这里的括号，表示正则表达式中的分组，便于后续输出匹配的各个参数。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="comment">// URL规则</span></span><br><span class="line"><span class="built_in">string</span> rule;</span><br><span class="line"><span class="comment">// 规则的名字</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line">Node(<span class="built_in">string</span> _rule, <span class="built_in">string</span> _name) &#123;</span><br><span class="line">rule = _rule;</span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line">&#125; UrlMapping;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">match</span><span class="params">(UrlMapping urlMapping, <span class="built_in">string</span> url)</span> </span>&#123;</span><br><span class="line">smatch result;</span><br><span class="line"><span class="comment">// 若不匹配</span></span><br><span class="line"><span class="keyword">if</span> (!regex_match(url, result, regex(urlMapping.rule))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; urlMapping.name;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; result.size(); i++) &#123;</span><br><span class="line"><span class="comment">// 若为数字，则去掉前导零</span></span><br><span class="line"><span class="keyword">if</span> (regex_match(result.str(i), regex(<span class="string">"\\d+"</span>))) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; stoi(result.str(i));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; result.str(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;UrlMapping&gt; mappings;</span><br><span class="line"><span class="built_in">string</span> rule, name;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; rule &gt;&gt; name;</span><br><span class="line"><span class="comment">// 将&lt;int&gt;、&lt;str&gt;和&lt;path&gt;替换为对应的正则表达式</span></span><br><span class="line">rule = regex_replace(rule, regex(<span class="string">"&lt;int&gt;"</span>), <span class="string">"(\\d+)"</span>);</span><br><span class="line">rule = regex_replace(rule, regex(<span class="string">"&lt;str&gt;"</span>), <span class="string">"([-\\w\\.]+)"</span>);</span><br><span class="line">rule = regex_replace(rule, regex(<span class="string">"&lt;path&gt;"</span>), <span class="string">"(.+)"</span>);</span><br><span class="line">mappings.push_back(UrlMapping(rule, name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> url;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; url;</span><br><span class="line"><span class="keyword">bool</span> find = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">// 暴力搜索匹配的URL规则</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings.size(); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (match(mappings[i], url)) &#123;</span><br><span class="line">find = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若未找到匹配的URL规则</span></span><br><span class="line"><span class="keyword">if</span> (!find) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">404</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlMapping</span> </span>&#123;</span><br><span class="line"><span class="comment">// URL规则</span></span><br><span class="line">String rule;</span><br><span class="line"><span class="comment">// 规则的名字</span></span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UrlMapping</span><span class="params">(String rule, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rule = rule;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> m = scan.nextInt();</span><br><span class="line"></span><br><span class="line">UrlMapping[] mappings = <span class="keyword">new</span> UrlMapping[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mappings.length; i++) &#123;</span><br><span class="line"><span class="comment">// 由于\为转义字符，要在字符串中表示普通的\，需要使用\\，因此\\d+需要表示为\\\\d+</span></span><br><span class="line">String rule = scan.next().replaceAll(<span class="string">"&lt;int&gt;"</span>, <span class="string">"(\\\\d+)"</span>)</span><br><span class="line">.replaceAll(<span class="string">"&lt;str&gt;"</span>, <span class="string">"([-\\\\w\\\\.]+)"</span>)</span><br><span class="line">.replaceAll(<span class="string">"&lt;path&gt;"</span>, <span class="string">"(.+)"</span>);</span><br><span class="line"><span class="comment">// 由于Matcher类的find()方法为部分匹配（只要有一个子串满足正则表达式即可）,</span></span><br><span class="line"><span class="comment">// 因此加上^和$表示url需要整体匹配(整个字符串满足正则表达式)</span></span><br><span class="line">rule = <span class="string">'^'</span> + rule + <span class="string">'$'</span>;</span><br><span class="line">mappings[i] = <span class="keyword">new</span> UrlMapping(rule, scan.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">String url = scan.next();</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 暴力搜索匹配的URL规则</span></span><br><span class="line"><span class="keyword">for</span> (UrlMapping urlMapping : mappings) &#123;</span><br><span class="line"><span class="keyword">if</span> (matches(urlMapping, url)) &#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若未找到匹配的URL规则</span></span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">System.out.println(<span class="number">404</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">scan.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(UrlMapping urlMapping, String url)</span> </span>&#123;</span><br><span class="line">Pattern p = Pattern.compile(urlMapping.rule);</span><br><span class="line">Matcher m = p.matcher(url);</span><br><span class="line"><span class="comment">// 若不匹配</span></span><br><span class="line"><span class="keyword">if</span> (!m.find()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(urlMapping.name);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m.groupCount(); i++) &#123;</span><br><span class="line">String str = m.group(i);</span><br><span class="line"><span class="comment">// 若为数字，则去掉前导零</span></span><br><span class="line"><span class="keyword">if</span> (str.matches(<span class="string">"\\d+"</span>)) &#123;</span><br><span class="line">System.out.print(<span class="string">" "</span> + Integer.parseInt(str));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.print(<span class="string">" "</span> + str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201803-2 碰撞的小球</title>
      <link href="/2018/06/06/ccf-csp-20180302/"/>
      <url>/2018/06/06/ccf-csp-20180302/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　数轴上有一条长度为L（L为偶数)的线段，左端点在原点，右端点在坐标L处。有n个不计体积的小球在线段上，开始时所有的小球都处在偶数坐标上，速度方向向右，速度大小为1单位长度每秒。<br>　　当小球到达线段的端点（左端点或右端点）的时候，会立即向相反的方向移动，速度大小仍然为原来大小。<br>　　当两个小球撞到一起的时候，两个小球会分别向与自己原来移动的方向相反的方向，以原来的速度大小继续移动。<br>　　现在，告诉你线段的长度L，小球数量n，以及n个小球的初始位置，请你计算t秒之后，各个小球的位置。</p><p><strong>提示</strong></p><p>　　因为所有小球的初始位置都为偶数，而且线段的长度为偶数，可以证明，不会有三个小球同时相撞，小球到达线段端点以及小球之间的碰撞时刻均为整数。<br>　　同时也可以证明两个小球发生碰撞的位置一定是整数（但不一定是偶数）。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入的第一行包含三个整数n, L, t，用空格分隔，分别表示小球的个数、线段长度和你需要计算t秒之后小球的位置。<br>　　第二行包含n个整数a1, a2, …, an，用空格分隔，表示初始时刻n个小球的位置。</p><p><strong>输出格式</strong></p><p>　　输出一行包含n个整数，用空格分隔，第i个整数代表初始时刻位于ai的小球，在t秒之后的位置。</p><p><strong>样例输入</strong></p><p>3 10 5<br>4 6 8</p><p><strong>样例输出</strong></p><p>7 9 9</p><p><strong>样例说明</strong></p><p>　　初始时，三个小球的位置分别为4, 6, 8。<br><img src="http://118.190.20.162/RequireFile.do?fid=b6beJN6e" alt="img"><br>　　一秒后，三个小球的位置分别为5, 7, 9。<br><img src="http://118.190.20.162/RequireFile.do?fid=Ab8QmfeR" alt="img"><br>　　两秒后，第三个小球碰到墙壁，速度反向，三个小球位置分别为6, 8, 10。<br><img src="http://118.190.20.162/RequireFile.do?fid=fgQLYbNn" alt="img"><br>　　三秒后，第二个小球与第三个小球在位置9发生碰撞，速度反向（注意碰撞位置不一定为偶数），三个小球位置分别为7, 9, 9。<br><img src="http://118.190.20.162/RequireFile.do?fid=erfyNJDT" alt="img"><br>　　四秒后，第一个小球与第二个小球在位置8发生碰撞，速度反向，第三个小球碰到墙壁，速度反向，三个小球位置分别为8, 8, 10。<br><img src="http://118.190.20.162/RequireFile.do?fid=m5EBf6q8" alt="img"><br>　　五秒后，三个小球的位置分别为7, 9, 9。<br><img src="http://118.190.20.162/RequireFile.do?fid=JRHaHt4T" alt="img"></p><p><strong>样例输入</strong></p><p>10 22 30<br>14 12 16 6 10 2 8 20 18 4</p><p><strong>样例输出</strong></p><p>6 6 8 2 4 0 4 12 10 2</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，1 ≤ n ≤ 100，1 ≤ t ≤ 100，2 ≤ L ≤ 1000，0 &lt; ai &lt; L。L为偶数。<br>　　保证所有小球的初始位置互不相同且均为偶数。</p><ul><li><strong id="cpp">C++版</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, l, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;l, &amp;t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 默认向右移动</span></span><br><span class="line"><span class="keyword">int</span> directions[n];</span><br><span class="line">fill(directions, directions + n, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lastPos[n];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行t次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line"><span class="comment">// 上一次小球的位置</span></span><br><span class="line"><span class="built_in">memcpy</span>(lastPos, arr, <span class="keyword">sizeof</span>(arr));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="comment">// 若小球位于左端点，且不是初始时刻，则需要改变方向</span></span><br><span class="line"><span class="keyword">if</span> (lastPos[j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">directions[j] = -directions[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastPos[j] == l) &#123;</span><br><span class="line"><span class="comment">// 若小球位于右端点，则需要改变方向</span></span><br><span class="line">directions[j] = -directions[j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != k &amp;&amp; lastPos[j] == lastPos[k]) &#123;</span><br><span class="line">directions[j] = -directions[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] += directions[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong id="java">Java版</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">int</span> n = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> l = scan.nextInt();</span><br><span class="line"><span class="keyword">int</span> t = scan.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">arr[i] = scan.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认向右移动</span></span><br><span class="line"><span class="keyword">int</span>[] directions = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">Arrays.fill(directions, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] lastPos = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line"><span class="comment">// 执行t次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">lastPos = Arrays.copyOf(arr, arr.length);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lastPos.length; j++) &#123;</span><br><span class="line"><span class="comment">// 若小球位于左端点，且不是初始时刻，则需要改变方向</span></span><br><span class="line"><span class="keyword">if</span> (lastPos[j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">directions[j] = -directions[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastPos[j] == l) &#123;</span><br><span class="line"><span class="comment">// 若小球位于右端点，则需要改变方向</span></span><br><span class="line">directions[j] = -directions[j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 否则，判断是否发生了碰撞</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; lastPos.length; k++) &#123;</span><br><span class="line"><span class="comment">// 若发生了碰撞，则需要改变方向</span></span><br><span class="line"><span class="keyword">if</span> (j != k &amp;&amp; lastPos[j] == lastPos[k]) &#123;</span><br><span class="line">directions[j] = -directions[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j] += directions[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">scan.close();</span><br><span class="line"></span><br><span class="line">StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">sb.append(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCF CSP 201803-1.跳一跳</title>
      <link href="/2018/06/05/ccf-csp-20180301/"/>
      <url>/2018/06/05/ccf-csp-20180301/</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述</strong></p><p>　　近来，跳一跳这款小游戏风靡全国，受到不少玩家的喜爱。<br>　　简化后的跳一跳规则如下：玩家每次从当前方块跳到下一个方块，如果没有跳到下一个方块上则游戏结束。<br>　　如果跳到了方块上，但没有跳到方块的中心则获得1分；跳到方块中心时，若上一次的得分为1分或这是本局游戏的第一次跳跃则此次得分为2分，否则此次得分比上一次得分多两分（即连续跳到方块中心时，总得分将+2，+4，+6，+8…）。<br>　　现在给出一个人跳一跳的全过程，请你求出他本局游戏的得分（按照题目描述的规则）。</p><a id="more"></a><p><strong>输入格式</strong></p><p>　　输入包含多个数字，用空格分隔，每个数字都是1，2，0之一，1表示此次跳跃跳到了方块上但是没有跳到中心，2表示此次跳跃跳到了方块上并且跳到了方块中心，0表示此次跳跃没有跳到方块上（此时游戏结束）。</p><p><strong>输出格式</strong></p><p>　　输出一个整数，为本局游戏的得分（在本题的规则下）。</p><p><strong>样例输入</strong></p><p>1 1 2 2 2 1 1 2 2 0</p><p><strong>样例输出</strong></p><p>22</p><p><strong>数据规模和约定</strong></p><p>　　对于所有评测用例，输入的数字不超过30个，保证0正好出现一次且为最后一个数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line"><span class="comment">// 得分</span></span><br><span class="line"><span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 当前是第几个2</span></span><br><span class="line"><span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (scanf(<span class="string">"%d"</span>, &amp;data), data != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="number">1</span>) &#123;</span><br><span class="line">score += <span class="number">1</span>;</span><br><span class="line">position = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (data == <span class="number">2</span>) &#123;</span><br><span class="line">position++;</span><br><span class="line">score += position * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(<span class="string">"%d\n"</span>, score);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ccf csp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ccf csp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构(C/C++版)之动态顺序表的实现</title>
      <link href="/2018/06/03/data-structure-sqlist-in-c-or-c++/"/>
      <url>/2018/06/03/data-structure-sqlist-in-c-or-c++/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>写在前面的话</strong>：类似如下函数：bool add(SqList &amp;list, int i, ElemType e)<br><strong>c语言没有bool关键字</strong>，c++才有，若需要在c语言中使用，需要引入<strong>&lt;stdbool.h&gt;（或者自己定义）.</strong><br>另外，<strong>函数参数中&amp;符号，表示引用，c语言也没有</strong>（c语言中的&amp;表示取地址符），这是c++才有的语法，若需要在c语言中实现类似功能，即改变实参的值，只能采用指针实现</p></blockquote><p>用C/C++实现的动态顺序表</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_CAPACITY 10 <span class="comment">//默认容量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEFAULT_INCREMENT_SIZE 1 <span class="comment">//默认扩容大小</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">ElemType * data;<span class="comment">//存储元素的一维数组</span></span><br><span class="line"><span class="keyword">int</span> length; <span class="comment">//顺序表当前的长度</span></span><br><span class="line"><span class="keyword">int</span> size; <span class="comment">//顺序表的容量</span></span><br><span class="line"><span class="keyword">int</span> incrementSize; <span class="comment">//增补空间大小</span></span><br><span class="line">&#125; SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化，需要注意的是：给参数设置默认值，c语言没有这种语法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(SqList &amp;<span class="built_in">list</span>, <span class="keyword">int</span> capacity = DEFAULT_CAPACITY, <span class="keyword">int</span> incrementSize = DEFAULT_INCREMENT_SIZE)</span> </span>&#123;</span><br><span class="line"><span class="built_in">list</span>.data = (ElemType *) <span class="built_in">malloc</span>(capacity * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">list</span>.data) &#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">list</span>.size = capacity;</span><br><span class="line"><span class="built_in">list</span>.incrementSize = incrementSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(SqList <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>.length == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求顺序表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">(SqList <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//元素首次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(SqList <span class="built_in">list</span>, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>.data[i] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元素最后一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(SqList <span class="built_in">list</span>, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="built_in">list</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>.data[i] == e) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * static关键字的作用类似于Java中private，声明为内部函数，只能在本文件中使用</span></span><br><span class="line"><span class="comment"> * 另外需要注意的是，该函数必须放在引用之前，否则，编译时会报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isElementIndex</span><span class="params">(SqList <span class="built_in">list</span>, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt; <span class="built_in">list</span>.length) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">isPositionIndex</span><span class="params">(SqList <span class="built_in">list</span>, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (i &gt;= <span class="number">0</span> &amp;&amp; i &lt;= <span class="built_in">list</span>.length) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(SqList &amp;<span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>.length &gt;= <span class="built_in">list</span>.size) &#123;</span><br><span class="line"><span class="built_in">list</span>.data = (ElemType *) <span class="built_in">realloc</span>(<span class="built_in">list</span>.data,</span><br><span class="line">(<span class="built_in">list</span>.size + <span class="built_in">list</span>.incrementSize) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line"><span class="comment">//判断存储空间是否分配成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">list</span>.data) &#123;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.size += <span class="built_in">list</span>.incrementSize; <span class="comment">//增加当前存储容量</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在顺序表中指定索引处插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(SqList &amp;<span class="built_in">list</span>, <span class="keyword">int</span> i, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isPositionIndex(<span class="built_in">list</span>, i)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">ensureCapacity(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="built_in">list</span>.length; j &gt; i; j--) &#123;</span><br><span class="line"><span class="built_in">list</span>.data[j] = <span class="built_in">list</span>.data[j - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.data[i] = e; <span class="comment">//???</span></span><br><span class="line"><span class="built_in">list</span>.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在顺序表的最后面添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(SqList &amp;<span class="built_in">list</span>, ElemType e)</span> </span>&#123;</span><br><span class="line"><span class="comment">//扩容</span></span><br><span class="line">ensureCapacity(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">list</span>.data[<span class="built_in">list</span>.length] = e;</span><br><span class="line"><span class="built_in">list</span>.length++;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(SqList &amp;<span class="built_in">list</span>, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty(<span class="built_in">list</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = <span class="built_in">list</span>.data[<span class="built_in">list</span>.length - <span class="number">1</span>];</span><br><span class="line"><span class="built_in">list</span>.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除指定索引处的元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">remove</span><span class="params">(SqList &amp;<span class="built_in">list</span>, <span class="keyword">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isElementIndex(<span class="built_in">list</span>, i) || isEmpty(<span class="built_in">list</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = <span class="built_in">list</span>.data[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= <span class="built_in">list</span>.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line"><span class="built_in">list</span>.data[j - <span class="number">1</span>] = <span class="built_in">list</span>.data[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>.length--;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//取元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(SqList <span class="built_in">list</span>, <span class="keyword">int</span> i, ElemType &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isElementIndex(<span class="built_in">list</span>, i)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">e = <span class="built_in">list</span>.data[i];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqList <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">list</span>.length; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="built_in">list</span>.data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(SqList &amp;<span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">list</span>.data);</span><br><span class="line"><span class="built_in">list</span>.length = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">list</span>.incrementSize = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> c/c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中的动态内存分配</title>
      <link href="/2018/06/01/c-dynamic-memory-allocation/"/>
      <url>/2018/06/01/c-dynamic-memory-allocation/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>全局变量是分配在内存中的静态存储区的，非静态的局部变量是分配在内存中的动态存储区的，这个存储区是一个称为栈（stack）的区域。</p><p>除此以外，C语言还允许建立内存动态分配区域，以存放一些临时用的数据，这些数据不必在程序的声明部分定义，也不必等到函数结束时才释放，而是需要时随时开辟，不需要时随时释放。这些数据是临时存放在一个特别的自由存储区，称为堆（heap）区。由于未在声明部分定义它们为变量或数组，因此不能通过变量名或数组名去引用这些数据，只能通过指针来引用。</p><a id="more"></a><h3 id="动态分配内存"><a href="#动态分配内存" class="headerlink" title="动态分配内存"></a>动态分配内存</h3><p>C语言中，对内存的动态分配，主要是通过malloc、calloc、free和realloc这四个函数实现。</p><p>1.malloc函数</p><p>函数原型为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>作用：在内存的动态存储区中分配一个长度为size的连续空间。</p><p>函数的返回值是所分配区域的第一个字节的地址。指针的基类型为void，即不能指向任何类型的数据，只提供一个地址。如果函数未能成功地执行，则返回空指针（NULL）。</p><p>示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> * p)</span></span>;<span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">5</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//开辟动态内存区，并将地址转换为int * 型</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>;i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,p+i);</span><br><span class="line">&#125;</span><br><span class="line">check(p);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> * p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fail\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">5</span>;i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span>(p[i] &lt; <span class="number">60</span>) <span class="built_in">printf</span>(<span class="string">"%d"</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，第5行中的代码也可以写成如下形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p = <span class="built_in">malloc</span>(<span class="number">5</span>*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//由系统进行隐式的类型转换</span></span><br></pre></td></tr></table></figure><p>推荐采用第一种写法，显式的强制转换，更加清楚直观。</p><p>另外，因为在不同系统中存放一个指定类型的字节数是不同的，为了使程序具有通用性，我在第5行中使用了sizeof运算符测定在本系统中整数的字节数。</p><p>(未完待续)</p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法的时间复杂度和空间复杂度</title>
      <link href="/2018/05/31/time-and-space-complexity/"/>
      <url>/2018/05/31/time-and-space-complexity/</url>
      
        <content type="html"><![CDATA[<p>算法效率的度量是对算法所需要的时间和空间进行估算，分别称为时间复杂度和空间复杂度。</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的时间效率称为算法的时间复杂度，它是问题规模n的某个函数，记作：T(n) = O(f(n))。</p><p>其中问题规模n是指输入量的多少，一般可以从问题描述中得到。如，数组元素的个数、矩阵的阶数等。f(n) 是问题规模n的某个函数。这里的O是Order的简写，意指数量级，表示随问题规模n的增大，算法执行时间的增长率和 f(n) 的增长率相同。</p><p>一个没有循环的算法基本运算次数与问题规模无关，记作O(1)，也称为常数阶。</p><p>常见的算法时间复杂度由小到大排列如下：</p><p>O(1) &lt; O($\log_{2}n$) &lt; O(n) &lt; O($n\log_{2}n$) &lt; O($n^2$) &lt; O($n^3$) &lt; … &lt; O($c^n$) &lt; O(n!)</p><a id="more"></a><h4 id="时间复杂度的计算"><a href="#时间复杂度的计算" class="headerlink" title="时间复杂度的计算"></a>时间复杂度的计算</h4><ul><li>不带循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x++;<span class="comment">//基本语句的执行次数为1，因此时间复杂度为O(1)</span></span><br></pre></td></tr></table></figure><ul><li>简单循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;<span class="comment">//语句1，执行1次</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++ ) &#123;<span class="comment">//语句2，i从0开始到n，执行了n+1次</span></span><br><span class="line">    x+=i;<span class="comment">//语句3，执行n次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，该算法的执行次数为T(n)=1+(n+1)+n=2n+2=O(n)，这种计算方式相对麻烦。</p><p>该算法的基本运算为循环中的语句3，它的执行次数为T(n)=n=O(n)。显然，这种计算方式比上面的简单得多，以后均采用这种方式分析算法的时间复杂度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) &#123;<span class="comment">//该循环执行n次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n ;j++) &#123;<span class="comment">//该循环执行n次</span></span><br><span class="line">        x++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，该算法的基本运算为x++，其执行了$n^2$次，因此该算法的时间复杂度为O($n^2$)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt; n ; i++) &#123;<span class="comment">//该循环执行n-1次</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n ;j++) &#123;<span class="comment">//该循环执行n-(i+1)+1=n-i次</span></span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何计算该算法的时间复杂度呢？</p><p>显然，该算法的基本运算仍为x++，设x++语句执行次数为T(n)，则</p><p>$$T(n)=\sum_{i=1}^{n-1}\sum_{j=i+1}^n1=\sum_{i=1}^{n-1}(n-i)=\frac{n(n-1)}{2}=O(n^2)$$</p><ul><li>复杂循环</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>*i ; j &lt;= n ;j++) &#123;</span><br><span class="line">            m++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该算法的基本运算为m++，设其执行次数为T(n)，如果按照上面的方法，则</p><p>$$T(n)=\sum_{i=1}^n\sum_{j=2i}^{n}1=\sum_{i=1}^{n}(n-2i+1)=(n+1)n-2\frac{n(n+1)}{2}=0$$</p><p>显然，这种做法是错误的，因为内循环从2i到n，即 i 必须满足: 2i ≤ n =&gt; $i&lt;\frac{n}{2}$，因此正确的做法是：</p><p>$$T(n) = \sum_{i=1}^{\frac{n}{2}}\sum_{j=2i}^{n}1=\sum_{i=1}^{\frac{n}{2}}(n-2i+1)=(n+1)\frac{n}{2}-2\sum_{i=1}^{\frac{n}{2}}i$$</p><p>$$=(n+1)\frac{n}{2}-2\frac{(\frac{n}{2}+1)\frac{n}{2}}{2}=\frac{n^2}{4}=O(n^2)$$</p><ul><li>需要递归</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(k==n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = k ; i &lt; n ; i++) &#123;</span><br><span class="line">            a[i] = a[i] + i * i;</span><br><span class="line">        &#125;</span><br><span class="line">        fun(a,n,k+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何求fun(a,n,0)的时间复杂度呢？</p><p>设fun(a,n,k)的执行时间为T(n,k)，从而，fun(a,n,0)的执行时间为T(n)=T(n,0)。</p><p>$$T(n,k)=\begin{cases} n, &amp; \text {k=n-1} \\ (n-k)+T(n,k+1), &amp; \text{其他} \end{cases}$$</p><p>则，</p><p>T(n)=T(n,0)=n+T(n,1)=n+(n-1)+T(n,2)=…=n+(n-1)+…+2+T(n,n-1)</p><p>=$\frac{(n+2)(n-1)}{2}+n=\frac{n^2}{2}+\frac{3n}{2}-1=O(n^2)$</p><h4 id="最好、最坏及平均时间复杂度"><a href="#最好、最坏及平均时间复杂度" class="headerlink" title="最好、最坏及平均时间复杂度"></a>最好、最坏及平均时间复杂度</h4><p>实际上，算法效率不仅仅依赖于问题的规模n，还与问题的初始输入有关。例如:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> k)</span> </span>&#123;<span class="comment">//该算法用于在给定的数组a[]中查找k</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == k) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>循环体的执行次数，不仅与问题规模n有关，还与输入实例中a的各元素取值以及k的取值有关。在最坏的情况下，a中没有与k相等的元素，则循环体执行n次；在最好的情况下，a中的第一个元素a[0]等于K，则循环体执行1次。</p><p>故，该算法的最好时间复杂度为O(1)，最坏时间复杂度为O(n)。在这种情况下，可用最坏情况下的时间复杂度作为算法的时间复杂度，因为<strong><em>最坏情况下的时间复杂度是在任何输入实例上运行时间的上界</em></strong>。</p><p>当然，也可用平均时间复杂度来衡量算法，下面给出平均时间复杂度的定义：</p><p>设一个算法的输入规模为n，$D_n$是所有输入的集合，任一输入I∈$D_n$，p(I)是I出现的频率，有$\sum_{I∈D_n}P(I)=1$，T(I)是算法在输入I下所执行的基本运算次数，则该算法的平均时间复杂度为：</p><p>$$T(n)=\sum_{I∈D_n}{P(I)·T(I)}$$</p><p>显然，最坏时间复杂度为$$T(n)=\max_{I∈D_n}{T(I)}$$</p><h3 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h3><p>空间复杂度是对一个算法在运行过程中临时占用的存储空间大小的度量。</p><p>一个算法在执行过程中所需要的存储空间包括以下3个部分：</p><p>1.算法本身占用的空间，取决于算法的长度；</p><p>2.输入输出数据占用的空间，取决于问题规模，与算法无关；</p><p>3.辅助存储空间，即算法临时开辟的存储空间，与算法有关。</p><p>算法的空间复杂度是对算法的执行过程需要的辅助空间进行度量。通常记作 S(n) = O(f(n))，其中n为问题规模，f(n)为问题规模n的一个函数。</p><p>下面也举几个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> x[],<span class="keyword">int</span> n)</span> </span>&#123;<span class="comment">//该算法将一个数组按从大到小的顺序排序</span></span><br><span class="line"><span class="keyword">int</span> i,j,k,t;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; n<span class="number">-1</span> ; i++) &#123;</span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">for</span>(j = i + <span class="number">1</span> ; j &lt; n ; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(x[j] &gt; x[k]) &#123;</span><br><span class="line">k=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k != i) &#123;</span><br><span class="line">t = x[i];</span><br><span class="line">x[i] = x[k];</span><br><span class="line">x[k] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义了四个辅助变量，临时存储空间与问题规模n无关，故其空间复杂度为O(1)，时间复杂度为O($n^2$)</p><p><strong>一般而言，如果不包含递归调用，则算法的空间复杂度为O(1)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="keyword">if</span>(i != j) &#123;</span><br><span class="line">        m = (i+j)/<span class="number">2</span>;</span><br><span class="line">        mergesort(a,i,m);</span><br><span class="line">        mergesort(a,m+<span class="number">1</span>,j);</span><br><span class="line">        merge(a,i,j,m);<span class="comment">//假定merge是一个非递归函数，其内部只定义了一个辅助变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何求mergesort(a，0，n-1)的空间复杂度呢？</p><p>对于该算法，设mergesort(a，0，n-1)的临时空间大小为S(n)，其中定义了一个辅助变量m，</p><p>$$S(n)=\begin{cases} O(1) , &amp; \text{n=1} \\  2·S(\frac{n}{2})+1 , &amp; \text{n&gt;1} \end{cases}$$</p><p>当n &gt; 1 时，S(n) = 2·S($\frac{n}{2}$) + 1 = 2 ( 2·S($\frac{n}{2^2}$) + 1) + 1=$2^2S(\frac{n}{4})$ + 1 + 2=$2^3S(\frac{n}{8})+1+2+2^2$</p><p>=…=$2^kS(\frac{n}{2^k})+\sum_{i=1}^{k}2^{i-1}$=$2^kO(1)+2^k-1$</p><p>由于$\frac{n}{2^k}$ -&gt; 1，则k=$\log_{2}n$</p><p>故S(n) = n + n - 1=2n-1，故该算法的空间复杂度为O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言结构体</title>
      <link href="/2018/05/31/c-struct/"/>
      <url>/2018/05/31/c-struct/</url>
      
        <content type="html"><![CDATA[<p>C语言允许用户自己建立由不同类型数据组成的组合型的数据结构，它称为结构体。（类似于Java中的类）</p><h3 id="定义结构体类型"><a href="#定义结构体类型" class="headerlink" title="定义结构体类型"></a>定义结构体类型</h3><p>声明一个结构体类型的一般形式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 &#123;</span></span><br><span class="line">成员列表  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对结构体中各成员都应进行类型声明，即</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类型名成员名;</span><br></pre></td></tr></table></figure><a id="more"></a><p>示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">&#125;;<span class="comment">//注意最后有一个分号</span></span><br></pre></td></tr></table></figure><p>结构体的成员可以属于另一个结构体类型。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">publishTime</span>;</span><span class="comment">//成员publishTime属于struct Date类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的是，<strong><em>结构体类型的名字是由关键字struct和结构体名组合而成的</em></strong>，即结构体类型 = struct 结构体名。 </p><h3 id="定义结构体类型变量"><a href="#定义结构体类型变量" class="headerlink" title="定义结构体类型变量"></a>定义结构体类型变量</h3><p>C语言中定义结构体类型变量有三种方式。</p><p>1.先声明结构体类型，再定义该类型的变量（常用）</p><p>上面说到结构体内可以定义结构体类型的成员变量时，我的做法是先声明了一个结构体类型Struct Date，然后在声明Struct Book类型时，将成员变量publishTime指定为struct Date类型。下面再举一个例子说明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">int</span> day;</span><br><span class="line">&#125;;<span class="comment">//声明struct Date类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">today</span>;</span><span class="comment">//定义struct Date类型的变量</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在声明类型的同时定义变量</p><p>这种定义的一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 &#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125; 变量名列表;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> price;  </span><br><span class="line">&#125; book1,book2;<span class="comment">//声明struct Book类型的同时定义了两个struct Book类型的变量book1,book2</span></span><br></pre></td></tr></table></figure><p>个人觉得，把上面的申明类型同时定义变量，变成如下形式来看，可能更易于理解：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span><span class="keyword">char</span> author[<span class="number">10</span>];<span class="keyword">char</span> name[<span class="number">20</span>];<span class="keyword">double</span> price;&#125; book1,book2;</span><br></pre></td></tr></table></figure><p>这样看，是不是特别类似于普通变量的定义，前面是类型，后面是变量列表。当然你也可以通过其他的方式来记住结构体类型，不管黑猫白猫能抓到老鼠就是好猫&gt;_&lt;。</p><p> 3.不指定类型名而直接定义结构体类型变量</p><p>其一般形式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125; 变量名列表;</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">double</span> price;  </span><br><span class="line">&#125; book1,book2;</span><br></pre></td></tr></table></figure><p>可以看到，这种方法指定了一个匿名的结构体类型，它没有名字，因此不能再以此结构体类型去定义其他变量。这种方式用的不多。</p><h3 id="结构体变量的初始化和引用"><a href="#结构体变量的初始化和引用" class="headerlink" title="结构体变量的初始化和引用"></a>结构体变量的初始化和引用</h3><h4 id="初始化结构体变量"><a href="#初始化结构体变量" class="headerlink" title="初始化结构体变量"></a>初始化结构体变量</h4><p>在定义结构体变量时，可以对它初始化，即赋予初始值。</p><p>先看一个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> author[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125; book = &#123;<span class="string">"谭浩强"</span>,<span class="string">"C程序设计"</span>,<span class="number">33.00</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,book.author,book.name,book.price);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作者：谭浩强，书名：C程序设计，价格：<span class="number">33.000000</span></span><br></pre></td></tr></table></figure><p>从上例可以看出，<strong><em>初始化列表是用花括号括起来的一些常量，这些常量依次赋给结构体变量中的各成员。</em></strong></p><p>如果我只想对某一成员初始化怎么办呢？</p><p>C99标准允许对某一成员初始化，如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> author[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125; book = &#123;.price = <span class="number">33.00</span>&#125;;</span><br><span class="line">    <span class="comment">//在成员名前有成员运算符".",".price"隐含代表结构体变量book的成员book.price</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,book.author,book.name,book.price);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">作者：，书名：，价格：<span class="number">33.000000</span></span><br></pre></td></tr></table></figure><p>其他未被初始化的成员由系统赋默认值，数值型为0，字符型为’\0’，指针型成员为NULL</p><h4 id="引用结构体变量中的成员"><a href="#引用结构体变量中的成员" class="headerlink" title="引用结构体变量中的成员"></a>引用结构体变量中的成员</h4><p>引用方式为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体变量名.成员名</span><br></pre></td></tr></table></figure><p>其中，“.”是成员运算符，它在所有的运算符中优先级最高</p><h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><p>定义结构体数组的一般形式：</p><p>①直接定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 结构体名 &#123;</span></span><br><span class="line">    成员列表</span><br><span class="line">&#125; 数组名[数组长度];</span><br></pre></td></tr></table></figure><p>②先声明结构体类型，再用此类型定义结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">结构体类型 数组名[数组长度];</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> author[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125; book[<span class="number">2</span>] = &#123;&#123;<span class="string">"谭浩强"</span>,<span class="string">"C程序设计"</span>,<span class="number">33.00</span>&#125;,&#123;<span class="string">"明日科技"</span>,<span class="string">"Java从入门到精通"</span>,<span class="number">55.51</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> n = <span class="number">2</span>;<span class="comment">//定义常变量,const 类似于Java中的 final</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ;i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,book[i].author,book[i].name,book[i].price);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作者：谭浩强，书名：C程序设计，价格：<span class="number">33.000000</span></span><br><span class="line">作者：明日科技，书名：Java从入门到精通，价格：<span class="number">55.510000</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在上面代码的第7行，给数组初始化的时候，每本书的信息，我用一对花括号包起来了，这样做的目的是方便阅读和检查。事实上，下面的代码也是可行的，但不推荐</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> author[<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">&#125; book[<span class="number">2</span>] = &#123;<span class="string">"谭浩强"</span>,<span class="string">"C程序设计"</span>,<span class="number">33.00</span>,<span class="string">"明日科技"</span>,<span class="string">"Java从入门到精通"</span>,<span class="number">55.51</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>结构体指针变量的定义和引用，与普通的指针变量一样。</p><p>示例:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> author[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">book</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">p</span> = &amp;<span class="title">book</span>;</span><span class="comment">//定义结构体指针变量p并让其指向book</span></span><br><span class="line"><span class="built_in">strcpy</span>(book.author,<span class="string">"谭浩强"</span>);</span><br><span class="line">    <span class="comment">//这里不能直接写book.name = "C程序设计";，会报错，必须通过c语言提供的字符串赋值函数赋值</span></span><br><span class="line"><span class="built_in">strcpy</span>(book.name,<span class="string">"C程序设计"</span>);</span><br><span class="line">book.price = <span class="number">33.00</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,book.author,book.name,book.price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,(*p).author,(*p).name,(*p).price);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作者：谭浩强，书名：C程序设计，价格：<span class="number">33.000000</span></span><br><span class="line">作者：谭浩强，书名：C程序设计，价格：<span class="number">33.000000</span></span><br></pre></td></tr></table></figure><p>需要注意的是,”.”的优先级高于“*”，所以必须用括号将*p括起来，即使用(*p).author这种形式。</p><hr><p>为了使用方便和直观，C语言允许把(*p).author用p-&gt;author来代替，<strong>“-&gt;”称为指向运算符</strong>，p-&gt;author表示p所指向的结构体变量中的author成员。(这里很重要，C语言中最常见的就是”-&gt;”)</p><p>用-&gt;改写上面的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> author[<span class="number">16</span>];</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">25</span>];</span><br><span class="line"><span class="keyword">double</span> price;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> <span class="title">book</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Book</span> * <span class="title">p</span> = &amp;<span class="title">book</span>;</span></span><br><span class="line"><span class="built_in">strcpy</span>(book.author,<span class="string">"谭浩强"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(book.name,<span class="string">"C程序设计"</span>);</span><br><span class="line">book.price = <span class="number">33.00</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,book.author,book.name,book.price);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"作者：%s，书名：%s，价格：%f\n"</span>,p-&gt;author,p-&gt;name,p-&gt;price);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">作者：谭浩强，书名：C程序设计，价格：33.000000</span><br><span class="line">作者：谭浩强，书名：C程序设计，价格：33.000000</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法分析作业之自己实现Java双链表</title>
      <link href="/2018/05/27/data-structure-and-algorithm-analysis-homework-doublelinkedlist-in-java/"/>
      <url>/2018/05/27/data-structure-and-algorithm-analysis-homework-doublelinkedlist-in-java/</url>
      
        <content type="html"><![CDATA[<p class="text-center">自己实现的Java双链表</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hegongshan.collections;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">Node&lt;E&gt; prev;</span><br><span class="line">E data;</span><br><span class="line">Node&lt;E&gt; next;</span><br><span class="line">Node(Node&lt;E&gt; prev, E data, Node&lt;E&gt; next) &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.prev = prev;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DoubleLinkedList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> first == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">linkLast(e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span> </span>&#123;</span><br><span class="line">checkPositionIndex(index);</span><br><span class="line"><span class="keyword">if</span>(index == size) &#123;</span><br><span class="line">linkLast(e);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">linkBefore(e,node(index));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line"><span class="keyword">return</span> node(index).data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> first.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(last == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> last.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index,E e)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">Node&lt;E&gt; node = node(index);</span><br><span class="line">E oldValue = node.data;</span><br><span class="line">node.data = e;</span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">Node&lt;E&gt; node = node(index);</span><br><span class="line">node.prev.next = node.next;</span><br><span class="line">node.next.prev = node.prev;</span><br><span class="line">E e = node.data;</span><br><span class="line">node.prev = <span class="keyword">null</span>;</span><br><span class="line">node.next = <span class="keyword">null</span>;</span><br><span class="line">node.data = <span class="keyword">null</span>;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line">E e = node.data;</span><br><span class="line">first = node.next;</span><br><span class="line">node.next = <span class="keyword">null</span>;</span><br><span class="line">node.data = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>) &#123;</span><br><span class="line">last = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">first.prev = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(last == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; node = last;</span><br><span class="line">E e = node.data;</span><br><span class="line">last = node.prev;</span><br><span class="line">node.prev = <span class="keyword">null</span>;</span><br><span class="line">node.data = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(last == <span class="keyword">null</span>) &#123;</span><br><span class="line">first = <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">last.next = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">size--;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = first;node != <span class="keyword">null</span>;) &#123;</span><br><span class="line">Node&lt;E&gt; next = node.next;</span><br><span class="line">node.prev = <span class="keyword">null</span>;</span><br><span class="line">node.data = <span class="keyword">null</span>;</span><br><span class="line">node.next = <span class="keyword">null</span>;</span><br><span class="line">node = next;</span><br><span class="line">&#125;</span><br><span class="line">first = last = <span class="keyword">null</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt; temp = first;</span><br><span class="line">first = last;</span><br><span class="line">last = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> indexOf(obj) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = first;node != <span class="keyword">null</span>;node = node.next) &#123;</span><br><span class="line"><span class="keyword">if</span>(node.data == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = first;node != <span class="keyword">null</span>;node = node.next) &#123;</span><br><span class="line"><span class="keyword">if</span>(obj.equals(node.data)) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = size - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = last;node != <span class="keyword">null</span>;node = node.prev) &#123;</span><br><span class="line"><span class="keyword">if</span>(node.data == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(Node&lt;E&gt; node = last;node != <span class="keyword">null</span>;node = node.prev) &#123;</span><br><span class="line"><span class="keyword">if</span>(obj.equals(node.data)) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>,e,first);</span><br><span class="line">first.prev = node;</span><br><span class="line">first = node;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e,Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(node.prev,e,node);</span><br><span class="line">node.prev.next = newNode;</span><br><span class="line">node.prev = newNode;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">first = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>,e,<span class="keyword">null</span>);</span><br><span class="line">last = first;</span><br><span class="line">size++;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(last,e,<span class="keyword">null</span>);</span><br><span class="line">last.next = node;</span><br><span class="line">last = node;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line"><span class="keyword">if</span>(index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index ; i++) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Node&lt;E&gt; node = last;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span> ; i &gt; index ; i--) &#123;</span><br><span class="line">node = node.prev;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以添加结点的位置，索引从0开始到size</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法分析:Java语言描述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法分析作业之自己实现Java单链表</title>
      <link href="/2018/05/26/data-structure-and-algorithm-analysis-homework-singlelinkedlist-in-java/"/>
      <url>/2018/05/26/data-structure-and-algorithm-analysis-homework-singlelinkedlist-in-java/</url>
      
        <content type="html"><![CDATA[<p class="text-center">自己实现的Java单链表</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hegongshan.collections;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SingleLinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单链表中元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断单链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> first == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> indexOf(obj) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line"><span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Object[] array = <span class="keyword">new</span> Object[size];</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">array[i] = node.data;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line"><span class="keyword">return</span> (T[]) toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">linkLast(e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在单链表尾部插入新的结点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isEmpty()) &#123;</span><br><span class="line">Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(e, <span class="keyword">null</span>);</span><br><span class="line">Node&lt;E&gt; last = first;</span><br><span class="line"><span class="keyword">while</span> (last.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">last = last.next;</span><br><span class="line">&#125;</span><br><span class="line">last.next = newNode;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">first = <span class="keyword">new</span> Node&lt;&gt;(e, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在单链表头部插入新的数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(e, first);</span><br><span class="line">first = newNode;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空单链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;E&gt; node = first; node != <span class="keyword">null</span>;) &#123;</span><br><span class="line">Node&lt;E&gt; next = node.next;</span><br><span class="line">node.data = <span class="keyword">null</span>;</span><br><span class="line">node.next = <span class="keyword">null</span>;</span><br><span class="line">node = next;</span><br><span class="line">&#125;</span><br><span class="line">first = <span class="keyword">null</span>;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line"><span class="keyword">return</span> node(index).data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> first.data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把索引号为index的结点的数据改为element，并返回原来的结点数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">Node&lt;E&gt; node = node(index);</span><br><span class="line">E oldElement = node.data;</span><br><span class="line">node.data = element;</span><br><span class="line"><span class="keyword">return</span> oldElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在指定索引处插入元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">checkPositionIndex(index);</span><br><span class="line"><span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">linkFirst(element);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(element, <span class="keyword">null</span>);</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">newNode.next = node.next;</span><br><span class="line">node.next = newNode;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定索引的结点，并返回该结点的数据值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">Node&lt;E&gt; removeNode = node.next;</span><br><span class="line">node.next = removeNode.next;</span><br><span class="line">E e = removeNode.data;</span><br><span class="line">removeNode.data = <span class="keyword">null</span>;</span><br><span class="line">removeNode.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//反转单链表pre-&gt;p-&gt;next</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Node&lt;E&gt; pre = first;</span><br><span class="line">Node&lt;E&gt; p = first.next;</span><br><span class="line">Node&lt;E&gt; next = <span class="keyword">null</span>;</span><br><span class="line">pre.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="keyword">null</span>) &#123;</span><br><span class="line">next = p.next;</span><br><span class="line">p.next = pre;</span><br><span class="line">pre = p;</span><br><span class="line">p = next;</span><br><span class="line">&#125;</span><br><span class="line">first = pre;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定数据在单链表中首次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;E&gt; node = first; node != <span class="keyword">null</span>; node = node.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (node.data == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;E&gt; node = first; node != <span class="keyword">null</span>; node = node.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.equals(node.data)) &#123;</span><br><span class="line"><span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给定数据在单链表中最后一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[size];</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;E&gt; node = first; node != <span class="keyword">null</span>; node = node.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (node.data == <span class="keyword">null</span>) &#123;</span><br><span class="line">array[i++] = index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (Node&lt;E&gt; node = first; node != <span class="keyword">null</span>; node = node.next) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.equals(node.data)) &#123;</span><br><span class="line">array[i++] = index;</span><br><span class="line">&#125;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (array.length != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> array[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public int lastIndexOf(Object obj) &#123;</span></span><br><span class="line"><span class="comment">Object[] array = toArray();</span></span><br><span class="line"><span class="comment">if(obj == null) &#123;</span></span><br><span class="line"><span class="comment">for(int i = array.length -1;i&gt;=0;i--) &#123;</span></span><br><span class="line"><span class="comment">if(array[i] == null) &#123;</span></span><br><span class="line"><span class="comment">return i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; else &#123;</span></span><br><span class="line"><span class="comment">for(int i = array.length -1;i&gt;=0;i--) &#123;</span></span><br><span class="line"><span class="comment">if(obj.equals(array[i])) &#123;</span></span><br><span class="line"><span class="comment">return i;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return -1;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuilder list = <span class="keyword">new</span> StringBuilder(<span class="string">"["</span>);</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">index++;</span><br><span class="line"><span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">list.append(node.data);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">list.append(node.data).append(<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">list.append(<span class="string">"]"</span>);</span><br><span class="line"><span class="keyword">return</span> list.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">Node&lt;E&gt; node = first;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; index ;i++) &#123;</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> E data;</span><br><span class="line"><span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">Node(E data, Node&lt;E&gt; next) &#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单链表中的结点索引从0开始到size-1</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以添加结点的位置，索引从0开始到size</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法分析:Java语言描述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析C语言指针</title>
      <link href="/2018/05/26/c-pointer/"/>
      <url>/2018/05/26/c-pointer/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;指针是一个地址，而指针变量是存放地址的变量。</p><a id="more"></a><h3 id="定义指针变量"><a href="#定义指针变量" class="headerlink" title="定义指针变量"></a>定义指针变量</h3><p>定义指针变量的一般形式：</p><p>类型名 * 指针变量名;</p><p>如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p1,* p2;</span><br></pre></td></tr></table></figure><h3 id="引用指针变量"><a href="#引用指针变量" class="headerlink" title="引用指针变量"></a>引用指针变量</h3><p><strong><em>相关运算符</em></strong></p><ol><li>&amp;&nbsp;&nbsp;&nbsp;取地址运算符，&amp;a是变量a的地址</li><li>*&nbsp;&nbsp;&nbsp;&nbsp;指针运算符，*p代表指针变量p指向的对象</li></ol><ul><li>给指针变量赋值（指针变量的值只能是地址）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = &amp;a;<span class="comment">//把a的地址赋给指针变量p，p指向a</span></span><br></pre></td></tr></table></figure><ul><li>引用指针变量指向的变量</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> * p,a = <span class="number">10</span>;</span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,*p);<span class="comment">//其中*p等价于a</span></span><br></pre></td></tr></table></figure><p>这里*p出现了两次，但是二者的含义完全不同。第一行中的*p表示定义了一个指针变量*p，其前面的*只是表示该变量是一个指针变量。而第三行中的*p则代表指针变量p所指向的变量a。</p><ul><li>引用指针变量的值。如：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,p);<span class="comment">//以八进制数的形式输出指针变量p的值，如果p指向了a，就是输出a的地址，即&amp;a。</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>,b = <span class="number">90</span>;</span><br><span class="line">    <span class="keyword">int</span> * p1, * p2;</span><br><span class="line">    p1 = &amp;a;</span><br><span class="line">    p2 = &amp;b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d,b = %d\n"</span>,a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"* p1 = %d,* p2 = %d"</span>,*p1,*p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span>,b = <span class="number">90</span></span><br><span class="line">* p1 = <span class="number">100</span>,* p2 = <span class="number">90</span></span><br></pre></td></tr></table></figure><p>这里指针变量p1指向a，指针变量p2指向b，因此*p1等价于a，*p2等价于b</p><h3 id="指针变量的好处"><a href="#指针变量的好处" class="headerlink" title="指针变量的好处"></a>指针变量的好处</h3><p>C语言中，实参变量和形参变量之间的数据传递是单向的“值传递”方式。函数的调用可以（且只可以）得到一个返回值，而使用指针变量作参数，可以得到多个变化了的值。虽然不能改变实参指针变量的值，但是可以改变实参指针变量所指向的变量的值。</p>]]></content>
      
      
      <categories>
          
          <category> c </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法分析作业之自己实现Java顺序表</title>
      <link href="/2018/05/25/data-structure-and-algorithm-analysis-homework-arraylist/"/>
      <url>/2018/05/25/data-structure-and-algorithm-analysis-homework-arraylist/</url>
      
        <content type="html"><![CDATA[<p class="text-center">自己实现的Java顺序表</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hegongshan.collections;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 顺序表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hegongshan https://www.hegongshan.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">private</span> Object[] elementData;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(DEFAULT_CAPACITY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (capacity &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> + capacity);</span><br><span class="line">&#125;</span><br><span class="line">elementData = <span class="keyword">new</span> Object[capacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回顺序表中的元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">ensureCapacity();</span><br><span class="line">elementData[size] = e;</span><br><span class="line">size++;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据索引号添加元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">checkPositionIndex(index);</span><br><span class="line">ensureCapacity();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt;= index; i--) &#123;</span><br><span class="line">elementData[i + <span class="number">1</span>] = elementData[i];</span><br><span class="line">&#125;</span><br><span class="line">elementData[index] = e;</span><br><span class="line">size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定索引处的元素</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">E oldValue = (E) elementData[index];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">elementData[i - <span class="number">1</span>] = elementData[i];</span><br><span class="line">&#125;</span><br><span class="line">elementData[--size] = <span class="keyword">null</span>;<span class="comment">// 最后一个元素变为null</span></span><br><span class="line"><span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除指定元素值首次出现的那个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index = indexOf(obj);</span><br><span class="line"><span class="keyword">if</span> (index != -<span class="number">1</span>) &#123;</span><br><span class="line">remove(index);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据索引号获取元素</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line"><span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变指定索引号的元素值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">elementData[index] = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 去掉多余的容量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &lt; elementData.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Object[] newElementData = <span class="keyword">new</span> Object[size];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">newElementData[i] = elementData[i];</span><br><span class="line">&#125;</span><br><span class="line">elementData = newElementData;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否包含某一元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> indexOf(obj) != -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某一元素首次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (elementData[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.equals(elementData[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某一元素最后一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (elementData[i] == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (obj.equals(elementData[i])) &#123;</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 确保容量，如果实际的元素个数大于等于容量，则扩容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (size &gt;= elementData.length) &#123;</span><br><span class="line">grow();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩容，每次增加原来一半的容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 右移的时候一定要加括号，&gt;&gt;的优先级低于+，</span></span><br><span class="line"><span class="comment">// 为了避免size为0，取扩容后的size和默认容量两者的最大值为新的容量</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = Math.max(size + (size &gt;&gt; <span class="number">1</span>), DEFAULT_CAPACITY);</span><br><span class="line">Object[] newElementData = <span class="keyword">new</span> Object[newCapacity];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">newElementData[i] = elementData[i];</span><br><span class="line">&#125;</span><br><span class="line">elementData = newElementData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断索引值是否为正确的元素索引</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以添加元素的位置，索引从0开始到size</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"index:"</span> + index + <span class="string">",size:"</span> + size);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuilder list = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">list.append(<span class="string">"ArrayList ["</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">list.append(elementData[i]);</span><br><span class="line"><span class="keyword">if</span> (i &lt; size - <span class="number">1</span>) &#123;</span><br><span class="line">list.append(<span class="string">','</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">list.append(<span class="string">"]"</span>);</span><br><span class="line"><span class="keyword">return</span> list.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法分析:Java语言描述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java网络爬虫之HttpURLConnection实战</title>
      <link href="/2018/05/21/java-spider-httpurlconnection-in-action/"/>
      <url>/2018/05/21/java-spider-httpurlconnection-in-action/</url>
      
        <content type="html"><![CDATA[<p>在开始写爬虫之前，我们先来总结一下用HttpURLConnection写爬虫的操作步骤：</p><p>1.实例化一个URL，调用URL类的openConnection()方法获得URLConnection对象，并强转为HttpURLConnection对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"http://host/path"</span>);</span><br><span class="line">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br></pre></td></tr></table></figure><p>2.设置连接的请求属性，诸如，setRequestProperty、setConnectionTimeout、setReadTimeout等</p><p>3.调用connect()方法连接远程资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.connect();</span><br></pre></td></tr></table></figure><p>4.访问资源数据。使用getInputStream方法获取一个输入流用以读取信息。如果服务器端出现错误，调用getErrorStream()方法获取错误信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    connection.getInputStream();</span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    connection.getErrorStream();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.调用disconnect()关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.disconnect();</span><br></pre></td></tr></table></figure><p>6.解析需要的数据。</p><a id="more"></a><p>这里以爬取百度首页为例，</p><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><h4 id="爬取百度首页源码"><a href="#爬取百度首页源码" class="headerlink" title="爬取百度首页源码"></a>爬取百度首页源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">connection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">connection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">connection.connect();</span><br><span class="line">InputStream is = connection.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is,<span class="string">"utf-8"</span>));</span><br><span class="line">String temp;</span><br><span class="line">StringBuilder html = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">while</span>((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(temp.trim().isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//格式化html</span></span><br><span class="line">    html.append(temp.replaceAll(<span class="string">"\\s+&lt;"</span>, <span class="string">"&lt;"</span>).replace(<span class="string">"&gt;"</span>, <span class="string">"&gt;\n"</span>));</span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line">is.close();</span><br><span class="line">connection.disconnect();</span><br><span class="line">System.out.println(html);</span><br></pre></td></tr></table></figure><p>控制台输出如下信息：<a href="http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/index.html" target="_blank" rel="noopener"><i class="fa fa-folder-open"></i></a></p><h4 id="设置用户代理，再爬百度首页"><a href="#设置用户代理，再爬百度首页" class="headerlink" title="设置用户代理，再爬百度首页"></a>设置用户代理，再爬百度首页</h4><p>上面的程序，我们稍微改一下，在setRequestProperty方法中设置下User-Agent，看下会出现什么神奇的变化？因为输出的内容有点多，我把它写入到一个html文件中了，而不是直接打印在控制台。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">HttpURLConnection connection = (HttpURLConnection) url.openConnection();</span><br><span class="line">connection.setConnectTimeout(<span class="number">10000</span>);</span><br><span class="line">connection.setRequestMethod(<span class="string">"GET"</span>);</span><br><span class="line">connection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">connection.setDoOutput(<span class="keyword">false</span>);</span><br><span class="line">connection.setRequestProperty(<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36"</span>);</span><br><span class="line">connection.connect();</span><br><span class="line">InputStream is = connection.getInputStream();</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is,<span class="string">"utf-8"</span>));</span><br><span class="line">String temp;</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">"c:/Users/hgs/Desktop/baidu_index.html"</span>),<span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">while</span>((temp = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    temp = temp.trim();</span><br><span class="line">    <span class="keyword">if</span>(temp.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//格式化输出，便于在浏览器中查看</span></span><br><span class="line">    temp = temp.replaceAll(<span class="string">"\\s+&lt;"</span>, <span class="string">"&lt;"</span>)</span><br><span class="line">        .replace(<span class="string">"&lt;"</span>, <span class="string">"&amp;lt;"</span>)</span><br><span class="line">        .replace(<span class="string">"&gt;"</span>, <span class="string">"&amp;gt;&lt;br&gt;"</span>)</span><br><span class="line">        .replace(<span class="string">"&amp;lt;/"</span>,<span class="string">"&lt;br&gt;&amp;lt;/"</span>)</span><br><span class="line">        .replace(<span class="string">"&#123;"</span>, <span class="string">"&#123;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>)</span><br><span class="line">        .replace(<span class="string">"&#125;"</span>, <span class="string">"&lt;br&gt;&#125;&lt;br&gt;"</span>)</span><br><span class="line">        .replaceAll(<span class="string">"[^\\&amp;(nbsp|gt|lt)];[^\"']"</span>, <span class="string">";&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"</span>);</span><br><span class="line">    bw.write(temp);</span><br><span class="line">&#125;</span><br><span class="line">bw.flush();</span><br><span class="line">bw.close();</span><br><span class="line">br.close();</span><br><span class="line">is.close();</span><br><span class="line">connection.disconnect();</span><br></pre></td></tr></table></figure><p>响应结果：<a href="http://p64uw9x5j.bkt.clouddn.com/html/2018/05/21/baidu_index2.html" target="_blank" rel="noopener"><i class="fa fa-folder-open"></i></a></p><p>响应结果似乎与刚才不一样了，多出了很多内容。这是因为，默认情况下，Java程序会发送包含单词Java的通用用户代理字符串，而有些服务器可能存在反爬虫机制，不想为程序自动产生的请求服务。这时候，我们可<strong><em>在请求头中设置User-Agent，以达到伪装浏览器的目的</em></strong>。</p><h4 id="带参数的get请求"><a href="#带参数的get请求" class="headerlink" title="带参数的get请求"></a>带参数的get请求</h4><p>到这里我们已经能爬到完整的百度首页了，但这似乎没有什么用处。</p><p>现在我们试试通过程序自动查询百度，并获取第一页的查询结果。。。（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java网络爬虫之详解HttpURLConnection</title>
      <link href="/2018/05/21/java-spider-httpurlconnection/"/>
      <url>/2018/05/21/java-spider-httpurlconnection/</url>
      
        <content type="html"><![CDATA[<p>在Java.net包下有一个类HttpURLConnection，其继承结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpURLConnection</span> <span class="keyword">extends</span> <span class="title">URLConnection</span></span></span><br></pre></td></tr></table></figure><p>它的父类URLConnection也是一个抽象类。要想取得URLConnection对象，只能通过java.net.URL下的如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> URLConnection <span class="title">openConnection</span><span class="params">()</span> <span class="keyword">throws</span> java.io.IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> URLConnection <span class="title">openConnection</span><span class="params">(Proxy proxy)</span> <span class="keyword">throws</span> java.io.IOException</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><p>URLConnection主要的成员方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置建立连接后，产生从服务器读取信息的输入流，默认为true</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoInput</span><span class="params">(<span class="keyword">boolean</span> doinput)</span></span>;</span><br><span class="line"><span class="comment">//默认情况下，建立连接后不会产生执行写操作的输出流，如果想要获得输出流，</span></span><br><span class="line"><span class="comment">//则将dooutput设置为true，主要用于post请求</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoOutput</span><span class="params">(<span class="keyword">boolean</span> dooutput)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIfModifiedSince</span><span class="params">(<span class="keyword">long</span> ifmodifiedsince)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUseCaches</span><span class="params">(<span class="keyword">boolean</span> usecaches)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAllowUserInteraction</span><span class="params">(<span class="keyword">boolean</span> allowuserinteraction)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestProperty</span><span class="params">(String key, String value)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectTimeout</span><span class="params">(<span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setReadTimeout</span><span class="params">(<span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeaderField</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeaderField</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeaderFieldKey</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getContentLength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContentType</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getContentEncoding</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getExpiration</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> URL <span class="title">getURL</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在setRequestProperty()方法中可以设置请求头信息。请求头信息将和请求命令一起被发送到服务器，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Accept:image/webp,image/apng,image/*,*/*;q=0.8</span><br><span class="line">Accept-Encoding:gzip, deflate, br</span><br><span class="line">Accept-Language:zh-CN,zh;q=0.8</span><br><span class="line">Cache-Control:no-cache</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Cookie:</span><br><span class="line">Host:sp1.baidu.com</span><br><span class="line">Pragma:no-cache</span><br><span class="line">Referer:https://www.baidu.com</span><br><span class="line">User-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36</span><br></pre></td></tr></table></figure><p>如何查看有哪些头信息可以设置呢？这里以百度首页为例，我用的chrome浏览器（其他浏览器大同小异），按F12打开开发者工具，选择网络（network），然后刷新一下正在浏览的页面，可以看到很多的图片、css、js等，随便点开一个，右侧的Request Headers下的信息，就是请求头信息。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/21/20180521162735.png" alt=""></p><p>HttpURLConnection主要的扩展方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//method必须写大写字母</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRequestMethod</span><span class="params">(String method)</span> <span class="keyword">throws</span> ProtocolException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResponseCode</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getResponseMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getErrorStream</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFollowRedirects</span><span class="params">(<span class="keyword">boolean</span> set)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstanceFollowRedirects</span><span class="params">(<span class="keyword">boolean</span> followRedirects)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>值得注意的是，setRequestMethod方法的参数必须写<strong><em>大写</em></strong>，以GET请求为例，如果写小写，会报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.net.ProtocolException: Invalid HTTP method: get</span><br><span class="line">at java.net.HttpURLConnection.setRequestMethod(Unknown Source)</span><br><span class="line">at sun.net.www.protocol.http.HttpURLConnection.setRequestMethod(Unknown Source)</span><br></pre></td></tr></table></figure><p>支持的HTTP请求为GET、POST、HEAD、OPTIONS、PUT、DELETE、TRACE，默认为GET请求。</p><p>若为POST请求，则需要设置setDoOutput(boolean dooutput)为true，否则会报如下错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">"main"</span> java.net.ProtocolException: cannot write to a URLConnection <span class="keyword">if</span> doOutput=<span class="keyword">false</span> - <span class="function">call <span class="title">setDoOutput</span><span class="params">(<span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">at sun.net.www.protocol.http.HttpURLConnection.<span class="title">getOutputStream0</span><span class="params">(Unknown Source)</span></span></span><br><span class="line"><span class="function">at sun.net.www.protocol.http.HttpURLConnection.<span class="title">getOutputStream</span><span class="params">(Unknown Source)</span></span></span><br><span class="line"><span class="function">at sun.net.www.protocol.https.HttpsURLConnectionImpl.<span class="title">getOutputStream</span><span class="params">(Unknown Source)</span></span></span><br></pre></td></tr></table></figure><p>（未完待续）</p>]]></content>
      
      
      <categories>
          
          <category> 网络爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 网络爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下搭建nginx和tomcat整合开发环境</title>
      <link href="/2018/05/19/windows-nginx-tomcat-development-environment/"/>
      <url>/2018/05/19/windows-nginx-tomcat-development-environment/</url>
      
        <content type="html"><![CDATA[<blockquote><p>遇到的问题越多，人成长的越快。算下日子，接手课题组的项目，已经一月有余。期间碰到了很多问题，也一直在积极面对。</p></blockquote><h4 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h4><p>接手课题组的项目后，遇到过一个很严重的问题：项目在本地tomcat上能完美运行，但是到了服务器上，就出问题了——JSP文件中el表达式${pageContext.request.contextPath}取到的上下文路径始终为空，即***“”。由于之前深受项目必须使用绝对路径这一思想的影响，我在JSP文件中定义了如下变量，用来表示外部js文件中的ajax请求地址的前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> contextPath = <span class="string">"$&#123;pageContext.request.contextPath&#125;"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>对于一个常规的java web项目，我们在部署到服务器tomcat中的时候，一般会先配置server.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--端口号改为80--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--defaultHost和主机的name均改为项目的域名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--如果项目名不为ROOT，还要配置Context--&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--&lt;Context docBase="" path=""/&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，最开始不知道的是，服务器上使用了nginx作为反向代理服务器，所有的http请求，都由nginx转发给tomcat，tomcat的server.xml根本就没有配置（或者说是使用了默认配置），这就很好的解释了为什么${pageContext.request.contextPath}为空了，因为项目名为ROOT的项目，默认的path就是空。</p><p>当时的解决办法是，把上面jsp中定义的js变量contextPath直接改为项目域名。这样一改，域名是写死的，不带www前缀的时候，出现了ajax跨域。</p><p>后来想想，干脆直接改为“.”，也就是用相对路径。这样一改，似乎解决了原来的问题。但这只是假象，一旦原来的路径多起来，”.”表示与当前页面同级，ajax请求的地址可能就不对了。</p><p>最后干脆弃用${pageContext.request.contextPath}，所有的请求以”/“开头，并且为了防止再出现本机运行效果和服务器上运行效果不一致的情况，我在我的电脑上搭建了nginx和tomcat整合开发环境。</p><p>废话不多说了，赶紧进入正题。</p><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><p>首先，从<a href="http://nginx.org/" target="_blank" rel="noopener">nginx官网</a>下载最新的稳定版nginx，<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">下载地址</a></p><p>当前最新的稳定版本是1.14.0，根据自己的操作系统选择对应的版本，我这里选择<a href="http://nginx.org/download/nginx-1.14.0.zip" target="_blank" rel="noopener">nginx/Windows-1.14.0</a></p><p>下载下来后，直接解压缩就可以了，下面是解压后的目录结构</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202131.png" alt=""></p><ul><li>启动nginx</li></ul><p>启动nginx有两种方式，一是点击nginx.exe直接启动，二是在命令行模式下切换到nginx解压目录（当然，也可以将nginx路径添加到系统环境变量path中，以后就不需要切换到解压目录那么麻烦了），使用命令</p><p><strong><em>start nginx</em></strong>来启动nginx（推荐使用这种方法）。</p><p>进入命令行模式，切换到nginx解压目录，我直接解压在桌面上了，输入start nginx，屏幕一闪，然后出现下一个命令行，这就表示nginx已经启动啦。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211405.png" alt=""></p><p>现在我们来测试下nginx是不是真的成功启动了，在浏览器里输入localhost，不出意外的话应该会出现nginx的欢迎页面。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519211328.png" alt=""></p><ul><li>关闭nginx</li></ul><p>使用命令<strong><em>nginx.exe -s stop</em></strong>来关闭nginx</p><ul><li>重启nginx</li></ul><p>使用命令<strong><em>nginx.exe -s reload</em></strong>来重启nginx</p><ul><li>配置nginx</li></ul><p>在conf目录下有一个叫做nginx.conf文件，这是nginx的配置文件。</p><p>这里我不会详细讲nginx.conf中的各种配置（因为我现在也不会啊^_^），以后会专门开一个系列来讲nginx以及Linux上nginx和tomcat实现反向代理和负载均衡。</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519202234.png" alt=""></p><p>主要来看下与开发环境搭建相关的server的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置虚拟主机</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       <span class="number">80</span>; <span class="comment">#指定需要nginx监听的端口</span></span><br><span class="line">    server_name  localhost; <span class="comment">#需要访问的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line">    <span class="comment">#转发</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html; <span class="comment">#指定根目录</span></span><br><span class="line">        index  index.html index.htm; <span class="comment">#指定首页及优先顺序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /<span class="number">50</span>x.html;</span><br><span class="line">    location = /<span class="number">50</span>x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要需要改下location /里面的配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://localhost:<span class="number">8080</span>; <span class="comment"># proxy_pass 指定被代理服务器的URL</span></span><br><span class="line">    proxy_set_header Host $host; <span class="comment"># 将nginx接收到的请求头信息中的host转发给被代理服务器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，nginx就基本配置好了。</p><h4 id="配置eclipse（可选）"><a href="#配置eclipse（可选）" class="headerlink" title="配置eclipse（可选）"></a>配置eclipse（可选）</h4><p>在eclipse中运行我们的项目，然后修改eclipse引入的tomcat配置文件server.xml</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519205728.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--eclipse默认情况下会用项目名作为上下文路径，这里我们改为空或者/，</span></span><br><span class="line"><span class="comment">不改的话，访问的时候需要加上项目名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">docBase</span>=<span class="string">"demo"</span> <span class="attr">path</span>=<span class="string">""</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">source</span>=<span class="string">"org.eclipse.jst.jee.server:course"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>我们在浏览器中直接访问localhost，看能否访问到我们的项目</p><p><img src="http://p64uw9x5j.bkt.clouddn.com//image/2018/05/19/20180519213000.png" alt=""></p><p>出现了Hello World! 这表明nginx确实把我们的请求转发给了tomcat。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL模糊查询并高亮显示查询结果</title>
      <link href="/2018/05/14/sql-fuzzy-query-and-highlight-keyword/"/>
      <url>/2018/05/14/sql-fuzzy-query-and-highlight-keyword/</url>
      
        <content type="html"><![CDATA[<p>最近在完善课题组的项目时，遇到了一个问题：项目有个论坛模块，需要实现根据用户输入的关键字检索论坛文章，然后高亮显示检索结果。</p><p>本来遇到这个需求，第一反应是用lucene来做全文检索。但是，lucene只是一个全文检索工具包，要用它实现全文检索，需要写一大堆的代码，加之虽然之前用过几次lucene，但是对lucene的API还是不太熟。想想还是算了，等以后专门研究一下lucene再说吧。</p><p>有朋友可能要问了：为什么不用solr或者elasticsearch？还不是因为不熟，再说了，一个solr一百多兆，我这就是个小项目，没必要啊。思来想去，最后还是决定就用sql的模糊查询like实现。</p><a id="more"></a><p>表结构是这样的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> article(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">bigint</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment,</span><br><span class="line">title <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">summary <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">is_public tinyint(<span class="number">1</span>) <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">comment</span> <span class="string">"是否公开，1表示公开，0表示私密"</span>,</span><br><span class="line">gmt_create datetime <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">...,</span><br><span class="line">primary <span class="keyword">key</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这里以检索“作业“为例，只查询公开的文章，并且按照发表时间降序排列，SQL是这样写的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,title,summary,gmt_create,... </span><br><span class="line"><span class="keyword">from</span> article</span><br><span class="line"><span class="keyword">where</span> is_public = <span class="number">1</span> <span class="keyword">and</span> (title <span class="keyword">like</span> <span class="string">"%作业%"</span> <span class="keyword">or</span> summary <span class="keyword">like</span> <span class="string">"%作业%"</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> gmt_create <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这样做确实能实现模糊查询了，但是又一个问题来了：如何实现检索结果高亮显示呢？</p><p>寻思了很久，也没想到解决办法。后来灵机一动，想到干嘛不在返回字段的时候在关键字的前后插入一些html标签，或者直接替换返回字段中的关键字，这不就实现高亮显示了吗？于是SQL就成了下面这样。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,</span><br><span class="line"><span class="keyword">replace</span>(title,<span class="string">"作业"</span>,<span class="keyword">concat</span>(<span class="string">"&lt;font color='red'&gt;&lt;b&gt;"</span>,<span class="string">"作业"</span>,<span class="string">"&lt;/b&gt;&lt;/font&gt;"</span>)) <span class="keyword">as</span> title,</span><br><span class="line"><span class="keyword">replace</span>(summary,<span class="string">"作业"</span>,<span class="keyword">concat</span>(<span class="string">"&lt;font color='red'&gt;&lt;b&gt;"</span>,<span class="string">"作业"</span>,<span class="string">"&lt;/b&gt;&lt;/font&gt;"</span>)) <span class="keyword">as</span> summary,</span><br><span class="line">gmt_create,...</span><br><span class="line"><span class="keyword">from</span> article</span><br><span class="line"><span class="keyword">where</span> is_public = <span class="number">1</span> <span class="keyword">and</span> (title <span class="keyword">like</span> <span class="string">"%作业%"</span> <span class="keyword">or</span> summary <span class="keyword">like</span> <span class="string">"%作业%"</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> gmt_create <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">0</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>当然，使用全模糊查询，然后通过替换关键字的方式实现检索结果高亮显示，从而实现全文检索，这种方法效率肯定不高。《阿里巴巴Java开发手册》中也明确禁止使用全模糊或左模糊查询，因为全模糊或者左模糊查询无法使用索引。</p>]]></content>
      
      
      <categories>
          
          <category> sql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之tar压缩和解压缩文件</title>
      <link href="/2018/05/14/linux-command-tar/"/>
      <url>/2018/05/14/linux-command-tar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近需要在Linux服务器上解压tar.gz文件，于是乎学习了下tar命令的使用。</p></blockquote><p>tar命令参数很多，暂时就只用到以下几个参数，其他的以后用到再补上。</p><a id="more"></a><h4 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h4><ul><li>-c：全称create，用于创建文件</li><li>-v：全称verbose，用于显示详细的命令执行信息</li><li>-f：全称file，用于指定需要压缩或者解压缩的文件名</li><li>-x：用于解压文件</li><li>-C：切换到指定目录</li><li>-z：通过gzip命令处理文件。简单来说，如果需要压缩为*.gz文件，或者解压缩*.gz文件，就要带上-z</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>1.解压缩tar.gz文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.31.tar.gz</span><br></pre></td></tr></table></figure><p>2.解压缩tar.gz文件到指定目录，这里以/usr/local目录为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.5.31.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure><p>3.将某个（些）目录或文件压缩为tar.gz文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf archive.tar.gz file1 file2 ...</span><br></pre></td></tr></table></figure><p>archive.tar.gz是生成的压缩文件名，file1、file2等是要压缩的文件和目录列表。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 压缩 </tag>
            
            <tag> 解压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之Vim编辑器的使用</title>
      <link href="/2018/05/11/linux-vim/"/>
      <url>/2018/05/11/linux-vim/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前话：学习Vim编辑器，是一个循序渐进的过程，本篇是博主自己的学习总结，会持续更新。</p></blockquote><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Vim编辑器有三种工作模式：</p><ul><li>命令行模式：顾名思义，在这个模式下，所有的键盘操作都会被认为是命令。启动vi编辑器，就会进入命令行模式。</li><li>输入模式：除了按下“Esc”外，其他的键盘输入都不会被认为是命令。处于这个模式下，和我们在Windows中用Notepad等编辑文件，几乎没有区别。按下“Esc”，会退出输入模式，进入命令行模式。</li><li>末行模式（编辑模式）：在命令模式下，输入“:”就会进入末行模式。</li></ul><p>这里，博主总结下最近学习到的且经常使用的一些命令。</p><a id="more"></a><h3 id="启动Vim"><a href="#启动Vim" class="headerlink" title="启动Vim"></a>启动Vim</h3><p>vim fileName：进入编辑环境并打开或新建文件</p><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>dd：删除光标所在行，并将当前行内容复制到剪贴板</p><p>p：全称paste，表示将剪贴板中的数据粘贴到光标当前位置</p><p>yy：复制光标所在行</p><h3 id="进入输入模式"><a href="#进入输入模式" class="headerlink" title="进入输入模式"></a>进入输入模式</h3><ul><li>i：在命令模式下，在当前光标处进入输入模式</li></ul><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>输入模式，类似于我们在Windows中编辑文件</p><ul><li>方向键进行上下左右方向的光标移动</li><li>Backspace键：删除光标左侧的字符</li><li>delete键：删除光标右侧的字符</li></ul><h3 id="退出输入模式"><a href="#退出输入模式" class="headerlink" title="退出输入模式"></a>退出输入模式</h3><p>按下Esc键：从输入模式回到命令行模式</p><h3 id="进入末行模式"><a href="#进入末行模式" class="headerlink" title="进入末行模式"></a>进入末行模式</h3><p>在命令行模式下，按下”:“就会进入末行模式。</p><p>输入:set number或者:set nu显示行号。</p><p>输入:set nonumber或者:set nonu不显示行号。</p><h3 id="退出Vim"><a href="#退出Vim" class="headerlink" title="退出Vim"></a>退出Vim</h3><p>q：退出Vim</p><p>q!：不保存文件并退出Vim</p><p>w：保存文件</p><p>wq：保存文件并退出Vim</p><p>wq!：强制保存文件并退出vi（忽略只读）</p><h3 id="快速定位行"><a href="#快速定位行" class="headerlink" title="快速定位行"></a>快速定位行</h3><p>1.启动前</p><p>定位到文件第num行：vim +num fileName</p><p>例如，定位到test.txt的第10行：vim +10 test.txt</p><p>2.命令行模式</p><p><code>shift</code> + <code>G</code>：跳转至最后一行</p><p><code>1</code>+<code>shift</code> + <code>G</code>  或者 GG：跳转至第一行</p><p><code>n</code>+<code>shift</code> + <code>G</code>   或者 nGG：跳转至第n行。比如10GG，跳转至第10行</p><p>3.末行模式</p><p>输入:number，定位到第number行。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Linux中存活下来之文件与目录管理</title>
      <link href="/2018/05/10/linux-file-directory-manage/"/>
      <url>/2018/05/10/linux-file-directory-manage/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前话：最近接手了导师的一个项目，项目部署在Linux服务器上后，出了点小问题，需要修改一些文件。因为不是自己部署的，加之对linux命令不熟，怎么办？在本地修改完后，重新让别人帮忙部署？还是自己在服务器上手动修改？天生不喜欢求人，哈哈</p></blockquote><p>总结一下最近常用的一些Linux基础命令，主要和文件、目录的操作相关</p><a id="more"></a><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><p>ls，全称list，用于列出某个目录下的所有文件和目录。</p><p>用法：ls -options dirName</p><p>参数说明：</p><ul><li><code>-a</code>或者<code>--all</code>：列出所有的文件，包括以点号开头的文件</li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p>cd，全称change directory，用于切换路径。估计大伙对cd这个命令都很熟，因为Windows上的命令行界面也是用cd命令来切换路径。</p><p>用法：cd [dirName]</p><p>值得一提的是，</p><p>“~”表示当前用户的主目录，</p><p>“.”表示当前目录，</p><p>“..”表示回到当前目录的上一级目录</p><p>”-“表示返回之前的目录。例如，当前目录为/usr/local，输入cd /etc后，当前目录为/etc。此时，如果输入cd -，将返回/usr/local，并输出当前目录名。</p><h3 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3><p>pwd，全称print working directory，用于输出当前的工作目录名。</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><p>rm，全称remove，用于删除文件或目录。</p><p>用法：rm [options] name…</p><p>参数说明：</p><ul><li>-i 删除前逐一询问确认</li><li>-f 全称force，删除文件不需要询问</li><li>-r 全称recurse，递归删除目录下的所有文件</li></ul><p>如果嫌上面的麻烦，那么我们简单粗暴点，删除文件用 rm [fileName]，删除目录用 rm -rf [dirName]，哈哈！</p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><p>cp，全称copy，用于复制文件或目录。</p><p>用法：cp [options] source… dest</p><p>cp的参数比较多，这里只讲-r，其他的用到再现学。cp中的-r和rm中的-r意思差不多，都表示递归。主要用于目录复制。</p><p>简单粗暴版：复制单个文件用 cp source … dest，复制目录用 cp -r [dirName]&nbsp;[dirName]</p><h3 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h3><p>mv，具有rename和move两种功能，用于重命名文件或目录，或者将文件或目录移入另一个目录。</p><p>用法：mv source dest</p><p>简单来说，如果source和dest同为目录或者文件，且dest不存在，则将source重命名为dest；</p><p>如果source为文件或目录，而dest为目录，则将source移到dest中。</p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><p>touch，用于创建文件。如果文件已经存在，则更新文件的时间戳。</p><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>file，用于输出文件类型。</p><p>用法：file filename</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>mkdir，全称make directory，用于创建目录。</p><p>用法：mkdir [options] dirName</p><p>mkdir的参数暂时没用过，等用到了再补上。</p><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>rmdir，全称remove directory，用于删除空目录。</p><p>语法：rmdir [options] dirName</p><p>参数：</p><ul><li>-p：全称parents，删除指定的空目录后，若此时该目录的父目录已变成空目录，则将父目录一并删除。</li></ul>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式及Java对其的支持</title>
      <link href="/2018/04/11/java-regular-expression/"/>
      <url>/2018/04/11/java-regular-expression/</url>
      
        <content type="html"><![CDATA[<h3 id="简述正则表达式"><a href="#简述正则表达式" class="headerlink" title="简述正则表达式"></a>简述正则表达式</h3><p>​    今天我们来讲下正则表达式，先来看下正则表达式中的数量表示</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">?</td><td style="text-align:center">零次或一次匹配？前的字符或子表达式，<strong><em>等价于{0,1}</em></strong></td><td style="text-align:center">gong(shan)?匹配gong或gongshan</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">零次或多次匹配*前的字符或子表达式，<strong><strong>等价于{0,}</strong></strong></td><td style="text-align:center">sm*匹配sm或者s</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">一次或多次匹配*前的字符或子表达式，<strong><strong>等价于{1,}</strong></strong></td><td style="text-align:center">zoo+匹配zoo或者zooo等</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">n为非负整数，正好匹配n次</td><td style="text-align:center">zo{2}匹配zoo</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">n为非负整数，至少匹配n次</td><td style="text-align:center">zo{1,}可匹配zo，zoo，zooo等</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">n和m均为非负整数，表示至少匹配n次，至多匹配m次</td><td style="text-align:center">zo{1,2}则只匹配zo或者zoo</td></tr></tbody></table><a id="more"></a><p>常用特殊字符</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">[xyz]</td><td style="text-align:center">字符集。匹配包含的任一字符</td><td style="text-align:center">[abc] 匹配 java 中的a</td></tr><tr><td style="text-align:center">[^xyz]</td><td style="text-align:center">反字符集。匹配未被包含的任一字符</td><td style="text-align:center">[^abc] 匹配 java 中的 j和v</td></tr><tr><td style="text-align:center">[x-y]</td><td style="text-align:center">字符范围。匹配从x到y（指定范围内）的所有字符</td><td style="text-align:center">[a-z]匹配从a到z的所有小写字母</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配一个数字，<strong><em>等价于[0-9]</em></strong></td><td style="text-align:center">he\d{2} 匹配 he33</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配一个非数字，<strong><em>等价于[^0-9]</em></strong></td><td style="text-align:center">he\D{4} 匹配 heyang</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任何空白字符</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任何非空白字符</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配任何字类字符，包括下划线，<strong><em>等价于[a-zA-Z0-9_]</em></strong></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任何非字类字符，<strong><em>等价于[^a-zA-Z0-9_]</em></strong></td></tr></tbody></table><p>常用逻辑操作</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">说明</th><th style="text-align:center">举例</th></tr></thead><tbody><tr><td style="text-align:center">xy</td><td style="text-align:center">x并y</td><td style="text-align:center">[xy]</td></tr><tr><td style="text-align:center">x&#124;y</td><td style="text-align:center">x或y</td><td style="text-align:center">[x&#124;y]</td></tr><tr><td style="text-align:center">(X)</td><td style="text-align:center">将X定义为一个组</td><td style="text-align:center">[xy(bc)]，(x&#124;y)</td></tr></tbody></table><p>其他预定义字符以及不是特别常用的字符，详见 <a href="https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="正则表达式" target="_blank" rel="noopener">java正则表达式</a></p><h3 id="java对正则表达式的支持"><a href="#java对正则表达式的支持" class="headerlink" title="java对正则表达式的支持"></a>java对正则表达式的支持</h3><p>在java中要想使用正则表达式，有三种方式：</p><ul><li>String类对正则表达式的支持</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span></span></span><br></pre></td></tr></table></figure><ul><li>单独使用java.util.regex.Pattern</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex, CharSequence input)</span></span></span><br></pre></td></tr></table></figure><ul><li>java.util.regex包下的Pattern类配合Matcher类使用（<strong><em>推荐采用此方式</em></strong>）</li></ul><p>下面我们依次来使用这三种方式：</p><p>第一种：String类对正则表达式的支持 matches(String regex)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Java"</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = str.matches(<span class="string">"(J|x)ava"</span>);</span><br><span class="line">    System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>这种方式虽然也能实现正则匹配，但是功能单一，只能返回是否匹配，而且字符串必须<strong><em>整体匹配</em></strong>才能返回true，以下面的代码来说明这个问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testString2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Java is a programming language."</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = str.matches(<span class="string">"Java"</span>);</span><br><span class="line">    System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>查看String类的源码可以发现，String类的matches方法实际上就是调用的下面要讲的第二种方式Pattern.matches(String regex,CharSequence input)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Pattern.matches(regex, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种：单独使用Pattern进行正则匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"Java is a programming language."</span>;</span><br><span class="line">    String regex = <span class="string">"Java"</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = Pattern.matches(regex, str);</span><br><span class="line">    System.out.println(flag);</span><br><span class="line">&#125;</span><br><span class="line">输出结果：<span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>这里为什么也返回了false？原因和第一种方式一样，因为Pattern的静态方法matches(String regex,CharSequence input)也是<strong><em>整体匹配</em></strong>。<br>实际上，如果我们去查看Pattern的源码的话，可以发现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex, CharSequence input)</span> </span>&#123;</span><br><span class="line">    Pattern p = Pattern.compile(regex);</span><br><span class="line">    Matcher m = p.matcher(input);</span><br><span class="line">    <span class="keyword">return</span> m.matches();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这种方式实际上使用的是下面的第三种方式</p><p>第三种：Pattern和Matcher的结合使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPatternAndMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String str = <span class="string">"I love Java and xava."</span>;</span><br><span class="line">    String regex = <span class="string">"(J|x)ava"</span>;</span><br><span class="line">    Pattern p = Pattern.compile(regex);</span><br><span class="line">    Matcher m = p.matcher(str);</span><br><span class="line">    System.out.println(m.matches());</span><br><span class="line">    <span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">        System.out.println(m.group());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">Java</span><br><span class="line">xava</span><br></pre></td></tr></table></figure><p>通过以上分析，我们可以发现，第一种方式是对第二种方式的调用，而第二种方式的实现又是采用的第三种方式。</p><p>因此，在以后的使用中，推荐直接使用第三种方式，其功能远强于第一种和第二种方式。</p><h3 id="详解Pattern和Matcher"><a href="#详解Pattern和Matcher" class="headerlink" title="详解Pattern和Matcher"></a>详解Pattern和Matcher</h3><p>Pattern的常用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pattern <span class="title">compile</span><span class="params">(String regex)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Matcher <span class="title">matcher</span><span class="params">(CharSequence input)</span></span></span><br></pre></td></tr></table></figure><p>由于Pattern只有私有构造方法，我们不能直接实例化它，故每次必须通过其compile方法取得Pattern对象，继而通过matcher方法获取Matcher对象。</p><p>Matcher的常用方法</p><p>①索引方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">start</span><span class="params">()</span><span class="comment">//返回之前匹配的起始索引</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">start</span><span class="params">(<span class="keyword">int</span> group)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">()</span><span class="comment">//返回最后匹配字符之后的偏移量，例如用\d&#123;4&#125;匹配he2018，则end()返回6</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">end</span><span class="params">(<span class="keyword">int</span> group)</span></span></span><br></pre></td></tr></table></figure><p>实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String regex = <span class="string">"\\d&#123;4&#125;"</span>;</span><br><span class="line">String str = <span class="string">"he2018shan0423yang11gong456shan"</span>;</span><br><span class="line">Pattern pattern = Pattern.compile(regex);</span><br><span class="line">Matcher matcher = pattern.matcher(str);</span><br><span class="line"><span class="keyword">while</span>(matcher.find()) &#123;</span><br><span class="line">System.out.println(<span class="string">"匹配字段："</span>+matcher.group());</span><br><span class="line">System.out.println(<span class="string">"开始索引："</span>+matcher.start());</span><br><span class="line">System.out.println(<span class="string">"结束索引："</span>+matcher.end());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">匹配字段：<span class="number">2018</span></span><br><span class="line">开始索引：<span class="number">2</span></span><br><span class="line">结束索引：<span class="number">6</span></span><br><span class="line">匹配字段：<span class="number">0423</span></span><br><span class="line">开始索引：<span class="number">10</span></span><br><span class="line">结束索引：<span class="number">14</span></span><br></pre></td></tr></table></figure><p>②研究方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> start)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lookingAt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>③替换方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">quoteReplacement</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Matcher <span class="title">appendReplacement</span><span class="params">(StringBuffer sb, String replacement)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">appendTail</span><span class="params">(StringBuffer sb)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String replacement)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceFirst</span><span class="params">(String replacement)</span></span></span><br></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p>常用的正则表达式</p><table><thead><tr><th style="text-align:left">规则</th><th style="text-align:left">正则表达式语法</th></tr></thead><tbody><tr><td style="text-align:left">电子邮箱</td><td style="text-align:left">[\w!#$%^&amp;`+=/(&#124;)’?,~*-]+@([a-z0-9]+\.)+[a-z]+</td></tr><tr><td style="text-align:left">中文字符</td><td style="text-align:left">[\u4e00-\u9fa5]</td></tr><tr><td style="text-align:left">QQ号</td><td style="text-align:left">[1-9][0-9]{4,}</td></tr><tr><td style="text-align:left">身份证号</td><td style="text-align:left">\d{6}(19&#124;20)\d{2}((0[1-9])&#124;(1[0-2]))(([0-2]\d)&#124;(3[0-1]))\d{3}(\d&#124;x&#124;X){1}</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架源码阅读之栈Stack</title>
      <link href="/2018/04/02/java-collections-api-stack/"/>
      <url>/2018/04/02/java-collections-api-stack/</url>
      
        <content type="html"><![CDATA[<blockquote><p>什么是栈？<br>栈是限制插入和删除只能在一个位置上进行的表，它是一个后进先出(last-in-first-out，LIFO)表</p></blockquote><p>本文是《Java集合框架源码阅读》系列的第三篇，我们来说说Java中的栈<br>在Java Collections API中有一个类叫做java.util.Stack，它的继承结构如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Vector</span>&lt;<span class="title">E</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>它是在java.util.Vector类的基础上扩展了5个方法而来的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span><span class="comment">//进栈</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span><span class="comment">//出栈，返回栈顶元素并将其删除</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span><span class="comment">//取得栈顶元素（不删除）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span><span class="comment">//判断是否为空栈</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span><span class="comment">//详见问题四</span></span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>Stack本身是扩展Vector而来的，而Vector是一个可增长的对象数组（The Vector class implements a growable array of objects），那么这个数组的哪部分成为了Stack的栈顶和栈底呢？</p><h3 id="问题一：Stack的栈顶和栈底在哪里？"><a href="#问题一：Stack的栈顶和栈底在哪里？" class="headerlink" title="问题一：Stack的栈顶和栈底在哪里？"></a>问题一：Stack的栈顶和栈底在哪里？</h3><p>我们先来观察peek()方法的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line"><span class="keyword">return</span> elementAt(len - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里调用了父类Vector的elementAt(int index)方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">elementAt</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过观察以上源码，我们可以发现：调用peek()方法时，实际返回的是数组elementData的最后一位，也就是说，<strong><em>Stack的栈顶为Vector中数组的末端</em></strong>，相应的，数组起始端即为栈底<br>事实上，在peek()方法的注释中也说明了这一点：return the object at the top of this stack (the last item of the Vector object).</p><h3 id="问题二：Stack如何实现进栈操作？"><a href="#问题二：Stack如何实现进栈操作？" class="headerlink" title="问题二：Stack如何实现进栈操作？"></a>问题二：Stack如何实现进栈操作？</h3><p>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">push</span><span class="params">(E item)</span> </span>&#123;</span><br><span class="line">addElement(item);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此处调用了其父类Vector的addElement(E item)，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object[] elementData;<span class="comment">//默认初始化容量为10</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addElement</span><span class="params">(E obj)</span> </span>&#123;</span><br><span class="line">modCount++;</span><br><span class="line">ensureCapacityHelper(elementCount + <span class="number">1</span>);</span><br><span class="line">elementData[elementCount++] = obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityHelper</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"><span class="comment">//默认的capacityIncrement为0，即默认扩容后新的容量为原来的两倍</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + </span><br><span class="line">((capacityIncrement &gt; <span class="number">0</span>) ? capacityIncrement : oldCapacity);</span><br><span class="line"><span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">newCapacity = minCapacity;</span><br><span class="line"><span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line"><span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">Integer.MAX_VALUE :</span><br><span class="line">MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="问题三：Stack如何实现出栈操作？"><a href="#问题三：Stack如何实现出栈操作？" class="headerlink" title="问题三：Stack如何实现出栈操作？"></a>问题三：Stack如何实现出栈操作？</h3><p>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">E       obj;</span><br><span class="line"><span class="keyword">int</span>     len = size();</span><br><span class="line"></span><br><span class="line">obj = peek();</span><br><span class="line">removeElementAt(len - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="问题四：Stack中的search-Object-o-方法返回的值表示什么意思？"><a href="#问题四：Stack中的search-Object-o-方法返回的值表示什么意思？" class="headerlink" title="问题四：Stack中的search(Object o)方法返回的值表示什么意思？"></a>问题四：Stack中的search(Object o)方法返回的值表示什么意思？</h3><p>search(Object o)的源码（下面的注释是我从原方法注释中截取下来的）如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//The equals method is used to compare o to the items in this stack.</span></span><br><span class="line"><span class="comment">//return the 1-based position from the top of the stack where the object is located; </span></span><br><span class="line"><span class="comment">//the return value -1 indicates that the object is not on the stack.</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = lastIndexOf(o);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> size() - i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里调用了父类Vector的lastIndexOf(Object o)方法，从数组的最后往前找（也即从栈顶往下依次查找），查找第一次出现的位置（因为栈中元素是可以重复的），若没找到该对象，返回-1，否则返回该对象和栈顶元素之间的距离，<strong><em>返回值从1（表示所要查找的对象就是栈顶元素）开始</em></strong><br>下面的示例让我们很容易明白search(Object o)到底要返回的是什么？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;String&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">10</span>;i++) </span><br><span class="line">s.push(String.valueOf(i));</span><br><span class="line">System.out.println(<span class="string">"栈顶元素："</span>+s.peek());</span><br><span class="line">System.out.println(<span class="string">"9到栈顶的距离："</span>+s.search(<span class="string">"9"</span>));</span><br><span class="line">System.out.println(<span class="string">"0到栈顶的距离："</span>+s.search(<span class="string">"0"</span>));</span><br><span class="line">System.out.println(<span class="string">"10到栈顶的距离："</span>+s.search(<span class="string">"10"</span>));</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">栈顶元素：<span class="number">9</span></span><br><span class="line"><span class="number">9</span>到栈顶的距离：<span class="number">1</span></span><br><span class="line"><span class="number">0</span>到栈顶的距离：<span class="number">10</span></span><br><span class="line"><span class="number">10</span>到栈顶的距离：-<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>值得注意的是，<strong><em>search(Object o)方法的查找是基于对象的equals方法进行，若泛型申明为自定义的类型，需要重写equals方法</em></strong></p><h3 id="栈的应用之配对问题"><a href="#栈的应用之配对问题" class="headerlink" title="栈的应用之配对问题"></a>栈的应用之配对问题</h3><p><strong><em>问题：</em></strong>输入一串字符串，判断其中的括号是否配对（可以引申为判断字符串是否为json串，是否为算数表达式等等），例如，<strong><em>[( )]</em></strong>是配对的，而<strong><em>[( ])]</em></strong>就不配对<br><strong><em>算法思想：</em></strong>先判断输入的字符串是否为空串（null或者”    “等均认为是空串），若为空串则直接返回false。否则，实例化一个空栈。如果字符为(，[，{等开放符号，则让其进栈。如果字符为)，]，}等封闭符号，则当栈空时返回false。若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false，否则继续判断下一个字符<br><strong><em>代码示例如下：</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatch</span><span class="params">(String json)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty(json))</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">char</span>[] charArray = json.toCharArray();</span><br><span class="line">Stack&lt;Character&gt; s = <span class="keyword">new</span> Stack&lt;Character&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c : charArray) &#123;</span><br><span class="line"><span class="keyword">if</span>(c == <span class="string">'&#123;'</span> || c == <span class="string">'['</span> || c == <span class="string">'('</span>)</span><br><span class="line">s.push(c);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'&#125;'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(isMatch0(s,<span class="string">'&#123;'</span>))</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">']'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(isMatch0(s,<span class="string">'['</span>))</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">')'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(isMatch0(s,<span class="string">'('</span>))</span><br><span class="line">s.pop();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当栈空时返回false。</span></span><br><span class="line"><span class="comment">//若栈不空，则判断栈顶字符是否为对应的开放字符，若不是，则返回false</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMatch0</span><span class="params">(Stack&lt;?&gt; s,<span class="keyword">char</span> openChar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s.empty() || (<span class="keyword">char</span>)s.peek() != openChar)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> str == <span class="keyword">null</span> || str.trim().isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(isMatch(<span class="string">"&#123;[([asdfffffffffff])]&#125;"</span>));</span><br><span class="line">System.out.println(isMatch(<span class="string">"&#123;][])99(&#125;"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong><em>结语</em></strong><br><strong><em>java.util.Stack的注释中写道：</em></strong>A more complete and consistent set of LIFO stack operations is provided by the Deque interface and its implementations, which should be used in preference to this class. For example: Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();<br>言下之意是相比Stack类，<strong><em>双端队列Deque和它的实现类</em></strong>具有更好的完整性和一致性，应该被优先使用</p></blockquote><ul><li>下回预告：数据结构与算法分析之Java中的队列Queue</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java collections api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架源码阅读之双链表LinkedList</title>
      <link href="/2018/04/01/java-collections-api-linkedlist/"/>
      <url>/2018/04/01/java-collections-api-linkedlist/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文只分析LinkedList的增(add) 删(remove) 改(set) 查(get)的实现，剩余的部分留给读者自己去浏览吧</p></blockquote><p>本文是《Java集合框架源码阅读》系列的第二篇，我们的主角是java.util.LinkedList<br>老规矩，先看LinkedList继承结构<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></p><p>成员属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;<span class="comment">//头结点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;<span class="comment">//尾结点</span></span><br></pre></td></tr></table></figure></p><h3 id="问题一：LinkedList如何存储结点信息？"><a href="#问题一：LinkedList如何存储结点信息？" class="headerlink" title="问题一：LinkedList如何存储结点信息？"></a>问题一：LinkedList如何存储结点信息？</h3><p>查看源码可以发现，LinkedList内部有一个静态内部类Node&lt;E&gt;，其保存了当前结点的数据信息，以及指向其前驱和后继结点的链（或称指针）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">E item;</span><br><span class="line">Node&lt;E&gt; next;</span><br><span class="line">Node&lt;E&gt; prev;</span><br><span class="line">Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line"><span class="keyword">this</span>.item = element;</span><br><span class="line"><span class="keyword">this</span>.next = next;</span><br><span class="line"><span class="keyword">this</span>.prev = prev;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="问题二：LinkedList是如何实现尾部添加add-E-e-方法的？"><a href="#问题二：LinkedList是如何实现尾部添加add-E-e-方法的？" class="headerlink" title="问题二：LinkedList是如何实现尾部添加add(E e)方法的？"></a>问题二：LinkedList是如何实现尾部添加add(E e)方法的？</h3><p>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">linkLast(e);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">last = newNode;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">first = newNode;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">l.next = newNode;</span><br><span class="line">size++;</span><br><span class="line">modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解析：每当调用add(E e)方法时，首先调用linkLast(E e)，linkLast顾名思义，链接到尾结点，<br>新建一个Node，让当前尾结点l成为其前驱结点，后继结点设为null，继而，新建的Node成为了新<br>的尾结点，若原尾结点l尚未初始化，则让头结点指向新建的Node结点，否则，原来的尾节点L已经初始化了，则让新增结点成为原来的尾节点L的后继结点</p><p>我们都知道Java中的表List都是可以通过索引号（下标）获取结点值的，即 T get(int index)，ArrayList本身是数组，当然很好实现，而LinkedList却是双链表，它又是如何实现的呢？</p><h3 id="问题三：LinkedList是如何实现随机添加add-int-index-E-e-方法的？"><a href="#问题三：LinkedList是如何实现随机添加add-int-index-E-e-方法的？" class="headerlink" title="问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？"></a>问题三：LinkedList是如何实现随机添加add(int index,E e)方法的？</h3><p>先来看下原理图：<br><img src="http://p64uw9x5j.bkt.clouddn.com/image/20180401191343.png" alt="双链表插入" title="在双链表中插入新的结点"></p><p><pre><br>第一步：newNode.prev = succ.prev;<br>        newNode.next = succ;<br>第二步：succ.prev = newNode;<br>第三步：if(pred != null)<br>            pred.next = newNode;<br>        else<br>            first = newNode;<br></pre><br>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">checkPositionIndex(index);<span class="comment">//判断index是否为可以插入的位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (index == size)</span><br><span class="line">linkLast(element);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">linkBefore(element, node(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在给定结点succ的前面插入一个新的结点，结点的值为e</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">succ.prev = newNode;</span><br><span class="line"><span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">first = newNode;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pred.next = newNode;</span><br><span class="line">size++;</span><br><span class="line">modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="问题四：LinkedList是如何实现get-int-index-方法的？"><a href="#问题四：LinkedList是如何实现get-int-index-方法的？" class="headerlink" title="问题四：LinkedList是如何实现get(int index)方法的？"></a>问题四：LinkedList是如何实现get(int index)方法的？</h3><p>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="comment">//检查是否满足0 &lt;= index &lt; size，不满足则抛出下标越界异常</span></span><br><span class="line">checkElementIndex(index);</span><br><span class="line"><span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">Node&lt;E&gt; x = first;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">x = x.next;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Node&lt;E&gt; x = last;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">x = x.prev;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以发现，get(int index)中使用了一个node(int index)来获取指定下标的Node，而node(int index)又采用了二分法——首先判断指定索引位于LinkedList的前半部分，还是后半部分，这么做主要是为了提高效率，减少需要遍历的结点个数，然后依次遍历结点，直至找到指定下标的Node。<br>从源码也可以看出来，<strong><em>LinkedList并不适合随机取数据</em></strong>，因为每次按照索引号随机取数据时，都需要依次遍历表</p><h3 id="问题五：LinkedList是如何实现remove-int-index-方法的？"><a href="#问题五：LinkedList是如何实现remove-int-index-方法的？" class="headerlink" title="问题五：LinkedList是如何实现remove(int index)方法的？"></a>问题五：LinkedList是如何实现remove(int index)方法的？</h3><p>先看原理图：<br><img src="http://p64uw9x5j.bkt.clouddn.com/image/20180401193913.png" alt="双链表删除" title="删除双链表中的结点"><br>源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line"><span class="keyword">return</span> unlink(node(index));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> E element = x.item;</span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line"><span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [===] ——&gt;  [===]  ——&gt; [===] </span></span><br><span class="line"><span class="comment"> *  ||                   ||</span></span><br><span class="line"><span class="comment"> * null         ×         first</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">first = next;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">prev.next = next;</span><br><span class="line">x.prev = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* [===] ——&gt;  [===]  ——&gt; [===] </span></span><br><span class="line"><span class="comment"> *  ||                    ||</span></span><br><span class="line"><span class="comment"> * last         ×         null  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">last = prev;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next.prev = prev;</span><br><span class="line">x.next = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x.item = <span class="keyword">null</span>;</span><br><span class="line">size--;</span><br><span class="line">modCount++;</span><br><span class="line"><span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="问题六：LinkedList是如何实现set-int-index-E-element-方法的？"><a href="#问题六：LinkedList是如何实现set-int-index-E-element-方法的？" class="headerlink" title="问题六：LinkedList是如何实现set(int index,E element)方法的？"></a>问题六：LinkedList是如何实现set(int index,E element)方法的？</h3><p>set方法的实现相对简单，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把element设为新的item，返回原来的item</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">checkElementIndex(index);</span><br><span class="line">Node&lt;E&gt; x = node(index);</span><br><span class="line">E oldVal = x.item;</span><br><span class="line">x.item = element;</span><br><span class="line"><span class="keyword">return</span> oldVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>作业：自己实现简单的单链表SingleLinkedList以及循环单/双链表CircularSingleLinkedList/CircularDoubleLinkedList<br>下回预告：数据结构与算法分析之Java中的栈</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java collections api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架源码阅读之顺序表ArrayList</title>
      <link href="/2018/03/30/java-collections-api-arraylist/"/>
      <url>/2018/03/30/java-collections-api-arraylist/</url>
      
        <content type="html"><![CDATA[<p>今天是《Java集合框架源码阅读》的第一篇，我们来讲讲Java中的顺序表ArrayList<br>首先来看下ArrayList的继承结构<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span></span><br></pre></td></tr></table></figure></p><p>成员属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;<span class="comment">//ArrayList的默认容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;<span class="comment">//空数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;<span class="comment">//默认容量的空数组</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;<span class="comment">//ArrayList中实际存储的元素个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure></p><h3 id="问题一：ArrayList的底层是采用什么实现的？"><a href="#问题一：ArrayList的底层是采用什么实现的？" class="headerlink" title="问题一：ArrayList的底层是采用什么实现的？"></a>问题一：ArrayList的底层是采用什么实现的？</h3><p>查看ArrayList的源码可以发现如下代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData;</span><br></pre></td></tr></table></figure></p><p>不难看出，ArrayList是采用数组实现的，事实上，ArrayList就是一个动态数组。</p><h3 id="问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T-，而要采用Object型数组存储数据？"><a href="#问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T-，而要采用Object型数组存储数据？" class="headerlink" title="问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？"></a>问题二：ArrayList是带泛型的，为什么不直接申明泛型数组T[]，而要采用Object型数组存储数据？</h3><p>java中不能直接实例化泛型数组，即不能new T[capacity];<br>如果硬要申明泛型数组T[]，需创建一个泛型类型限界的数组，然后使用一个数组进行类型转换。这将产生一个编译器警告，但在泛型集合的实现中这是不可避免的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">T[] elementData;</span><br><span class="line">...</span><br><span class="line">elementData = (T[]) Object[capacity];</span><br></pre></td></tr></table></figure></p><p>我们都知道数组的长度是不变的，那么ArrayList是如何实现动态扩容的呢？</p><h3 id="问题三：ArrayList采用什么方式实现动态扩容？"><a href="#问题三：ArrayList采用什么方式实现动态扩容？" class="headerlink" title="问题三：ArrayList采用什么方式实现动态扩容？"></a>问题三：ArrayList采用什么方式实现动态扩容？</h3><p>下面举个很简单的例子，大家就能明白了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span> arr = <span class="keyword">new</span> <span class="keyword">int</span>[DEFAULT_CAPACITY];</span><br><span class="line">...</span><br><span class="line"><span class="comment">//下面扩大arr容量</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = arr.length + arr.length / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span>[] newArr = <span class="keyword">new</span> <span class="keyword">int</span>[newCapacity];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; arr.length;i++) &#123;</span><br><span class="line">newArr[i] = arr[i];</span><br><span class="line">&#125;</span><br><span class="line">arr = newArr;</span><br></pre></td></tr></table></figure></p><p>事实上，ArrayList内部也是采用的复制数组的方式实现动态扩容。至于其到底是如何做到的，请看下一个问题。</p><h3 id="问题四：ArrayList的扩容机制？"><a href="#问题四：ArrayList的扩容机制？" class="headerlink" title="问题四：ArrayList的扩容机制？"></a>问题四：ArrayList的扩容机制？</h3><p>要回答这个问题，我们先得弄明白：当我们使用add(E e)时，ArrayList都干了什么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在尾部添加</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">elementData[size++] = e;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，当我们调用add(E e)方法时，先执行的ensureCapacityInternal(size+1),然后将e加入elementData，size加1。ensureCapacityInternal直译为“确保内部容量”，它又是怎么实现的呢？<br>​<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@param   minCapacity   需要的最小容量</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="comment">//判断elementData是否为默认长度的空数组，</span></span><br><span class="line"><span class="comment">//若是，则minCapacity取默认容量和原minCapacity的最大值</span></span><br><span class="line"><span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">&#125;</span><br><span class="line">ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这里，又出现了一个新的方法ensureExplicitCapacity(int minCapacity)，ensureExplicitCapacity直译为“确保明确的容量”，接着往下挖<br>​<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="comment">//modCount是ArrayList的父类AbstractList中定义的局部变量，</span></span><br><span class="line"><span class="comment">//用于表示List的结构修改次数</span></span><br><span class="line">modCount++;</span><br><span class="line"><span class="comment">// 如果minCapacity超过了ArrayList的容量，则对其扩容</span></span><br><span class="line"><span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里出现了一个新的方法grow(int minCapacity)，grow意为“成长”，这就是<strong>ArrayList动态扩容的秘密</strong>吗？我们接着往下看</p><p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line"><span class="comment">//每次扩容后，新的容量为原来容量的1.5倍，oldCapacity &gt;&gt; 1等价于 oldCapacity / 2</span></span><br><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">newCapacity = minCapacity;</span><br><span class="line"><span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"><span class="comment">//通过复制数组的方式，将数组扩容</span></span><br><span class="line">elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中出现了一个新的变量MAX_ARRAY_SIZE，ArrayList中对它的定义如下：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure></p><p>为什么这么定义？</p><p>源代码中的注释如下：<br>The maximum size of array to allocate. Some VMs reserve some header words in an array.<br>Attempts to allocate larger arrays may result in OutOfMemoryError: Requested array size exceeds VM limit<br><br>翻译：可分配的最大的数组大小。一些虚拟机在数组中保留了一些头部信息。<br>试图给数组分配更大的空间可能导致内存溢出错误：请求的数组大小超过了虚拟机的限制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//给定需要的最小容量，如果所给最小容量小于0，抛出内存溢出错误，</span></span><br><span class="line"><span class="comment">//如果最小容量大于ArrayList定义的最大数组长度，则返回Integer的最大值，</span></span><br><span class="line"><span class="comment">//否则，返回ArrayList定义的最大数组长度</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line"><span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">Integer.MAX_VALUE :</span><br><span class="line">MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>作业：自己动手实现简单的ArrayList<br>下回预告：数据结构与算法分析之Java中的双链表LinkedList</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java collections api </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从阿里云服务器到使用github pages的变迁</title>
      <link href="/2018/03/24/blog/"/>
      <url>/2018/03/24/blog/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;从2016年5月20号晚上注册了域名 <a href="http://www.hegongshan.com">http://www.hegongshan.com</a> ，一直到2017年9月，我在阿里云上租用了一年多的云服务器。由于那时候是新手，所以保守的选择了windows server，而且是最低档的配置——1核1G内存20G磁盘，每个月80多，没办法，谁叫咱穷。</p><a id="more"></a><br><p>&nbsp;&nbsp;&nbsp;&nbsp;一年多的时间，我的个人博客也经历了数次重构，从最开始采用最原始的JSP+Servlet+JDBC，到后来痴迷SSM，沉迷freemarker，再到后来觉得SSM项目jar包太多太大，占用内存过多，经常发生OOM，又想到将MyBatis砍掉，就采用Spring JdbcTemplate来处理dao层，直到现在选择了hexo和github pages。个人博客的搭建和维系，真是让人心累。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
